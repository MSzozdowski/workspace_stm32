
T8_L11_SDSPITFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006114  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080062b4  080062b4  000162b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006470  08006470  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006478  08006478  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006478  08006478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800647c  0800647c  0001647c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac4  20000088  08006508  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b4c  08006508  00020b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f40  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d86  00000000  00000000  00034ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00037d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  000389e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003fcc  00000000  00000000  00039518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fc4  00000000  00000000  0003d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a5ad  00000000  00000000  0004f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9a55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  000d9aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800629c 	.word	0x0800629c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800629c 	.word	0x0800629c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ILI9341_Delay>:

//
//  Basic function - write those for your MCU
//
static void ILI9341_Delay(uint32_t ms)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 fe29 	bl	80011d8 <HAL_Delay>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 800059a:	e014      	b.n	80005c6 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <ILI9341_SendToTFT+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d10c      	bne.n	80005c6 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <ILI9341_SendToTFT+0x5c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	330c      	adds	r3, #12
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7812      	ldrb	r2, [r2, #0]
 80005b8:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3301      	adds	r3, #1
 80005be:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1e7      	bne.n	800059c <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 80005cc:	bf00      	nop
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <ILI9341_SendToTFT+0x5c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	2b80      	cmp	r3, #128	; 0x80
 80005dc:	d0f7      	beq.n	80005ce <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	200000e8 	.word	0x200000e8

080005f0 <ILI9341_SendCommand>:

static void ILI9341_SendCommand(uint8_t Command)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <ILI9341_SendCommand+0x3c>)
 8000600:	f001 f878 	bl	80016f4 <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 8000604:	2200      	movs	r2, #0
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <ILI9341_SendCommand+0x40>)
 800060a:	f001 f873 	bl	80016f4 <HAL_GPIO_WritePin>

	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ffbc 	bl	8000590 <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <ILI9341_SendCommand+0x3c>)
 800061e:	f001 f869 	bl	80016f4 <HAL_GPIO_WritePin>
#endif
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020400 	.word	0x40020400
 8000630:	40020800 	.word	0x40020800

08000634 <ILI9341_SendCommandAndData>:

static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	73fb      	strb	r3, [r7, #15]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8000642:	2200      	movs	r2, #0
 8000644:	2140      	movs	r1, #64	; 0x40
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <ILI9341_SendCommandAndData+0x54>)
 8000648:	f001 f854 	bl	80016f4 <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 800064c:	2200      	movs	r2, #0
 800064e:	2180      	movs	r1, #128	; 0x80
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <ILI9341_SendCommandAndData+0x58>)
 8000652:	f001 f84f 	bl	80016f4 <HAL_GPIO_WritePin>
	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 8000656:	f107 030f 	add.w	r3, r7, #15
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff97 	bl	8000590 <ILI9341_SendToTFT>

	// DC to Data - DC to High
	ILI9341_DC_HIGH;
 8000662:	2201      	movs	r2, #1
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <ILI9341_SendCommandAndData+0x58>)
 8000668:	f001 f844 	bl	80016f4 <HAL_GPIO_WritePin>
	// Send to TFT Length byte
	ILI9341_SendToTFT(Data, Length);
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	68b8      	ldr	r0, [r7, #8]
 8000670:	f7ff ff8e 	bl	8000590 <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000674:	2201      	movs	r2, #1
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <ILI9341_SendCommandAndData+0x54>)
 800067a:	f001 f83b 	bl	80016f4 <HAL_GPIO_WritePin>
#endif
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40020400 	.word	0x40020400
 800068c:	40020800 	.word	0x40020800

08000690 <ILI9341_SetRotation>:

//
// TFT Functions
//
void ILI9341_SetRotation(uint8_t Rotation)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d820      	bhi.n	80006e2 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d816      	bhi.n	80006d4 <ILI9341_SetRotation+0x44>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <ILI9341_SetRotation+0x1c>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006bd 	.word	0x080006bd
 80006b0:	080006c3 	.word	0x080006c3
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006cf 	.word	0x080006cf
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 80006bc:	2348      	movs	r3, #72	; 0x48
 80006be:	71fb      	strb	r3, [r7, #7]
		break;
 80006c0:	e008      	b.n	80006d4 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 80006c2:	2328      	movs	r3, #40	; 0x28
 80006c4:	71fb      	strb	r3, [r7, #7]
		break;
 80006c6:	e005      	b.n	80006d4 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 80006c8:	2388      	movs	r3, #136	; 0x88
 80006ca:	71fb      	strb	r3, [r7, #7]
		break;
 80006cc:	e002      	b.n	80006d4 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80006ce:	23e8      	movs	r3, #232	; 0xe8
 80006d0:	71fb      	strb	r3, [r7, #7]
		break;
 80006d2:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	2036      	movs	r0, #54	; 0x36
 80006dc:	f7ff ffaa 	bl	8000634 <ILI9341_SendCommandAndData>
 80006e0:	e000      	b.n	80006e4 <ILI9341_SetRotation+0x54>
		return;
 80006e2:	bf00      	nop
}
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop

080006ec <ILI9341_SetAddrWindow>:

void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4604      	mov	r4, r0
 80006f4:	4608      	mov	r0, r1
 80006f6:	4611      	mov	r1, r2
 80006f8:	461a      	mov	r2, r3
 80006fa:	4623      	mov	r3, r4
 80006fc:	80fb      	strh	r3, [r7, #6]
 80006fe:	4603      	mov	r3, r0
 8000700:	80bb      	strh	r3, [r7, #4]
 8000702:	460b      	mov	r3, r1
 8000704:	807b      	strh	r3, [r7, #2]
 8000706:	4613      	mov	r3, r2
 8000708:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 800070a:	88fa      	ldrh	r2, [r7, #6]
 800070c:	887b      	ldrh	r3, [r7, #2]
 800070e:	4413      	add	r3, r2
 8000710:	b29b      	uxth	r3, r3
 8000712:	3b01      	subs	r3, #1
 8000714:	81fb      	strh	r3, [r7, #14]
 8000716:	88ba      	ldrh	r2, [r7, #4]
 8000718:	883b      	ldrh	r3, [r7, #0]
 800071a:	4413      	add	r3, r2
 800071c:	b29b      	uxth	r3, r3
 800071e:	3b01      	subs	r3, #1
 8000720:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	b29b      	uxth	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8000732:	89fb      	ldrh	r3, [r7, #14]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	b29b      	uxth	r3, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 800073c:	89fb      	ldrh	r3, [r7, #14]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2204      	movs	r2, #4
 8000748:	4619      	mov	r1, r3
 800074a:	202a      	movs	r0, #42	; 0x2a
 800074c:	f7ff ff72 	bl	8000634 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8000750:	88bb      	ldrh	r3, [r7, #4]
 8000752:	0a1b      	lsrs	r3, r3, #8
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 800075a:	88bb      	ldrh	r3, [r7, #4]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8000760:	89bb      	ldrh	r3, [r7, #12]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29b      	uxth	r3, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 800076a:	89bb      	ldrh	r3, [r7, #12]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2204      	movs	r2, #4
 8000776:	4619      	mov	r1, r3
 8000778:	202b      	movs	r0, #43	; 0x2b
 800077a:	f7ff ff5b 	bl	8000634 <ILI9341_SendCommandAndData>
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bd90      	pop	{r4, r7, pc}
	...

08000788 <ILI9341_ClearDisplay>:
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
	}
}

void ILI9341_ClearDisplay(uint16_t Color)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8000792:	23f0      	movs	r3, #240	; 0xf0
 8000794:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000798:	2100      	movs	r1, #0
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ffa6 	bl	80006ec <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendCommand(ILI9341_RAMWR);
 80007a0:	202c      	movs	r0, #44	; 0x2c
 80007a2:	f7ff ff25 	bl	80005f0 <ILI9341_SendCommand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 80007a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80007aa:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 80007ac:	2200      	movs	r2, #0
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	4820      	ldr	r0, [pc, #128]	; (8000834 <ILI9341_ClearDisplay+0xac>)
 80007b2:	f000 ff9f 	bl	80016f4 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 80007b6:	2201      	movs	r2, #1
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	481f      	ldr	r0, [pc, #124]	; (8000838 <ILI9341_ClearDisplay+0xb0>)
 80007bc:	f000 ff9a 	bl	80016f4 <HAL_GPIO_WritePin>

    while (Length > 0U)
 80007c0:	e023      	b.n	800080a <ILI9341_ClearDisplay+0x82>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <ILI9341_ClearDisplay+0xb4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d11b      	bne.n	800080a <ILI9341_ClearDisplay+0x82>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <ILI9341_ClearDisplay+0xb4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	330c      	adds	r3, #12
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 80007e4:	bf00      	nop
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <ILI9341_ClearDisplay+0xb4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d1f7      	bne.n	80007e6 <ILI9341_ClearDisplay+0x5e>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <ILI9341_ClearDisplay+0xb4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	330c      	adds	r3, #12
 80007fe:	88fa      	ldrh	r2, [r7, #6]
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3b01      	subs	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1d8      	bne.n	80007c2 <ILI9341_ClearDisplay+0x3a>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8000810:	bf00      	nop
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <ILI9341_ClearDisplay+0xb4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	2b80      	cmp	r3, #128	; 0x80
 8000820:	d0f7      	beq.n	8000812 <ILI9341_ClearDisplay+0x8a>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000822:	2201      	movs	r2, #1
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <ILI9341_ClearDisplay+0xac>)
 8000828:	f000 ff64 	bl	80016f4 <HAL_GPIO_WritePin>
	{
		// Send Color bytes
		ILI9341_SendData16(Color);
	}
#endif
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40020400 	.word	0x40020400
 8000838:	40020800 	.word	0x40020800
 800083c:	200000e8 	.word	0x200000e8

08000840 <ILI9341_Init>:
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};

void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8000848:	4a25      	ldr	r2, [pc, #148]	; (80008e0 <ILI9341_Init+0xa0>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]

    uint8_t cmd, x, numArgs;
    const uint8_t *addr = initcmd;
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <ILI9341_Init+0xa4>)
 8000850:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
    __HAL_SPI_ENABLE(Tft_hspi);
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <ILI9341_Init+0xa0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <ILI9341_Init+0xa0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000864:	601a      	str	r2, [r3, #0]
#endif

#if (ILI9341_USE_HW_RESET == 1)
	ILI9341_RST_LOW;
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086c:	481e      	ldr	r0, [pc, #120]	; (80008e8 <ILI9341_Init+0xa8>)
 800086e:	f000 ff41 	bl	80016f4 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8000872:	200a      	movs	r0, #10
 8000874:	f7ff fe80 	bl	8000578 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087e:	481a      	ldr	r0, [pc, #104]	; (80008e8 <ILI9341_Init+0xa8>)
 8000880:	f000 ff38 	bl	80016f4 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8000884:	200a      	movs	r0, #10
 8000886:	f7ff fe77 	bl	8000578 <ILI9341_Delay>
#else
	ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
    ILI9341_Delay(150);
#endif

    while ((cmd = *(addr++)) > 0)
 800088a:	e019      	b.n	80008c0 <ILI9341_Init+0x80>
    {
      x = *(addr++);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	60fa      	str	r2, [r7, #12]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	72bb      	strb	r3, [r7, #10]
      numArgs = x & 0x7F;
 8000896:	7abb      	ldrb	r3, [r7, #10]
 8000898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800089c:	727b      	strb	r3, [r7, #9]
      // Push Init data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 800089e:	7a7a      	ldrb	r2, [r7, #9]
 80008a0:	7afb      	ldrb	r3, [r7, #11]
 80008a2:	68f9      	ldr	r1, [r7, #12]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fec5 	bl	8000634 <ILI9341_SendCommandAndData>

      addr += numArgs;
 80008aa:	7a7b      	ldrb	r3, [r7, #9]
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]

      if (x & 0x80)
 80008b2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da02      	bge.n	80008c0 <ILI9341_Init+0x80>
      {
    	  ILI9341_Delay(150);
 80008ba:	2096      	movs	r0, #150	; 0x96
 80008bc:	f7ff fe5c 	bl	8000578 <ILI9341_Delay>
    while ((cmd = *(addr++)) > 0)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	60fa      	str	r2, [r7, #12]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	72fb      	strb	r3, [r7, #11]
 80008ca:	7afb      	ldrb	r3, [r7, #11]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1dd      	bne.n	800088c <ILI9341_Init+0x4c>
      }
    }

    // Set selected Rotation
    ILI9341_SetRotation(ILI9341_ROTATION);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f7ff fedd 	bl	8000690 <ILI9341_SetRotation>
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000e8 	.word	0x200000e8
 80008e4:	08006334 	.word	0x08006334
 80008e8:	40020000 	.word	0x40020000

080008ec <ILI9341_DrawImageFromSD>:

#if(ILI9341_USE_SD_CARD)
//binary files
uint8_t ILI9341_DrawImageFromSD(uint16_t x, uint16_t y, const TCHAR* path, uint16_t w, uint16_t h)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4604      	mov	r4, r0
 80008f6:	4608      	mov	r0, r1
 80008f8:	f107 0108 	add.w	r1, r7, #8
 80008fc:	600a      	str	r2, [r1, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	f107 030e 	add.w	r3, r7, #14
 8000904:	4622      	mov	r2, r4
 8000906:	801a      	strh	r2, [r3, #0]
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4602      	mov	r2, r0
 800090e:	801a      	strh	r2, [r3, #0]
 8000910:	1dbb      	adds	r3, r7, #6
 8000912:	460a      	mov	r2, r1
 8000914:	801a      	strh	r2, [r3, #0]
	FIL ImageFile;

	uint8_t Data[SD_BUFFER_SIZE];
	UINT Length;

	ImageFsResult = f_open(&ImageFile, path, FA_READ);
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800091e:	2201      	movs	r2, #1
 8000920:	6819      	ldr	r1, [r3, #0]
 8000922:	f004 fc59 	bl	80051d8 <f_open>
 8000926:	4603      	mov	r3, r0
 8000928:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347

	if(ImageFsResult != FR_OK)
 800092c:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <ILI9341_DrawImageFromSD+0x4c>
	{
		return 1;
 8000934:	2301      	movs	r3, #1
 8000936:	e043      	b.n	80009c0 <ILI9341_DrawImageFromSD+0xd4>
	}
	else
	{
		ILI9341_SetAddrWindow(x, y, w, h);
 8000938:	f8b7 4358 	ldrh.w	r4, [r7, #856]	; 0x358
 800093c:	1dbb      	adds	r3, r7, #6
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	8819      	ldrh	r1, [r3, #0]
 8000946:	f107 030e 	add.w	r3, r7, #14
 800094a:	8818      	ldrh	r0, [r3, #0]
 800094c:	4623      	mov	r3, r4
 800094e:	f7ff fecd 	bl	80006ec <ILI9341_SetAddrWindow>
		ILI9341_SendCommand(ILI9341_RAMWR);
 8000952:	202c      	movs	r0, #44	; 0x2c
 8000954:	f7ff fe4c 	bl	80005f0 <ILI9341_SendCommand>

		do
		{
			Length = 0;
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
			f_read(&ImageFile, Data, SD_BUFFER_SIZE, &Length);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	f107 0114 	add.w	r1, r7, #20
 8000968:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800096c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000970:	f004 fdf0 	bl	8005554 <f_read>
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8000974:	2200      	movs	r2, #0
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	4814      	ldr	r0, [pc, #80]	; (80009cc <ILI9341_DrawImageFromSD+0xe0>)
 800097a:	f000 febb 	bl	80016f4 <HAL_GPIO_WritePin>
#endif

			ILI9341_DC_HIGH;
 800097e:	2201      	movs	r2, #1
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <ILI9341_DrawImageFromSD+0xe4>)
 8000984:	f000 feb6 	bl	80016f4 <HAL_GPIO_WritePin>
			ILI9341_SendToTFT(Data, Length);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fdfb 	bl	8000590 <ILI9341_SendToTFT>

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800099a:	2201      	movs	r2, #1
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <ILI9341_DrawImageFromSD+0xe0>)
 80009a0:	f000 fea8 	bl	80016f4 <HAL_GPIO_WritePin>
#endif
		}while(Length > 0);
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1d4      	bne.n	8000958 <ILI9341_DrawImageFromSD+0x6c>

		ImageFsResult = f_close(&ImageFile);
 80009ae:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 ff8b 	bl	80058ce <f_close>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		return 0;
 80009be:	2300      	movs	r3, #0
	}
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd90      	pop	{r4, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40020800 	.word	0x40020800

080009d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b42      	ldr	r3, [pc, #264]	; (8000af8 <MX_GPIO_Init+0x124>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a41      	ldr	r2, [pc, #260]	; (8000af8 <MX_GPIO_Init+0x124>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <MX_GPIO_Init+0x124>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <MX_GPIO_Init+0x124>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a3a      	ldr	r2, [pc, #232]	; (8000af8 <MX_GPIO_Init+0x124>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <MX_GPIO_Init+0x124>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <MX_GPIO_Init+0x124>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a33      	ldr	r2, [pc, #204]	; (8000af8 <MX_GPIO_Init+0x124>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <MX_GPIO_Init+0x124>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <MX_GPIO_Init+0x124>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a2c      	ldr	r2, [pc, #176]	; (8000af8 <MX_GPIO_Init+0x124>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <MX_GPIO_Init+0x124>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD2_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2181      	movs	r1, #129	; 0x81
 8000a5e:	4827      	ldr	r0, [pc, #156]	; (8000afc <MX_GPIO_Init+0x128>)
 8000a60:	f000 fe48 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000a6a:	4825      	ldr	r0, [pc, #148]	; (8000b00 <MX_GPIO_Init+0x12c>)
 8000a6c:	f000 fe42 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a76:	4823      	ldr	r0, [pc, #140]	; (8000b04 <MX_GPIO_Init+0x130>)
 8000a78:	f000 fe3c 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	481a      	ldr	r0, [pc, #104]	; (8000afc <MX_GPIO_Init+0x128>)
 8000a94:	f000 fcaa 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD2_Pin|TFT_DC_Pin;
 8000a98:	2381      	movs	r3, #129	; 0x81
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <MX_GPIO_Init+0x128>)
 8000ab0:	f000 fc9c 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|TFT_CS_Pin;
 8000ab4:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_GPIO_Init+0x12c>)
 8000ace:	f000 fc8d 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8000ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_GPIO_Init+0x130>)
 8000aec:	f000 fc7e 	bl	80013ec <HAL_GPIO_Init>

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40020000 	.word	0x40020000

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0e:	f000 faf1 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b12:	f000 f85f 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b16:	f7ff ff5d 	bl	80009d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b1a:	f000 fa4f 	bl	8000fbc <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000b1e:	f000 f8ff 	bl	8000d20 <MX_SPI3_Init>
  MX_FATFS_Init();
 8000b22:	f002 f881 	bl	8002c28 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000b26:	f000 f8c5 	bl	8000cb4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init(&hspi1);
 8000b2a:	4820      	ldr	r0, [pc, #128]	; (8000bac <main+0xa4>)
 8000b2c:	f7ff fe88 	bl	8000840 <ILI9341_Init>
  ILI9341_ClearDisplay(ILI9341_WHITE);
 8000b30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b34:	f7ff fe28 	bl	8000788 <ILI9341_ClearDisplay>

  FatFsResult = f_mount(&SdFatFs, "",1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	491d      	ldr	r1, [pc, #116]	; (8000bb0 <main+0xa8>)
 8000b3c:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <main+0xac>)
 8000b3e:	f004 fb05 	bl	800514c <f_mount>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <main+0xb0>)
 8000b48:	701a      	strb	r2, [r3, #0]
  if(FatFsResult != FR_OK)
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <main+0xb0>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d011      	beq.n	8000b76 <main+0x6e>
  {
  	  bytes = sprintf(data, "FatFS mount error.\n\r");
 8000b52:	491a      	ldr	r1, [pc, #104]	; (8000bbc <main+0xb4>)
 8000b54:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <main+0xb8>)
 8000b56:	f004 ff73 	bl	8005a40 <siprintf>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <main+0xbc>)
 8000b60:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <main+0xbc>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	4914      	ldr	r1, [pc, #80]	; (8000bc0 <main+0xb8>)
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <main+0xc0>)
 8000b70:	f001 fd91 	bl	8002696 <HAL_UART_Transmit>
 8000b74:	e010      	b.n	8000b98 <main+0x90>
  }
  else
  {
	  bytes = sprintf(data, "FatFS mounted.\n\r");
 8000b76:	4915      	ldr	r1, [pc, #84]	; (8000bcc <main+0xc4>)
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <main+0xb8>)
 8000b7a:	f004 ff61 	bl	8005a40 <siprintf>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <main+0xbc>)
 8000b84:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <main+0xbc>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b90:	490b      	ldr	r1, [pc, #44]	; (8000bc0 <main+0xb8>)
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <main+0xc0>)
 8000b94:	f001 fd7f 	bl	8002696 <HAL_UART_Transmit>
  }

  ILI9341_DrawImageFromSD(28, 70, "logo.bin", 265, 100);
 8000b98:	2364      	movs	r3, #100	; 0x64
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	f240 1309 	movw	r3, #265	; 0x109
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <main+0xc8>)
 8000ba2:	2146      	movs	r1, #70	; 0x46
 8000ba4:	201c      	movs	r0, #28
 8000ba6:	f7ff fea1 	bl	80008ec <ILI9341_DrawImageFromSD>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <main+0xa2>
 8000bac:	2000062c 	.word	0x2000062c
 8000bb0:	080062b4 	.word	0x080062b4
 8000bb4:	20000320 	.word	0x20000320
 8000bb8:	200005d0 	.word	0x200005d0
 8000bbc:	080062b8 	.word	0x080062b8
 8000bc0:	20000550 	.word	0x20000550
 8000bc4:	2000031c 	.word	0x2000031c
 8000bc8:	20000684 	.word	0x20000684
 8000bcc:	080062d0 	.word	0x080062d0
 8000bd0:	080062e4 	.word	0x080062e4

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b094      	sub	sp, #80	; 0x50
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	2230      	movs	r2, #48	; 0x30
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 ff24 	bl	8005a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemClock_Config+0xcc>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a27      	ldr	r2, [pc, #156]	; (8000ca0 <SystemClock_Config+0xcc>)
 8000c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <SystemClock_Config+0xcc>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemClock_Config+0xd0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <SystemClock_Config+0xd0>)
 8000c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemClock_Config+0xd0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c30:	2302      	movs	r3, #2
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c40:	2300      	movs	r3, #0
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c44:	2310      	movs	r3, #16
 8000c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c48:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c52:	2304      	movs	r3, #4
 8000c54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fd64 	bl	8001728 <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c66:	f000 f81f 	bl	8000ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2102      	movs	r1, #2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 ffc6 	bl	8001c18 <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c92:	f000 f809 	bl	8000ca8 <Error_Handler>
  }
}
 8000c96:	bf00      	nop
 8000c98:	3750      	adds	r7, #80	; 0x50
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000ce8:	2210      	movs	r2, #16
 8000cea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000d00:	220a      	movs	r2, #10
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000d06:	f001 f983 	bl	8002010 <HAL_SPI_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d10:	f7ff ffca 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000062c 	.word	0x2000062c
 8000d1c:	40013000 	.word	0x40013000

08000d20 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <MX_SPI3_Init+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d50:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d54:	2238      	movs	r2, #56	; 0x38
 8000d56:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d6c:	220a      	movs	r2, #10
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_SPI3_Init+0x64>)
 8000d72:	f001 f94d 	bl	8002010 <HAL_SPI_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d7c:	f7ff ff94 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200005d4 	.word	0x200005d4
 8000d88:	40003c00 	.word	0x40003c00

08000d8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <HAL_SPI_MspInit+0xe8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12c      	bne.n	8000e08 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a30      	ldr	r2, [pc, #192]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000de6:	23e0      	movs	r3, #224	; 0xe0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df6:	2305      	movs	r3, #5
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481e      	ldr	r0, [pc, #120]	; (8000e7c <HAL_SPI_MspInit+0xf0>)
 8000e02:	f000 faf3 	bl	80013ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e06:	e030      	b.n	8000e6a <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <HAL_SPI_MspInit+0xf4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12b      	bne.n	8000e6a <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_SPI_MspInit+0xec>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e4a:	2338      	movs	r3, #56	; 0x38
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <HAL_SPI_MspInit+0xf8>)
 8000e66:	f000 fac1 	bl	80013ec <HAL_GPIO_Init>
}
 8000e6a:	bf00      	nop
 8000e6c:	3730      	adds	r7, #48	; 0x30
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40013000 	.word	0x40013000
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40003c00 	.word	0x40003c00
 8000e84:	40020400 	.word	0x40020400

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec6:	2007      	movs	r0, #7
 8000ec8:	f000 fa5c 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f938 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f004 fd3e 	bl	80059dc <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20020000 	.word	0x20020000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	200000a4 	.word	0x200000a4
 8000f94:	20000b50 	.word	0x20000b50

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <MX_USART2_UART_Init+0x50>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000ff4:	f001 fb02 	bl	80025fc <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ffe:	f7ff fe53 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000684 	.word	0x20000684
 800100c:	40004400 	.word	0x40004400

08001010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a19      	ldr	r2, [pc, #100]	; (8001094 <HAL_UART_MspInit+0x84>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d12b      	bne.n	800108a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_UART_MspInit+0x88>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <HAL_UART_MspInit+0x88>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_UART_MspInit+0x88>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_UART_MspInit+0x88>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <HAL_UART_MspInit+0x88>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_UART_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800106a:	230c      	movs	r3, #12
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107a:	2307      	movs	r3, #7
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <HAL_UART_MspInit+0x8c>)
 8001086:	f000 f9b1 	bl	80013ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	; 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40004400 	.word	0x40004400
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010bc:	4c0b      	ldr	r4, [pc, #44]	; (80010ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ca:	f7ff ff65 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f004 fc8b 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fd19 	bl	8000b08 <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80010e4:	08006480 	.word	0x08006480
  ldr r2, =_sbss
 80010e8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80010ec:	20000b4c 	.word	0x20000b4c

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <HAL_Init+0x40>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_Init+0x40>)
 800110a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800110e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_Init+0x40>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f931 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	2000      	movs	r0, #0
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff feae 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f93b 	bl	80013d2 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f911 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	200006c8 	.word	0x200006c8

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200006c8 	.word	0x200006c8

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff47 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff5c 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffb0 	bl	8001340 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	e159      	b.n	80016bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001408:	2201      	movs	r2, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 8148 	bne.w	80016b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d005      	beq.n	800143e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143a:	2b02      	cmp	r3, #2
 800143c:	d130      	bne.n	80014a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f003 0201 	and.w	r2, r3, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d017      	beq.n	80014dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d123      	bne.n	8001530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	69b9      	ldr	r1, [r7, #24]
 800152c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0203 	and.w	r2, r3, #3
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a2 	beq.w	80016b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158e:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <HAL_GPIO_Init+0x2ec>)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a49      	ldr	r2, [pc, #292]	; (80016dc <HAL_GPIO_Init+0x2f0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0x202>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a48      	ldr	r2, [pc, #288]	; (80016e0 <HAL_GPIO_Init+0x2f4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x1fe>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a47      	ldr	r2, [pc, #284]	; (80016e4 <HAL_GPIO_Init+0x2f8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a46      	ldr	r2, [pc, #280]	; (80016e8 <HAL_GPIO_Init+0x2fc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x1f6>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a45      	ldr	r2, [pc, #276]	; (80016ec <HAL_GPIO_Init+0x300>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x1f2>
 80015da:	2304      	movs	r3, #4
 80015dc:	e008      	b.n	80015f0 <HAL_GPIO_Init+0x204>
 80015de:	2307      	movs	r3, #7
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x204>
 80015e2:	2303      	movs	r3, #3
 80015e4:	e004      	b.n	80015f0 <HAL_GPIO_Init+0x204>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e002      	b.n	80015f0 <HAL_GPIO_Init+0x204>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x204>
 80015ee:	2300      	movs	r3, #0
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	f002 0203 	and.w	r2, r2, #3
 80015f6:	0092      	lsls	r2, r2, #2
 80015f8:	4093      	lsls	r3, r2
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001600:	4935      	ldr	r1, [pc, #212]	; (80016d8 <HAL_GPIO_Init+0x2ec>)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800160e:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <HAL_GPIO_Init+0x304>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001632:	4a2f      	ldr	r2, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x304>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_GPIO_Init+0x304>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800165c:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <HAL_GPIO_Init+0x304>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_GPIO_Init+0x304>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_GPIO_Init+0x304>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_GPIO_Init+0x304>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_GPIO_Init+0x304>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b0f      	cmp	r3, #15
 80016c0:	f67f aea2 	bls.w	8001408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40013800 	.word	0x40013800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40013c00 	.word	0x40013c00

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001710:	e003      	b.n	800171a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e264      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d075      	beq.n	8001832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001746:	4ba3      	ldr	r3, [pc, #652]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b04      	cmp	r3, #4
 8001750:	d00c      	beq.n	800176c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001752:	4ba0      	ldr	r3, [pc, #640]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800175a:	2b08      	cmp	r3, #8
 800175c:	d112      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175e:	4b9d      	ldr	r3, [pc, #628]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800176a:	d10b      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	4b99      	ldr	r3, [pc, #612]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d05b      	beq.n	8001830 <HAL_RCC_OscConfig+0x108>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d157      	bne.n	8001830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e23f      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d106      	bne.n	800179c <HAL_RCC_OscConfig+0x74>
 800178e:	4b91      	ldr	r3, [pc, #580]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a90      	ldr	r2, [pc, #576]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x98>
 80017a6:	4b8b      	ldr	r3, [pc, #556]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a8a      	ldr	r2, [pc, #552]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a87      	ldr	r2, [pc, #540]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 80017c0:	4b84      	ldr	r3, [pc, #528]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a83      	ldr	r2, [pc, #524]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a80      	ldr	r2, [pc, #512]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fcee 	bl	80011c0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fcea 	bl	80011c0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e204      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b76      	ldr	r3, [pc, #472]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xc0>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fcda 	bl	80011c0 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fcd6 	bl	80011c0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1f0      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	4b6c      	ldr	r3, [pc, #432]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0xe8>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d063      	beq.n	8001906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183e:	4b65      	ldr	r3, [pc, #404]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184a:	4b62      	ldr	r3, [pc, #392]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001852:	2b08      	cmp	r3, #8
 8001854:	d11c      	bne.n	8001890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001856:	4b5f      	ldr	r3, [pc, #380]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d116      	bne.n	8001890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	4b5c      	ldr	r3, [pc, #368]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_RCC_OscConfig+0x152>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e1c4      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187a:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4952      	ldr	r1, [pc, #328]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	e03a      	b.n	8001906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001898:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <HAL_RCC_OscConfig+0x2b0>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff fc8f 	bl	80011c0 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fc8b 	bl	80011c0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1a5      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4940      	ldr	r1, [pc, #256]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018da:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_RCC_OscConfig+0x2b0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc6e 	bl	80011c0 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fc6a 	bl	80011c0 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e184      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d030      	beq.n	8001974 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d016      	beq.n	8001948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_RCC_OscConfig+0x2b4>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff fc4e 	bl	80011c0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff fc4a 	bl	80011c0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e164      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x200>
 8001946:	e015      	b.n	8001974 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_RCC_OscConfig+0x2b4>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff fc37 	bl	80011c0 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff fc33 	bl	80011c0 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e14d      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800196a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80a0 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10f      	bne.n	80019b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_OscConfig+0x2b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d121      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_RCC_OscConfig+0x2b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_RCC_OscConfig+0x2b8>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fbf9 	bl	80011c0 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	e011      	b.n	80019f6 <HAL_RCC_OscConfig+0x2ce>
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	42470000 	.word	0x42470000
 80019dc:	42470e80 	.word	0x42470e80
 80019e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e4:	f7ff fbec 	bl	80011c0 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e106      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f6:	4b85      	ldr	r3, [pc, #532]	; (8001c0c <HAL_RCC_OscConfig+0x4e4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2f0>
 8001a0a:	4b81      	ldr	r3, [pc, #516]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a80      	ldr	r2, [pc, #512]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	e01c      	b.n	8001a52 <HAL_RCC_OscConfig+0x32a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x312>
 8001a20:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a77      	ldr	r2, [pc, #476]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_OscConfig+0x32a>
 8001a3a:	4b75      	ldr	r3, [pc, #468]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a74      	ldr	r2, [pc, #464]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a71      	ldr	r2, [pc, #452]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d015      	beq.n	8001a86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fbb1 	bl	80011c0 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff fbad 	bl	80011c0 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0c5      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	4b65      	ldr	r3, [pc, #404]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ee      	beq.n	8001a62 <HAL_RCC_OscConfig+0x33a>
 8001a84:	e014      	b.n	8001ab0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fb9b 	bl	80011c0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff fb97 	bl	80011c0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0af      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	4b5a      	ldr	r3, [pc, #360]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ee      	bne.n	8001a8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab6:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a55      	ldr	r2, [pc, #340]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 809b 	beq.w	8001c02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d05c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d141      	bne.n	8001b64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCC_OscConfig+0x4ec>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb6b 	bl	80011c0 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fb67 	bl	80011c0 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e081      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b00:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	019b      	lsls	r3, r3, #6
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	3b01      	subs	r3, #1
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	061b      	lsls	r3, r3, #24
 8001b30:	4937      	ldr	r1, [pc, #220]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <HAL_RCC_OscConfig+0x4ec>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fb40 	bl	80011c0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff fb3c 	bl	80011c0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e056      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x41c>
 8001b62:	e04e      	b.n	8001c02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_OscConfig+0x4ec>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fb29 	bl	80011c0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff fb25 	bl	80011c0 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e03f      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b84:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x44a>
 8001b90:	e037      	b.n	8001c02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e032      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_RCC_OscConfig+0x4e8>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d028      	beq.n	8001bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d121      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d11a      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bce:	4013      	ands	r3, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d111      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	3b01      	subs	r3, #1
 8001be8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	40023800 	.word	0x40023800
 8001c14:	42470060 	.word	0x42470060

08001c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0cc      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b68      	ldr	r3, [pc, #416]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d90c      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b8      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	494d      	ldr	r1, [pc, #308]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d044      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d119      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e07f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e06f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e067      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 0203 	bic.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4934      	ldr	r1, [pc, #208]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d08:	f7ff fa5a 	bl	80011c0 <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7ff fa56 	bl	80011c0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e04f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 020c 	and.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1eb      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d20c      	bcs.n	8001d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e032      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4916      	ldr	r1, [pc, #88]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d9e:	f000 f821 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	490a      	ldr	r1, [pc, #40]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	5ccb      	ldrb	r3, [r1, r3]
 8001db2:	fa22 f303 	lsr.w	r3, r2, r3
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f9ba 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023c00 	.word	0x40023c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	080063a4 	.word	0x080063a4
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	2300      	movs	r3, #0
 8001df6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dfc:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d00d      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x40>
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	f200 80bd 	bhi.w	8001f88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x34>
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e16:	e0b7      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e1a:	60bb      	str	r3, [r7, #8]
       break;
 8001e1c:	e0b7      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e1e:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001e20:	60bb      	str	r3, [r7, #8]
      break;
 8001e22:	e0b4      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e24:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e2e:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d04d      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3a:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	461a      	mov	r2, r3
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	ea02 0800 	and.w	r8, r2, r0
 8001e52:	ea03 0901 	and.w	r9, r3, r1
 8001e56:	4640      	mov	r0, r8
 8001e58:	4649      	mov	r1, r9
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	014b      	lsls	r3, r1, #5
 8001e64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e68:	0142      	lsls	r2, r0, #5
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	ebb0 0008 	subs.w	r0, r0, r8
 8001e72:	eb61 0109 	sbc.w	r1, r1, r9
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	018b      	lsls	r3, r1, #6
 8001e80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e84:	0182      	lsls	r2, r0, #6
 8001e86:	1a12      	subs	r2, r2, r0
 8001e88:	eb63 0301 	sbc.w	r3, r3, r1
 8001e8c:	f04f 0000 	mov.w	r0, #0
 8001e90:	f04f 0100 	mov.w	r1, #0
 8001e94:	00d9      	lsls	r1, r3, #3
 8001e96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e9a:	00d0      	lsls	r0, r2, #3
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	eb12 0208 	adds.w	r2, r2, r8
 8001ea4:	eb43 0309 	adc.w	r3, r3, r9
 8001ea8:	f04f 0000 	mov.w	r0, #0
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	0259      	lsls	r1, r3, #9
 8001eb2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001eb6:	0250      	lsls	r0, r2, #9
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	f7fe f9da 	bl	8000280 <__aeabi_uldivmod>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	e04a      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed6:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	099b      	lsrs	r3, r3, #6
 8001edc:	461a      	mov	r2, r3
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ee6:	f04f 0100 	mov.w	r1, #0
 8001eea:	ea02 0400 	and.w	r4, r2, r0
 8001eee:	ea03 0501 	and.w	r5, r3, r1
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	014b      	lsls	r3, r1, #5
 8001f00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f04:	0142      	lsls	r2, r0, #5
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	1b00      	subs	r0, r0, r4
 8001f0c:	eb61 0105 	sbc.w	r1, r1, r5
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	018b      	lsls	r3, r1, #6
 8001f1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f1e:	0182      	lsls	r2, r0, #6
 8001f20:	1a12      	subs	r2, r2, r0
 8001f22:	eb63 0301 	sbc.w	r3, r3, r1
 8001f26:	f04f 0000 	mov.w	r0, #0
 8001f2a:	f04f 0100 	mov.w	r1, #0
 8001f2e:	00d9      	lsls	r1, r3, #3
 8001f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f34:	00d0      	lsls	r0, r2, #3
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	1912      	adds	r2, r2, r4
 8001f3c:	eb45 0303 	adc.w	r3, r5, r3
 8001f40:	f04f 0000 	mov.w	r0, #0
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	0299      	lsls	r1, r3, #10
 8001f4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f4e:	0290      	lsls	r0, r2, #10
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	f7fe f98e 	bl	8000280 <__aeabi_uldivmod>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4613      	mov	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	3301      	adds	r3, #1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	60bb      	str	r3, [r7, #8]
      break;
 8001f86:	e002      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f8a:	60bb      	str	r3, [r7, #8]
      break;
 8001f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	00f42400 	.word	0x00f42400
 8001fa4:	007a1200 	.word	0x007a1200

08001fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000000 	.word	0x20000000

08001fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fc4:	f7ff fff0 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	0a9b      	lsrs	r3, r3, #10
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4903      	ldr	r1, [pc, #12]	; (8001fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	080063b4 	.word	0x080063b4

08001fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fec:	f7ff ffdc 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0b5b      	lsrs	r3, r3, #13
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	; (800200c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	080063b4 	.word	0x080063b4

08002010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07b      	b.n	800211a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	d108      	bne.n	800203c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002032:	d009      	beq.n	8002048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
 800203a:	e005      	b.n	8002048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fe92 	bl	8000d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	ea42 0103 	orr.w	r1, r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	f003 0104 	and.w	r1, r3, #4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f003 0210 	and.w	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b08c      	sub	sp, #48	; 0x30
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002130:	2301      	movs	r3, #1
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_SPI_TransmitReceive+0x26>
 8002144:	2302      	movs	r3, #2
 8002146:	e18a      	b.n	800245e <HAL_SPI_TransmitReceive+0x33c>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002150:	f7ff f836 	bl	80011c0 <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800215c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800216a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800216e:	2b01      	cmp	r3, #1
 8002170:	d00f      	beq.n	8002192 <HAL_SPI_TransmitReceive+0x70>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002178:	d107      	bne.n	800218a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_SPI_TransmitReceive+0x68>
 8002182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002186:	2b04      	cmp	r3, #4
 8002188:	d003      	beq.n	8002192 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002190:	e15b      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x82>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x82>
 800219e:	887b      	ldrh	r3, [r7, #2]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d103      	bne.n	80021ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021aa:	e14e      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d003      	beq.n	80021c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2205      	movs	r2, #5
 80021bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	887a      	ldrh	r2, [r7, #2]
 80021d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	d007      	beq.n	8002214 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800221c:	d178      	bne.n	8002310 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_SPI_TransmitReceive+0x10a>
 8002226:	8b7b      	ldrh	r3, [r7, #26]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d166      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	881a      	ldrh	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	1c9a      	adds	r2, r3, #2
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002250:	e053      	b.n	80022fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b02      	cmp	r3, #2
 800225e:	d11b      	bne.n	8002298 <HAL_SPI_TransmitReceive+0x176>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d016      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x176>
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d113      	bne.n	8002298 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	1c9a      	adds	r2, r3, #2
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d119      	bne.n	80022da <HAL_SPI_TransmitReceive+0x1b8>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d014      	beq.n	80022da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	b292      	uxth	r2, r2
 80022bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	1c9a      	adds	r2, r3, #2
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022d6:	2301      	movs	r3, #1
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022da:	f7fe ff71 	bl	80011c0 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d807      	bhi.n	80022fa <HAL_SPI_TransmitReceive+0x1d8>
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d003      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80022f8:	e0a7      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1a6      	bne.n	8002252 <HAL_SPI_TransmitReceive+0x130>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1a1      	bne.n	8002252 <HAL_SPI_TransmitReceive+0x130>
 800230e:	e07c      	b.n	800240a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_SPI_TransmitReceive+0x1fc>
 8002318:	8b7b      	ldrh	r3, [r7, #26]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d16b      	bne.n	80023f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	330c      	adds	r3, #12
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002344:	e057      	b.n	80023f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	d11c      	bne.n	800238e <HAL_SPI_TransmitReceive+0x26c>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d017      	beq.n	800238e <HAL_SPI_TransmitReceive+0x26c>
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d114      	bne.n	800238e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	330c      	adds	r3, #12
 800236e:	7812      	ldrb	r2, [r2, #0]
 8002370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d119      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x2ae>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d014      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023cc:	2301      	movs	r3, #1
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023d0:	f7fe fef6 	bl	80011c0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023dc:	429a      	cmp	r2, r3
 80023de:	d803      	bhi.n	80023e8 <HAL_SPI_TransmitReceive+0x2c6>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d102      	bne.n	80023ee <HAL_SPI_TransmitReceive+0x2cc>
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023f4:	e029      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1a2      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x224>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d19d      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f8b2 	bl	8002578 <SPI_EndRxTxTransaction>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002426:	e010      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	e000      	b.n	800244a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002448:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800245a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800245e:	4618      	mov	r0, r3
 8002460:	3730      	adds	r7, #48	; 0x30
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002478:	f7fe fea2 	bl	80011c0 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002488:	f7fe fe9a 	bl	80011c0 <HAL_GetTick>
 800248c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800248e:	4b39      	ldr	r3, [pc, #228]	; (8002574 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	015b      	lsls	r3, r3, #5
 8002494:	0d1b      	lsrs	r3, r3, #20
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800249e:	e054      	b.n	800254a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d050      	beq.n	800254a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024a8:	f7fe fe8a 	bl	80011c0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d902      	bls.n	80024be <SPI_WaitFlagStateUntilTimeout+0x56>
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d13d      	bne.n	800253a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d6:	d111      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e0:	d004      	beq.n	80024ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ea:	d107      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002504:	d10f      	bne.n	8002526 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e017      	b.n	800256a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3b01      	subs	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4013      	ands	r3, r2
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	429a      	cmp	r2, r3
 8002566:	d19b      	bne.n	80024a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000000 	.word	0x20000000

08002578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <SPI_EndRxTxTransaction+0x7c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <SPI_EndRxTxTransaction+0x80>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025a2:	d112      	bne.n	80025ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2200      	movs	r2, #0
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7ff ff5a 	bl	8002468 <SPI_WaitFlagStateUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f043 0220 	orr.w	r2, r3, #32
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e00f      	b.n	80025ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d0f2      	beq.n	80025ca <SPI_EndRxTxTransaction+0x52>
 80025e4:	e000      	b.n	80025e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80025e6:	bf00      	nop
  }

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000
 80025f8:	165e9f81 	.word	0x165e9f81

080025fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e03f      	b.n	800268e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fcf4 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800263e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f929 	bl	8002898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b08a      	sub	sp, #40	; 0x28
 800269a:	af02      	add	r7, sp, #8
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d17c      	bne.n	80027b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_UART_Transmit+0x2c>
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e075      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_UART_Transmit+0x3e>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e06e      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2221      	movs	r2, #33	; 0x21
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ea:	f7fe fd69 	bl	80011c0 <HAL_GetTick>
 80026ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	d108      	bne.n	8002718 <HAL_UART_Transmit+0x82>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e003      	b.n	8002720 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002728:	e02a      	b.n	8002780 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f840 	bl	80027ba <UART_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e036      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	3302      	adds	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	e007      	b.n	8002772 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3301      	adds	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1cf      	bne.n	800272a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2200      	movs	r2, #0
 8002792:	2140      	movs	r1, #64	; 0x40
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f810 	bl	80027ba <UART_WaitOnFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e006      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b090      	sub	sp, #64	; 0x40
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ca:	e050      	b.n	800286e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d2:	d04c      	beq.n	800286e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x30>
 80027da:	f7fe fcf1 	bl	80011c0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d241      	bcs.n	800286e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	330c      	adds	r3, #12
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	e853 3f00 	ldrex	r3, [r3]
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800280a:	637a      	str	r2, [r7, #52]	; 0x34
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002812:	e841 2300 	strex	r3, r2, [r1]
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e5      	bne.n	80027ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3314      	adds	r3, #20
 8002824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	e853 3f00 	ldrex	r3, [r3]
 800282c:	613b      	str	r3, [r7, #16]
   return(result);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3314      	adds	r3, #20
 800283c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800283e:	623a      	str	r2, [r7, #32]
 8002840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002842:	69f9      	ldr	r1, [r7, #28]
 8002844:	6a3a      	ldr	r2, [r7, #32]
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	61bb      	str	r3, [r7, #24]
   return(result);
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e5      	bne.n	800281e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e00f      	b.n	800288e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4013      	ands	r3, r2
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	429a      	cmp	r2, r3
 800287c:	bf0c      	ite	eq
 800287e:	2301      	moveq	r3, #1
 8002880:	2300      	movne	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	429a      	cmp	r2, r3
 800288a:	d09f      	beq.n	80027cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3740      	adds	r7, #64	; 0x40
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800289c:	b09f      	sub	sp, #124	; 0x7c
 800289e:	af00      	add	r7, sp, #0
 80028a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ae:	68d9      	ldr	r1, [r3, #12]
 80028b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	ea40 0301 	orr.w	r3, r0, r1
 80028b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80028d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028dc:	f021 010c 	bic.w	r1, r1, #12
 80028e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e6:	430b      	orrs	r3, r1
 80028e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f6:	6999      	ldr	r1, [r3, #24]
 80028f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	ea40 0301 	orr.w	r3, r0, r1
 8002900:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4bc5      	ldr	r3, [pc, #788]	; (8002c1c <UART_SetConfig+0x384>)
 8002908:	429a      	cmp	r2, r3
 800290a:	d004      	beq.n	8002916 <UART_SetConfig+0x7e>
 800290c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4bc3      	ldr	r3, [pc, #780]	; (8002c20 <UART_SetConfig+0x388>)
 8002912:	429a      	cmp	r2, r3
 8002914:	d103      	bne.n	800291e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002916:	f7ff fb67 	bl	8001fe8 <HAL_RCC_GetPCLK2Freq>
 800291a:	6778      	str	r0, [r7, #116]	; 0x74
 800291c:	e002      	b.n	8002924 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800291e:	f7ff fb4f 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 8002922:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292c:	f040 80b6 	bne.w	8002a9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002932:	461c      	mov	r4, r3
 8002934:	f04f 0500 	mov.w	r5, #0
 8002938:	4622      	mov	r2, r4
 800293a:	462b      	mov	r3, r5
 800293c:	1891      	adds	r1, r2, r2
 800293e:	6439      	str	r1, [r7, #64]	; 0x40
 8002940:	415b      	adcs	r3, r3
 8002942:	647b      	str	r3, [r7, #68]	; 0x44
 8002944:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002948:	1912      	adds	r2, r2, r4
 800294a:	eb45 0303 	adc.w	r3, r5, r3
 800294e:	f04f 0000 	mov.w	r0, #0
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	00d9      	lsls	r1, r3, #3
 8002958:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800295c:	00d0      	lsls	r0, r2, #3
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	1911      	adds	r1, r2, r4
 8002964:	6639      	str	r1, [r7, #96]	; 0x60
 8002966:	416b      	adcs	r3, r5
 8002968:	667b      	str	r3, [r7, #100]	; 0x64
 800296a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	461a      	mov	r2, r3
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	1891      	adds	r1, r2, r2
 8002976:	63b9      	str	r1, [r7, #56]	; 0x38
 8002978:	415b      	adcs	r3, r3
 800297a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800297c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002980:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002984:	f7fd fc7c 	bl	8000280 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4ba5      	ldr	r3, [pc, #660]	; (8002c24 <UART_SetConfig+0x38c>)
 800298e:	fba3 2302 	umull	r2, r3, r3, r2
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	011e      	lsls	r6, r3, #4
 8002996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002998:	461c      	mov	r4, r3
 800299a:	f04f 0500 	mov.w	r5, #0
 800299e:	4622      	mov	r2, r4
 80029a0:	462b      	mov	r3, r5
 80029a2:	1891      	adds	r1, r2, r2
 80029a4:	6339      	str	r1, [r7, #48]	; 0x30
 80029a6:	415b      	adcs	r3, r3
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
 80029aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029ae:	1912      	adds	r2, r2, r4
 80029b0:	eb45 0303 	adc.w	r3, r5, r3
 80029b4:	f04f 0000 	mov.w	r0, #0
 80029b8:	f04f 0100 	mov.w	r1, #0
 80029bc:	00d9      	lsls	r1, r3, #3
 80029be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029c2:	00d0      	lsls	r0, r2, #3
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	1911      	adds	r1, r2, r4
 80029ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80029cc:	416b      	adcs	r3, r5
 80029ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	461a      	mov	r2, r3
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	1891      	adds	r1, r2, r2
 80029dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80029de:	415b      	adcs	r3, r3
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80029ea:	f7fd fc49 	bl	8000280 <__aeabi_uldivmod>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <UART_SetConfig+0x38c>)
 80029f4:	fba3 1302 	umull	r1, r3, r3, r2
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	2164      	movs	r1, #100	; 0x64
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	3332      	adds	r3, #50	; 0x32
 8002a06:	4a87      	ldr	r2, [pc, #540]	; (8002c24 <UART_SetConfig+0x38c>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a14:	441e      	add	r6, r3
 8002a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	1894      	adds	r4, r2, r2
 8002a24:	623c      	str	r4, [r7, #32]
 8002a26:	415b      	adcs	r3, r3
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a2e:	1812      	adds	r2, r2, r0
 8002a30:	eb41 0303 	adc.w	r3, r1, r3
 8002a34:	f04f 0400 	mov.w	r4, #0
 8002a38:	f04f 0500 	mov.w	r5, #0
 8002a3c:	00dd      	lsls	r5, r3, #3
 8002a3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a42:	00d4      	lsls	r4, r2, #3
 8002a44:	4622      	mov	r2, r4
 8002a46:	462b      	mov	r3, r5
 8002a48:	1814      	adds	r4, r2, r0
 8002a4a:	653c      	str	r4, [r7, #80]	; 0x50
 8002a4c:	414b      	adcs	r3, r1
 8002a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	461a      	mov	r2, r3
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	1891      	adds	r1, r2, r2
 8002a5c:	61b9      	str	r1, [r7, #24]
 8002a5e:	415b      	adcs	r3, r3
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a6a:	f7fd fc09 	bl	8000280 <__aeabi_uldivmod>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4b6c      	ldr	r3, [pc, #432]	; (8002c24 <UART_SetConfig+0x38c>)
 8002a74:	fba3 1302 	umull	r1, r3, r3, r2
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	2164      	movs	r1, #100	; 0x64
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	3332      	adds	r3, #50	; 0x32
 8002a86:	4a67      	ldr	r2, [pc, #412]	; (8002c24 <UART_SetConfig+0x38c>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	f003 0207 	and.w	r2, r3, #7
 8002a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4432      	add	r2, r6
 8002a98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a9a:	e0b9      	b.n	8002c10 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9e:	461c      	mov	r4, r3
 8002aa0:	f04f 0500 	mov.w	r5, #0
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	1891      	adds	r1, r2, r2
 8002aaa:	6139      	str	r1, [r7, #16]
 8002aac:	415b      	adcs	r3, r3
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ab4:	1912      	adds	r2, r2, r4
 8002ab6:	eb45 0303 	adc.w	r3, r5, r3
 8002aba:	f04f 0000 	mov.w	r0, #0
 8002abe:	f04f 0100 	mov.w	r1, #0
 8002ac2:	00d9      	lsls	r1, r3, #3
 8002ac4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ac8:	00d0      	lsls	r0, r2, #3
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	eb12 0804 	adds.w	r8, r2, r4
 8002ad2:	eb43 0905 	adc.w	r9, r3, r5
 8002ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	008b      	lsls	r3, r1, #2
 8002aea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002aee:	0082      	lsls	r2, r0, #2
 8002af0:	4640      	mov	r0, r8
 8002af2:	4649      	mov	r1, r9
 8002af4:	f7fd fbc4 	bl	8000280 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <UART_SetConfig+0x38c>)
 8002afe:	fba3 2302 	umull	r2, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	011e      	lsls	r6, r3, #4
 8002b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f04f 0100 	mov.w	r1, #0
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	1894      	adds	r4, r2, r2
 8002b14:	60bc      	str	r4, [r7, #8]
 8002b16:	415b      	adcs	r3, r3
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b1e:	1812      	adds	r2, r2, r0
 8002b20:	eb41 0303 	adc.w	r3, r1, r3
 8002b24:	f04f 0400 	mov.w	r4, #0
 8002b28:	f04f 0500 	mov.w	r5, #0
 8002b2c:	00dd      	lsls	r5, r3, #3
 8002b2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b32:	00d4      	lsls	r4, r2, #3
 8002b34:	4622      	mov	r2, r4
 8002b36:	462b      	mov	r3, r5
 8002b38:	1814      	adds	r4, r2, r0
 8002b3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002b3c:	414b      	adcs	r3, r1
 8002b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	008b      	lsls	r3, r1, #2
 8002b54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b58:	0082      	lsls	r2, r0, #2
 8002b5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002b5e:	f7fd fb8f 	bl	8000280 <__aeabi_uldivmod>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <UART_SetConfig+0x38c>)
 8002b68:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	2164      	movs	r1, #100	; 0x64
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	3332      	adds	r3, #50	; 0x32
 8002b7a:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <UART_SetConfig+0x38c>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b86:	441e      	add	r6, r3
 8002b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	1894      	adds	r4, r2, r2
 8002b96:	603c      	str	r4, [r7, #0]
 8002b98:	415b      	adcs	r3, r3
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ba0:	1812      	adds	r2, r2, r0
 8002ba2:	eb41 0303 	adc.w	r3, r1, r3
 8002ba6:	f04f 0400 	mov.w	r4, #0
 8002baa:	f04f 0500 	mov.w	r5, #0
 8002bae:	00dd      	lsls	r5, r3, #3
 8002bb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bb4:	00d4      	lsls	r4, r2, #3
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	462b      	mov	r3, r5
 8002bba:	eb12 0a00 	adds.w	sl, r2, r0
 8002bbe:	eb43 0b01 	adc.w	fp, r3, r1
 8002bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	008b      	lsls	r3, r1, #2
 8002bd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bda:	0082      	lsls	r2, r0, #2
 8002bdc:	4650      	mov	r0, sl
 8002bde:	4659      	mov	r1, fp
 8002be0:	f7fd fb4e 	bl	8000280 <__aeabi_uldivmod>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <UART_SetConfig+0x38c>)
 8002bea:	fba3 1302 	umull	r1, r3, r3, r2
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2164      	movs	r1, #100	; 0x64
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	3332      	adds	r3, #50	; 0x32
 8002bfc:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <UART_SetConfig+0x38c>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	f003 020f 	and.w	r2, r3, #15
 8002c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4432      	add	r2, r6
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	377c      	adds	r7, #124	; 0x7c
 8002c14:	46bd      	mov	sp, r7
 8002c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40011000 	.word	0x40011000
 8002c20:	40011400 	.word	0x40011400
 8002c24:	51eb851f 	.word	0x51eb851f

08002c28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002c2c:	4904      	ldr	r1, [pc, #16]	; (8002c40 <MX_FATFS_Init+0x18>)
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_FATFS_Init+0x1c>)
 8002c30:	f002 fec4 	bl	80059bc <FATFS_LinkDriver>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <MX_FATFS_Init+0x20>)
 8002c3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	200006cc 	.word	0x200006cc
 8002c44:	2000000c 	.word	0x2000000c
 8002c48:	200006d0 	.word	0x200006d0

08002c4c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002c50:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f9dd 	bl	8003028 <USER_SPI_initialize>
 8002c6e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fabb 	bl	8003200 <USER_SPI_status>
 8002c8a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8002ca4:	7bf8      	ldrb	r0, [r7, #15]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	f000 fabe 	bl	800322c <USER_SPI_read>
 8002cb0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8002cca:	7bf8      	ldrb	r0, [r7, #15]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	f000 fb11 	bl	80032f8 <USER_SPI_write>
 8002cd6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	603a      	str	r2, [r7, #0]
 8002cea:	71fb      	strb	r3, [r7, #7]
 8002cec:	460b      	mov	r3, r1
 8002cee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8002cf0:	79b9      	ldrb	r1, [r7, #6]
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fb7a 	bl	80033f0 <USER_SPI_ioctl>
 8002cfc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002d10:	f7fe fa56 	bl	80011c0 <HAL_GetTick>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <SPI_Timer_On+0x20>)
 8002d18:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002d1a:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <SPI_Timer_On+0x24>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000b34 	.word	0x20000b34
 8002d2c:	20000b38 	.word	0x20000b38

08002d30 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002d34:	f7fe fa44 	bl	80011c0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <SPI_Timer_Status+0x24>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	1ad2      	subs	r2, r2, r3
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <SPI_Timer_Status+0x28>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	bf34      	ite	cc
 8002d48:	2301      	movcc	r3, #1
 8002d4a:	2300      	movcs	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000b34 	.word	0x20000b34
 8002d58:	20000b38 	.word	0x20000b38

08002d5c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 8002d66:	f107 020f 	add.w	r2, r7, #15
 8002d6a:	1df9      	adds	r1, r7, #7
 8002d6c:	2332      	movs	r3, #50	; 0x32
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2301      	movs	r3, #1
 8002d72:	4804      	ldr	r0, [pc, #16]	; (8002d84 <xchg_spi+0x28>)
 8002d74:	f7ff f9d5 	bl	8002122 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200005d4 	.word	0x200005d4

08002d88 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	e00a      	b.n	8002dae <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	18d4      	adds	r4, r2, r3
 8002d9e:	20ff      	movs	r0, #255	; 0xff
 8002da0:	f7ff ffdc 	bl	8002d5c <xchg_spi>
 8002da4:	4603      	mov	r3, r0
 8002da6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d3f0      	bcc.n	8002d98 <rcvr_spi_multi+0x10>
	}
}
 8002db6:	bf00      	nop
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}

08002dc0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e009      	b.n	8002de4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ffbf 	bl	8002d5c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3301      	adds	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3f1      	bcc.n	8002dd0 <xmit_spi_multi+0x10>
	}
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002dfe:	f7fe f9df 	bl	80011c0 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002e08:	20ff      	movs	r0, #255	; 0xff
 8002e0a:	f7ff ffa7 	bl	8002d5c <xchg_spi>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2bff      	cmp	r3, #255	; 0xff
 8002e16:	d007      	beq.n	8002e28 <wait_ready+0x32>
 8002e18:	f7fe f9d2 	bl	80011c0 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d8ef      	bhi.n	8002e08 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2bff      	cmp	r3, #255	; 0xff
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002e40:	2201      	movs	r2, #1
 8002e42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e46:	4804      	ldr	r0, [pc, #16]	; (8002e58 <despiselect+0x1c>)
 8002e48:	f7fe fc54 	bl	80016f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002e4c:	20ff      	movs	r0, #255	; 0xff
 8002e4e:	f7ff ff85 	bl	8002d5c <xchg_spi>

}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40020400 	.word	0x40020400

08002e5c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002e60:	2200      	movs	r2, #0
 8002e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e66:	480a      	ldr	r0, [pc, #40]	; (8002e90 <spiselect+0x34>)
 8002e68:	f7fe fc44 	bl	80016f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002e6c:	20ff      	movs	r0, #255	; 0xff
 8002e6e:	f7ff ff75 	bl	8002d5c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002e72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e76:	f7ff ffbe 	bl	8002df6 <wait_ready>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <spiselect+0x28>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e002      	b.n	8002e8a <spiselect+0x2e>

	despiselect();
 8002e84:	f7ff ffda 	bl	8002e3c <despiselect>
	return 0;	/* Timeout */
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40020400 	.word	0x40020400

08002e94 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002e9e:	20c8      	movs	r0, #200	; 0xc8
 8002ea0:	f7ff ff32 	bl	8002d08 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002ea4:	20ff      	movs	r0, #255	; 0xff
 8002ea6:	f7ff ff59 	bl	8002d5c <xchg_spi>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2bff      	cmp	r3, #255	; 0xff
 8002eb2:	d104      	bne.n	8002ebe <rcvr_datablock+0x2a>
 8002eb4:	f7ff ff3c 	bl	8002d30 <SPI_Timer_Status>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f2      	bne.n	8002ea4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2bfe      	cmp	r3, #254	; 0xfe
 8002ec2:	d001      	beq.n	8002ec8 <rcvr_datablock+0x34>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e00a      	b.n	8002ede <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002ec8:	6839      	ldr	r1, [r7, #0]
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ff5c 	bl	8002d88 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002ed0:	20ff      	movs	r0, #255	; 0xff
 8002ed2:	f7ff ff43 	bl	8002d5c <xchg_spi>
 8002ed6:	20ff      	movs	r0, #255	; 0xff
 8002ed8:	f7ff ff40 	bl	8002d5c <xchg_spi>

	return 1;						/* Function succeeded */
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002ef2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ef6:	f7ff ff7e 	bl	8002df6 <wait_ready>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <xmit_datablock+0x1e>
 8002f00:	2300      	movs	r3, #0
 8002f02:	e01e      	b.n	8002f42 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff28 	bl	8002d5c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	2bfd      	cmp	r3, #253	; 0xfd
 8002f10:	d016      	beq.n	8002f40 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ff52 	bl	8002dc0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002f1c:	20ff      	movs	r0, #255	; 0xff
 8002f1e:	f7ff ff1d 	bl	8002d5c <xchg_spi>
 8002f22:	20ff      	movs	r0, #255	; 0xff
 8002f24:	f7ff ff1a 	bl	8002d5c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002f28:	20ff      	movs	r0, #255	; 0xff
 8002f2a:	f7ff ff17 	bl	8002d5c <xchg_spi>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	2b05      	cmp	r3, #5
 8002f3a:	d001      	beq.n	8002f40 <xmit_datablock+0x5a>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <xmit_datablock+0x5c>
	}
	return 1;
 8002f40:	2301      	movs	r3, #1
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	6039      	str	r1, [r7, #0]
 8002f54:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	da0e      	bge.n	8002f7c <send_cmd+0x32>
		cmd &= 0x7F;
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f64:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002f66:	2100      	movs	r1, #0
 8002f68:	2037      	movs	r0, #55	; 0x37
 8002f6a:	f7ff ffee 	bl	8002f4a <send_cmd>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002f72:	7bbb      	ldrb	r3, [r7, #14]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d901      	bls.n	8002f7c <send_cmd+0x32>
 8002f78:	7bbb      	ldrb	r3, [r7, #14]
 8002f7a:	e051      	b.n	8003020 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d008      	beq.n	8002f94 <send_cmd+0x4a>
		despiselect();
 8002f82:	f7ff ff5b 	bl	8002e3c <despiselect>
		if (!spiselect()) return 0xFF;
 8002f86:	f7ff ff69 	bl	8002e5c <spiselect>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <send_cmd+0x4a>
 8002f90:	23ff      	movs	r3, #255	; 0xff
 8002f92:	e045      	b.n	8003020 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fedd 	bl	8002d5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	0e1b      	lsrs	r3, r3, #24
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fed7 	bl	8002d5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fed1 	bl	8002d5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fecb 	bl	8002d5c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fec6 	bl	8002d5c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <send_cmd+0x94>
 8002fda:	2395      	movs	r3, #149	; 0x95
 8002fdc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d101      	bne.n	8002fe8 <send_cmd+0x9e>
 8002fe4:	2387      	movs	r3, #135	; 0x87
 8002fe6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff feb6 	bl	8002d5c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d102      	bne.n	8002ffc <send_cmd+0xb2>
 8002ff6:	20ff      	movs	r0, #255	; 0xff
 8002ff8:	f7ff feb0 	bl	8002d5c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002ffc:	230a      	movs	r3, #10
 8002ffe:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003000:	20ff      	movs	r0, #255	; 0xff
 8003002:	f7ff feab 	bl	8002d5c <xchg_spi>
 8003006:	4603      	mov	r3, r0
 8003008:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800300a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800300e:	2b00      	cmp	r3, #0
 8003010:	da05      	bge.n	800301e <send_cmd+0xd4>
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	3b01      	subs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <send_cmd+0xb6>

	return res;							/* Return received response */
 800301e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <USER_SPI_initialize+0x14>
 8003038:	2301      	movs	r3, #1
 800303a:	e0d6      	b.n	80031ea <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800303c:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <USER_SPI_initialize+0x1cc>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <USER_SPI_initialize+0x2a>
 800304a:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <USER_SPI_initialize+0x1cc>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	e0cb      	b.n	80031ea <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003052:	4b69      	ldr	r3, [pc, #420]	; (80031f8 <USER_SPI_initialize+0x1d0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800305c:	4b66      	ldr	r3, [pc, #408]	; (80031f8 <USER_SPI_initialize+0x1d0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003064:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003066:	230a      	movs	r3, #10
 8003068:	73fb      	strb	r3, [r7, #15]
 800306a:	e005      	b.n	8003078 <USER_SPI_initialize+0x50>
 800306c:	20ff      	movs	r0, #255	; 0xff
 800306e:	f7ff fe75 	bl	8002d5c <xchg_spi>
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	3b01      	subs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f6      	bne.n	800306c <USER_SPI_initialize+0x44>

	ty = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003082:	2100      	movs	r1, #0
 8003084:	2000      	movs	r0, #0
 8003086:	f7ff ff60 	bl	8002f4a <send_cmd>
 800308a:	4603      	mov	r3, r0
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 808b 	bne.w	80031a8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003096:	f7ff fe37 	bl	8002d08 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800309a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800309e:	2008      	movs	r0, #8
 80030a0:	f7ff ff53 	bl	8002f4a <send_cmd>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d151      	bne.n	800314e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	e00d      	b.n	80030cc <USER_SPI_initialize+0xa4>
 80030b0:	7bfc      	ldrb	r4, [r7, #15]
 80030b2:	20ff      	movs	r0, #255	; 0xff
 80030b4:	f7ff fe52 	bl	8002d5c <xchg_spi>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	f107 0310 	add.w	r3, r7, #16
 80030c0:	4423      	add	r3, r4
 80030c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	3301      	adds	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d9ee      	bls.n	80030b0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80030d2:	7abb      	ldrb	r3, [r7, #10]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d167      	bne.n	80031a8 <USER_SPI_initialize+0x180>
 80030d8:	7afb      	ldrb	r3, [r7, #11]
 80030da:	2baa      	cmp	r3, #170	; 0xaa
 80030dc:	d164      	bne.n	80031a8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80030de:	bf00      	nop
 80030e0:	f7ff fe26 	bl	8002d30 <SPI_Timer_Status>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <USER_SPI_initialize+0xd2>
 80030ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80030ee:	20a9      	movs	r0, #169	; 0xa9
 80030f0:	f7ff ff2b 	bl	8002f4a <send_cmd>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f2      	bne.n	80030e0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80030fa:	f7ff fe19 	bl	8002d30 <SPI_Timer_Status>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d051      	beq.n	80031a8 <USER_SPI_initialize+0x180>
 8003104:	2100      	movs	r1, #0
 8003106:	203a      	movs	r0, #58	; 0x3a
 8003108:	f7ff ff1f 	bl	8002f4a <send_cmd>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d14a      	bne.n	80031a8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	e00d      	b.n	8003134 <USER_SPI_initialize+0x10c>
 8003118:	7bfc      	ldrb	r4, [r7, #15]
 800311a:	20ff      	movs	r0, #255	; 0xff
 800311c:	f7ff fe1e 	bl	8002d5c <xchg_spi>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	f107 0310 	add.w	r3, r7, #16
 8003128:	4423      	add	r3, r4
 800312a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	3301      	adds	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d9ee      	bls.n	8003118 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800313a:	7a3b      	ldrb	r3, [r7, #8]
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <USER_SPI_initialize+0x120>
 8003144:	230c      	movs	r3, #12
 8003146:	e000      	b.n	800314a <USER_SPI_initialize+0x122>
 8003148:	2304      	movs	r3, #4
 800314a:	737b      	strb	r3, [r7, #13]
 800314c:	e02c      	b.n	80031a8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800314e:	2100      	movs	r1, #0
 8003150:	20a9      	movs	r0, #169	; 0xa9
 8003152:	f7ff fefa 	bl	8002f4a <send_cmd>
 8003156:	4603      	mov	r3, r0
 8003158:	2b01      	cmp	r3, #1
 800315a:	d804      	bhi.n	8003166 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800315c:	2302      	movs	r3, #2
 800315e:	737b      	strb	r3, [r7, #13]
 8003160:	23a9      	movs	r3, #169	; 0xa9
 8003162:	73bb      	strb	r3, [r7, #14]
 8003164:	e003      	b.n	800316e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003166:	2301      	movs	r3, #1
 8003168:	737b      	strb	r3, [r7, #13]
 800316a:	2301      	movs	r3, #1
 800316c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800316e:	bf00      	nop
 8003170:	f7ff fdde 	bl	8002d30 <SPI_Timer_Status>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <USER_SPI_initialize+0x162>
 800317a:	7bbb      	ldrb	r3, [r7, #14]
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fee3 	bl	8002f4a <send_cmd>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f2      	bne.n	8003170 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800318a:	f7ff fdd1 	bl	8002d30 <SPI_Timer_Status>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <USER_SPI_initialize+0x17c>
 8003194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003198:	2010      	movs	r0, #16
 800319a:	f7ff fed6 	bl	8002f4a <send_cmd>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <USER_SPI_initialize+0x180>
				ty = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 80031a8:	4a14      	ldr	r2, [pc, #80]	; (80031fc <USER_SPI_initialize+0x1d4>)
 80031aa:	7b7b      	ldrb	r3, [r7, #13]
 80031ac:	7013      	strb	r3, [r2, #0]
	despiselect();
 80031ae:	f7ff fe45 	bl	8002e3c <despiselect>

	if (ty) {			/* OK */
 80031b2:	7b7b      	ldrb	r3, [r7, #13]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80031b8:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <USER_SPI_initialize+0x1d0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <USER_SPI_initialize+0x1d0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0210 	orr.w	r2, r2, #16
 80031ca:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <USER_SPI_initialize+0x1cc>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <USER_SPI_initialize+0x1cc>)
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e002      	b.n	80031e4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <USER_SPI_initialize+0x1cc>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <USER_SPI_initialize+0x1cc>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b2db      	uxtb	r3, r3
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd90      	pop	{r4, r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000020 	.word	0x20000020
 80031f8:	200005d4 	.word	0x200005d4
 80031fc:	200000a8 	.word	0x200000a8

08003200 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <USER_SPI_status+0x14>
 8003210:	2301      	movs	r3, #1
 8003212:	e002      	b.n	800321a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <USER_SPI_status+0x28>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000020 	.word	0x20000020

0800322c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	4603      	mov	r3, r0
 800323a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <USER_SPI_read+0x1c>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <USER_SPI_read+0x20>
 8003248:	2304      	movs	r3, #4
 800324a:	e04d      	b.n	80032e8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <USER_SPI_read+0xc4>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <USER_SPI_read+0x32>
 800325a:	2303      	movs	r3, #3
 800325c:	e044      	b.n	80032e8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <USER_SPI_read+0xc8>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <USER_SPI_read+0x44>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	025b      	lsls	r3, r3, #9
 800326e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d111      	bne.n	800329a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	2011      	movs	r0, #17
 800327a:	f7ff fe66 	bl	8002f4a <send_cmd>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d129      	bne.n	80032d8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003288:	68b8      	ldr	r0, [r7, #8]
 800328a:	f7ff fe03 	bl	8002e94 <rcvr_datablock>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d021      	beq.n	80032d8 <USER_SPI_read+0xac>
			count = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	e01e      	b.n	80032d8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	2012      	movs	r0, #18
 800329e:	f7ff fe54 	bl	8002f4a <send_cmd>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d117      	bne.n	80032d8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80032a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ac:	68b8      	ldr	r0, [r7, #8]
 80032ae:	f7ff fdf1 	bl	8002e94 <rcvr_datablock>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <USER_SPI_read+0xa2>
				buff += 512;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80032be:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ed      	bne.n	80032a8 <USER_SPI_read+0x7c>
 80032cc:	e000      	b.n	80032d0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80032ce:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80032d0:	2100      	movs	r1, #0
 80032d2:	200c      	movs	r0, #12
 80032d4:	f7ff fe39 	bl	8002f4a <send_cmd>
		}
	}
	despiselect();
 80032d8:	f7ff fdb0 	bl	8002e3c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000020 	.word	0x20000020
 80032f4:	200000a8 	.word	0x200000a8

080032f8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4603      	mov	r3, r0
 8003306:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <USER_SPI_write+0x1c>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <USER_SPI_write+0x20>
 8003314:	2304      	movs	r3, #4
 8003316:	e063      	b.n	80033e0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003318:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <USER_SPI_write+0xf0>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <USER_SPI_write+0x32>
 8003326:	2303      	movs	r3, #3
 8003328:	e05a      	b.n	80033e0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <USER_SPI_write+0xf0>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <USER_SPI_write+0x44>
 8003338:	2302      	movs	r3, #2
 800333a:	e051      	b.n	80033e0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <USER_SPI_write+0xf4>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <USER_SPI_write+0x56>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	025b      	lsls	r3, r3, #9
 800334c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d110      	bne.n	8003376 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	2018      	movs	r0, #24
 8003358:	f7ff fdf7 	bl	8002f4a <send_cmd>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d136      	bne.n	80033d0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003362:	21fe      	movs	r1, #254	; 0xfe
 8003364:	68b8      	ldr	r0, [r7, #8]
 8003366:	f7ff fdbe 	bl	8002ee6 <xmit_datablock>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d02f      	beq.n	80033d0 <USER_SPI_write+0xd8>
			count = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	e02c      	b.n	80033d0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003376:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <USER_SPI_write+0xf4>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	f003 0306 	and.w	r3, r3, #6
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <USER_SPI_write+0x92>
 8003382:	6839      	ldr	r1, [r7, #0]
 8003384:	2097      	movs	r0, #151	; 0x97
 8003386:	f7ff fde0 	bl	8002f4a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	2019      	movs	r0, #25
 800338e:	f7ff fddc 	bl	8002f4a <send_cmd>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11b      	bne.n	80033d0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003398:	21fc      	movs	r1, #252	; 0xfc
 800339a:	68b8      	ldr	r0, [r7, #8]
 800339c:	f7ff fda3 	bl	8002ee6 <xmit_datablock>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <USER_SPI_write+0xc4>
				buff += 512;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80033ac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ee      	bne.n	8003398 <USER_SPI_write+0xa0>
 80033ba:	e000      	b.n	80033be <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80033bc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80033be:	21fd      	movs	r1, #253	; 0xfd
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7ff fd90 	bl	8002ee6 <xmit_datablock>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <USER_SPI_write+0xd8>
 80033cc:	2301      	movs	r3, #1
 80033ce:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80033d0:	f7ff fd34 	bl	8002e3c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf14      	ite	ne
 80033da:	2301      	movne	r3, #1
 80033dc:	2300      	moveq	r3, #0
 80033de:	b2db      	uxtb	r3, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000020 	.word	0x20000020
 80033ec:	200000a8 	.word	0x200000a8

080033f0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	; 0x30
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	603a      	str	r2, [r7, #0]
 80033fa:	71fb      	strb	r3, [r7, #7]
 80033fc:	460b      	mov	r3, r1
 80033fe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <USER_SPI_ioctl+0x1a>
 8003406:	2304      	movs	r3, #4
 8003408:	e15a      	b.n	80036c0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800340a:	4baf      	ldr	r3, [pc, #700]	; (80036c8 <USER_SPI_ioctl+0x2d8>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <USER_SPI_ioctl+0x2c>
 8003418:	2303      	movs	r3, #3
 800341a:	e151      	b.n	80036c0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003422:	79bb      	ldrb	r3, [r7, #6]
 8003424:	2b04      	cmp	r3, #4
 8003426:	f200 8136 	bhi.w	8003696 <USER_SPI_ioctl+0x2a6>
 800342a:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <USER_SPI_ioctl+0x40>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003445 	.word	0x08003445
 8003434:	08003459 	.word	0x08003459
 8003438:	08003697 	.word	0x08003697
 800343c:	08003505 	.word	0x08003505
 8003440:	080035fb 	.word	0x080035fb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003444:	f7ff fd0a 	bl	8002e5c <spiselect>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8127 	beq.w	800369e <USER_SPI_ioctl+0x2ae>
 8003450:	2300      	movs	r3, #0
 8003452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003456:	e122      	b.n	800369e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003458:	2100      	movs	r1, #0
 800345a:	2009      	movs	r0, #9
 800345c:	f7ff fd75 	bl	8002f4a <send_cmd>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 811d 	bne.w	80036a2 <USER_SPI_ioctl+0x2b2>
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	2110      	movs	r1, #16
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fd10 	bl	8002e94 <rcvr_datablock>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8113 	beq.w	80036a2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800347c:	7b3b      	ldrb	r3, [r7, #12]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d111      	bne.n	80034aa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003486:	7d7b      	ldrb	r3, [r7, #21]
 8003488:	461a      	mov	r2, r3
 800348a:	7d3b      	ldrb	r3, [r7, #20]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	4413      	add	r3, r2
 8003490:	461a      	mov	r2, r3
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800349a:	4413      	add	r3, r2
 800349c:	3301      	adds	r3, #1
 800349e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	029a      	lsls	r2, r3, #10
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e028      	b.n	80034fc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80034aa:	7c7b      	ldrb	r3, [r7, #17]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	7dbb      	ldrb	r3, [r7, #22]
 80034b4:	09db      	lsrs	r3, r3, #7
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	7d7b      	ldrb	r3, [r7, #21]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f003 0306 	and.w	r3, r3, #6
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3302      	adds	r3, #2
 80034ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80034d2:	7d3b      	ldrb	r3, [r7, #20]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	7cbb      	ldrb	r3, [r7, #18]
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034e8:	4413      	add	r3, r2
 80034ea:	3301      	adds	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80034ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034f2:	3b09      	subs	r3, #9
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	409a      	lsls	r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003502:	e0ce      	b.n	80036a2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003504:	4b71      	ldr	r3, [pc, #452]	; (80036cc <USER_SPI_ioctl+0x2dc>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d031      	beq.n	8003574 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003510:	2100      	movs	r1, #0
 8003512:	208d      	movs	r0, #141	; 0x8d
 8003514:	f7ff fd19 	bl	8002f4a <send_cmd>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 80c3 	bne.w	80036a6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003520:	20ff      	movs	r0, #255	; 0xff
 8003522:	f7ff fc1b 	bl	8002d5c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	2110      	movs	r1, #16
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fcb1 	bl	8002e94 <rcvr_datablock>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80b6 	beq.w	80036a6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800353a:	2330      	movs	r3, #48	; 0x30
 800353c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003540:	e007      	b.n	8003552 <USER_SPI_ioctl+0x162>
 8003542:	20ff      	movs	r0, #255	; 0xff
 8003544:	f7ff fc0a 	bl	8002d5c <xchg_spi>
 8003548:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800354c:	3b01      	subs	r3, #1
 800354e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003552:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f3      	bne.n	8003542 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800355a:	7dbb      	ldrb	r3, [r7, #22]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	b2db      	uxtb	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	2310      	movs	r3, #16
 8003564:	fa03 f202 	lsl.w	r2, r3, r2
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003572:	e098      	b.n	80036a6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003574:	2100      	movs	r1, #0
 8003576:	2009      	movs	r0, #9
 8003578:	f7ff fce7 	bl	8002f4a <send_cmd>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 8091 	bne.w	80036a6 <USER_SPI_ioctl+0x2b6>
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	2110      	movs	r1, #16
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fc82 	bl	8002e94 <rcvr_datablock>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8087 	beq.w	80036a6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003598:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <USER_SPI_ioctl+0x2dc>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80035a4:	7dbb      	ldrb	r3, [r7, #22]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80035ac:	7dfa      	ldrb	r2, [r7, #23]
 80035ae:	09d2      	lsrs	r2, r2, #7
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	4413      	add	r3, r2
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	7e7b      	ldrb	r3, [r7, #25]
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e013      	b.n	80035f2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80035ca:	7dbb      	ldrb	r3, [r7, #22]
 80035cc:	109b      	asrs	r3, r3, #2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	3301      	adds	r3, #1
 80035d6:	7dfa      	ldrb	r2, [r7, #23]
 80035d8:	00d2      	lsls	r2, r2, #3
 80035da:	f002 0218 	and.w	r2, r2, #24
 80035de:	7df9      	ldrb	r1, [r7, #23]
 80035e0:	0949      	lsrs	r1, r1, #5
 80035e2:	b2c9      	uxtb	r1, r1
 80035e4:	440a      	add	r2, r1
 80035e6:	3201      	adds	r2, #1
 80035e8:	fb02 f303 	mul.w	r3, r2, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80035f8:	e055      	b.n	80036a6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80035fa:	4b34      	ldr	r3, [pc, #208]	; (80036cc <USER_SPI_ioctl+0x2dc>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	f003 0306 	and.w	r3, r3, #6
 8003602:	2b00      	cmp	r3, #0
 8003604:	d051      	beq.n	80036aa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003606:	f107 020c 	add.w	r2, r7, #12
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	210b      	movs	r1, #11
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff feee 	bl	80033f0 <USER_SPI_ioctl>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d149      	bne.n	80036ae <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800361a:	7b3b      	ldrb	r3, [r7, #12]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d104      	bne.n	800362e <USER_SPI_ioctl+0x23e>
 8003624:	7dbb      	ldrb	r3, [r7, #22]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d041      	beq.n	80036b2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800363e:	4b23      	ldr	r3, [pc, #140]	; (80036cc <USER_SPI_ioctl+0x2dc>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d105      	bne.n	8003656 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	025b      	lsls	r3, r3, #9
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	025b      	lsls	r3, r3, #9
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003658:	2020      	movs	r0, #32
 800365a:	f7ff fc76 	bl	8002f4a <send_cmd>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d128      	bne.n	80036b6 <USER_SPI_ioctl+0x2c6>
 8003664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003666:	2021      	movs	r0, #33	; 0x21
 8003668:	f7ff fc6f 	bl	8002f4a <send_cmd>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d121      	bne.n	80036b6 <USER_SPI_ioctl+0x2c6>
 8003672:	2100      	movs	r1, #0
 8003674:	2026      	movs	r0, #38	; 0x26
 8003676:	f7ff fc68 	bl	8002f4a <send_cmd>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11a      	bne.n	80036b6 <USER_SPI_ioctl+0x2c6>
 8003680:	f247 5030 	movw	r0, #30000	; 0x7530
 8003684:	f7ff fbb7 	bl	8002df6 <wait_ready>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d013      	beq.n	80036b6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800368e:	2300      	movs	r3, #0
 8003690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003694:	e00f      	b.n	80036b6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003696:	2304      	movs	r3, #4
 8003698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800369c:	e00c      	b.n	80036b8 <USER_SPI_ioctl+0x2c8>
		break;
 800369e:	bf00      	nop
 80036a0:	e00a      	b.n	80036b8 <USER_SPI_ioctl+0x2c8>
		break;
 80036a2:	bf00      	nop
 80036a4:	e008      	b.n	80036b8 <USER_SPI_ioctl+0x2c8>
		break;
 80036a6:	bf00      	nop
 80036a8:	e006      	b.n	80036b8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80036aa:	bf00      	nop
 80036ac:	e004      	b.n	80036b8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <USER_SPI_ioctl+0x2c8>
		break;
 80036b6:	bf00      	nop
	}

	despiselect();
 80036b8:	f7ff fbc0 	bl	8002e3c <despiselect>

	return res;
 80036bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3730      	adds	r7, #48	; 0x30
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000020 	.word	0x20000020
 80036cc:	200000a8 	.word	0x200000a8

080036d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	4a08      	ldr	r2, [pc, #32]	; (8003700 <disk_status+0x30>)
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	79fa      	ldrb	r2, [r7, #7]
 80036e8:	4905      	ldr	r1, [pc, #20]	; (8003700 <disk_status+0x30>)
 80036ea:	440a      	add	r2, r1
 80036ec:	7a12      	ldrb	r2, [r2, #8]
 80036ee:	4610      	mov	r0, r2
 80036f0:	4798      	blx	r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	200000d4 	.word	0x200000d4

08003704 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	4a0d      	ldr	r2, [pc, #52]	; (800374c <disk_initialize+0x48>)
 8003716:	5cd3      	ldrb	r3, [r2, r3]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d111      	bne.n	8003740 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	4a0b      	ldr	r2, [pc, #44]	; (800374c <disk_initialize+0x48>)
 8003720:	2101      	movs	r1, #1
 8003722:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	4a09      	ldr	r2, [pc, #36]	; (800374c <disk_initialize+0x48>)
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	79fa      	ldrb	r2, [r7, #7]
 8003732:	4906      	ldr	r1, [pc, #24]	; (800374c <disk_initialize+0x48>)
 8003734:	440a      	add	r2, r1
 8003736:	7a12      	ldrb	r2, [r2, #8]
 8003738:	4610      	mov	r0, r2
 800373a:	4798      	blx	r3
 800373c:	4603      	mov	r3, r0
 800373e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200000d4 	.word	0x200000d4

08003750 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	4a0a      	ldr	r2, [pc, #40]	; (800378c <disk_read+0x3c>)
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	689c      	ldr	r4, [r3, #8]
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	4a07      	ldr	r2, [pc, #28]	; (800378c <disk_read+0x3c>)
 8003770:	4413      	add	r3, r2
 8003772:	7a18      	ldrb	r0, [r3, #8]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	47a0      	blx	r4
 800377c:	4603      	mov	r3, r0
 800377e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003780:	7dfb      	ldrb	r3, [r7, #23]
}
 8003782:	4618      	mov	r0, r3
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd90      	pop	{r4, r7, pc}
 800378a:	bf00      	nop
 800378c:	200000d4 	.word	0x200000d4

08003790 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <disk_write+0x3c>)
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	68dc      	ldr	r4, [r3, #12]
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	4a07      	ldr	r2, [pc, #28]	; (80037cc <disk_write+0x3c>)
 80037b0:	4413      	add	r3, r2
 80037b2:	7a18      	ldrb	r0, [r3, #8]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	47a0      	blx	r4
 80037bc:	4603      	mov	r3, r0
 80037be:	75fb      	strb	r3, [r7, #23]
  return res;
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200000d4 	.word	0x200000d4

080037d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	603a      	str	r2, [r7, #0]
 80037da:	71fb      	strb	r3, [r7, #7]
 80037dc:	460b      	mov	r3, r1
 80037de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	4a09      	ldr	r2, [pc, #36]	; (8003808 <disk_ioctl+0x38>)
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	79fa      	ldrb	r2, [r7, #7]
 80037ee:	4906      	ldr	r1, [pc, #24]	; (8003808 <disk_ioctl+0x38>)
 80037f0:	440a      	add	r2, r1
 80037f2:	7a10      	ldrb	r0, [r2, #8]
 80037f4:	79b9      	ldrb	r1, [r7, #6]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	4798      	blx	r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	200000d4 	.word	0x200000d4

0800380c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3301      	adds	r3, #1
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800381c:	89fb      	ldrh	r3, [r7, #14]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	b21a      	sxth	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b21b      	sxth	r3, r3
 8003828:	4313      	orrs	r3, r2
 800382a:	b21b      	sxth	r3, r3
 800382c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800382e:	89fb      	ldrh	r3, [r7, #14]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3303      	adds	r3, #3
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	3202      	adds	r2, #2
 8003854:	7812      	ldrb	r2, [r2, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	3201      	adds	r2, #1
 8003862:	7812      	ldrb	r2, [r2, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
	return rv;
 8003874:	68fb      	ldr	r3, [r7, #12]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	887a      	ldrh	r2, [r7, #2]
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	1c53      	adds	r3, r2, #1
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	1c59      	adds	r1, r3, #1
 8003934:	6179      	str	r1, [r7, #20]
 8003936:	7812      	ldrb	r2, [r2, #0]
 8003938:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3b01      	subs	r3, #1
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f1      	bne.n	800392a <mem_cpy+0x1a>
	}
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003952:	b480      	push	{r7}
 8003954:	b087      	sub	sp, #28
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	617a      	str	r2, [r7, #20]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3b01      	subs	r3, #1
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f3      	bne.n	8003962 <mem_set+0x10>
}
 800397a:	bf00      	nop
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	61fa      	str	r2, [r7, #28]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	61ba      	str	r2, [r7, #24]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	1acb      	subs	r3, r1, r3
 80039b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <mem_cmp+0x40>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0eb      	beq.n	80039a0 <mem_cmp+0x18>

	return r;
 80039c8:	697b      	ldr	r3, [r7, #20]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80039e0:	e002      	b.n	80039e8 <chk_chr+0x12>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3301      	adds	r3, #1
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <chk_chr+0x26>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d1f2      	bne.n	80039e2 <chk_chr+0xc>
	return *str;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	781b      	ldrb	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e029      	b.n	8003a74 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003a20:	4a27      	ldr	r2, [pc, #156]	; (8003ac0 <chk_lock+0xb4>)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	4413      	add	r3, r2
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01d      	beq.n	8003a6a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003a2e:	4a24      	ldr	r2, [pc, #144]	; (8003ac0 <chk_lock+0xb4>)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4413      	add	r3, r2
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d116      	bne.n	8003a6e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <chk_lock+0xb4>)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	4413      	add	r3, r2
 8003a48:	3304      	adds	r3, #4
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d10c      	bne.n	8003a6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003a54:	4a1a      	ldr	r2, [pc, #104]	; (8003ac0 <chk_lock+0xb4>)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d102      	bne.n	8003a6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003a68:	e007      	b.n	8003a7a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3301      	adds	r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d9d2      	bls.n	8003a20 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d109      	bne.n	8003a94 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <chk_lock+0x80>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d101      	bne.n	8003a90 <chk_lock+0x84>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e010      	b.n	8003ab2 <chk_lock+0xa6>
 8003a90:	2312      	movs	r3, #18
 8003a92:	e00e      	b.n	8003ab2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d108      	bne.n	8003aac <chk_lock+0xa0>
 8003a9a:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <chk_lock+0xb4>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	4413      	add	r3, r2
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aaa:	d101      	bne.n	8003ab0 <chk_lock+0xa4>
 8003aac:	2310      	movs	r3, #16
 8003aae:	e000      	b.n	8003ab2 <chk_lock+0xa6>
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	200000b4 	.word	0x200000b4

08003ac4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	e002      	b.n	8003ad6 <enq_lock+0x12>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	607b      	str	r3, [r7, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d806      	bhi.n	8003aea <enq_lock+0x26>
 8003adc:	4a09      	ldr	r2, [pc, #36]	; (8003b04 <enq_lock+0x40>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	4413      	add	r3, r2
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f2      	bne.n	8003ad0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	200000b4 	.word	0x200000b4

08003b08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e01f      	b.n	8003b58 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003b18:	4a41      	ldr	r2, [pc, #260]	; (8003c20 <inc_lock+0x118>)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	4413      	add	r3, r2
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d113      	bne.n	8003b52 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003b2a:	4a3d      	ldr	r2, [pc, #244]	; (8003c20 <inc_lock+0x118>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d109      	bne.n	8003b52 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003b3e:	4a38      	ldr	r2, [pc, #224]	; (8003c20 <inc_lock+0x118>)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	4413      	add	r3, r2
 8003b46:	3308      	adds	r3, #8
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d006      	beq.n	8003b60 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3301      	adds	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d9dc      	bls.n	8003b18 <inc_lock+0x10>
 8003b5e:	e000      	b.n	8003b62 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003b60:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d132      	bne.n	8003bce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e002      	b.n	8003b74 <inc_lock+0x6c>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3301      	adds	r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d806      	bhi.n	8003b88 <inc_lock+0x80>
 8003b7a:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <inc_lock+0x118>)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4413      	add	r3, r2
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f2      	bne.n	8003b6e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d101      	bne.n	8003b92 <inc_lock+0x8a>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e040      	b.n	8003c14 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4922      	ldr	r1, [pc, #136]	; (8003c20 <inc_lock+0x118>)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	440b      	add	r3, r1
 8003b9e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	491e      	ldr	r1, [pc, #120]	; (8003c20 <inc_lock+0x118>)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	440b      	add	r3, r1
 8003bac:	3304      	adds	r3, #4
 8003bae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	491a      	ldr	r1, [pc, #104]	; (8003c20 <inc_lock+0x118>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	440b      	add	r3, r1
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003bc0:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <inc_lock+0x118>)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	330c      	adds	r3, #12
 8003bca:	2200      	movs	r2, #0
 8003bcc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <inc_lock+0xe0>
 8003bd4:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <inc_lock+0x118>)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	4413      	add	r3, r2
 8003bdc:	330c      	adds	r3, #12
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <inc_lock+0xe0>
 8003be4:	2300      	movs	r3, #0
 8003be6:	e015      	b.n	8003c14 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d108      	bne.n	8003c00 <inc_lock+0xf8>
 8003bee:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <inc_lock+0x118>)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	4413      	add	r3, r2
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	e001      	b.n	8003c04 <inc_lock+0xfc>
 8003c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c04:	4906      	ldr	r1, [pc, #24]	; (8003c20 <inc_lock+0x118>)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	440b      	add	r3, r1
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3301      	adds	r3, #1
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	200000b4 	.word	0x200000b4

08003c24 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d825      	bhi.n	8003c84 <dec_lock+0x60>
		n = Files[i].ctr;
 8003c38:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <dec_lock+0x74>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	4413      	add	r3, r2
 8003c40:	330c      	adds	r3, #12
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003c46:	89fb      	ldrh	r3, [r7, #14]
 8003c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4c:	d101      	bne.n	8003c52 <dec_lock+0x2e>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003c52:	89fb      	ldrh	r3, [r7, #14]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <dec_lock+0x3a>
 8003c58:	89fb      	ldrh	r3, [r7, #14]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003c5e:	4a0e      	ldr	r2, [pc, #56]	; (8003c98 <dec_lock+0x74>)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4413      	add	r3, r2
 8003c66:	330c      	adds	r3, #12
 8003c68:	89fa      	ldrh	r2, [r7, #14]
 8003c6a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003c6c:	89fb      	ldrh	r3, [r7, #14]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <dec_lock+0x5a>
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <dec_lock+0x74>)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	4413      	add	r3, r2
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	737b      	strb	r3, [r7, #13]
 8003c82:	e001      	b.n	8003c88 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003c84:	2302      	movs	r3, #2
 8003c86:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003c88:	7b7b      	ldrb	r3, [r7, #13]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	200000b4 	.word	0x200000b4

08003c9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	e010      	b.n	8003ccc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003caa:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <clear_lock+0x44>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	4413      	add	r3, r2
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d105      	bne.n	8003cc6 <clear_lock+0x2a>
 8003cba:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <clear_lock+0x44>)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	4413      	add	r3, r2
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d9eb      	bls.n	8003caa <clear_lock+0xe>
	}
}
 8003cd2:	bf00      	nop
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	200000b4 	.word	0x200000b4

08003ce4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	78db      	ldrb	r3, [r3, #3]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d034      	beq.n	8003d62 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7858      	ldrb	r0, [r3, #1]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003d08:	2301      	movs	r3, #1
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	f7ff fd40 	bl	8003790 <disk_write>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <sync_window+0x38>
			res = FR_DISK_ERR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
 8003d1a:	e022      	b.n	8003d62 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	1ad2      	subs	r2, r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d217      	bcs.n	8003d62 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	789b      	ldrb	r3, [r3, #2]
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	e010      	b.n	8003d5c <sync_window+0x78>
					wsect += fs->fsize;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4413      	add	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	7858      	ldrb	r0, [r3, #1]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003d4e:	2301      	movs	r3, #1
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	f7ff fd1d 	bl	8003790 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d8eb      	bhi.n	8003d3a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d01b      	beq.n	8003dbc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ffad 	bl	8003ce4 <sync_window>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d113      	bne.n	8003dbc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7858      	ldrb	r0, [r3, #1]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003d9e:	2301      	movs	r3, #1
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	f7ff fcd5 	bl	8003750 <disk_read>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003dac:	f04f 33ff 	mov.w	r3, #4294967295
 8003db0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff87 	bl	8003ce4 <sync_window>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d158      	bne.n	8003e92 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d148      	bne.n	8003e7a <sync_fs+0xb2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	791b      	ldrb	r3, [r3, #4]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d144      	bne.n	8003e7a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3330      	adds	r3, #48	; 0x30
 8003df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fda9 	bl	8003952 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3330      	adds	r3, #48	; 0x30
 8003e04:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003e08:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fd38 	bl	8003882 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3330      	adds	r3, #48	; 0x30
 8003e16:	4921      	ldr	r1, [pc, #132]	; (8003e9c <sync_fs+0xd4>)
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fd4d 	bl	80038b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3330      	adds	r3, #48	; 0x30
 8003e22:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003e26:	491e      	ldr	r1, [pc, #120]	; (8003ea0 <sync_fs+0xd8>)
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fd45 	bl	80038b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3330      	adds	r3, #48	; 0x30
 8003e32:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	f7ff fd3b 	bl	80038b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3330      	adds	r3, #48	; 0x30
 8003e46:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f7ff fd31 	bl	80038b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7858      	ldrb	r0, [r3, #1]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f7ff fc8e 	bl	8003790 <disk_write>
			fs->fsi_flag = 0;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	785b      	ldrb	r3, [r3, #1]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fca4 	bl	80037d0 <disk_ioctl>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <sync_fs+0xca>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	41615252 	.word	0x41615252
 8003ea0:	61417272 	.word	0x61417272

08003ea4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	3b02      	subs	r3, #2
 8003eb2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	3b02      	subs	r3, #2
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d301      	bcc.n	8003ec4 <clust2sect+0x20>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e008      	b.n	8003ed6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	895b      	ldrh	r3, [r3, #10]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	fb03 f202 	mul.w	r2, r3, r2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	4413      	add	r3, r2
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d904      	bls.n	8003f02 <get_fat+0x20>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003f02:	2301      	movs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e08f      	b.n	8004028 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d062      	beq.n	8003fdc <get_fat+0xfa>
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	dc7c      	bgt.n	8004014 <get_fat+0x132>
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d002      	beq.n	8003f24 <get_fat+0x42>
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d042      	beq.n	8003fa8 <get_fat+0xc6>
 8003f22:	e077      	b.n	8004014 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	6a1a      	ldr	r2, [r3, #32]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	0a5b      	lsrs	r3, r3, #9
 8003f3a:	4413      	add	r3, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6938      	ldr	r0, [r7, #16]
 8003f40:	f7ff ff14 	bl	8003d6c <move_window>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d167      	bne.n	800401a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	60fa      	str	r2, [r7, #12]
 8003f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f5c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	0a5b      	lsrs	r3, r3, #9
 8003f66:	4413      	add	r3, r2
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6938      	ldr	r0, [r7, #16]
 8003f6c:	f7ff fefe 	bl	8003d6c <move_window>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d153      	bne.n	800401e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	461a      	mov	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <get_fat+0xbc>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	e002      	b.n	8003fa4 <get_fat+0xc2>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	617b      	str	r3, [r7, #20]
			break;
 8003fa6:	e03f      	b.n	8004028 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6a1a      	ldr	r2, [r3, #32]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6938      	ldr	r0, [r7, #16]
 8003fb6:	f7ff fed9 	bl	8003d6c <move_window>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d130      	bne.n	8004022 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003fce:	4413      	add	r3, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fc1b 	bl	800380c <ld_word>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	617b      	str	r3, [r7, #20]
			break;
 8003fda:	e025      	b.n	8004028 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	09db      	lsrs	r3, r3, #7
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6938      	ldr	r0, [r7, #16]
 8003fea:	f7ff febf 	bl	8003d6c <move_window>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d118      	bne.n	8004026 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004002:	4413      	add	r3, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fc19 	bl	800383c <ld_dword>
 800400a:	4603      	mov	r3, r0
 800400c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004010:	617b      	str	r3, [r7, #20]
			break;
 8004012:	e009      	b.n	8004028 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004014:	2301      	movs	r3, #1
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e006      	b.n	8004028 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800401a:	bf00      	nop
 800401c:	e004      	b.n	8004028 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004026:	bf00      	nop
		}
	}

	return val;
 8004028:	697b      	ldr	r3, [r7, #20]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004032:	b590      	push	{r4, r7, lr}
 8004034:	b089      	sub	sp, #36	; 0x24
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800403e:	2302      	movs	r3, #2
 8004040:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b01      	cmp	r3, #1
 8004046:	f240 80d2 	bls.w	80041ee <put_fat+0x1bc>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	429a      	cmp	r2, r3
 8004052:	f080 80cc 	bcs.w	80041ee <put_fat+0x1bc>
		switch (fs->fs_type) {
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b03      	cmp	r3, #3
 800405c:	f000 8096 	beq.w	800418c <put_fat+0x15a>
 8004060:	2b03      	cmp	r3, #3
 8004062:	f300 80cd 	bgt.w	8004200 <put_fat+0x1ce>
 8004066:	2b01      	cmp	r3, #1
 8004068:	d002      	beq.n	8004070 <put_fat+0x3e>
 800406a:	2b02      	cmp	r3, #2
 800406c:	d06e      	beq.n	800414c <put_fat+0x11a>
 800406e:	e0c7      	b.n	8004200 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4413      	add	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	0a5b      	lsrs	r3, r3, #9
 8004086:	4413      	add	r3, r2
 8004088:	4619      	mov	r1, r3
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff fe6e 	bl	8003d6c <move_window>
 8004090:	4603      	mov	r3, r0
 8004092:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004094:	7ffb      	ldrb	r3, [r7, #31]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 80ab 	bne.w	80041f2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	1c59      	adds	r1, r3, #1
 80040a6:	61b9      	str	r1, [r7, #24]
 80040a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ac:	4413      	add	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <put_fat+0xa4>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	b25a      	sxtb	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	b25b      	sxtb	r3, r3
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	e001      	b.n	80040da <put_fat+0xa8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1a      	ldr	r2, [r3, #32]
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	0a5b      	lsrs	r3, r3, #9
 80040ec:	4413      	add	r3, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fe3b 	bl	8003d6c <move_window>
 80040f6:	4603      	mov	r3, r0
 80040f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80040fa:	7ffb      	ldrb	r3, [r7, #31]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d17a      	bne.n	80041f6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410c:	4413      	add	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <put_fat+0xf0>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e00e      	b.n	8004140 <put_fat+0x10e>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b25b      	sxtb	r3, r3
 8004128:	f023 030f 	bic.w	r3, r3, #15
 800412c:	b25a      	sxtb	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	b25b      	sxtb	r3, r3
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	b25b      	sxtb	r3, r3
 800413a:	4313      	orrs	r3, r2
 800413c:	b25b      	sxtb	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	70da      	strb	r2, [r3, #3]
			break;
 800414a:	e059      	b.n	8004200 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	4413      	add	r3, r2
 8004156:	4619      	mov	r1, r3
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fe07 	bl	8003d6c <move_window>
 800415e:	4603      	mov	r3, r0
 8004160:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004162:	7ffb      	ldrb	r3, [r7, #31]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d148      	bne.n	80041fa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004176:	4413      	add	r3, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	b292      	uxth	r2, r2
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fb7f 	bl	8003882 <st_word>
			fs->wflag = 1;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	70da      	strb	r2, [r3, #3]
			break;
 800418a:	e039      	b.n	8004200 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	09db      	lsrs	r3, r3, #7
 8004194:	4413      	add	r3, r2
 8004196:	4619      	mov	r1, r3
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff fde7 	bl	8003d6c <move_window>
 800419e:	4603      	mov	r3, r0
 80041a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041a2:	7ffb      	ldrb	r3, [r7, #31]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d12a      	bne.n	80041fe <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80041bc:	4413      	add	r3, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fb3c 	bl	800383c <ld_dword>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80041ca:	4323      	orrs	r3, r4
 80041cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80041dc:	4413      	add	r3, r2
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fb69 	bl	80038b8 <st_dword>
			fs->wflag = 1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	70da      	strb	r2, [r3, #3]
			break;
 80041ec:	e008      	b.n	8004200 <put_fat+0x1ce>
		}
	}
 80041ee:	bf00      	nop
 80041f0:	e006      	b.n	8004200 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80041f2:	bf00      	nop
 80041f4:	e004      	b.n	8004200 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80041f6:	bf00      	nop
 80041f8:	e002      	b.n	8004200 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80041fa:	bf00      	nop
 80041fc:	e000      	b.n	8004200 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80041fe:	bf00      	nop
	return res;
 8004200:	7ffb      	ldrb	r3, [r7, #31]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3724      	adds	r7, #36	; 0x24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd90      	pop	{r4, r7, pc}

0800420a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b088      	sub	sp, #32
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d904      	bls.n	8004230 <remove_chain+0x26>
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	d301      	bcc.n	8004234 <remove_chain+0x2a>
 8004230:	2302      	movs	r3, #2
 8004232:	e04b      	b.n	80042cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00c      	beq.n	8004254 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800423a:	f04f 32ff 	mov.w	r2, #4294967295
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	69b8      	ldr	r0, [r7, #24]
 8004242:	f7ff fef6 	bl	8004032 <put_fat>
 8004246:	4603      	mov	r3, r0
 8004248:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800424a:	7ffb      	ldrb	r3, [r7, #31]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <remove_chain+0x4a>
 8004250:	7ffb      	ldrb	r3, [r7, #31]
 8004252:	e03b      	b.n	80042cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7ff fe43 	bl	8003ee2 <get_fat>
 800425c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d031      	beq.n	80042c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <remove_chain+0x64>
 800426a:	2302      	movs	r3, #2
 800426c:	e02e      	b.n	80042cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d101      	bne.n	800427a <remove_chain+0x70>
 8004276:	2301      	movs	r3, #1
 8004278:	e028      	b.n	80042cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800427a:	2200      	movs	r2, #0
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	69b8      	ldr	r0, [r7, #24]
 8004280:	f7ff fed7 	bl	8004032 <put_fat>
 8004284:	4603      	mov	r3, r0
 8004286:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004288:	7ffb      	ldrb	r3, [r7, #31]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <remove_chain+0x88>
 800428e:	7ffb      	ldrb	r3, [r7, #31]
 8004290:	e01c      	b.n	80042cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	3b02      	subs	r3, #2
 800429c:	429a      	cmp	r2, r3
 800429e:	d20b      	bcs.n	80042b8 <remove_chain+0xae>
			fs->free_clst++;
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	791b      	ldrb	r3, [r3, #4]
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d3c6      	bcc.n	8004254 <remove_chain+0x4a>
 80042c6:	e000      	b.n	80042ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80042c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <create_chain+0x2c>
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d31b      	bcc.n	8004338 <create_chain+0x64>
 8004300:	2301      	movs	r3, #1
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	e018      	b.n	8004338 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004306:	6839      	ldr	r1, [r7, #0]
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fdea 	bl	8003ee2 <get_fat>
 800430e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d801      	bhi.n	800431a <create_chain+0x46>
 8004316:	2301      	movs	r3, #1
 8004318:	e070      	b.n	80043fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d101      	bne.n	8004326 <create_chain+0x52>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	e06a      	b.n	80043fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	429a      	cmp	r2, r3
 800432e:	d201      	bcs.n	8004334 <create_chain+0x60>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	e063      	b.n	80043fc <create_chain+0x128>
		scl = clst;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	3301      	adds	r3, #1
 8004340:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	429a      	cmp	r2, r3
 800434a:	d307      	bcc.n	800435c <create_chain+0x88>
				ncl = 2;
 800434c:	2302      	movs	r3, #2
 800434e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	429a      	cmp	r2, r3
 8004356:	d901      	bls.n	800435c <create_chain+0x88>
 8004358:	2300      	movs	r3, #0
 800435a:	e04f      	b.n	80043fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800435c:	69f9      	ldr	r1, [r7, #28]
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fdbf 	bl	8003ee2 <get_fat>
 8004364:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d003      	beq.n	800437a <create_chain+0xa6>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d101      	bne.n	800437e <create_chain+0xaa>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	e03e      	b.n	80043fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	429a      	cmp	r2, r3
 8004384:	d1da      	bne.n	800433c <create_chain+0x68>
 8004386:	2300      	movs	r3, #0
 8004388:	e038      	b.n	80043fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800438a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800438c:	f04f 32ff 	mov.w	r2, #4294967295
 8004390:	69f9      	ldr	r1, [r7, #28]
 8004392:	6938      	ldr	r0, [r7, #16]
 8004394:	f7ff fe4d 	bl	8004032 <put_fat>
 8004398:	4603      	mov	r3, r0
 800439a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <create_chain+0xe2>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	6938      	ldr	r0, [r7, #16]
 80043ae:	f7ff fe40 	bl	8004032 <put_fat>
 80043b2:	4603      	mov	r3, r0
 80043b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d116      	bne.n	80043ea <create_chain+0x116>
		fs->last_clst = ncl;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	3b02      	subs	r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d804      	bhi.n	80043da <create_chain+0x106>
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	1e5a      	subs	r2, r3, #1
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	791b      	ldrb	r3, [r3, #4]
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	711a      	strb	r2, [r3, #4]
 80043e8:	e007      	b.n	80043fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d102      	bne.n	80043f6 <create_chain+0x122>
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
 80043f4:	e000      	b.n	80043f8 <create_chain+0x124>
 80043f6:	2301      	movs	r3, #1
 80043f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80043fa:	69fb      	ldr	r3, [r7, #28]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3720      	adds	r7, #32
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	3304      	adds	r3, #4
 800441a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	0a5b      	lsrs	r3, r3, #9
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	8952      	ldrh	r2, [r2, #10]
 8004424:	fbb3 f3f2 	udiv	r3, r3, r2
 8004428:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1d1a      	adds	r2, r3, #4
 800442e:	613a      	str	r2, [r7, #16]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <clmt_clust+0x3a>
 800443a:	2300      	movs	r3, #0
 800443c:	e010      	b.n	8004460 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	d307      	bcc.n	8004456 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3304      	adds	r3, #4
 8004452:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004454:	e7e9      	b.n	800442a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004456:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	4413      	add	r3, r2
}
 8004460:	4618      	mov	r0, r3
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004482:	d204      	bcs.n	800448e <dir_sdi+0x22>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <dir_sdi+0x26>
		return FR_INT_ERR;
 800448e:	2302      	movs	r3, #2
 8004490:	e063      	b.n	800455a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <dir_sdi+0x46>
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d902      	bls.n	80044b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10c      	bne.n	80044d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	8912      	ldrh	r2, [r2, #8]
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d301      	bcc.n	80044c8 <dir_sdi+0x5c>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e048      	b.n	800455a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	61da      	str	r2, [r3, #28]
 80044d0:	e029      	b.n	8004526 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	895b      	ldrh	r3, [r3, #10]
 80044d6:	025b      	lsls	r3, r3, #9
 80044d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80044da:	e019      	b.n	8004510 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6979      	ldr	r1, [r7, #20]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fcfe 	bl	8003ee2 <get_fat>
 80044e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d101      	bne.n	80044f4 <dir_sdi+0x88>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e032      	b.n	800455a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d904      	bls.n	8004504 <dir_sdi+0x98>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	429a      	cmp	r2, r3
 8004502:	d301      	bcc.n	8004508 <dir_sdi+0x9c>
 8004504:	2302      	movs	r3, #2
 8004506:	e028      	b.n	800455a <dir_sdi+0xee>
			ofs -= csz;
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	429a      	cmp	r2, r3
 8004516:	d2e1      	bcs.n	80044dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004518:	6979      	ldr	r1, [r7, #20]
 800451a:	6938      	ldr	r0, [r7, #16]
 800451c:	f7ff fcc2 	bl	8003ea4 <clust2sect>
 8004520:	4602      	mov	r2, r0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <dir_sdi+0xcc>
 8004534:	2302      	movs	r3, #2
 8004536:	e010      	b.n	800455a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	0a5b      	lsrs	r3, r3, #9
 8004540:	441a      	add	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004552:	441a      	add	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	3320      	adds	r3, #32
 8004578:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <dir_next+0x28>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004588:	d301      	bcc.n	800458e <dir_next+0x2c>
 800458a:	2304      	movs	r3, #4
 800458c:	e0aa      	b.n	80046e4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004594:	2b00      	cmp	r3, #0
 8004596:	f040 8098 	bne.w	80046ca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	8912      	ldrh	r2, [r2, #8]
 80045b4:	4293      	cmp	r3, r2
 80045b6:	f0c0 8088 	bcc.w	80046ca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	61da      	str	r2, [r3, #28]
 80045c0:	2304      	movs	r3, #4
 80045c2:	e08f      	b.n	80046e4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	0a5b      	lsrs	r3, r3, #9
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	8952      	ldrh	r2, [r2, #10]
 80045cc:	3a01      	subs	r2, #1
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d17a      	bne.n	80046ca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f7ff fc80 	bl	8003ee2 <get_fat>
 80045e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d801      	bhi.n	80045ee <dir_next+0x8c>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e07a      	b.n	80046e4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d101      	bne.n	80045fa <dir_next+0x98>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e074      	b.n	80046e4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	429a      	cmp	r2, r3
 8004602:	d358      	bcc.n	80046b6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	61da      	str	r2, [r3, #28]
 8004610:	2304      	movs	r3, #4
 8004612:	e067      	b.n	80046e4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f7ff fe59 	bl	80042d4 <create_chain>
 8004622:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <dir_next+0xcc>
 800462a:	2307      	movs	r3, #7
 800462c:	e05a      	b.n	80046e4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <dir_next+0xd6>
 8004634:	2302      	movs	r3, #2
 8004636:	e055      	b.n	80046e4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d101      	bne.n	8004644 <dir_next+0xe2>
 8004640:	2301      	movs	r3, #1
 8004642:	e04f      	b.n	80046e4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fb4d 	bl	8003ce4 <sync_window>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <dir_next+0xf2>
 8004650:	2301      	movs	r3, #1
 8004652:	e047      	b.n	80046e4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3330      	adds	r3, #48	; 0x30
 8004658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff f977 	bl	8003952 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	6979      	ldr	r1, [r7, #20]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff fc1a 	bl	8003ea4 <clust2sect>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	62da      	str	r2, [r3, #44]	; 0x2c
 8004676:	e012      	b.n	800469e <dir_next+0x13c>
						fs->wflag = 1;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff fb30 	bl	8003ce4 <sync_window>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <dir_next+0x12c>
 800468a:	2301      	movs	r3, #1
 800468c:	e02a      	b.n	80046e4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	3301      	adds	r3, #1
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	895b      	ldrh	r3, [r3, #10]
 80046a2:	461a      	mov	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d3e6      	bcc.n	8004678 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad2      	subs	r2, r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80046bc:	6979      	ldr	r1, [r7, #20]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff fbf0 	bl	8003ea4 <clust2sect>
 80046c4:	4602      	mov	r2, r0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80046fc:	2100      	movs	r1, #0
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff feb4 	bl	800446c <dir_sdi>
 8004704:	4603      	mov	r3, r0
 8004706:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d12b      	bne.n	8004766 <dir_alloc+0x7a>
		n = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4619      	mov	r1, r3
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7ff fb27 	bl	8003d6c <move_window>
 800471e:	4603      	mov	r3, r0
 8004720:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11d      	bne.n	8004764 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2be5      	cmp	r3, #229	; 0xe5
 8004730:	d004      	beq.n	800473c <dir_alloc+0x50>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d107      	bne.n	800474c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	3301      	adds	r3, #1
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d102      	bne.n	8004750 <dir_alloc+0x64>
 800474a:	e00c      	b.n	8004766 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004750:	2101      	movs	r1, #1
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff ff05 	bl	8004562 <dir_next>
 8004758:	4603      	mov	r3, r0
 800475a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0d7      	beq.n	8004712 <dir_alloc+0x26>
 8004762:	e000      	b.n	8004766 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004764:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d101      	bne.n	8004770 <dir_alloc+0x84>
 800476c:	2307      	movs	r3, #7
 800476e:	75fb      	strb	r3, [r7, #23]
	return res;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	331a      	adds	r3, #26
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff f83f 	bl	800380c <ld_word>
 800478e:	4603      	mov	r3, r0
 8004790:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b03      	cmp	r3, #3
 8004798:	d109      	bne.n	80047ae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	3314      	adds	r3, #20
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff f834 	bl	800380c <ld_word>
 80047a4:	4603      	mov	r3, r0
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80047ae:	68fb      	ldr	r3, [r7, #12]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	331a      	adds	r3, #26
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	b292      	uxth	r2, r2
 80047cc:	4611      	mov	r1, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff f857 	bl	8003882 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d109      	bne.n	80047f0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f103 0214 	add.w	r2, r3, #20
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7ff f849 	bl	8003882 <st_word>
	}
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004806:	2100      	movs	r1, #0
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff fe2f 	bl	800446c <dir_sdi>
 800480e:	4603      	mov	r3, r0
 8004810:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004812:	7dfb      	ldrb	r3, [r7, #23]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <dir_find+0x24>
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	e03e      	b.n	800489a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	4619      	mov	r1, r3
 8004822:	6938      	ldr	r0, [r7, #16]
 8004824:	f7ff faa2 	bl	8003d6c <move_window>
 8004828:	4603      	mov	r3, r0
 800482a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800482c:	7dfb      	ldrb	r3, [r7, #23]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d12f      	bne.n	8004892 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <dir_find+0x4e>
 8004840:	2304      	movs	r3, #4
 8004842:	75fb      	strb	r3, [r7, #23]
 8004844:	e028      	b.n	8004898 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	330b      	adds	r3, #11
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004852:	b2da      	uxtb	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	330b      	adds	r3, #11
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <dir_find+0x86>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a18      	ldr	r0, [r3, #32]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3324      	adds	r3, #36	; 0x24
 8004870:	220b      	movs	r2, #11
 8004872:	4619      	mov	r1, r3
 8004874:	f7ff f888 	bl	8003988 <mem_cmp>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800487e:	2100      	movs	r1, #0
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff fe6e 	bl	8004562 <dir_next>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800488a:	7dfb      	ldrb	r3, [r7, #23]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0c5      	beq.n	800481c <dir_find+0x24>
 8004890:	e002      	b.n	8004898 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004896:	bf00      	nop

	return res;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80048b0:	2101      	movs	r1, #1
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ff1a 	bl	80046ec <dir_alloc>
 80048b8:	4603      	mov	r3, r0
 80048ba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d11c      	bne.n	80048fc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4619      	mov	r1, r3
 80048c8:	68b8      	ldr	r0, [r7, #8]
 80048ca:	f7ff fa4f 	bl	8003d6c <move_window>
 80048ce:	4603      	mov	r3, r0
 80048d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d111      	bne.n	80048fc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	2220      	movs	r2, #32
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff f836 	bl	8003952 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a18      	ldr	r0, [r3, #32]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3324      	adds	r3, #36	; 0x24
 80048ee:	220b      	movs	r2, #11
 80048f0:	4619      	mov	r1, r3
 80048f2:	f7ff f80d 	bl	8003910 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2201      	movs	r2, #1
 80048fa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3324      	adds	r3, #36	; 0x24
 800491c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800491e:	220b      	movs	r2, #11
 8004920:	2120      	movs	r1, #32
 8004922:	68b8      	ldr	r0, [r7, #8]
 8004924:	f7ff f815 	bl	8003952 <mem_set>
	si = i = 0; ni = 8;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	2308      	movs	r3, #8
 8004932:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	61fa      	str	r2, [r7, #28]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004942:	7efb      	ldrb	r3, [r7, #27]
 8004944:	2b20      	cmp	r3, #32
 8004946:	d94e      	bls.n	80049e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004948:	7efb      	ldrb	r3, [r7, #27]
 800494a:	2b2f      	cmp	r3, #47	; 0x2f
 800494c:	d006      	beq.n	800495c <create_name+0x54>
 800494e:	7efb      	ldrb	r3, [r7, #27]
 8004950:	2b5c      	cmp	r3, #92	; 0x5c
 8004952:	d110      	bne.n	8004976 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004954:	e002      	b.n	800495c <create_name+0x54>
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3301      	adds	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b2f      	cmp	r3, #47	; 0x2f
 8004966:	d0f6      	beq.n	8004956 <create_name+0x4e>
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b5c      	cmp	r3, #92	; 0x5c
 8004972:	d0f0      	beq.n	8004956 <create_name+0x4e>
			break;
 8004974:	e038      	b.n	80049e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004976:	7efb      	ldrb	r3, [r7, #27]
 8004978:	2b2e      	cmp	r3, #46	; 0x2e
 800497a:	d003      	beq.n	8004984 <create_name+0x7c>
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	429a      	cmp	r2, r3
 8004982:	d30c      	bcc.n	800499e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b0b      	cmp	r3, #11
 8004988:	d002      	beq.n	8004990 <create_name+0x88>
 800498a:	7efb      	ldrb	r3, [r7, #27]
 800498c:	2b2e      	cmp	r3, #46	; 0x2e
 800498e:	d001      	beq.n	8004994 <create_name+0x8c>
 8004990:	2306      	movs	r3, #6
 8004992:	e044      	b.n	8004a1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004994:	2308      	movs	r3, #8
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	230b      	movs	r3, #11
 800499a:	617b      	str	r3, [r7, #20]
			continue;
 800499c:	e022      	b.n	80049e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800499e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	da04      	bge.n	80049b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80049a6:	7efb      	ldrb	r3, [r7, #27]
 80049a8:	3b80      	subs	r3, #128	; 0x80
 80049aa:	4a1f      	ldr	r2, [pc, #124]	; (8004a28 <create_name+0x120>)
 80049ac:	5cd3      	ldrb	r3, [r2, r3]
 80049ae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80049b0:	7efb      	ldrb	r3, [r7, #27]
 80049b2:	4619      	mov	r1, r3
 80049b4:	481d      	ldr	r0, [pc, #116]	; (8004a2c <create_name+0x124>)
 80049b6:	f7ff f80e 	bl	80039d6 <chk_chr>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <create_name+0xbc>
 80049c0:	2306      	movs	r3, #6
 80049c2:	e02c      	b.n	8004a1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80049c4:	7efb      	ldrb	r3, [r7, #27]
 80049c6:	2b60      	cmp	r3, #96	; 0x60
 80049c8:	d905      	bls.n	80049d6 <create_name+0xce>
 80049ca:	7efb      	ldrb	r3, [r7, #27]
 80049cc:	2b7a      	cmp	r3, #122	; 0x7a
 80049ce:	d802      	bhi.n	80049d6 <create_name+0xce>
 80049d0:	7efb      	ldrb	r3, [r7, #27]
 80049d2:	3b20      	subs	r3, #32
 80049d4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	613a      	str	r2, [r7, #16]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	4413      	add	r3, r2
 80049e0:	7efa      	ldrb	r2, [r7, #27]
 80049e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80049e4:	e7a6      	b.n	8004934 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80049e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	441a      	add	r2, r3
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <create_name+0xf4>
 80049f8:	2306      	movs	r3, #6
 80049fa:	e010      	b.n	8004a1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2be5      	cmp	r3, #229	; 0xe5
 8004a02:	d102      	bne.n	8004a0a <create_name+0x102>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2205      	movs	r2, #5
 8004a08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004a0a:	7efb      	ldrb	r3, [r7, #27]
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d801      	bhi.n	8004a14 <create_name+0x10c>
 8004a10:	2204      	movs	r2, #4
 8004a12:	e000      	b.n	8004a16 <create_name+0x10e>
 8004a14:	2200      	movs	r2, #0
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	330b      	adds	r3, #11
 8004a1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004a1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	080063bc 	.word	0x080063bc
 8004a2c:	080062f0 	.word	0x080062f0

08004a30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004a44:	e002      	b.n	8004a4c <follow_path+0x1c>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b2f      	cmp	r3, #47	; 0x2f
 8004a52:	d0f8      	beq.n	8004a46 <follow_path+0x16>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b5c      	cmp	r3, #92	; 0x5c
 8004a5a:	d0f4      	beq.n	8004a46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b1f      	cmp	r3, #31
 8004a68:	d80a      	bhi.n	8004a80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2280      	movs	r2, #128	; 0x80
 8004a6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004a72:	2100      	movs	r1, #0
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fcf9 	bl	800446c <dir_sdi>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	75fb      	strb	r3, [r7, #23]
 8004a7e:	e043      	b.n	8004b08 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004a80:	463b      	mov	r3, r7
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ff3f 	bl	8004908 <create_name>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d134      	bne.n	8004afe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff feaf 	bl	80047f8 <dir_find>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004aa4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004aa6:	7dfb      	ldrb	r3, [r7, #23]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d127      	bne.n	8004b02 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004ab2:	7afb      	ldrb	r3, [r7, #11]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d122      	bne.n	8004b02 <follow_path+0xd2>
 8004abc:	2305      	movs	r3, #5
 8004abe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004ac0:	e01f      	b.n	8004b02 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d11c      	bne.n	8004b06 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	799b      	ldrb	r3, [r3, #6]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004ad8:	2305      	movs	r3, #5
 8004ada:	75fb      	strb	r3, [r7, #23]
 8004adc:	e014      	b.n	8004b08 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aec:	4413      	add	r3, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff fe42 	bl	800477a <ld_clust>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004afc:	e7c0      	b.n	8004a80 <follow_path+0x50>
			if (res != FR_OK) break;
 8004afe:	bf00      	nop
 8004b00:	e002      	b.n	8004b08 <follow_path+0xd8>
				break;
 8004b02:	bf00      	nop
 8004b04:	e000      	b.n	8004b08 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004b06:	bf00      	nop
			}
		}
	}

	return res;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b087      	sub	sp, #28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d031      	beq.n	8004b8c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e002      	b.n	8004b36 <get_ldnumber+0x24>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	3301      	adds	r3, #1
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d903      	bls.n	8004b46 <get_ldnumber+0x34>
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b3a      	cmp	r3, #58	; 0x3a
 8004b44:	d1f4      	bne.n	8004b30 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b3a      	cmp	r3, #58	; 0x3a
 8004b4c:	d11c      	bne.n	8004b88 <get_ldnumber+0x76>
			tp = *path;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	60fa      	str	r2, [r7, #12]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	3b30      	subs	r3, #48	; 0x30
 8004b5e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b09      	cmp	r3, #9
 8004b64:	d80e      	bhi.n	8004b84 <get_ldnumber+0x72>
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d10a      	bne.n	8004b84 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d107      	bne.n	8004b84 <get_ldnumber+0x72>
					vol = (int)i;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	e002      	b.n	8004b8e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004b8c:	693b      	ldr	r3, [r7, #16]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	70da      	strb	r2, [r3, #3]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004bb4:	6839      	ldr	r1, [r7, #0]
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff f8d8 	bl	8003d6c <move_window>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <check_fs+0x2a>
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	e038      	b.n	8004c38 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3330      	adds	r3, #48	; 0x30
 8004bca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fe1c 	bl	800380c <ld_word>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <check_fs+0x48>
 8004be0:	2303      	movs	r3, #3
 8004be2:	e029      	b.n	8004c38 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bea:	2be9      	cmp	r3, #233	; 0xe9
 8004bec:	d009      	beq.n	8004c02 <check_fs+0x66>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bf4:	2beb      	cmp	r3, #235	; 0xeb
 8004bf6:	d11e      	bne.n	8004c36 <check_fs+0x9a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004bfe:	2b90      	cmp	r3, #144	; 0x90
 8004c00:	d119      	bne.n	8004c36 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3330      	adds	r3, #48	; 0x30
 8004c06:	3336      	adds	r3, #54	; 0x36
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fe17 	bl	800383c <ld_dword>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c14:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <check_fs+0xa4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <check_fs+0x82>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e00c      	b.n	8004c38 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3330      	adds	r3, #48	; 0x30
 8004c22:	3352      	adds	r3, #82	; 0x52
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe fe09 	bl	800383c <ld_dword>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <check_fs+0xa8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d101      	bne.n	8004c36 <check_fs+0x9a>
 8004c32:	2300      	movs	r3, #0
 8004c34:	e000      	b.n	8004c38 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004c36:	2302      	movs	r3, #2
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	00544146 	.word	0x00544146
 8004c44:	33544146 	.word	0x33544146

08004c48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b096      	sub	sp, #88	; 0x58
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff58 	bl	8004b12 <get_ldnumber>
 8004c62:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da01      	bge.n	8004c6e <find_volume+0x26>
 8004c6a:	230b      	movs	r3, #11
 8004c6c:	e22e      	b.n	80050cc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004c6e:	4aa8      	ldr	r2, [pc, #672]	; (8004f10 <find_volume+0x2c8>)
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <find_volume+0x3a>
 8004c7e:	230c      	movs	r3, #12
 8004c80:	e224      	b.n	80050cc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c86:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01a      	beq.n	8004cce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	785b      	ldrb	r3, [r3, #1]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe fd17 	bl	80036d0 <disk_status>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004ca8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10c      	bne.n	8004cce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <find_volume+0x82>
 8004cba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004cc6:	230a      	movs	r3, #10
 8004cc8:	e200      	b.n	80050cc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e1fe      	b.n	80050cc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fd0f 	bl	8003704 <disk_initialize>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004cec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e1e7      	b.n	80050cc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <find_volume+0xca>
 8004d02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004d0e:	230a      	movs	r3, #10
 8004d10:	e1dc      	b.n	80050cc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004d16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d1a:	f7ff ff3f 	bl	8004b9c <check_fs>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004d24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d14b      	bne.n	8004dc4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d30:	e01f      	b.n	8004d72 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004d40:	4413      	add	r3, r2
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	3304      	adds	r3, #4
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d006      	beq.n	8004d5c <find_volume+0x114>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	3308      	adds	r3, #8
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe fd72 	bl	800383c <ld_dword>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	e000      	b.n	8004d5e <find_volume+0x116>
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004d66:	440b      	add	r3, r1
 8004d68:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6e:	3301      	adds	r3, #1
 8004d70:	643b      	str	r3, [r7, #64]	; 0x40
 8004d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d9dc      	bls.n	8004d32 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004d78:	2300      	movs	r3, #0
 8004d7a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <find_volume+0x140>
 8004d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d84:	3b01      	subs	r3, #1
 8004d86:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004d90:	4413      	add	r3, r2
 8004d92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004d96:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <find_volume+0x162>
 8004d9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004da0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004da2:	f7ff fefb 	bl	8004b9c <check_fs>
 8004da6:	4603      	mov	r3, r0
 8004da8:	e000      	b.n	8004dac <find_volume+0x164>
 8004daa:	2303      	movs	r3, #3
 8004dac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d905      	bls.n	8004dc4 <find_volume+0x17c>
 8004db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dba:	3301      	adds	r3, #1
 8004dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8004dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d9e1      	bls.n	8004d88 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d101      	bne.n	8004dd0 <find_volume+0x188>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e17d      	b.n	80050cc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d901      	bls.n	8004ddc <find_volume+0x194>
 8004dd8:	230d      	movs	r3, #13
 8004dda:	e177      	b.n	80050cc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	3330      	adds	r3, #48	; 0x30
 8004de0:	330b      	adds	r3, #11
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe fd12 	bl	800380c <ld_word>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dee:	d001      	beq.n	8004df4 <find_volume+0x1ac>
 8004df0:	230d      	movs	r3, #13
 8004df2:	e16b      	b.n	80050cc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	3330      	adds	r3, #48	; 0x30
 8004df8:	3316      	adds	r3, #22
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe fd06 	bl	800380c <ld_word>
 8004e00:	4603      	mov	r3, r0
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <find_volume+0x1d0>
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	3330      	adds	r3, #48	; 0x30
 8004e0e:	3324      	adds	r3, #36	; 0x24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fd13 	bl	800383c <ld_dword>
 8004e16:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e1c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	789b      	ldrb	r3, [r3, #2]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d005      	beq.n	8004e3c <find_volume+0x1f4>
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	789b      	ldrb	r3, [r3, #2]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d001      	beq.n	8004e3c <find_volume+0x1f4>
 8004e38:	230d      	movs	r3, #13
 8004e3a:	e147      	b.n	80050cc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	789b      	ldrb	r3, [r3, #2]
 8004e40:	461a      	mov	r2, r3
 8004e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e44:	fb02 f303 	mul.w	r3, r2, r3
 8004e48:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	895b      	ldrh	r3, [r3, #10]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <find_volume+0x228>
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	895b      	ldrh	r3, [r3, #10]
 8004e62:	461a      	mov	r2, r3
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	895b      	ldrh	r3, [r3, #10]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <find_volume+0x22c>
 8004e70:	230d      	movs	r3, #13
 8004e72:	e12b      	b.n	80050cc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	3330      	adds	r3, #48	; 0x30
 8004e78:	3311      	adds	r3, #17
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fcc6 	bl	800380c <ld_word>
 8004e80:	4603      	mov	r3, r0
 8004e82:	461a      	mov	r2, r3
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	891b      	ldrh	r3, [r3, #8]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <find_volume+0x252>
 8004e96:	230d      	movs	r3, #13
 8004e98:	e118      	b.n	80050cc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	3330      	adds	r3, #48	; 0x30
 8004e9e:	3313      	adds	r3, #19
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fcb3 	bl	800380c <ld_word>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <find_volume+0x276>
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	3330      	adds	r3, #48	; 0x30
 8004eb4:	3320      	adds	r3, #32
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fcc0 	bl	800383c <ld_dword>
 8004ebc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	3330      	adds	r3, #48	; 0x30
 8004ec2:	330e      	adds	r3, #14
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fca1 	bl	800380c <ld_word>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004ece:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <find_volume+0x290>
 8004ed4:	230d      	movs	r3, #13
 8004ed6:	e0f9      	b.n	80050cc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004ed8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004edc:	4413      	add	r3, r2
 8004ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ee0:	8912      	ldrh	r2, [r2, #8]
 8004ee2:	0912      	lsrs	r2, r2, #4
 8004ee4:	b292      	uxth	r2, r2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d201      	bcs.n	8004ef6 <find_volume+0x2ae>
 8004ef2:	230d      	movs	r3, #13
 8004ef4:	e0ea      	b.n	80050cc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004efe:	8952      	ldrh	r2, [r2, #10]
 8004f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <find_volume+0x2cc>
 8004f0c:	230d      	movs	r3, #13
 8004f0e:	e0dd      	b.n	80050cc <find_volume+0x484>
 8004f10:	200000ac 	.word	0x200000ac
		fmt = FS_FAT32;
 8004f14:	2303      	movs	r3, #3
 8004f16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d802      	bhi.n	8004f2a <find_volume+0x2e2>
 8004f24:	2302      	movs	r3, #2
 8004f26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d802      	bhi.n	8004f3a <find_volume+0x2f2>
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	1c9a      	adds	r2, r3, #2
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f46:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004f48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4c:	441a      	add	r2, r3
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004f52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	441a      	add	r2, r3
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d11e      	bne.n	8004fa2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	3330      	adds	r3, #48	; 0x30
 8004f68:	332a      	adds	r3, #42	; 0x2a
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe fc4e 	bl	800380c <ld_word>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <find_volume+0x332>
 8004f76:	230d      	movs	r3, #13
 8004f78:	e0a8      	b.n	80050cc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	891b      	ldrh	r3, [r3, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <find_volume+0x33e>
 8004f82:	230d      	movs	r3, #13
 8004f84:	e0a2      	b.n	80050cc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	3330      	adds	r3, #48	; 0x30
 8004f8a:	332c      	adds	r3, #44	; 0x2c
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe fc55 	bl	800383c <ld_dword>
 8004f92:	4602      	mov	r2, r0
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa0:	e01f      	b.n	8004fe2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	891b      	ldrh	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <find_volume+0x366>
 8004faa:	230d      	movs	r3, #13
 8004fac:	e08e      	b.n	80050cc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	6a1a      	ldr	r2, [r3, #32]
 8004fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb4:	441a      	add	r2, r3
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004fba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d103      	bne.n	8004fca <find_volume+0x382>
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	e00a      	b.n	8004fe0 <find_volume+0x398>
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	695a      	ldr	r2, [r3, #20]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	4413      	add	r3, r2
 8004fd4:	085a      	lsrs	r2, r3, #1
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004fe0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004fec:	0a5b      	lsrs	r3, r3, #9
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d201      	bcs.n	8004ff6 <find_volume+0x3ae>
 8004ff2:	230d      	movs	r3, #13
 8004ff4:	e06a      	b.n	80050cc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffc:	611a      	str	r2, [r3, #16]
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	2280      	movs	r2, #128	; 0x80
 800500a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800500c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005010:	2b03      	cmp	r3, #3
 8005012:	d149      	bne.n	80050a8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	3330      	adds	r3, #48	; 0x30
 8005018:	3330      	adds	r3, #48	; 0x30
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fbf6 	bl	800380c <ld_word>
 8005020:	4603      	mov	r3, r0
 8005022:	2b01      	cmp	r3, #1
 8005024:	d140      	bne.n	80050a8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005028:	3301      	adds	r3, #1
 800502a:	4619      	mov	r1, r3
 800502c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800502e:	f7fe fe9d 	bl	8003d6c <move_window>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d137      	bne.n	80050a8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	2200      	movs	r2, #0
 800503c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	3330      	adds	r3, #48	; 0x30
 8005042:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005046:	4618      	mov	r0, r3
 8005048:	f7fe fbe0 	bl	800380c <ld_word>
 800504c:	4603      	mov	r3, r0
 800504e:	461a      	mov	r2, r3
 8005050:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005054:	429a      	cmp	r2, r3
 8005056:	d127      	bne.n	80050a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	3330      	adds	r3, #48	; 0x30
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe fbed 	bl	800383c <ld_dword>
 8005062:	4603      	mov	r3, r0
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <find_volume+0x48c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d11e      	bne.n	80050a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	3330      	adds	r3, #48	; 0x30
 800506e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fbe2 	bl	800383c <ld_dword>
 8005078:	4603      	mov	r3, r0
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <find_volume+0x490>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d113      	bne.n	80050a8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	3330      	adds	r3, #48	; 0x30
 8005084:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fbd7 	bl	800383c <ld_dword>
 800508e:	4602      	mov	r2, r0
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	3330      	adds	r3, #48	; 0x30
 8005098:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe fbcd 	bl	800383c <ld_dword>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80050ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <find_volume+0x494>)
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	4b08      	ldr	r3, [pc, #32]	; (80050dc <find_volume+0x494>)
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	4b07      	ldr	r3, [pc, #28]	; (80050dc <find_volume+0x494>)
 80050be:	881a      	ldrh	r2, [r3, #0]
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80050c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050c6:	f7fe fde9 	bl	8003c9c <clear_lock>
#endif
	return FR_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3758      	adds	r7, #88	; 0x58
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	41615252 	.word	0x41615252
 80050d8:	61417272 	.word	0x61417272
 80050dc:	200000b0 	.word	0x200000b0

080050e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80050ea:	2309      	movs	r3, #9
 80050ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01c      	beq.n	800512e <validate+0x4e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d018      	beq.n	800512e <validate+0x4e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <validate+0x4e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	889a      	ldrh	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	88db      	ldrh	r3, [r3, #6]
 8005110:	429a      	cmp	r2, r3
 8005112:	d10c      	bne.n	800512e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe fad8 	bl	80036d0 <disk_status>
 8005120:	4603      	mov	r3, r0
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <validate+0x4e>
			res = FR_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d102      	bne.n	800513a <validate+0x5a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	e000      	b.n	800513c <validate+0x5c>
 800513a:	2300      	movs	r3, #0
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	6013      	str	r3, [r2, #0]
	return res;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800515e:	f107 0310 	add.w	r3, r7, #16
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff fcd5 	bl	8004b12 <get_ldnumber>
 8005168:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	2b00      	cmp	r3, #0
 800516e:	da01      	bge.n	8005174 <f_mount+0x28>
 8005170:	230b      	movs	r3, #11
 8005172:	e02b      	b.n	80051cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005174:	4a17      	ldr	r2, [pc, #92]	; (80051d4 <f_mount+0x88>)
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800517c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005184:	69b8      	ldr	r0, [r7, #24]
 8005186:	f7fe fd89 	bl	8003c9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	490d      	ldr	r1, [pc, #52]	; (80051d4 <f_mount+0x88>)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <f_mount+0x66>
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d001      	beq.n	80051b6 <f_mount+0x6a>
 80051b2:	2300      	movs	r3, #0
 80051b4:	e00a      	b.n	80051cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80051b6:	f107 010c 	add.w	r1, r7, #12
 80051ba:	f107 0308 	add.w	r3, r7, #8
 80051be:	2200      	movs	r2, #0
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fd41 	bl	8004c48 <find_volume>
 80051c6:	4603      	mov	r3, r0
 80051c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	200000ac 	.word	0x200000ac

080051d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b098      	sub	sp, #96	; 0x60
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <f_open+0x18>
 80051ec:	2309      	movs	r3, #9
 80051ee:	e1ad      	b.n	800554c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80051f8:	79fa      	ldrb	r2, [r7, #7]
 80051fa:	f107 0110 	add.w	r1, r7, #16
 80051fe:	f107 0308 	add.w	r3, r7, #8
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fd20 	bl	8004c48 <find_volume>
 8005208:	4603      	mov	r3, r0
 800520a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800520e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 8191 	bne.w	800553a <f_open+0x362>
		dj.obj.fs = fs;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	f107 0314 	add.w	r3, r7, #20
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fc03 	bl	8004a30 <follow_path>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005230:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11a      	bne.n	800526e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005238:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800523c:	b25b      	sxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	da03      	bge.n	800524a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005242:	2306      	movs	r3, #6
 8005244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005248:	e011      	b.n	800526e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	4611      	mov	r1, r2
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe fbd2 	bl	8003a0c <chk_lock>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	f003 031c 	and.w	r3, r3, #28
 8005274:	2b00      	cmp	r3, #0
 8005276:	d07f      	beq.n	8005378 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800527c:	2b00      	cmp	r3, #0
 800527e:	d017      	beq.n	80052b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005284:	2b04      	cmp	r3, #4
 8005286:	d10e      	bne.n	80052a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005288:	f7fe fc1c 	bl	8003ac4 <enq_lock>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d006      	beq.n	80052a0 <f_open+0xc8>
 8005292:	f107 0314 	add.w	r3, r7, #20
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fb03 	bl	80048a2 <dir_register>
 800529c:	4603      	mov	r3, r0
 800529e:	e000      	b.n	80052a2 <f_open+0xca>
 80052a0:	2312      	movs	r3, #18
 80052a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	f043 0308 	orr.w	r3, r3, #8
 80052ac:	71fb      	strb	r3, [r7, #7]
 80052ae:	e010      	b.n	80052d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80052b0:	7ebb      	ldrb	r3, [r7, #26]
 80052b2:	f003 0311 	and.w	r3, r3, #17
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <f_open+0xea>
					res = FR_DENIED;
 80052ba:	2307      	movs	r3, #7
 80052bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80052c0:	e007      	b.n	80052d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <f_open+0xfa>
 80052cc:	2308      	movs	r3, #8
 80052ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80052d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d168      	bne.n	80053ac <f_open+0x1d4>
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d063      	beq.n	80053ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80052e4:	f7fd fcb2 	bl	8002c4c <get_fattime>
 80052e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	330e      	adds	r3, #14
 80052ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fe fae1 	bl	80038b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80052f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f8:	3316      	adds	r3, #22
 80052fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fadb 	bl	80038b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005304:	330b      	adds	r3, #11
 8005306:	2220      	movs	r2, #32
 8005308:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800530e:	4611      	mov	r1, r2
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fa32 	bl	800477a <ld_clust>
 8005316:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800531c:	2200      	movs	r2, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff fa4a 	bl	80047b8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005326:	331c      	adds	r3, #28
 8005328:	2100      	movs	r1, #0
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe fac4 	bl	80038b8 <st_dword>
					fs->wflag = 1;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2201      	movs	r2, #1
 8005334:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d037      	beq.n	80053ac <f_open+0x1d4>
						dw = fs->winsect;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005342:	f107 0314 	add.w	r3, r7, #20
 8005346:	2200      	movs	r2, #0
 8005348:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe ff5d 	bl	800420a <remove_chain>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800535a:	2b00      	cmp	r3, #0
 800535c:	d126      	bne.n	80053ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005362:	4618      	mov	r0, r3
 8005364:	f7fe fd02 	bl	8003d6c <move_window>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005372:	3a01      	subs	r2, #1
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	e019      	b.n	80053ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800537c:	2b00      	cmp	r3, #0
 800537e:	d115      	bne.n	80053ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005380:	7ebb      	ldrb	r3, [r7, #26]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <f_open+0x1ba>
					res = FR_NO_FILE;
 800538a:	2304      	movs	r3, #4
 800538c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005390:	e00c      	b.n	80053ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <f_open+0x1d4>
 800539c:	7ebb      	ldrb	r3, [r7, #26]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <f_open+0x1d4>
						res = FR_DENIED;
 80053a6:	2307      	movs	r3, #7
 80053a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80053ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d128      	bne.n	8005406 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80053ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	f023 0301 	bic.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf14      	ite	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	2300      	moveq	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	f107 0314 	add.w	r3, r7, #20
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe fb8b 	bl	8003b08 <inc_lock>
 80053f2:	4602      	mov	r2, r0
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <f_open+0x22e>
 8005400:	2302      	movs	r3, #2
 8005402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800540a:	2b00      	cmp	r3, #0
 800540c:	f040 8095 	bne.w	800553a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff f9af 	bl	800477a <ld_clust>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005424:	331c      	adds	r3, #28
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fa08 	bl	800383c <ld_dword>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	88da      	ldrh	r2, [r3, #6]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	79fa      	ldrb	r2, [r7, #7]
 800544a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3330      	adds	r3, #48	; 0x30
 8005462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe fa72 	bl	8003952 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d060      	beq.n	800553a <f_open+0x362>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d05c      	beq.n	800553a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	895b      	ldrh	r3, [r3, #10]
 800548c:	025b      	lsls	r3, r3, #9
 800548e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	657b      	str	r3, [r7, #84]	; 0x54
 800549c:	e016      	b.n	80054cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe fd1d 	bl	8003ee2 <get_fat>
 80054a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80054aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d802      	bhi.n	80054b6 <f_open+0x2de>
 80054b0:	2302      	movs	r3, #2
 80054b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80054b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d102      	bne.n	80054c4 <f_open+0x2ec>
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80054c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	657b      	str	r3, [r7, #84]	; 0x54
 80054cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d103      	bne.n	80054dc <f_open+0x304>
 80054d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d8:	429a      	cmp	r2, r3
 80054da:	d8e0      	bhi.n	800549e <f_open+0x2c6>
				}
				fp->clust = clst;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80054e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d127      	bne.n	800553a <f_open+0x362>
 80054ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d022      	beq.n	800553a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fe fcd3 	bl	8003ea4 <clust2sect>
 80054fe:	6478      	str	r0, [r7, #68]	; 0x44
 8005500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <f_open+0x336>
						res = FR_INT_ERR;
 8005506:	2302      	movs	r3, #2
 8005508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800550c:	e015      	b.n	800553a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800550e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005510:	0a5a      	lsrs	r2, r3, #9
 8005512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005514:	441a      	add	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	7858      	ldrb	r0, [r3, #1]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a1a      	ldr	r2, [r3, #32]
 8005528:	2301      	movs	r3, #1
 800552a:	f7fe f911 	bl	8003750 <disk_read>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <f_open+0x362>
 8005534:	2301      	movs	r3, #1
 8005536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800553a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <f_open+0x370>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800554c:	4618      	mov	r0, r3
 800554e:	3760      	adds	r7, #96	; 0x60
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08e      	sub	sp, #56	; 0x38
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f107 0214 	add.w	r2, r7, #20
 8005572:	4611      	mov	r1, r2
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fdb3 	bl	80050e0 <validate>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005584:	2b00      	cmp	r3, #0
 8005586:	d107      	bne.n	8005598 <f_read+0x44>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	7d5b      	ldrb	r3, [r3, #21]
 800558c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005590:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <f_read+0x4a>
 8005598:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800559c:	e115      	b.n	80057ca <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	7d1b      	ldrb	r3, [r3, #20]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <f_read+0x5a>
 80055aa:	2307      	movs	r3, #7
 80055ac:	e10d      	b.n	80057ca <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	429a      	cmp	r2, r3
 80055c0:	f240 80fe 	bls.w	80057c0 <f_read+0x26c>
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80055c8:	e0fa      	b.n	80057c0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 80c6 	bne.w	8005764 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	0a5b      	lsrs	r3, r3, #9
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	8952      	ldrh	r2, [r2, #10]
 80055e2:	3a01      	subs	r2, #1
 80055e4:	4013      	ands	r3, r2
 80055e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d12f      	bne.n	800564e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	633b      	str	r3, [r7, #48]	; 0x30
 80055fc:	e013      	b.n	8005626 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	4619      	mov	r1, r3
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7fe fef9 	bl	8004404 <clmt_clust>
 8005612:	6338      	str	r0, [r7, #48]	; 0x30
 8005614:	e007      	b.n	8005626 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	4619      	mov	r1, r3
 800561e:	4610      	mov	r0, r2
 8005620:	f7fe fc5f 	bl	8003ee2 <get_fat>
 8005624:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	2b01      	cmp	r3, #1
 800562a:	d804      	bhi.n	8005636 <f_read+0xe2>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2202      	movs	r2, #2
 8005630:	755a      	strb	r2, [r3, #21]
 8005632:	2302      	movs	r3, #2
 8005634:	e0c9      	b.n	80057ca <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d104      	bne.n	8005648 <f_read+0xf4>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	755a      	strb	r2, [r3, #21]
 8005644:	2301      	movs	r3, #1
 8005646:	e0c0      	b.n	80057ca <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f7fe fc24 	bl	8003ea4 <clust2sect>
 800565c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <f_read+0x11a>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2202      	movs	r2, #2
 8005668:	755a      	strb	r2, [r3, #21]
 800566a:	2302      	movs	r3, #2
 800566c:	e0ad      	b.n	80057ca <f_read+0x276>
			sect += csect;
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	4413      	add	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	0a5b      	lsrs	r3, r3, #9
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d039      	beq.n	80056f6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	4413      	add	r3, r2
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	8952      	ldrh	r2, [r2, #10]
 800568c:	4293      	cmp	r3, r2
 800568e:	d905      	bls.n	800569c <f_read+0x148>
					cc = fs->csize - csect;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	895b      	ldrh	r3, [r3, #10]
 8005694:	461a      	mov	r2, r3
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	7858      	ldrb	r0, [r3, #1]
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056a6:	f7fe f853 	bl	8003750 <disk_read>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <f_read+0x166>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	755a      	strb	r2, [r3, #21]
 80056b6:	2301      	movs	r3, #1
 80056b8:	e087      	b.n	80057ca <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	7d1b      	ldrb	r3, [r3, #20]
 80056be:	b25b      	sxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	da14      	bge.n	80056ee <f_read+0x19a>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1a      	ldr	r2, [r3, #32]
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d90d      	bls.n	80056ee <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1a      	ldr	r2, [r3, #32]
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	025b      	lsls	r3, r3, #9
 80056dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056de:	18d0      	adds	r0, r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3330      	adds	r3, #48	; 0x30
 80056e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e8:	4619      	mov	r1, r3
 80056ea:	f7fe f911 	bl	8003910 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	025b      	lsls	r3, r3, #9
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80056f4:	e050      	b.n	8005798 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d02e      	beq.n	800575e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	7d1b      	ldrb	r3, [r3, #20]
 8005704:	b25b      	sxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	da18      	bge.n	800573c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	7858      	ldrb	r0, [r3, #1]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1a      	ldr	r2, [r3, #32]
 8005718:	2301      	movs	r3, #1
 800571a:	f7fe f839 	bl	8003790 <disk_write>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <f_read+0x1da>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	755a      	strb	r2, [r3, #21]
 800572a:	2301      	movs	r3, #1
 800572c:	e04d      	b.n	80057ca <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	7d1b      	ldrb	r3, [r3, #20]
 8005732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	7858      	ldrb	r0, [r3, #1]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005746:	2301      	movs	r3, #1
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	f7fe f801 	bl	8003750 <disk_read>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <f_read+0x20a>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	755a      	strb	r2, [r3, #21]
 800575a:	2301      	movs	r3, #1
 800575c:	e035      	b.n	80057ca <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	429a      	cmp	r2, r3
 8005778:	d901      	bls.n	800577e <f_read+0x22a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578c:	4413      	add	r3, r2
 800578e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005790:	4619      	mov	r1, r3
 8005792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005794:	f7fe f8bc 	bl	8003910 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	4413      	add	r3, r2
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	441a      	add	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	619a      	str	r2, [r3, #24]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	441a      	add	r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f47f af01 	bne.w	80055ca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3738      	adds	r7, #56	; 0x38
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f107 0208 	add.w	r2, r7, #8
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fc7c 	bl	80050e0 <validate>
 80057e8:	4603      	mov	r3, r0
 80057ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d168      	bne.n	80058c4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	7d1b      	ldrb	r3, [r3, #20]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d062      	beq.n	80058c4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	7d1b      	ldrb	r3, [r3, #20]
 8005802:	b25b      	sxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	da15      	bge.n	8005834 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	7858      	ldrb	r0, [r3, #1]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1a      	ldr	r2, [r3, #32]
 8005816:	2301      	movs	r3, #1
 8005818:	f7fd ffba 	bl	8003790 <disk_write>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <f_sync+0x54>
 8005822:	2301      	movs	r3, #1
 8005824:	e04f      	b.n	80058c6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7d1b      	ldrb	r3, [r3, #20]
 800582a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800582e:	b2da      	uxtb	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005834:	f7fd fa0a 	bl	8002c4c <get_fattime>
 8005838:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	4619      	mov	r1, r3
 8005842:	4610      	mov	r0, r2
 8005844:	f7fe fa92 	bl	8003d6c <move_window>
 8005848:	4603      	mov	r3, r0
 800584a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d138      	bne.n	80058c4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	330b      	adds	r3, #11
 800585c:	781a      	ldrb	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	330b      	adds	r3, #11
 8005862:	f042 0220 	orr.w	r2, r2, #32
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	461a      	mov	r2, r3
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	f7fe ff9f 	bl	80047b8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f103 021c 	add.w	r2, r3, #28
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f7fe f816 	bl	80038b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3316      	adds	r3, #22
 8005890:	6939      	ldr	r1, [r7, #16]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe f810 	bl	80038b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3312      	adds	r3, #18
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fd ffef 	bl	8003882 <st_word>
					fs->wflag = 1;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2201      	movs	r2, #1
 80058a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe fa8b 	bl	8003dc8 <sync_fs>
 80058b2:	4603      	mov	r3, r0
 80058b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	7d1b      	ldrb	r3, [r3, #20]
 80058ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff ff7b 	bl	80057d2 <f_sync>
 80058dc:	4603      	mov	r3, r0
 80058de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d118      	bne.n	8005918 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f107 0208 	add.w	r2, r7, #8
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fbf6 	bl	80050e0 <validate>
 80058f4:	4603      	mov	r3, r0
 80058f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10c      	bne.n	8005918 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe f98e 	bl	8003c24 <dec_lock>
 8005908:	4603      	mov	r3, r0
 800590a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005932:	2301      	movs	r3, #1
 8005934:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800593a:	4b1f      	ldr	r3, [pc, #124]	; (80059b8 <FATFS_LinkDriverEx+0x94>)
 800593c:	7a5b      	ldrb	r3, [r3, #9]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d131      	bne.n	80059a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005944:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <FATFS_LinkDriverEx+0x94>)
 8005946:	7a5b      	ldrb	r3, [r3, #9]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <FATFS_LinkDriverEx+0x94>)
 800594e:	2100      	movs	r1, #0
 8005950:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005952:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <FATFS_LinkDriverEx+0x94>)
 8005954:	7a5b      	ldrb	r3, [r3, #9]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <FATFS_LinkDriverEx+0x94>)
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005962:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <FATFS_LinkDriverEx+0x94>)
 8005964:	7a5b      	ldrb	r3, [r3, #9]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <FATFS_LinkDriverEx+0x94>)
 800596c:	4413      	add	r3, r2
 800596e:	79fa      	ldrb	r2, [r7, #7]
 8005970:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <FATFS_LinkDriverEx+0x94>)
 8005974:	7a5b      	ldrb	r3, [r3, #9]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	b2d1      	uxtb	r1, r2
 800597c:	4a0e      	ldr	r2, [pc, #56]	; (80059b8 <FATFS_LinkDriverEx+0x94>)
 800597e:	7251      	strb	r1, [r2, #9]
 8005980:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005982:	7dbb      	ldrb	r3, [r7, #22]
 8005984:	3330      	adds	r3, #48	; 0x30
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	3301      	adds	r3, #1
 8005990:	223a      	movs	r2, #58	; 0x3a
 8005992:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	3302      	adds	r3, #2
 8005998:	222f      	movs	r2, #47	; 0x2f
 800599a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	3303      	adds	r3, #3
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	200000d4 	.word	0x200000d4

080059bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80059c6:	2200      	movs	r2, #0
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7ff ffaa 	bl	8005924 <FATFS_LinkDriverEx>
 80059d0:	4603      	mov	r3, r0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <__errno>:
 80059dc:	4b01      	ldr	r3, [pc, #4]	; (80059e4 <__errno+0x8>)
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000024 	.word	0x20000024

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4d0d      	ldr	r5, [pc, #52]	; (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	; (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2600      	movs	r6, #0
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4d0b      	ldr	r5, [pc, #44]	; (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	; (8005a2c <__libc_init_array+0x44>)
 80059fc:	f000 fc4e 	bl	800629c <_init>
 8005a00:	1b64      	subs	r4, r4, r5
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2600      	movs	r6, #0
 8005a06:	42a6      	cmp	r6, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a10:	4798      	blx	r3
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1a:	4798      	blx	r3
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08006478 	.word	0x08006478
 8005a24:	08006478 	.word	0x08006478
 8005a28:	08006478 	.word	0x08006478
 8005a2c:	0800647c 	.word	0x0800647c

08005a30 <memset>:
 8005a30:	4402      	add	r2, r0
 8005a32:	4603      	mov	r3, r0
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d100      	bne.n	8005a3a <memset+0xa>
 8005a38:	4770      	bx	lr
 8005a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3e:	e7f9      	b.n	8005a34 <memset+0x4>

08005a40 <siprintf>:
 8005a40:	b40e      	push	{r1, r2, r3}
 8005a42:	b500      	push	{lr}
 8005a44:	b09c      	sub	sp, #112	; 0x70
 8005a46:	ab1d      	add	r3, sp, #116	; 0x74
 8005a48:	9002      	str	r0, [sp, #8]
 8005a4a:	9006      	str	r0, [sp, #24]
 8005a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a50:	4809      	ldr	r0, [pc, #36]	; (8005a78 <siprintf+0x38>)
 8005a52:	9107      	str	r1, [sp, #28]
 8005a54:	9104      	str	r1, [sp, #16]
 8005a56:	4909      	ldr	r1, [pc, #36]	; (8005a7c <siprintf+0x3c>)
 8005a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a5c:	9105      	str	r1, [sp, #20]
 8005a5e:	6800      	ldr	r0, [r0, #0]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	a902      	add	r1, sp, #8
 8005a64:	f000 f868 	bl	8005b38 <_svfiprintf_r>
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	b01c      	add	sp, #112	; 0x70
 8005a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a74:	b003      	add	sp, #12
 8005a76:	4770      	bx	lr
 8005a78:	20000024 	.word	0x20000024
 8005a7c:	ffff0208 	.word	0xffff0208

08005a80 <__ssputs_r>:
 8005a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a84:	688e      	ldr	r6, [r1, #8]
 8005a86:	429e      	cmp	r6, r3
 8005a88:	4682      	mov	sl, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	4690      	mov	r8, r2
 8005a8e:	461f      	mov	r7, r3
 8005a90:	d838      	bhi.n	8005b04 <__ssputs_r+0x84>
 8005a92:	898a      	ldrh	r2, [r1, #12]
 8005a94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a98:	d032      	beq.n	8005b00 <__ssputs_r+0x80>
 8005a9a:	6825      	ldr	r5, [r4, #0]
 8005a9c:	6909      	ldr	r1, [r1, #16]
 8005a9e:	eba5 0901 	sub.w	r9, r5, r1
 8005aa2:	6965      	ldr	r5, [r4, #20]
 8005aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005aa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005aac:	3301      	adds	r3, #1
 8005aae:	444b      	add	r3, r9
 8005ab0:	106d      	asrs	r5, r5, #1
 8005ab2:	429d      	cmp	r5, r3
 8005ab4:	bf38      	it	cc
 8005ab6:	461d      	movcc	r5, r3
 8005ab8:	0553      	lsls	r3, r2, #21
 8005aba:	d531      	bpl.n	8005b20 <__ssputs_r+0xa0>
 8005abc:	4629      	mov	r1, r5
 8005abe:	f000 fb47 	bl	8006150 <_malloc_r>
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	b950      	cbnz	r0, 8005adc <__ssputs_r+0x5c>
 8005ac6:	230c      	movs	r3, #12
 8005ac8:	f8ca 3000 	str.w	r3, [sl]
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005adc:	6921      	ldr	r1, [r4, #16]
 8005ade:	464a      	mov	r2, r9
 8005ae0:	f000 fabe 	bl	8006060 <memcpy>
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aee:	81a3      	strh	r3, [r4, #12]
 8005af0:	6126      	str	r6, [r4, #16]
 8005af2:	6165      	str	r5, [r4, #20]
 8005af4:	444e      	add	r6, r9
 8005af6:	eba5 0509 	sub.w	r5, r5, r9
 8005afa:	6026      	str	r6, [r4, #0]
 8005afc:	60a5      	str	r5, [r4, #8]
 8005afe:	463e      	mov	r6, r7
 8005b00:	42be      	cmp	r6, r7
 8005b02:	d900      	bls.n	8005b06 <__ssputs_r+0x86>
 8005b04:	463e      	mov	r6, r7
 8005b06:	4632      	mov	r2, r6
 8005b08:	6820      	ldr	r0, [r4, #0]
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	f000 fab6 	bl	800607c <memmove>
 8005b10:	68a3      	ldr	r3, [r4, #8]
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	1b9b      	subs	r3, r3, r6
 8005b16:	4432      	add	r2, r6
 8005b18:	60a3      	str	r3, [r4, #8]
 8005b1a:	6022      	str	r2, [r4, #0]
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e7db      	b.n	8005ad8 <__ssputs_r+0x58>
 8005b20:	462a      	mov	r2, r5
 8005b22:	f000 fb6f 	bl	8006204 <_realloc_r>
 8005b26:	4606      	mov	r6, r0
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d1e1      	bne.n	8005af0 <__ssputs_r+0x70>
 8005b2c:	6921      	ldr	r1, [r4, #16]
 8005b2e:	4650      	mov	r0, sl
 8005b30:	f000 fabe 	bl	80060b0 <_free_r>
 8005b34:	e7c7      	b.n	8005ac6 <__ssputs_r+0x46>
	...

08005b38 <_svfiprintf_r>:
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	4698      	mov	r8, r3
 8005b3e:	898b      	ldrh	r3, [r1, #12]
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	b09d      	sub	sp, #116	; 0x74
 8005b44:	4607      	mov	r7, r0
 8005b46:	460d      	mov	r5, r1
 8005b48:	4614      	mov	r4, r2
 8005b4a:	d50e      	bpl.n	8005b6a <_svfiprintf_r+0x32>
 8005b4c:	690b      	ldr	r3, [r1, #16]
 8005b4e:	b963      	cbnz	r3, 8005b6a <_svfiprintf_r+0x32>
 8005b50:	2140      	movs	r1, #64	; 0x40
 8005b52:	f000 fafd 	bl	8006150 <_malloc_r>
 8005b56:	6028      	str	r0, [r5, #0]
 8005b58:	6128      	str	r0, [r5, #16]
 8005b5a:	b920      	cbnz	r0, 8005b66 <_svfiprintf_r+0x2e>
 8005b5c:	230c      	movs	r3, #12
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	e0d1      	b.n	8005d0a <_svfiprintf_r+0x1d2>
 8005b66:	2340      	movs	r3, #64	; 0x40
 8005b68:	616b      	str	r3, [r5, #20]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6e:	2320      	movs	r3, #32
 8005b70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b78:	2330      	movs	r3, #48	; 0x30
 8005b7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d24 <_svfiprintf_r+0x1ec>
 8005b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b82:	f04f 0901 	mov.w	r9, #1
 8005b86:	4623      	mov	r3, r4
 8005b88:	469a      	mov	sl, r3
 8005b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b8e:	b10a      	cbz	r2, 8005b94 <_svfiprintf_r+0x5c>
 8005b90:	2a25      	cmp	r2, #37	; 0x25
 8005b92:	d1f9      	bne.n	8005b88 <_svfiprintf_r+0x50>
 8005b94:	ebba 0b04 	subs.w	fp, sl, r4
 8005b98:	d00b      	beq.n	8005bb2 <_svfiprintf_r+0x7a>
 8005b9a:	465b      	mov	r3, fp
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	f7ff ff6d 	bl	8005a80 <__ssputs_r>
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f000 80aa 	beq.w	8005d00 <_svfiprintf_r+0x1c8>
 8005bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bae:	445a      	add	r2, fp
 8005bb0:	9209      	str	r2, [sp, #36]	; 0x24
 8005bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 80a2 	beq.w	8005d00 <_svfiprintf_r+0x1c8>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bc6:	f10a 0a01 	add.w	sl, sl, #1
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	9307      	str	r3, [sp, #28]
 8005bce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bd2:	931a      	str	r3, [sp, #104]	; 0x68
 8005bd4:	4654      	mov	r4, sl
 8005bd6:	2205      	movs	r2, #5
 8005bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bdc:	4851      	ldr	r0, [pc, #324]	; (8005d24 <_svfiprintf_r+0x1ec>)
 8005bde:	f7fa faff 	bl	80001e0 <memchr>
 8005be2:	9a04      	ldr	r2, [sp, #16]
 8005be4:	b9d8      	cbnz	r0, 8005c1e <_svfiprintf_r+0xe6>
 8005be6:	06d0      	lsls	r0, r2, #27
 8005be8:	bf44      	itt	mi
 8005bea:	2320      	movmi	r3, #32
 8005bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bf0:	0711      	lsls	r1, r2, #28
 8005bf2:	bf44      	itt	mi
 8005bf4:	232b      	movmi	r3, #43	; 0x2b
 8005bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8005bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8005c00:	d015      	beq.n	8005c2e <_svfiprintf_r+0xf6>
 8005c02:	9a07      	ldr	r2, [sp, #28]
 8005c04:	4654      	mov	r4, sl
 8005c06:	2000      	movs	r0, #0
 8005c08:	f04f 0c0a 	mov.w	ip, #10
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c12:	3b30      	subs	r3, #48	; 0x30
 8005c14:	2b09      	cmp	r3, #9
 8005c16:	d94e      	bls.n	8005cb6 <_svfiprintf_r+0x17e>
 8005c18:	b1b0      	cbz	r0, 8005c48 <_svfiprintf_r+0x110>
 8005c1a:	9207      	str	r2, [sp, #28]
 8005c1c:	e014      	b.n	8005c48 <_svfiprintf_r+0x110>
 8005c1e:	eba0 0308 	sub.w	r3, r0, r8
 8005c22:	fa09 f303 	lsl.w	r3, r9, r3
 8005c26:	4313      	orrs	r3, r2
 8005c28:	9304      	str	r3, [sp, #16]
 8005c2a:	46a2      	mov	sl, r4
 8005c2c:	e7d2      	b.n	8005bd4 <_svfiprintf_r+0x9c>
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	1d19      	adds	r1, r3, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	9103      	str	r1, [sp, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bfbb      	ittet	lt
 8005c3a:	425b      	neglt	r3, r3
 8005c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c40:	9307      	strge	r3, [sp, #28]
 8005c42:	9307      	strlt	r3, [sp, #28]
 8005c44:	bfb8      	it	lt
 8005c46:	9204      	strlt	r2, [sp, #16]
 8005c48:	7823      	ldrb	r3, [r4, #0]
 8005c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005c4c:	d10c      	bne.n	8005c68 <_svfiprintf_r+0x130>
 8005c4e:	7863      	ldrb	r3, [r4, #1]
 8005c50:	2b2a      	cmp	r3, #42	; 0x2a
 8005c52:	d135      	bne.n	8005cc0 <_svfiprintf_r+0x188>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	1d1a      	adds	r2, r3, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	9203      	str	r2, [sp, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bfb8      	it	lt
 8005c60:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c64:	3402      	adds	r4, #2
 8005c66:	9305      	str	r3, [sp, #20]
 8005c68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d34 <_svfiprintf_r+0x1fc>
 8005c6c:	7821      	ldrb	r1, [r4, #0]
 8005c6e:	2203      	movs	r2, #3
 8005c70:	4650      	mov	r0, sl
 8005c72:	f7fa fab5 	bl	80001e0 <memchr>
 8005c76:	b140      	cbz	r0, 8005c8a <_svfiprintf_r+0x152>
 8005c78:	2340      	movs	r3, #64	; 0x40
 8005c7a:	eba0 000a 	sub.w	r0, r0, sl
 8005c7e:	fa03 f000 	lsl.w	r0, r3, r0
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	4303      	orrs	r3, r0
 8005c86:	3401      	adds	r4, #1
 8005c88:	9304      	str	r3, [sp, #16]
 8005c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c8e:	4826      	ldr	r0, [pc, #152]	; (8005d28 <_svfiprintf_r+0x1f0>)
 8005c90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c94:	2206      	movs	r2, #6
 8005c96:	f7fa faa3 	bl	80001e0 <memchr>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d038      	beq.n	8005d10 <_svfiprintf_r+0x1d8>
 8005c9e:	4b23      	ldr	r3, [pc, #140]	; (8005d2c <_svfiprintf_r+0x1f4>)
 8005ca0:	bb1b      	cbnz	r3, 8005cea <_svfiprintf_r+0x1b2>
 8005ca2:	9b03      	ldr	r3, [sp, #12]
 8005ca4:	3307      	adds	r3, #7
 8005ca6:	f023 0307 	bic.w	r3, r3, #7
 8005caa:	3308      	adds	r3, #8
 8005cac:	9303      	str	r3, [sp, #12]
 8005cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb0:	4433      	add	r3, r6
 8005cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb4:	e767      	b.n	8005b86 <_svfiprintf_r+0x4e>
 8005cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cba:	460c      	mov	r4, r1
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	e7a5      	b.n	8005c0c <_svfiprintf_r+0xd4>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	3401      	adds	r4, #1
 8005cc4:	9305      	str	r3, [sp, #20]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f04f 0c0a 	mov.w	ip, #10
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cd2:	3a30      	subs	r2, #48	; 0x30
 8005cd4:	2a09      	cmp	r2, #9
 8005cd6:	d903      	bls.n	8005ce0 <_svfiprintf_r+0x1a8>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0c5      	beq.n	8005c68 <_svfiprintf_r+0x130>
 8005cdc:	9105      	str	r1, [sp, #20]
 8005cde:	e7c3      	b.n	8005c68 <_svfiprintf_r+0x130>
 8005ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e7f0      	b.n	8005ccc <_svfiprintf_r+0x194>
 8005cea:	ab03      	add	r3, sp, #12
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	462a      	mov	r2, r5
 8005cf0:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <_svfiprintf_r+0x1f8>)
 8005cf2:	a904      	add	r1, sp, #16
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	f3af 8000 	nop.w
 8005cfa:	1c42      	adds	r2, r0, #1
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	d1d6      	bne.n	8005cae <_svfiprintf_r+0x176>
 8005d00:	89ab      	ldrh	r3, [r5, #12]
 8005d02:	065b      	lsls	r3, r3, #25
 8005d04:	f53f af2c 	bmi.w	8005b60 <_svfiprintf_r+0x28>
 8005d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d0a:	b01d      	add	sp, #116	; 0x74
 8005d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d10:	ab03      	add	r3, sp, #12
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	462a      	mov	r2, r5
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <_svfiprintf_r+0x1f8>)
 8005d18:	a904      	add	r1, sp, #16
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f000 f87a 	bl	8005e14 <_printf_i>
 8005d20:	e7eb      	b.n	8005cfa <_svfiprintf_r+0x1c2>
 8005d22:	bf00      	nop
 8005d24:	0800643c 	.word	0x0800643c
 8005d28:	08006446 	.word	0x08006446
 8005d2c:	00000000 	.word	0x00000000
 8005d30:	08005a81 	.word	0x08005a81
 8005d34:	08006442 	.word	0x08006442

08005d38 <_printf_common>:
 8005d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	4699      	mov	r9, r3
 8005d40:	688a      	ldr	r2, [r1, #8]
 8005d42:	690b      	ldr	r3, [r1, #16]
 8005d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	bfb8      	it	lt
 8005d4c:	4613      	movlt	r3, r2
 8005d4e:	6033      	str	r3, [r6, #0]
 8005d50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d54:	4607      	mov	r7, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	b10a      	cbz	r2, 8005d5e <_printf_common+0x26>
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	0699      	lsls	r1, r3, #26
 8005d62:	bf42      	ittt	mi
 8005d64:	6833      	ldrmi	r3, [r6, #0]
 8005d66:	3302      	addmi	r3, #2
 8005d68:	6033      	strmi	r3, [r6, #0]
 8005d6a:	6825      	ldr	r5, [r4, #0]
 8005d6c:	f015 0506 	ands.w	r5, r5, #6
 8005d70:	d106      	bne.n	8005d80 <_printf_common+0x48>
 8005d72:	f104 0a19 	add.w	sl, r4, #25
 8005d76:	68e3      	ldr	r3, [r4, #12]
 8005d78:	6832      	ldr	r2, [r6, #0]
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	42ab      	cmp	r3, r5
 8005d7e:	dc26      	bgt.n	8005dce <_printf_common+0x96>
 8005d80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d84:	1e13      	subs	r3, r2, #0
 8005d86:	6822      	ldr	r2, [r4, #0]
 8005d88:	bf18      	it	ne
 8005d8a:	2301      	movne	r3, #1
 8005d8c:	0692      	lsls	r2, r2, #26
 8005d8e:	d42b      	bmi.n	8005de8 <_printf_common+0xb0>
 8005d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d94:	4649      	mov	r1, r9
 8005d96:	4638      	mov	r0, r7
 8005d98:	47c0      	blx	r8
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d01e      	beq.n	8005ddc <_printf_common+0xa4>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	68e5      	ldr	r5, [r4, #12]
 8005da2:	6832      	ldr	r2, [r6, #0]
 8005da4:	f003 0306 	and.w	r3, r3, #6
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	bf08      	it	eq
 8005dac:	1aad      	subeq	r5, r5, r2
 8005dae:	68a3      	ldr	r3, [r4, #8]
 8005db0:	6922      	ldr	r2, [r4, #16]
 8005db2:	bf0c      	ite	eq
 8005db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005db8:	2500      	movne	r5, #0
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	bfc4      	itt	gt
 8005dbe:	1a9b      	subgt	r3, r3, r2
 8005dc0:	18ed      	addgt	r5, r5, r3
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	341a      	adds	r4, #26
 8005dc6:	42b5      	cmp	r5, r6
 8005dc8:	d11a      	bne.n	8005e00 <_printf_common+0xc8>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e008      	b.n	8005de0 <_printf_common+0xa8>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	47c0      	blx	r8
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d103      	bne.n	8005de4 <_printf_common+0xac>
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de4:	3501      	adds	r5, #1
 8005de6:	e7c6      	b.n	8005d76 <_printf_common+0x3e>
 8005de8:	18e1      	adds	r1, r4, r3
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	2030      	movs	r0, #48	; 0x30
 8005dee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005df2:	4422      	add	r2, r4
 8005df4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005df8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	e7c7      	b.n	8005d90 <_printf_common+0x58>
 8005e00:	2301      	movs	r3, #1
 8005e02:	4622      	mov	r2, r4
 8005e04:	4649      	mov	r1, r9
 8005e06:	4638      	mov	r0, r7
 8005e08:	47c0      	blx	r8
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d0e6      	beq.n	8005ddc <_printf_common+0xa4>
 8005e0e:	3601      	adds	r6, #1
 8005e10:	e7d9      	b.n	8005dc6 <_printf_common+0x8e>
	...

08005e14 <_printf_i>:
 8005e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	460c      	mov	r4, r1
 8005e1a:	4691      	mov	r9, r2
 8005e1c:	7e27      	ldrb	r7, [r4, #24]
 8005e1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e20:	2f78      	cmp	r7, #120	; 0x78
 8005e22:	4680      	mov	r8, r0
 8005e24:	469a      	mov	sl, r3
 8005e26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e2a:	d807      	bhi.n	8005e3c <_printf_i+0x28>
 8005e2c:	2f62      	cmp	r7, #98	; 0x62
 8005e2e:	d80a      	bhi.n	8005e46 <_printf_i+0x32>
 8005e30:	2f00      	cmp	r7, #0
 8005e32:	f000 80d8 	beq.w	8005fe6 <_printf_i+0x1d2>
 8005e36:	2f58      	cmp	r7, #88	; 0x58
 8005e38:	f000 80a3 	beq.w	8005f82 <_printf_i+0x16e>
 8005e3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e44:	e03a      	b.n	8005ebc <_printf_i+0xa8>
 8005e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e4a:	2b15      	cmp	r3, #21
 8005e4c:	d8f6      	bhi.n	8005e3c <_printf_i+0x28>
 8005e4e:	a001      	add	r0, pc, #4	; (adr r0, 8005e54 <_printf_i+0x40>)
 8005e50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e54:	08005ead 	.word	0x08005ead
 8005e58:	08005ec1 	.word	0x08005ec1
 8005e5c:	08005e3d 	.word	0x08005e3d
 8005e60:	08005e3d 	.word	0x08005e3d
 8005e64:	08005e3d 	.word	0x08005e3d
 8005e68:	08005e3d 	.word	0x08005e3d
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08005e3d 	.word	0x08005e3d
 8005e74:	08005e3d 	.word	0x08005e3d
 8005e78:	08005e3d 	.word	0x08005e3d
 8005e7c:	08005e3d 	.word	0x08005e3d
 8005e80:	08005fcd 	.word	0x08005fcd
 8005e84:	08005ef1 	.word	0x08005ef1
 8005e88:	08005faf 	.word	0x08005faf
 8005e8c:	08005e3d 	.word	0x08005e3d
 8005e90:	08005e3d 	.word	0x08005e3d
 8005e94:	08005fef 	.word	0x08005fef
 8005e98:	08005e3d 	.word	0x08005e3d
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005e3d 	.word	0x08005e3d
 8005ea4:	08005e3d 	.word	0x08005e3d
 8005ea8:	08005fb7 	.word	0x08005fb7
 8005eac:	680b      	ldr	r3, [r1, #0]
 8005eae:	1d1a      	adds	r2, r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	600a      	str	r2, [r1, #0]
 8005eb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0a3      	b.n	8006008 <_printf_i+0x1f4>
 8005ec0:	6825      	ldr	r5, [r4, #0]
 8005ec2:	6808      	ldr	r0, [r1, #0]
 8005ec4:	062e      	lsls	r6, r5, #24
 8005ec6:	f100 0304 	add.w	r3, r0, #4
 8005eca:	d50a      	bpl.n	8005ee2 <_printf_i+0xce>
 8005ecc:	6805      	ldr	r5, [r0, #0]
 8005ece:	600b      	str	r3, [r1, #0]
 8005ed0:	2d00      	cmp	r5, #0
 8005ed2:	da03      	bge.n	8005edc <_printf_i+0xc8>
 8005ed4:	232d      	movs	r3, #45	; 0x2d
 8005ed6:	426d      	negs	r5, r5
 8005ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005edc:	485e      	ldr	r0, [pc, #376]	; (8006058 <_printf_i+0x244>)
 8005ede:	230a      	movs	r3, #10
 8005ee0:	e019      	b.n	8005f16 <_printf_i+0x102>
 8005ee2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ee6:	6805      	ldr	r5, [r0, #0]
 8005ee8:	600b      	str	r3, [r1, #0]
 8005eea:	bf18      	it	ne
 8005eec:	b22d      	sxthne	r5, r5
 8005eee:	e7ef      	b.n	8005ed0 <_printf_i+0xbc>
 8005ef0:	680b      	ldr	r3, [r1, #0]
 8005ef2:	6825      	ldr	r5, [r4, #0]
 8005ef4:	1d18      	adds	r0, r3, #4
 8005ef6:	6008      	str	r0, [r1, #0]
 8005ef8:	0628      	lsls	r0, r5, #24
 8005efa:	d501      	bpl.n	8005f00 <_printf_i+0xec>
 8005efc:	681d      	ldr	r5, [r3, #0]
 8005efe:	e002      	b.n	8005f06 <_printf_i+0xf2>
 8005f00:	0669      	lsls	r1, r5, #25
 8005f02:	d5fb      	bpl.n	8005efc <_printf_i+0xe8>
 8005f04:	881d      	ldrh	r5, [r3, #0]
 8005f06:	4854      	ldr	r0, [pc, #336]	; (8006058 <_printf_i+0x244>)
 8005f08:	2f6f      	cmp	r7, #111	; 0x6f
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2308      	moveq	r3, #8
 8005f0e:	230a      	movne	r3, #10
 8005f10:	2100      	movs	r1, #0
 8005f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f16:	6866      	ldr	r6, [r4, #4]
 8005f18:	60a6      	str	r6, [r4, #8]
 8005f1a:	2e00      	cmp	r6, #0
 8005f1c:	bfa2      	ittt	ge
 8005f1e:	6821      	ldrge	r1, [r4, #0]
 8005f20:	f021 0104 	bicge.w	r1, r1, #4
 8005f24:	6021      	strge	r1, [r4, #0]
 8005f26:	b90d      	cbnz	r5, 8005f2c <_printf_i+0x118>
 8005f28:	2e00      	cmp	r6, #0
 8005f2a:	d04d      	beq.n	8005fc8 <_printf_i+0x1b4>
 8005f2c:	4616      	mov	r6, r2
 8005f2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f32:	fb03 5711 	mls	r7, r3, r1, r5
 8005f36:	5dc7      	ldrb	r7, [r0, r7]
 8005f38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f3c:	462f      	mov	r7, r5
 8005f3e:	42bb      	cmp	r3, r7
 8005f40:	460d      	mov	r5, r1
 8005f42:	d9f4      	bls.n	8005f2e <_printf_i+0x11a>
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d10b      	bne.n	8005f60 <_printf_i+0x14c>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	07df      	lsls	r7, r3, #31
 8005f4c:	d508      	bpl.n	8005f60 <_printf_i+0x14c>
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	6861      	ldr	r1, [r4, #4]
 8005f52:	4299      	cmp	r1, r3
 8005f54:	bfde      	ittt	le
 8005f56:	2330      	movle	r3, #48	; 0x30
 8005f58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f60:	1b92      	subs	r2, r2, r6
 8005f62:	6122      	str	r2, [r4, #16]
 8005f64:	f8cd a000 	str.w	sl, [sp]
 8005f68:	464b      	mov	r3, r9
 8005f6a:	aa03      	add	r2, sp, #12
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	4640      	mov	r0, r8
 8005f70:	f7ff fee2 	bl	8005d38 <_printf_common>
 8005f74:	3001      	adds	r0, #1
 8005f76:	d14c      	bne.n	8006012 <_printf_i+0x1fe>
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	b004      	add	sp, #16
 8005f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f82:	4835      	ldr	r0, [pc, #212]	; (8006058 <_printf_i+0x244>)
 8005f84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	680e      	ldr	r6, [r1, #0]
 8005f8c:	061f      	lsls	r7, r3, #24
 8005f8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f92:	600e      	str	r6, [r1, #0]
 8005f94:	d514      	bpl.n	8005fc0 <_printf_i+0x1ac>
 8005f96:	07d9      	lsls	r1, r3, #31
 8005f98:	bf44      	itt	mi
 8005f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f9e:	6023      	strmi	r3, [r4, #0]
 8005fa0:	b91d      	cbnz	r5, 8005faa <_printf_i+0x196>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	f023 0320 	bic.w	r3, r3, #32
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	2310      	movs	r3, #16
 8005fac:	e7b0      	b.n	8005f10 <_printf_i+0xfc>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f043 0320 	orr.w	r3, r3, #32
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	2378      	movs	r3, #120	; 0x78
 8005fb8:	4828      	ldr	r0, [pc, #160]	; (800605c <_printf_i+0x248>)
 8005fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fbe:	e7e3      	b.n	8005f88 <_printf_i+0x174>
 8005fc0:	065e      	lsls	r6, r3, #25
 8005fc2:	bf48      	it	mi
 8005fc4:	b2ad      	uxthmi	r5, r5
 8005fc6:	e7e6      	b.n	8005f96 <_printf_i+0x182>
 8005fc8:	4616      	mov	r6, r2
 8005fca:	e7bb      	b.n	8005f44 <_printf_i+0x130>
 8005fcc:	680b      	ldr	r3, [r1, #0]
 8005fce:	6826      	ldr	r6, [r4, #0]
 8005fd0:	6960      	ldr	r0, [r4, #20]
 8005fd2:	1d1d      	adds	r5, r3, #4
 8005fd4:	600d      	str	r5, [r1, #0]
 8005fd6:	0635      	lsls	r5, r6, #24
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	d501      	bpl.n	8005fe0 <_printf_i+0x1cc>
 8005fdc:	6018      	str	r0, [r3, #0]
 8005fde:	e002      	b.n	8005fe6 <_printf_i+0x1d2>
 8005fe0:	0671      	lsls	r1, r6, #25
 8005fe2:	d5fb      	bpl.n	8005fdc <_printf_i+0x1c8>
 8005fe4:	8018      	strh	r0, [r3, #0]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6123      	str	r3, [r4, #16]
 8005fea:	4616      	mov	r6, r2
 8005fec:	e7ba      	b.n	8005f64 <_printf_i+0x150>
 8005fee:	680b      	ldr	r3, [r1, #0]
 8005ff0:	1d1a      	adds	r2, r3, #4
 8005ff2:	600a      	str	r2, [r1, #0]
 8005ff4:	681e      	ldr	r6, [r3, #0]
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7fa f8f0 	bl	80001e0 <memchr>
 8006000:	b108      	cbz	r0, 8006006 <_printf_i+0x1f2>
 8006002:	1b80      	subs	r0, r0, r6
 8006004:	6060      	str	r0, [r4, #4]
 8006006:	6863      	ldr	r3, [r4, #4]
 8006008:	6123      	str	r3, [r4, #16]
 800600a:	2300      	movs	r3, #0
 800600c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006010:	e7a8      	b.n	8005f64 <_printf_i+0x150>
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	4632      	mov	r2, r6
 8006016:	4649      	mov	r1, r9
 8006018:	4640      	mov	r0, r8
 800601a:	47d0      	blx	sl
 800601c:	3001      	adds	r0, #1
 800601e:	d0ab      	beq.n	8005f78 <_printf_i+0x164>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	079b      	lsls	r3, r3, #30
 8006024:	d413      	bmi.n	800604e <_printf_i+0x23a>
 8006026:	68e0      	ldr	r0, [r4, #12]
 8006028:	9b03      	ldr	r3, [sp, #12]
 800602a:	4298      	cmp	r0, r3
 800602c:	bfb8      	it	lt
 800602e:	4618      	movlt	r0, r3
 8006030:	e7a4      	b.n	8005f7c <_printf_i+0x168>
 8006032:	2301      	movs	r3, #1
 8006034:	4632      	mov	r2, r6
 8006036:	4649      	mov	r1, r9
 8006038:	4640      	mov	r0, r8
 800603a:	47d0      	blx	sl
 800603c:	3001      	adds	r0, #1
 800603e:	d09b      	beq.n	8005f78 <_printf_i+0x164>
 8006040:	3501      	adds	r5, #1
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	9903      	ldr	r1, [sp, #12]
 8006046:	1a5b      	subs	r3, r3, r1
 8006048:	42ab      	cmp	r3, r5
 800604a:	dcf2      	bgt.n	8006032 <_printf_i+0x21e>
 800604c:	e7eb      	b.n	8006026 <_printf_i+0x212>
 800604e:	2500      	movs	r5, #0
 8006050:	f104 0619 	add.w	r6, r4, #25
 8006054:	e7f5      	b.n	8006042 <_printf_i+0x22e>
 8006056:	bf00      	nop
 8006058:	0800644d 	.word	0x0800644d
 800605c:	0800645e 	.word	0x0800645e

08006060 <memcpy>:
 8006060:	440a      	add	r2, r1
 8006062:	4291      	cmp	r1, r2
 8006064:	f100 33ff 	add.w	r3, r0, #4294967295
 8006068:	d100      	bne.n	800606c <memcpy+0xc>
 800606a:	4770      	bx	lr
 800606c:	b510      	push	{r4, lr}
 800606e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006076:	4291      	cmp	r1, r2
 8006078:	d1f9      	bne.n	800606e <memcpy+0xe>
 800607a:	bd10      	pop	{r4, pc}

0800607c <memmove>:
 800607c:	4288      	cmp	r0, r1
 800607e:	b510      	push	{r4, lr}
 8006080:	eb01 0402 	add.w	r4, r1, r2
 8006084:	d902      	bls.n	800608c <memmove+0x10>
 8006086:	4284      	cmp	r4, r0
 8006088:	4623      	mov	r3, r4
 800608a:	d807      	bhi.n	800609c <memmove+0x20>
 800608c:	1e43      	subs	r3, r0, #1
 800608e:	42a1      	cmp	r1, r4
 8006090:	d008      	beq.n	80060a4 <memmove+0x28>
 8006092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800609a:	e7f8      	b.n	800608e <memmove+0x12>
 800609c:	4402      	add	r2, r0
 800609e:	4601      	mov	r1, r0
 80060a0:	428a      	cmp	r2, r1
 80060a2:	d100      	bne.n	80060a6 <memmove+0x2a>
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ae:	e7f7      	b.n	80060a0 <memmove+0x24>

080060b0 <_free_r>:
 80060b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060b2:	2900      	cmp	r1, #0
 80060b4:	d048      	beq.n	8006148 <_free_r+0x98>
 80060b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ba:	9001      	str	r0, [sp, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f1a1 0404 	sub.w	r4, r1, #4
 80060c2:	bfb8      	it	lt
 80060c4:	18e4      	addlt	r4, r4, r3
 80060c6:	f000 f8d3 	bl	8006270 <__malloc_lock>
 80060ca:	4a20      	ldr	r2, [pc, #128]	; (800614c <_free_r+0x9c>)
 80060cc:	9801      	ldr	r0, [sp, #4]
 80060ce:	6813      	ldr	r3, [r2, #0]
 80060d0:	4615      	mov	r5, r2
 80060d2:	b933      	cbnz	r3, 80060e2 <_free_r+0x32>
 80060d4:	6063      	str	r3, [r4, #4]
 80060d6:	6014      	str	r4, [r2, #0]
 80060d8:	b003      	add	sp, #12
 80060da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060de:	f000 b8cd 	b.w	800627c <__malloc_unlock>
 80060e2:	42a3      	cmp	r3, r4
 80060e4:	d90b      	bls.n	80060fe <_free_r+0x4e>
 80060e6:	6821      	ldr	r1, [r4, #0]
 80060e8:	1862      	adds	r2, r4, r1
 80060ea:	4293      	cmp	r3, r2
 80060ec:	bf04      	itt	eq
 80060ee:	681a      	ldreq	r2, [r3, #0]
 80060f0:	685b      	ldreq	r3, [r3, #4]
 80060f2:	6063      	str	r3, [r4, #4]
 80060f4:	bf04      	itt	eq
 80060f6:	1852      	addeq	r2, r2, r1
 80060f8:	6022      	streq	r2, [r4, #0]
 80060fa:	602c      	str	r4, [r5, #0]
 80060fc:	e7ec      	b.n	80060d8 <_free_r+0x28>
 80060fe:	461a      	mov	r2, r3
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	b10b      	cbz	r3, 8006108 <_free_r+0x58>
 8006104:	42a3      	cmp	r3, r4
 8006106:	d9fa      	bls.n	80060fe <_free_r+0x4e>
 8006108:	6811      	ldr	r1, [r2, #0]
 800610a:	1855      	adds	r5, r2, r1
 800610c:	42a5      	cmp	r5, r4
 800610e:	d10b      	bne.n	8006128 <_free_r+0x78>
 8006110:	6824      	ldr	r4, [r4, #0]
 8006112:	4421      	add	r1, r4
 8006114:	1854      	adds	r4, r2, r1
 8006116:	42a3      	cmp	r3, r4
 8006118:	6011      	str	r1, [r2, #0]
 800611a:	d1dd      	bne.n	80060d8 <_free_r+0x28>
 800611c:	681c      	ldr	r4, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	6053      	str	r3, [r2, #4]
 8006122:	4421      	add	r1, r4
 8006124:	6011      	str	r1, [r2, #0]
 8006126:	e7d7      	b.n	80060d8 <_free_r+0x28>
 8006128:	d902      	bls.n	8006130 <_free_r+0x80>
 800612a:	230c      	movs	r3, #12
 800612c:	6003      	str	r3, [r0, #0]
 800612e:	e7d3      	b.n	80060d8 <_free_r+0x28>
 8006130:	6825      	ldr	r5, [r4, #0]
 8006132:	1961      	adds	r1, r4, r5
 8006134:	428b      	cmp	r3, r1
 8006136:	bf04      	itt	eq
 8006138:	6819      	ldreq	r1, [r3, #0]
 800613a:	685b      	ldreq	r3, [r3, #4]
 800613c:	6063      	str	r3, [r4, #4]
 800613e:	bf04      	itt	eq
 8006140:	1949      	addeq	r1, r1, r5
 8006142:	6021      	streq	r1, [r4, #0]
 8006144:	6054      	str	r4, [r2, #4]
 8006146:	e7c7      	b.n	80060d8 <_free_r+0x28>
 8006148:	b003      	add	sp, #12
 800614a:	bd30      	pop	{r4, r5, pc}
 800614c:	200000e0 	.word	0x200000e0

08006150 <_malloc_r>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	1ccd      	adds	r5, r1, #3
 8006154:	f025 0503 	bic.w	r5, r5, #3
 8006158:	3508      	adds	r5, #8
 800615a:	2d0c      	cmp	r5, #12
 800615c:	bf38      	it	cc
 800615e:	250c      	movcc	r5, #12
 8006160:	2d00      	cmp	r5, #0
 8006162:	4606      	mov	r6, r0
 8006164:	db01      	blt.n	800616a <_malloc_r+0x1a>
 8006166:	42a9      	cmp	r1, r5
 8006168:	d903      	bls.n	8006172 <_malloc_r+0x22>
 800616a:	230c      	movs	r3, #12
 800616c:	6033      	str	r3, [r6, #0]
 800616e:	2000      	movs	r0, #0
 8006170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006172:	f000 f87d 	bl	8006270 <__malloc_lock>
 8006176:	4921      	ldr	r1, [pc, #132]	; (80061fc <_malloc_r+0xac>)
 8006178:	680a      	ldr	r2, [r1, #0]
 800617a:	4614      	mov	r4, r2
 800617c:	b99c      	cbnz	r4, 80061a6 <_malloc_r+0x56>
 800617e:	4f20      	ldr	r7, [pc, #128]	; (8006200 <_malloc_r+0xb0>)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	b923      	cbnz	r3, 800618e <_malloc_r+0x3e>
 8006184:	4621      	mov	r1, r4
 8006186:	4630      	mov	r0, r6
 8006188:	f000 f862 	bl	8006250 <_sbrk_r>
 800618c:	6038      	str	r0, [r7, #0]
 800618e:	4629      	mov	r1, r5
 8006190:	4630      	mov	r0, r6
 8006192:	f000 f85d 	bl	8006250 <_sbrk_r>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	d123      	bne.n	80061e2 <_malloc_r+0x92>
 800619a:	230c      	movs	r3, #12
 800619c:	6033      	str	r3, [r6, #0]
 800619e:	4630      	mov	r0, r6
 80061a0:	f000 f86c 	bl	800627c <__malloc_unlock>
 80061a4:	e7e3      	b.n	800616e <_malloc_r+0x1e>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	1b5b      	subs	r3, r3, r5
 80061aa:	d417      	bmi.n	80061dc <_malloc_r+0x8c>
 80061ac:	2b0b      	cmp	r3, #11
 80061ae:	d903      	bls.n	80061b8 <_malloc_r+0x68>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	441c      	add	r4, r3
 80061b4:	6025      	str	r5, [r4, #0]
 80061b6:	e004      	b.n	80061c2 <_malloc_r+0x72>
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	42a2      	cmp	r2, r4
 80061bc:	bf0c      	ite	eq
 80061be:	600b      	streq	r3, [r1, #0]
 80061c0:	6053      	strne	r3, [r2, #4]
 80061c2:	4630      	mov	r0, r6
 80061c4:	f000 f85a 	bl	800627c <__malloc_unlock>
 80061c8:	f104 000b 	add.w	r0, r4, #11
 80061cc:	1d23      	adds	r3, r4, #4
 80061ce:	f020 0007 	bic.w	r0, r0, #7
 80061d2:	1ac2      	subs	r2, r0, r3
 80061d4:	d0cc      	beq.n	8006170 <_malloc_r+0x20>
 80061d6:	1a1b      	subs	r3, r3, r0
 80061d8:	50a3      	str	r3, [r4, r2]
 80061da:	e7c9      	b.n	8006170 <_malloc_r+0x20>
 80061dc:	4622      	mov	r2, r4
 80061de:	6864      	ldr	r4, [r4, #4]
 80061e0:	e7cc      	b.n	800617c <_malloc_r+0x2c>
 80061e2:	1cc4      	adds	r4, r0, #3
 80061e4:	f024 0403 	bic.w	r4, r4, #3
 80061e8:	42a0      	cmp	r0, r4
 80061ea:	d0e3      	beq.n	80061b4 <_malloc_r+0x64>
 80061ec:	1a21      	subs	r1, r4, r0
 80061ee:	4630      	mov	r0, r6
 80061f0:	f000 f82e 	bl	8006250 <_sbrk_r>
 80061f4:	3001      	adds	r0, #1
 80061f6:	d1dd      	bne.n	80061b4 <_malloc_r+0x64>
 80061f8:	e7cf      	b.n	800619a <_malloc_r+0x4a>
 80061fa:	bf00      	nop
 80061fc:	200000e0 	.word	0x200000e0
 8006200:	200000e4 	.word	0x200000e4

08006204 <_realloc_r>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	4607      	mov	r7, r0
 8006208:	4614      	mov	r4, r2
 800620a:	460e      	mov	r6, r1
 800620c:	b921      	cbnz	r1, 8006218 <_realloc_r+0x14>
 800620e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006212:	4611      	mov	r1, r2
 8006214:	f7ff bf9c 	b.w	8006150 <_malloc_r>
 8006218:	b922      	cbnz	r2, 8006224 <_realloc_r+0x20>
 800621a:	f7ff ff49 	bl	80060b0 <_free_r>
 800621e:	4625      	mov	r5, r4
 8006220:	4628      	mov	r0, r5
 8006222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006224:	f000 f830 	bl	8006288 <_malloc_usable_size_r>
 8006228:	42a0      	cmp	r0, r4
 800622a:	d20f      	bcs.n	800624c <_realloc_r+0x48>
 800622c:	4621      	mov	r1, r4
 800622e:	4638      	mov	r0, r7
 8006230:	f7ff ff8e 	bl	8006150 <_malloc_r>
 8006234:	4605      	mov	r5, r0
 8006236:	2800      	cmp	r0, #0
 8006238:	d0f2      	beq.n	8006220 <_realloc_r+0x1c>
 800623a:	4631      	mov	r1, r6
 800623c:	4622      	mov	r2, r4
 800623e:	f7ff ff0f 	bl	8006060 <memcpy>
 8006242:	4631      	mov	r1, r6
 8006244:	4638      	mov	r0, r7
 8006246:	f7ff ff33 	bl	80060b0 <_free_r>
 800624a:	e7e9      	b.n	8006220 <_realloc_r+0x1c>
 800624c:	4635      	mov	r5, r6
 800624e:	e7e7      	b.n	8006220 <_realloc_r+0x1c>

08006250 <_sbrk_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4d06      	ldr	r5, [pc, #24]	; (800626c <_sbrk_r+0x1c>)
 8006254:	2300      	movs	r3, #0
 8006256:	4604      	mov	r4, r0
 8006258:	4608      	mov	r0, r1
 800625a:	602b      	str	r3, [r5, #0]
 800625c:	f7fa fe66 	bl	8000f2c <_sbrk>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d102      	bne.n	800626a <_sbrk_r+0x1a>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	b103      	cbz	r3, 800626a <_sbrk_r+0x1a>
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	bd38      	pop	{r3, r4, r5, pc}
 800626c:	20000b3c 	.word	0x20000b3c

08006270 <__malloc_lock>:
 8006270:	4801      	ldr	r0, [pc, #4]	; (8006278 <__malloc_lock+0x8>)
 8006272:	f000 b811 	b.w	8006298 <__retarget_lock_acquire_recursive>
 8006276:	bf00      	nop
 8006278:	20000b44 	.word	0x20000b44

0800627c <__malloc_unlock>:
 800627c:	4801      	ldr	r0, [pc, #4]	; (8006284 <__malloc_unlock+0x8>)
 800627e:	f000 b80c 	b.w	800629a <__retarget_lock_release_recursive>
 8006282:	bf00      	nop
 8006284:	20000b44 	.word	0x20000b44

08006288 <_malloc_usable_size_r>:
 8006288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800628c:	1f18      	subs	r0, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	bfbc      	itt	lt
 8006292:	580b      	ldrlt	r3, [r1, r0]
 8006294:	18c0      	addlt	r0, r0, r3
 8006296:	4770      	bx	lr

08006298 <__retarget_lock_acquire_recursive>:
 8006298:	4770      	bx	lr

0800629a <__retarget_lock_release_recursive>:
 800629a:	4770      	bx	lr

0800629c <_init>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr

080062a8 <_fini>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr
