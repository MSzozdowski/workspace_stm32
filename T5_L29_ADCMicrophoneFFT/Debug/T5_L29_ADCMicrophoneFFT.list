
T5_L29_ADCMicrophoneFFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005288  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001347c  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801889c  0801889c  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  0801889c  0801889c  0002889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080188a4  080188a4  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080188a4  080188a4  000288a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080188a8  080188a8  000288a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080188ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029cc  20000074  08018920  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a40  08018920  00032a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c95  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b61  00000000  00000000  00043d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  000468a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  000477a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186c3  00000000  00000000  00048530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132e5  00000000  00000000  00060bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b8f0  00000000  00000000  00073ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0010f7c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de8  00000000  00000000  0010f88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  00113674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005408 	.word	0x08005408

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08005408 	.word	0x08005408

080001d8 <arm_bitreversal_32>:
 80001d8:	1c4b      	adds	r3, r1, #1
 80001da:	2b01      	cmp	r3, #1
 80001dc:	bf98      	it	ls
 80001de:	4770      	bxls	lr
 80001e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001e4:	1c91      	adds	r1, r2, #2
 80001e6:	089b      	lsrs	r3, r3, #2

080001e8 <arm_bitreversal_32_0>:
 80001e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f0:	880a      	ldrh	r2, [r1, #0]
 80001f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001f6:	4480      	add	r8, r0
 80001f8:	4481      	add	r9, r0
 80001fa:	4402      	add	r2, r0
 80001fc:	4484      	add	ip, r0
 80001fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000202:	f8d8 6000 	ldr.w	r6, [r8]
 8000206:	6815      	ldr	r5, [r2, #0]
 8000208:	f8dc 4000 	ldr.w	r4, [ip]
 800020c:	f8c9 6000 	str.w	r6, [r9]
 8000210:	f8c8 7000 	str.w	r7, [r8]
 8000214:	f8cc 5000 	str.w	r5, [ip]
 8000218:	6014      	str	r4, [r2, #0]
 800021a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800021e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000222:	6855      	ldr	r5, [r2, #4]
 8000224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000228:	f8c9 6004 	str.w	r6, [r9, #4]
 800022c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000230:	f8cc 5004 	str.w	r5, [ip, #4]
 8000234:	6054      	str	r4, [r2, #4]
 8000236:	3108      	adds	r1, #8
 8000238:	3b01      	subs	r3, #1
 800023a:	d1d5      	bne.n	80001e8 <arm_bitreversal_32_0>
 800023c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000240:	4770      	bx	lr

08000242 <arm_bitreversal_16>:
 8000242:	1c4b      	adds	r3, r1, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	bf98      	it	ls
 8000248:	4770      	bxls	lr
 800024a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024e:	1c91      	adds	r1, r2, #2
 8000250:	089b      	lsrs	r3, r3, #2

08000252 <arm_bitreversal_16_0>:
 8000252:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000256:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800025a:	880a      	ldrh	r2, [r1, #0]
 800025c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000260:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000264:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000268:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800026c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000270:	f8d9 7000 	ldr.w	r7, [r9]
 8000274:	f8d8 6000 	ldr.w	r6, [r8]
 8000278:	6815      	ldr	r5, [r2, #0]
 800027a:	f8dc 4000 	ldr.w	r4, [ip]
 800027e:	f8c9 6000 	str.w	r6, [r9]
 8000282:	f8c8 7000 	str.w	r7, [r8]
 8000286:	f8cc 5000 	str.w	r5, [ip]
 800028a:	6014      	str	r4, [r2, #0]
 800028c:	3108      	adds	r1, #8
 800028e:	3b01      	subs	r3, #1
 8000290:	d1df      	bne.n	8000252 <arm_bitreversal_16_0>
 8000292:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	4770      	bx	lr

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b96e 	b.w	800058c <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002cc:	9d08      	ldr	r5, [sp, #32]
 80002ce:	4604      	mov	r4, r0
 80002d0:	468c      	mov	ip, r1
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	f040 8083 	bne.w	80003de <__udivmoddi4+0x116>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4617      	mov	r7, r2
 80002dc:	d947      	bls.n	800036e <__udivmoddi4+0xa6>
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	b142      	cbz	r2, 80002f6 <__udivmoddi4+0x2e>
 80002e4:	f1c2 0020 	rsb	r0, r2, #32
 80002e8:	fa24 f000 	lsr.w	r0, r4, r0
 80002ec:	4091      	lsls	r1, r2
 80002ee:	4097      	lsls	r7, r2
 80002f0:	ea40 0c01 	orr.w	ip, r0, r1
 80002f4:	4094      	lsls	r4, r2
 80002f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000300:	fa1f fe87 	uxth.w	lr, r7
 8000304:	fb08 c116 	mls	r1, r8, r6, ip
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb06 f10e 	mul.w	r1, r6, lr
 8000310:	4299      	cmp	r1, r3
 8000312:	d909      	bls.n	8000328 <__udivmoddi4+0x60>
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	f106 30ff 	add.w	r0, r6, #4294967295
 800031a:	f080 8119 	bcs.w	8000550 <__udivmoddi4+0x288>
 800031e:	4299      	cmp	r1, r3
 8000320:	f240 8116 	bls.w	8000550 <__udivmoddi4+0x288>
 8000324:	3e02      	subs	r6, #2
 8000326:	443b      	add	r3, r7
 8000328:	1a5b      	subs	r3, r3, r1
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000338:	fb00 fe0e 	mul.w	lr, r0, lr
 800033c:	45a6      	cmp	lr, r4
 800033e:	d909      	bls.n	8000354 <__udivmoddi4+0x8c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	f080 8105 	bcs.w	8000554 <__udivmoddi4+0x28c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f240 8102 	bls.w	8000554 <__udivmoddi4+0x28c>
 8000350:	3802      	subs	r0, #2
 8000352:	443c      	add	r4, r7
 8000354:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	2600      	movs	r6, #0
 800035e:	b11d      	cbz	r5, 8000368 <__udivmoddi4+0xa0>
 8000360:	40d4      	lsrs	r4, r2
 8000362:	2300      	movs	r3, #0
 8000364:	e9c5 4300 	strd	r4, r3, [r5]
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	b902      	cbnz	r2, 8000372 <__udivmoddi4+0xaa>
 8000370:	deff      	udf	#255	; 0xff
 8000372:	fab2 f282 	clz	r2, r2
 8000376:	2a00      	cmp	r2, #0
 8000378:	d150      	bne.n	800041c <__udivmoddi4+0x154>
 800037a:	1bcb      	subs	r3, r1, r7
 800037c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	2601      	movs	r6, #1
 8000386:	fbb3 fcfe 	udiv	ip, r3, lr
 800038a:	0c21      	lsrs	r1, r4, #16
 800038c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000390:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000394:	fb08 f30c 	mul.w	r3, r8, ip
 8000398:	428b      	cmp	r3, r1
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0xe4>
 800039c:	1879      	adds	r1, r7, r1
 800039e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0xe2>
 80003a4:	428b      	cmp	r3, r1
 80003a6:	f200 80e9 	bhi.w	800057c <__udivmoddi4+0x2b4>
 80003aa:	4684      	mov	ip, r0
 80003ac:	1ac9      	subs	r1, r1, r3
 80003ae:	b2a3      	uxth	r3, r4
 80003b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003bc:	fb08 f800 	mul.w	r8, r8, r0
 80003c0:	45a0      	cmp	r8, r4
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x10c>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x10a>
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	f200 80d9 	bhi.w	8000584 <__udivmoddi4+0x2bc>
 80003d2:	4618      	mov	r0, r3
 80003d4:	eba4 0408 	sub.w	r4, r4, r8
 80003d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003dc:	e7bf      	b.n	800035e <__udivmoddi4+0x96>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d909      	bls.n	80003f6 <__udivmoddi4+0x12e>
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	f000 80b1 	beq.w	800054a <__udivmoddi4+0x282>
 80003e8:	2600      	movs	r6, #0
 80003ea:	e9c5 0100 	strd	r0, r1, [r5]
 80003ee:	4630      	mov	r0, r6
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	fab3 f683 	clz	r6, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d14a      	bne.n	8000494 <__udivmoddi4+0x1cc>
 80003fe:	428b      	cmp	r3, r1
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0x140>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 80b8 	bhi.w	8000578 <__udivmoddi4+0x2b0>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb61 0103 	sbc.w	r1, r1, r3
 800040e:	2001      	movs	r0, #1
 8000410:	468c      	mov	ip, r1
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0a8      	beq.n	8000368 <__udivmoddi4+0xa0>
 8000416:	e9c5 4c00 	strd	r4, ip, [r5]
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f603 	lsr.w	r6, r0, r3
 8000424:	4097      	lsls	r7, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800042e:	40d9      	lsrs	r1, r3
 8000430:	4330      	orrs	r0, r6
 8000432:	0c03      	lsrs	r3, r0, #16
 8000434:	fbb1 f6fe 	udiv	r6, r1, lr
 8000438:	fa1f f887 	uxth.w	r8, r7
 800043c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000440:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000444:	fb06 f108 	mul.w	r1, r6, r8
 8000448:	4299      	cmp	r1, r3
 800044a:	fa04 f402 	lsl.w	r4, r4, r2
 800044e:	d909      	bls.n	8000464 <__udivmoddi4+0x19c>
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	f106 3cff 	add.w	ip, r6, #4294967295
 8000456:	f080 808d 	bcs.w	8000574 <__udivmoddi4+0x2ac>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 808a 	bls.w	8000574 <__udivmoddi4+0x2ac>
 8000460:	3e02      	subs	r6, #2
 8000462:	443b      	add	r3, r7
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b281      	uxth	r1, r0
 8000468:	fbb3 f0fe 	udiv	r0, r3, lr
 800046c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb00 f308 	mul.w	r3, r0, r8
 8000478:	428b      	cmp	r3, r1
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x1c4>
 800047c:	1879      	adds	r1, r7, r1
 800047e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000482:	d273      	bcs.n	800056c <__udivmoddi4+0x2a4>
 8000484:	428b      	cmp	r3, r1
 8000486:	d971      	bls.n	800056c <__udivmoddi4+0x2a4>
 8000488:	3802      	subs	r0, #2
 800048a:	4439      	add	r1, r7
 800048c:	1acb      	subs	r3, r1, r3
 800048e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000492:	e778      	b.n	8000386 <__udivmoddi4+0xbe>
 8000494:	f1c6 0c20 	rsb	ip, r6, #32
 8000498:	fa03 f406 	lsl.w	r4, r3, r6
 800049c:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a0:	431c      	orrs	r4, r3
 80004a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004a6:	fa01 f306 	lsl.w	r3, r1, r6
 80004aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80004b2:	431f      	orrs	r7, r3
 80004b4:	0c3b      	lsrs	r3, r7, #16
 80004b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ba:	fa1f f884 	uxth.w	r8, r4
 80004be:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004c6:	fb09 fa08 	mul.w	sl, r9, r8
 80004ca:	458a      	cmp	sl, r1
 80004cc:	fa02 f206 	lsl.w	r2, r2, r6
 80004d0:	fa00 f306 	lsl.w	r3, r0, r6
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x220>
 80004d6:	1861      	adds	r1, r4, r1
 80004d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80004dc:	d248      	bcs.n	8000570 <__udivmoddi4+0x2a8>
 80004de:	458a      	cmp	sl, r1
 80004e0:	d946      	bls.n	8000570 <__udivmoddi4+0x2a8>
 80004e2:	f1a9 0902 	sub.w	r9, r9, #2
 80004e6:	4421      	add	r1, r4
 80004e8:	eba1 010a 	sub.w	r1, r1, sl
 80004ec:	b2bf      	uxth	r7, r7
 80004ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80004f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004fa:	fb00 f808 	mul.w	r8, r0, r8
 80004fe:	45b8      	cmp	r8, r7
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x24a>
 8000502:	19e7      	adds	r7, r4, r7
 8000504:	f100 31ff 	add.w	r1, r0, #4294967295
 8000508:	d22e      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 800050a:	45b8      	cmp	r8, r7
 800050c:	d92c      	bls.n	8000568 <__udivmoddi4+0x2a0>
 800050e:	3802      	subs	r0, #2
 8000510:	4427      	add	r7, r4
 8000512:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000516:	eba7 0708 	sub.w	r7, r7, r8
 800051a:	fba0 8902 	umull	r8, r9, r0, r2
 800051e:	454f      	cmp	r7, r9
 8000520:	46c6      	mov	lr, r8
 8000522:	4649      	mov	r1, r9
 8000524:	d31a      	bcc.n	800055c <__udivmoddi4+0x294>
 8000526:	d017      	beq.n	8000558 <__udivmoddi4+0x290>
 8000528:	b15d      	cbz	r5, 8000542 <__udivmoddi4+0x27a>
 800052a:	ebb3 020e 	subs.w	r2, r3, lr
 800052e:	eb67 0701 	sbc.w	r7, r7, r1
 8000532:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000536:	40f2      	lsrs	r2, r6
 8000538:	ea4c 0202 	orr.w	r2, ip, r2
 800053c:	40f7      	lsrs	r7, r6
 800053e:	e9c5 2700 	strd	r2, r7, [r5]
 8000542:	2600      	movs	r6, #0
 8000544:	4631      	mov	r1, r6
 8000546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054a:	462e      	mov	r6, r5
 800054c:	4628      	mov	r0, r5
 800054e:	e70b      	b.n	8000368 <__udivmoddi4+0xa0>
 8000550:	4606      	mov	r6, r0
 8000552:	e6e9      	b.n	8000328 <__udivmoddi4+0x60>
 8000554:	4618      	mov	r0, r3
 8000556:	e6fd      	b.n	8000354 <__udivmoddi4+0x8c>
 8000558:	4543      	cmp	r3, r8
 800055a:	d2e5      	bcs.n	8000528 <__udivmoddi4+0x260>
 800055c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000560:	eb69 0104 	sbc.w	r1, r9, r4
 8000564:	3801      	subs	r0, #1
 8000566:	e7df      	b.n	8000528 <__udivmoddi4+0x260>
 8000568:	4608      	mov	r0, r1
 800056a:	e7d2      	b.n	8000512 <__udivmoddi4+0x24a>
 800056c:	4660      	mov	r0, ip
 800056e:	e78d      	b.n	800048c <__udivmoddi4+0x1c4>
 8000570:	4681      	mov	r9, r0
 8000572:	e7b9      	b.n	80004e8 <__udivmoddi4+0x220>
 8000574:	4666      	mov	r6, ip
 8000576:	e775      	b.n	8000464 <__udivmoddi4+0x19c>
 8000578:	4630      	mov	r0, r6
 800057a:	e74a      	b.n	8000412 <__udivmoddi4+0x14a>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	4439      	add	r1, r7
 8000582:	e713      	b.n	80003ac <__udivmoddi4+0xe4>
 8000584:	3802      	subs	r0, #2
 8000586:	443c      	add	r4, r7
 8000588:	e724      	b.n	80003d4 <__udivmoddi4+0x10c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80005a4:	463b      	mov	r3, r7
 80005a6:	2220      	movs	r2, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fd76 	bl	800509c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b0:	4b39      	ldr	r3, [pc, #228]	; (8000698 <MX_ADC1_Init+0x108>)
 80005b2:	4a3a      	ldr	r2, [pc, #232]	; (800069c <MX_ADC1_Init+0x10c>)
 80005b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80005b6:	4b38      	ldr	r3, [pc, #224]	; (8000698 <MX_ADC1_Init+0x108>)
 80005b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005be:	4b36      	ldr	r3, [pc, #216]	; (8000698 <MX_ADC1_Init+0x108>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005c4:	4b34      	ldr	r3, [pc, #208]	; (8000698 <MX_ADC1_Init+0x108>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <MX_ADC1_Init+0x108>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b31      	ldr	r3, [pc, #196]	; (8000698 <MX_ADC1_Init+0x108>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005d8:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <MX_ADC1_Init+0x108>)
 80005da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80005e0:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <MX_ADC1_Init+0x108>)
 80005e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e8:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <MX_ADC1_Init+0x108>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <MX_ADC1_Init+0x108>)
 80005f0:	2202      	movs	r2, #2
 80005f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <MX_ADC1_Init+0x108>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <MX_ADC1_Init+0x108>)
 80005fe:	2201      	movs	r2, #1
 8000600:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000602:	4825      	ldr	r0, [pc, #148]	; (8000698 <MX_ADC1_Init+0x108>)
 8000604:	f000 fdb8 	bl	8001178 <HAL_ADC_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 800060e:	f000 fb55 	bl	8000cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061a:	2300      	movs	r3, #0
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	4619      	mov	r1, r3
 8000624:	481c      	ldr	r0, [pc, #112]	; (8000698 <MX_ADC1_Init+0x108>)
 8000626:	f001 f843 	bl	80016b0 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8000630:	f000 fb44 	bl	8000cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4619      	mov	r1, r3
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <MX_ADC1_Init+0x108>)
 8000644:	f001 f834 	bl	80016b0 <HAL_ADC_ConfigChannel>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800064e:	f000 fb35 	bl	8000cbc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000652:	2304      	movs	r3, #4
 8000654:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000662:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000666:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T4_TRGO;
 8000668:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800066c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <MX_ADC1_Init+0x108>)
 8000680:	f001 fbd0 	bl	8001e24 <HAL_ADCEx_InjectedConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800068a:	f000 fb17 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3730      	adds	r7, #48	; 0x30
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000094 	.word	0x20000094
 800069c:	40012000 	.word	0x40012000

080006a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a2f      	ldr	r2, [pc, #188]	; (800077c <HAL_ADC_MspInit+0xdc>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d157      	bne.n	8000772 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <HAL_ADC_MspInit+0xe0>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a2d      	ldr	r2, [pc, #180]	; (8000780 <HAL_ADC_MspInit+0xe0>)
 80006cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <HAL_ADC_MspInit+0xe0>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <HAL_ADC_MspInit+0xe0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <HAL_ADC_MspInit+0xe0>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <HAL_ADC_MspInit+0xe0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80006fa:	2313      	movs	r3, #19
 80006fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	2303      	movs	r3, #3
 8000700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	481d      	ldr	r0, [pc, #116]	; (8000784 <HAL_ADC_MspInit+0xe4>)
 800070e:	f002 f9a5 	bl	8002a5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 8000714:	4a1d      	ldr	r2, [pc, #116]	; (800078c <HAL_ADC_MspInit+0xec>)
 8000716:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 800072c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000730:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 8000734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000738:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 800073c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000740:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 8000744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000748:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 8000758:	f001 fe10 	bl	800237c <HAL_DMA_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000762:	f000 faab 	bl	8000cbc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a07      	ldr	r2, [pc, #28]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 800076a:	639a      	str	r2, [r3, #56]	; 0x38
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <HAL_ADC_MspInit+0xe8>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40012000 	.word	0x40012000
 8000780:	40023800 	.word	0x40023800
 8000784:	40020000 	.word	0x40020000
 8000788:	200000dc 	.word	0x200000dc
 800078c:	40026410 	.word	0x40026410

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <MX_DMA_Init+0x3c>)
 80007a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_DMA_Init+0x3c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2038      	movs	r0, #56	; 0x38
 80007b8:	f001 fda9 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007bc:	2038      	movs	r0, #56	; 0x38
 80007be:	f001 fdc2 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a2c      	ldr	r2, [pc, #176]	; (80008a0 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a25      	ldr	r2, [pc, #148]	; (80008a0 <MX_GPIO_Init+0xd0>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2160      	movs	r1, #96	; 0x60
 800085a:	4812      	ldr	r0, [pc, #72]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800085c:	f002 fa82 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000866:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_GPIO_Init+0xd8>)
 8000878:	f002 f8f0 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 800087c:	2360      	movs	r3, #96	; 0x60
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000894:	f002 f8e2 	bl	8002a5c <HAL_GPIO_Init>

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40020800 	.word	0x40020800

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b2:	f000 fbef 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b6:	f000 f855 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ba:	f7ff ff89 	bl	80007d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008be:	f000 fb4d 	bl	8000f5c <MX_USART2_UART_Init>
  MX_DMA_Init();
 80008c2:	f7ff ff65 	bl	8000790 <MX_DMA_Init>
  MX_ADC1_Init();
 80008c6:	f7ff fe63 	bl	8000590 <MX_ADC1_Init>
  MX_TIM2_Init();
 80008ca:	f000 fa75 	bl	8000db8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80008ce:	f000 fac1 	bl	8000e54 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008d2:	f000 f8b1 	bl	8000a38 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80008d6:	481b      	ldr	r0, [pc, #108]	; (8000944 <main+0x98>)
 80008d8:	f002 ff22 	bl	8003720 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&AdcRegular,2);
 80008dc:	2202      	movs	r2, #2
 80008de:	491a      	ldr	r1, [pc, #104]	; (8000948 <main+0x9c>)
 80008e0:	481a      	ldr	r0, [pc, #104]	; (800094c <main+0xa0>)
 80008e2:	f000 fdcd 	bl	8001480 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim4);
 80008e6:	481a      	ldr	r0, [pc, #104]	; (8000950 <main+0xa4>)
 80008e8:	f002 ff1a 	bl	8003720 <HAL_TIM_Base_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80008ec:	4817      	ldr	r0, [pc, #92]	; (800094c <main+0xa0>)
 80008ee:	f001 f98f 	bl	8001c10 <HAL_ADCEx_InjectedStart_IT>

  arm_rfft_fast_init_f32(&FFTHandler, FFT_SAMPLES);
 80008f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f6:	4817      	ldr	r0, [pc, #92]	; (8000954 <main+0xa8>)
 80008f8:	f003 fbd2 	bl	80040a0 <arm_rfft_fast_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(SamplesReady == 1)
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <main+0xac>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b01      	cmp	r3, #1
 8000904:	d1fa      	bne.n	80008fc <main+0x50>
	  {
		  SamplesReady = 0;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <main+0xac>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
		  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	e010      	b.n	8000934 <main+0x88>
		  {
			  FFTInBuffer[i] = (float)AdcInjected[i];
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <main+0xb0>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091a:	ee07 3a90 	vmov	s15, r3
 800091e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <main+0xb4>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	edc3 7a00 	vstr	s15, [r3]
		  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3301      	adds	r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800093a:	d3ea      	bcc.n	8000912 <main+0x66>
		  }

		  CalculateFFT();
 800093c:	f000 f8d8 	bl	8000af0 <CalculateFFT>
	  if(SamplesReady == 1)
 8000940:	e7dc      	b.n	80008fc <main+0x50>
 8000942:	bf00      	nop
 8000944:	200029b0 	.word	0x200029b0
 8000948:	20001954 	.word	0x20001954
 800094c:	20000094 	.word	0x20000094
 8000950:	20002968 	.word	0x20002968
 8000954:	2000193c 	.word	0x2000193c
 8000958:	20001958 	.word	0x20001958
 800095c:	2000113c 	.word	0x2000113c
 8000960:	2000195c 	.word	0x2000195c

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b094      	sub	sp, #80	; 0x50
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0320 	add.w	r3, r7, #32
 800096e:	2230      	movs	r2, #48	; 0x30
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f004 fb92 	bl	800509c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <SystemClock_Config+0xcc>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	4a27      	ldr	r2, [pc, #156]	; (8000a30 <SystemClock_Config+0xcc>)
 8000992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000996:	6413      	str	r3, [r2, #64]	; 0x40
 8000998:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <SystemClock_Config+0xcc>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <SystemClock_Config+0xd0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <SystemClock_Config+0xd0>)
 80009ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <SystemClock_Config+0xd0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c0:	2302      	movs	r3, #2
 80009c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c8:	2310      	movs	r3, #16
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009cc:	2302      	movs	r3, #2
 80009ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009d4:	2310      	movs	r3, #16
 80009d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009de:	2304      	movs	r3, #4
 80009e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e2:	2304      	movs	r3, #4
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 f9d4 	bl	8002d98 <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009f6:	f000 f961 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	230f      	movs	r3, #15
 80009fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fe:	2302      	movs	r3, #2
 8000a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2102      	movs	r1, #2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fc36 	bl	8003288 <HAL_RCC_ClockConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a22:	f000 f94b 	bl	8000cbc <Error_Handler>
  }
}
 8000a26:	bf00      	nop
 8000a28:	3750      	adds	r7, #80	; 0x50
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40007000 	.word	0x40007000

08000a38 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2012      	movs	r0, #18
 8000a42:	f001 fc64 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a46:	2012      	movs	r0, #18
 8000a48:	f001 fc7d 	bl	8002346 <HAL_NVIC_EnableIRQ>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	static uint16_t i = 0;

	if(hadc -> Instance == ADC1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <HAL_ADCEx_InjectedConvCpltCallback+0x54>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d11c      	bne.n	8000a9c <HAL_ADCEx_InjectedConvCpltCallback+0x4c>
	{
		AdcInjected[i] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000a62:	2101      	movs	r1, #1
 8000a64:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <HAL_ADCEx_InjectedConvCpltCallback+0x58>)
 8000a66:	f001 f9a5 	bl	8001db4 <HAL_ADCEx_InjectedGetValue>
 8000a6a:	4601      	mov	r1, r0
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_ADCEx_InjectedConvCpltCallback+0x5c>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	b289      	uxth	r1, r1
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_ADCEx_InjectedConvCpltCallback+0x60>)
 8000a76:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		i++;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_ADCEx_InjectedConvCpltCallback+0x5c>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_ADCEx_InjectedConvCpltCallback+0x5c>)
 8000a84:	801a      	strh	r2, [r3, #0]

		if(i == FFT_SAMPLES)
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_ADCEx_InjectedConvCpltCallback+0x5c>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a8e:	d105      	bne.n	8000a9c <HAL_ADCEx_InjectedConvCpltCallback+0x4c>
		{
			i = 0;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_ADCEx_InjectedConvCpltCallback+0x5c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	801a      	strh	r2, [r3, #0]
			SamplesReady = 1;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <HAL_ADCEx_InjectedConvCpltCallback+0x64>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40012000 	.word	0x40012000
 8000aa8:	20000094 	.word	0x20000094
 8000aac:	20000090 	.word	0x20000090
 8000ab0:	2000113c 	.word	0x2000113c
 8000ab4:	20001958 	.word	0x20001958

08000ab8 <complexABS>:

float complexABS(float real,float compl)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ac2:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8000ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ace:	edd7 7a00 	vldr	s15, [r7]
 8000ad2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ada:	eeb0 0a67 	vmov.f32	s0, s15
 8000ade:	f004 fb1b 	bl	8005118 <sqrtf>
 8000ae2:	eef0 7a40 	vmov.f32	s15, s0
}
 8000ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <CalculateFFT>:

void CalculateFFT()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
	arm_rfft_fast_f32(&FFTHandler,FFTInBuffer,FFTOutBuffer, 0);
 8000afa:	2300      	movs	r3, #0
 8000afc:	4a6b      	ldr	r2, [pc, #428]	; (8000cac <CalculateFFT+0x1bc>)
 8000afe:	496c      	ldr	r1, [pc, #432]	; (8000cb0 <CalculateFFT+0x1c0>)
 8000b00:	486c      	ldr	r0, [pc, #432]	; (8000cb4 <CalculateFFT+0x1c4>)
 8000b02:	f003 fb51 	bl	80041a8 <arm_rfft_fast_f32>

	int Freqs[FFT_SAMPLES];
	int FreqPoint = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000b0c:	f102 020c 	add.w	r2, r2, #12
 8000b10:	6013      	str	r3, [r2, #0]
	int Offset = 45; // variable noise floor offset
 8000b12:	232d      	movs	r3, #45	; 0x2d
 8000b14:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000b18:	f102 0204 	add.w	r2, r2, #4
 8000b1c:	6013      	str	r3, [r2, #0]

	//calculate abs values and linear-to-db
	for (int i = 0; i < FFT_SAMPLES; i = i+2)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000b24:	f102 0208 	add.w	r2, r2, #8
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	e067      	b.n	8000bfc <CalculateFFT+0x10c>
		{
			Freqs[FreqPoint] = (int)(20*log10f(complexABS(FFTOutBuffer[i], FFTOutBuffer[i+1]))) - Offset;
 8000b2c:	4a5f      	ldr	r2, [pc, #380]	; (8000cac <CalculateFFT+0x1bc>)
 8000b2e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000b32:	f103 0308 	add.w	r3, r3, #8
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	edd3 7a00 	vldr	s15, [r3]
 8000b40:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000b44:	f103 0308 	add.w	r3, r3, #8
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a57      	ldr	r2, [pc, #348]	; (8000cac <CalculateFFT+0x1bc>)
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	ed93 7a00 	vldr	s14, [r3]
 8000b56:	eef0 0a47 	vmov.f32	s1, s14
 8000b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b5e:	f7ff ffab 	bl	8000ab8 <complexABS>
 8000b62:	eef0 7a40 	vmov.f32	s15, s0
 8000b66:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6a:	f004 fa9f 	bl	80050ac <log10f>
 8000b6e:	eef0 7a40 	vmov.f32	s15, s0
 8000b72:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7e:	ee17 2a90 	vmov	r2, s15
 8000b82:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000b86:	f103 0304 	add.w	r3, r3, #4
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	1ad1      	subs	r1, r2, r3
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	3b0c      	subs	r3, #12
 8000b94:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000b98:	f102 020c 	add.w	r2, r2, #12
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			if(Freqs[FreqPoint] < 0)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	3b0c      	subs	r3, #12
 8000ba8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000bac:	f102 020c 	add.w	r2, r2, #12
 8000bb0:	6812      	ldr	r2, [r2, #0]
 8000bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	da0a      	bge.n	8000bd0 <CalculateFFT+0xe0>
			{
				Freqs[FreqPoint] = 0;
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	3b0c      	subs	r3, #12
 8000bc0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000bc4:	f102 020c 	add.w	r2, r2, #12
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			FreqPoint++;
 8000bd0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000bd4:	f103 030c 	add.w	r3, r3, #12
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000be0:	f102 020c 	add.w	r2, r2, #12
 8000be4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < FFT_SAMPLES; i = i+2)
 8000be6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000bea:	f103 0308 	add.w	r3, r3, #8
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000bf6:	f102 0208 	add.w	r2, r2, #8
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000c00:	f103 0308 	add.w	r3, r3, #8
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0a:	db8f      	blt.n	8000b2c <CalculateFFT+0x3c>
		}
	OutFreqArray[0] = (uint8_t)Freqs[1]; // 22 Hz
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	3b0c      	subs	r3, #12
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <CalculateFFT+0x1c8>)
 8000c18:	701a      	strb	r2, [r3, #0]
	OutFreqArray[1] = (uint8_t)Freqs[2]; // 63 Hz
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	3b0c      	subs	r3, #12
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <CalculateFFT+0x1c8>)
 8000c26:	705a      	strb	r2, [r3, #1]
	OutFreqArray[2] = (uint8_t)Freqs[3]; // 125 Hz
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	3b0c      	subs	r3, #12
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <CalculateFFT+0x1c8>)
 8000c34:	709a      	strb	r2, [r3, #2]
	OutFreqArray[3] = (uint8_t)Freqs[6]; // 250 Hz
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	3b0c      	subs	r3, #12
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <CalculateFFT+0x1c8>)
 8000c42:	70da      	strb	r2, [r3, #3]
	OutFreqArray[4] = (uint8_t)Freqs[12]; // 500 Hz
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	3b0c      	subs	r3, #12
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <CalculateFFT+0x1c8>)
 8000c50:	711a      	strb	r2, [r3, #4]
	OutFreqArray[5] = (uint8_t)Freqs[23]; // 1000 Hz
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	3b0c      	subs	r3, #12
 8000c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <CalculateFFT+0x1c8>)
 8000c5e:	715a      	strb	r2, [r3, #5]
	OutFreqArray[6] = (uint8_t)Freqs[51]; // 2200 Hz
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	3b0c      	subs	r3, #12
 8000c66:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <CalculateFFT+0x1c8>)
 8000c6e:	719a      	strb	r2, [r3, #6]
	OutFreqArray[7] = (uint8_t)Freqs[104]; // 4500 Hz
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	3b0c      	subs	r3, #12
 8000c76:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <CalculateFFT+0x1c8>)
 8000c7e:	71da      	strb	r2, [r3, #7]
	OutFreqArray[8] = (uint8_t)Freqs[207]; // 9000 Hz
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	3b0c      	subs	r3, #12
 8000c86:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <CalculateFFT+0x1c8>)
 8000c8e:	721a      	strb	r2, [r3, #8]
	OutFreqArray[9] = (uint8_t)Freqs[344]; // 15000 Hz
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	3b0c      	subs	r3, #12
 8000c96:	f8d3 3560 	ldr.w	r3, [r3, #1376]	; 0x560
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <CalculateFFT+0x1c8>)
 8000c9e:	725a      	strb	r2, [r3, #9]

}
 8000ca0:	bf00      	nop
 8000ca2:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000013c 	.word	0x2000013c
 8000cb0:	2000195c 	.word	0x2000195c
 8000cb4:	2000193c 	.word	0x2000193c
 8000cb8:	2000295c 	.word	0x2000295c

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d06:	2007      	movs	r0, #7
 8000d08:	f001 faf6 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f9e8 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <ADC_IRQHandler+0x10>)
 8000d72:	f000 fa44 	bl	80011fe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000094 	.word	0x20000094

08000d80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <DMA2_Stream0_IRQHandler+0x10>)
 8000d86:	f001 fbff 	bl	8002588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000dc 	.word	0x200000dc

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_TIM2_Init+0x98>)
 8000dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_TIM2_Init+0x98>)
 8000dde:	f240 3247 	movw	r2, #839	; 0x347
 8000de2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_TIM2_Init+0x98>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_TIM2_Init+0x98>)
 8000dec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_TIM2_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_TIM2_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfe:	4814      	ldr	r0, [pc, #80]	; (8000e50 <MX_TIM2_Init+0x98>)
 8000e00:	f002 fc3e 	bl	8003680 <HAL_TIM_Base_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e0a:	f7ff ff57 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_TIM2_Init+0x98>)
 8000e1c:	f002 fcda 	bl	80037d4 <HAL_TIM_ConfigClockSource>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e26:	f7ff ff49 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_TIM2_Init+0x98>)
 8000e38:	f002 feae 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e42:	f7ff ff3b 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200029b0 	.word	0x200029b0

08000e54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MX_TIM4_Init+0x94>)
 8000e72:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <MX_TIM4_Init+0x98>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MX_TIM4_Init+0x94>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_TIM4_Init+0x94>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 634;
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <MX_TIM4_Init+0x94>)
 8000e84:	f240 227a 	movw	r2, #634	; 0x27a
 8000e88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_TIM4_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_TIM4_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e96:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <MX_TIM4_Init+0x94>)
 8000e98:	f002 fbf2 	bl	8003680 <HAL_TIM_Base_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ea2:	f7ff ff0b 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <MX_TIM4_Init+0x94>)
 8000eb4:	f002 fc8e 	bl	80037d4 <HAL_TIM_ConfigClockSource>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000ebe:	f7ff fefd 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <MX_TIM4_Init+0x94>)
 8000ed0:	f002 fe62 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000eda:	f7ff feef 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20002968 	.word	0x20002968
 8000eec:	40000800 	.word	0x40000800

08000ef0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f00:	d10e      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HAL_TIM_Base_MspInit+0x64>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <HAL_TIM_Base_MspInit+0x64>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_TIM_Base_MspInit+0x64>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f1e:	e012      	b.n	8000f46 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <HAL_TIM_Base_MspInit+0x68>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10d      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_TIM_Base_MspInit+0x64>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_TIM_Base_MspInit+0x64>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_TIM_Base_MspInit+0x64>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40000800 	.word	0x40000800

08000f5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_USART2_UART_Init+0x50>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f94:	f002 fe6e 	bl	8003c74 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f9e:	f7ff fe8d 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200029f8 	.word	0x200029f8
 8000fac:	40004400 	.word	0x40004400

08000fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <HAL_UART_MspInit+0x84>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d12b      	bne.n	800102a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_UART_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800100a:	230c      	movs	r3, #12
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800101a:	2307      	movs	r3, #7
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <HAL_UART_MspInit+0x8c>)
 8001026:	f001 fd19 	bl	8002a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40004400 	.word	0x40004400
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopFillZerobss+0x26>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800106a:	f7ff fe93 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f003 fff1 	bl	8005054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fc1b 	bl	80008ac <main>
  bx  lr    
 8001076:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001084:	080188ac 	.word	0x080188ac
  ldr r2, =_sbss
 8001088:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800108c:	20002a40 	.word	0x20002a40

08001090 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <DMA1_Stream0_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_Init+0x40>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_Init+0x40>)
 80010aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_Init+0x40>)
 80010b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f001 f91b 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f808 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fdfe 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023c00 	.word	0x40023c00

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 f933 	bl	8002362 <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f001 f8fb 	bl	800230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000008 	.word	0x20000008
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	20002a3c 	.word	0x20002a3c

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20002a3c 	.word	0x20002a3c

08001178 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e033      	b.n	80011f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d109      	bne.n	80011aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fa82 	bl	80006a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d118      	bne.n	80011e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	f043 0202 	orr.w	r2, r3, #2
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fba2 	bl	8001914 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f023 0303 	bic.w	r3, r3, #3
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
 80011e6:	e001      	b.n	80011ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b02      	cmp	r3, #2
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0320 	and.w	r3, r3, #32
 800122e:	2b20      	cmp	r3, #32
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d049      	beq.n	80012d4 <HAL_ADC_IRQHandler+0xd6>
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d046      	beq.n	80012d4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d105      	bne.n	800125e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d12b      	bne.n	80012c4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001270:	2b00      	cmp	r3, #0
 8001272:	d127      	bne.n	80012c4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800128c:	2b00      	cmp	r3, #0
 800128e:	d119      	bne.n	80012c4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0220 	bic.w	r2, r2, #32
 800129e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f043 0201 	orr.w	r2, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f9cb 	bl	8001660 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f06f 0212 	mvn.w	r2, #18
 80012d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf0c      	ite	eq
 80012e2:	2301      	moveq	r3, #1
 80012e4:	2300      	movne	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f4:	2b80      	cmp	r3, #128	; 0x80
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d057      	beq.n	80013b6 <HAL_ADC_IRQHandler+0x1b8>
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d054      	beq.n	80013b6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b00      	cmp	r3, #0
 8001316:	d105      	bne.n	8001324 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d139      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001338:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d12b      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001358:	2b00      	cmp	r3, #0
 800135a:	d124      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001366:	2b00      	cmp	r3, #0
 8001368:	d11d      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800136e:	2b00      	cmp	r3, #0
 8001370:	d119      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001380:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d105      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fb52 	bl	8000a50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f06f 020c 	mvn.w	r2, #12
 80013b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d6:	2b40      	cmp	r3, #64	; 0x40
 80013d8:	bf0c      	ite	eq
 80013da:	2301      	moveq	r3, #1
 80013dc:	2300      	movne	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d017      	beq.n	8001418 <HAL_ADC_IRQHandler+0x21a>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d014      	beq.n	8001418 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10d      	bne.n	8001418 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f93d 	bl	8001688 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f06f 0201 	mvn.w	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b20      	cmp	r3, #32
 8001424:	bf0c      	ite	eq
 8001426:	2301      	moveq	r3, #1
 8001428:	2300      	movne	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d015      	beq.n	8001478 <HAL_ADC_IRQHandler+0x27a>
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d012      	beq.n	8001478 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f043 0202 	orr.w	r2, r3, #2
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f06f 0220 	mvn.w	r2, #32
 8001466:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f917 	bl	800169c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f06f 0220 	mvn.w	r2, #32
 8001476:	601a      	str	r2, [r3, #0]
  }
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_ADC_Start_DMA+0x1e>
 800149a:	2302      	movs	r3, #2
 800149c:	e0ce      	b.n	800163c <HAL_ADC_Start_DMA+0x1bc>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d018      	beq.n	80014e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0201 	orr.w	r2, r2, #1
 80014c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014c4:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <HAL_ADC_Start_DMA+0x1c4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a5f      	ldr	r2, [pc, #380]	; (8001648 <HAL_ADC_Start_DMA+0x1c8>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	0c9a      	lsrs	r2, r3, #18
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014d8:	e002      	b.n	80014e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	3b01      	subs	r3, #1
 80014de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f9      	bne.n	80014da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f4:	d107      	bne.n	8001506 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001504:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	f040 8086 	bne.w	8001622 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001540:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001554:	d106      	bne.n	8001564 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f023 0206 	bic.w	r2, r3, #6
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	645a      	str	r2, [r3, #68]	; 0x44
 8001562:	e002      	b.n	800156a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001572:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_ADC_Start_DMA+0x1cc>)
 8001574:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157a:	4a35      	ldr	r2, [pc, #212]	; (8001650 <HAL_ADC_Start_DMA+0x1d0>)
 800157c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001582:	4a34      	ldr	r2, [pc, #208]	; (8001654 <HAL_ADC_Start_DMA+0x1d4>)
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158a:	4a33      	ldr	r2, [pc, #204]	; (8001658 <HAL_ADC_Start_DMA+0x1d8>)
 800158c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001596:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	334c      	adds	r3, #76	; 0x4c
 80015c2:	4619      	mov	r1, r3
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f000 ff86 	bl	80024d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10f      	bne.n	80015f8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d129      	bne.n	800163a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	e020      	b.n	800163a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_ADC_Start_DMA+0x1dc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d11b      	bne.n	800163a <HAL_ADC_Start_DMA+0x1ba>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d114      	bne.n	800163a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	e00b      	b.n	800163a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f043 0210 	orr.w	r2, r3, #16
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f043 0201 	orr.w	r2, r3, #1
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000000 	.word	0x20000000
 8001648:	431bde83 	.word	0x431bde83
 800164c:	40012300 	.word	0x40012300
 8001650:	08001b0d 	.word	0x08001b0d
 8001654:	08001bc7 	.word	0x08001bc7
 8001658:	08001be3 	.word	0x08001be3
 800165c:	40012000 	.word	0x40012000

08001660 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x1c>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e113      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x244>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b09      	cmp	r3, #9
 80016da:	d925      	bls.n	8001728 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68d9      	ldr	r1, [r3, #12]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	3b1e      	subs	r3, #30
 80016f2:	2207      	movs	r2, #7
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43da      	mvns	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	400a      	ands	r2, r1
 8001700:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68d9      	ldr	r1, [r3, #12]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	4603      	mov	r3, r0
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4403      	add	r3, r0
 800171a:	3b1e      	subs	r3, #30
 800171c:	409a      	lsls	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	e022      	b.n	800176e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6919      	ldr	r1, [r3, #16]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	2207      	movs	r2, #7
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	400a      	ands	r2, r1
 800174a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6919      	ldr	r1, [r3, #16]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	4603      	mov	r3, r0
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4403      	add	r3, r0
 8001764:	409a      	lsls	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b06      	cmp	r3, #6
 8001774:	d824      	bhi.n	80017c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b05      	subs	r3, #5
 8001788:	221f      	movs	r2, #31
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b05      	subs	r3, #5
 80017b2:	fa00 f203 	lsl.w	r2, r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
 80017be:	e04c      	b.n	800185a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d824      	bhi.n	8001812 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	3b23      	subs	r3, #35	; 0x23
 80017da:	221f      	movs	r2, #31
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43da      	mvns	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	400a      	ands	r2, r1
 80017e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3b23      	subs	r3, #35	; 0x23
 8001804:	fa00 f203 	lsl.w	r2, r0, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
 8001810:	e023      	b.n	800185a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	3b41      	subs	r3, #65	; 0x41
 8001824:	221f      	movs	r2, #31
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	400a      	ands	r2, r1
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	3b41      	subs	r3, #65	; 0x41
 800184e:	fa00 f203 	lsl.w	r2, r0, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800185a:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_ADC_ConfigChannel+0x250>)
 800185c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a28      	ldr	r2, [pc, #160]	; (8001904 <HAL_ADC_ConfigChannel+0x254>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d10f      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1d8>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b12      	cmp	r3, #18
 800186e:	d10b      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_ADC_ConfigChannel+0x254>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d12b      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x23a>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_ADC_ConfigChannel+0x258>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d003      	beq.n	80018a4 <HAL_ADC_ConfigChannel+0x1f4>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b11      	cmp	r3, #17
 80018a2:	d122      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_ADC_ConfigChannel+0x258>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d111      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_ADC_ConfigChannel+0x25c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a11      	ldr	r2, [pc, #68]	; (8001910 <HAL_ADC_ConfigChannel+0x260>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9a      	lsrs	r2, r3, #18
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40012300 	.word	0x40012300
 8001904:	40012000 	.word	0x40012000
 8001908:	10000012 	.word	0x10000012
 800190c:	20000000 	.word	0x20000000
 8001910:	431bde83 	.word	0x431bde83

08001914 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800191c:	4b79      	ldr	r3, [pc, #484]	; (8001b04 <ADC_Init+0x1f0>)
 800191e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	431a      	orrs	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	021a      	lsls	r2, r3, #8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800196c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800198e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6899      	ldr	r1, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <ADC_Init+0x1f4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d022      	beq.n	80019f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6899      	ldr	r1, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6899      	ldr	r1, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	e00f      	b.n	8001a12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0202 	bic.w	r2, r2, #2
 8001a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6899      	ldr	r1, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7e1b      	ldrb	r3, [r3, #24]
 8001a2c:	005a      	lsls	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01b      	beq.n	8001a78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6859      	ldr	r1, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	035a      	lsls	r2, r3, #13
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	e007      	b.n	8001a88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	051a      	lsls	r2, r3, #20
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aca:	025a      	lsls	r2, r3, #9
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6899      	ldr	r1, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	029a      	lsls	r2, r3, #10
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	609a      	str	r2, [r3, #8]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40012300 	.word	0x40012300
 8001b08:	0f000001 	.word	0x0f000001

08001b0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d13c      	bne.n	8001ba0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d12b      	bne.n	8001b98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d127      	bne.n	8001b98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d119      	bne.n	8001b98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0220 	bic.w	r2, r2, #32
 8001b72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d105      	bne.n	8001b98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff fd61 	bl	8001660 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b9e:	e00e      	b.n	8001bbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f7ff fd75 	bl	800169c <HAL_ADC_ErrorCallback>
}
 8001bb2:	e004      	b.n	8001bbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	4798      	blx	r3
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7ff fd4d 	bl	8001674 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2240      	movs	r2, #64	; 0x40
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f043 0204 	orr.w	r2, r3, #4
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7ff fd4a 	bl	800169c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADCEx_InjectedStart_IT+0x22>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e0b2      	b.n	8001d98 <HAL_ADCEx_InjectedStart_IT+0x188>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d018      	beq.n	8001c7a <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c58:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <HAL_ADCEx_InjectedStart_IT+0x194>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_ADCEx_InjectedStart_IT+0x198>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0c9a      	lsrs	r2, r3, #18
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c6c:	e002      	b.n	8001c74 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f9      	bne.n	8001c6e <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d17a      	bne.n	8001d7e <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0204 	mvn.w	r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cce:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_ADCEx_InjectedStart_IT+0x19c>)
 8001cd2:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d124      	bne.n	8001d2a <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d041      	beq.n	8001d96 <HAL_ADCEx_InjectedStart_IT+0x186>
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d03e      	beq.n	8001d96 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	e035      	b.n	8001d96 <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf0c      	ite	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	2300      	movne	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d11a      	bne.n	8001d96 <HAL_ADCEx_InjectedStart_IT+0x186>
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d017      	beq.n	8001d96 <HAL_ADCEx_InjectedStart_IT+0x186>
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d014      	beq.n	8001d96 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	e00b      	b.n	8001d96 <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	20000000 	.word	0x20000000
 8001da8:	431bde83 	.word	0x431bde83
 8001dac:	40012300 	.word	0x40012300
 8001db0:	40012000 	.word	0x40012000

08001db4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f06f 0204 	mvn.w	r2, #4
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d81f      	bhi.n	8001e14 <HAL_ADCEx_InjectedGetValue+0x60>
 8001dd4:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <HAL_ADCEx_InjectedGetValue+0x28>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001e0b 	.word	0x08001e0b
 8001de0:	08001e01 	.word	0x08001e01
 8001de4:	08001df7 	.word	0x08001df7
 8001de8:	08001ded 	.word	0x08001ded
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df2:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001df4:	e00f      	b.n	8001e16 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001dfe:	e00a      	b.n	8001e16 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001e08:	e005      	b.n	8001e16 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001e12:	e000      	b.n	8001e16 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001e14:	bf00      	nop
  }
  return tmp;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e17e      	b.n	800213a <HAL_ADCEx_InjectedConfigChannel+0x316>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	d925      	bls.n	8001e98 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68d9      	ldr	r1, [r3, #12]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b1e      	subs	r3, #30
 8001e62:	2207      	movs	r2, #7
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	400a      	ands	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68d9      	ldr	r1, [r3, #12]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	4603      	mov	r3, r0
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4403      	add	r3, r0
 8001e8a:	3b1e      	subs	r3, #30
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	e022      	b.n	8001ede <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6919      	ldr	r1, [r3, #16]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	2207      	movs	r2, #7
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	400a      	ands	r2, r1
 8001eba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6919      	ldr	r1, [r3, #16]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4403      	add	r3, r0
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	051a      	lsls	r2, r3, #20
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3303      	adds	r3, #3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	221f      	movs	r2, #31
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	400a      	ands	r2, r1
 8001f34:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3303      	adds	r3, #3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	fa00 f203 	lsl.w	r2, r0, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a75      	ldr	r2, [pc, #468]	; (8002148 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d022      	beq.n	8001fbc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6899      	ldr	r1, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	e00f      	b.n	8001fdc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001fca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001fda:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	7d5b      	ldrb	r3, [r3, #21]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	e007      	b.n	8002006 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002004:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7d1b      	ldrb	r3, [r3, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	e007      	b.n	8002030 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800202e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d02e      	beq.n	8002096 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002038:	2b03      	cmp	r3, #3
 800203a:	d840      	bhi.n	80020be <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800203c:	2b01      	cmp	r3, #1
 800203e:	d002      	beq.n	8002046 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002040:	2b02      	cmp	r3, #2
 8002042:	d014      	beq.n	800206e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002044:	e03b      	b.n	80020be <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002054:	f023 030f 	bic.w	r3, r3, #15
 8002058:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6959      	ldr	r1, [r3, #20]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	615a      	str	r2, [r3, #20]
      break;
 800206c:	e03b      	b.n	80020e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800207c:	f023 030f 	bic.w	r3, r3, #15
 8002080:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6999      	ldr	r1, [r3, #24]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	619a      	str	r2, [r3, #24]
      break;
 8002094:	e027      	b.n	80020e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80020a4:	f023 030f 	bic.w	r3, r3, #15
 80020a8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	69d9      	ldr	r1, [r3, #28]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	61da      	str	r2, [r3, #28]
      break;
 80020bc:	e013      	b.n	80020e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80020cc:	f023 030f 	bic.w	r3, r3, #15
 80020d0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a19      	ldr	r1, [r3, #32]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	621a      	str	r2, [r3, #32]
      break;
 80020e4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e6:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80020e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d109      	bne.n	8002108 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b12      	cmp	r3, #18
 80020fa:	d105      	bne.n	8002108 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10e      	bne.n	8002130 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a0f      	ldr	r2, [pc, #60]	; (8002154 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d003      	beq.n	8002124 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b11      	cmp	r3, #17
 8002122:	d105      	bne.n	8002130 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	000f0001 	.word	0x000f0001
 800214c:	40012300 	.word	0x40012300
 8002150:	40012000 	.word	0x40012000
 8002154:	10000012 	.word	0x10000012

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0b      	blt.n	80021e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4907      	ldr	r1, [pc, #28]	; (80021f4 <__NVIC_EnableIRQ+0x38>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2001      	movs	r0, #1
 80021de:	fa00 f202 	lsl.w	r2, r0, r2
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f7ff ff8e 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff29 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff3e 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff8e 	bl	800224c <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff5d 	bl	80021f8 <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff31 	bl	80021bc <__NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffa2 	bl	80022b4 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7fe feea 	bl	8001160 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e099      	b.n	80024cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b8:	e00f      	b.n	80023da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ba:	f7fe fed1 	bl	8001160 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d908      	bls.n	80023da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2203      	movs	r2, #3
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e078      	b.n	80024cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e8      	bne.n	80023ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <HAL_DMA_Init+0x158>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2b04      	cmp	r3, #4
 8002432:	d107      	bne.n	8002444 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	4313      	orrs	r3, r2
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f023 0307 	bic.w	r3, r3, #7
 800245a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	2b04      	cmp	r3, #4
 800246c:	d117      	bne.n	800249e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00e      	beq.n	800249e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fa6f 	bl	8002964 <DMA_CheckFifoParam>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2240      	movs	r2, #64	; 0x40
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800249a:	2301      	movs	r3, #1
 800249c:	e016      	b.n	80024cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa26 	bl	80028f8 <DMA_CalcBaseAndBitshift>
 80024ac:	4603      	mov	r3, r0
 80024ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	223f      	movs	r2, #63	; 0x3f
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	f010803f 	.word	0xf010803f

080024d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_DMA_Start_IT+0x26>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e040      	b.n	8002580 <HAL_DMA_Start_IT+0xa8>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d12f      	bne.n	8002572 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f9b8 	bl	800289c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	223f      	movs	r2, #63	; 0x3f
 8002532:	409a      	lsls	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0216 	orr.w	r2, r2, #22
 8002546:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0208 	orr.w	r2, r2, #8
 800255e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e005      	b.n	800257e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800257e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002594:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <HAL_DMA_IRQHandler+0x258>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a92      	ldr	r2, [pc, #584]	; (80027e4 <HAL_DMA_IRQHandler+0x25c>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0a9b      	lsrs	r3, r3, #10
 80025a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	2208      	movs	r2, #8
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01a      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0204 	bic.w	r2, r2, #4
 80025da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	2208      	movs	r2, #8
 80025e2:	409a      	lsls	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2201      	movs	r2, #1
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2201      	movs	r2, #1
 8002618:	409a      	lsls	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0202 	orr.w	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	2204      	movs	r2, #4
 8002630:	409a      	lsls	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00b      	beq.n	8002660 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2204      	movs	r2, #4
 800264e:	409a      	lsls	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	2210      	movs	r2, #16
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d043      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d03c      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	2210      	movs	r2, #16
 8002684:	409a      	lsls	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d018      	beq.n	80026ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d108      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d024      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
 80026b6:	e01f      	b.n	80026f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
 80026c8:	e016      	b.n	80026f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0208 	bic.w	r2, r2, #8
 80026e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2220      	movs	r2, #32
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 808e 	beq.w	8002826 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8086 	beq.w	8002826 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	2220      	movs	r2, #32
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b05      	cmp	r3, #5
 8002730:	d136      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0216 	bic.w	r2, r2, #22
 8002740:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002750:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <HAL_DMA_IRQHandler+0x1da>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0208 	bic.w	r2, r2, #8
 8002770:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	223f      	movs	r2, #63	; 0x3f
 8002778:	409a      	lsls	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002792:	2b00      	cmp	r3, #0
 8002794:	d07d      	beq.n	8002892 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
        }
        return;
 800279e:	e078      	b.n	8002892 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01c      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d108      	bne.n	80027ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d030      	beq.n	8002826 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
 80027cc:	e02b      	b.n	8002826 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
 80027de:	e022      	b.n	8002826 <HAL_DMA_IRQHandler+0x29e>
 80027e0:	20000000 	.word	0x20000000
 80027e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0210 	bic.w	r2, r2, #16
 8002804:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	2b00      	cmp	r3, #0
 800282c:	d032      	beq.n	8002894 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d022      	beq.n	8002880 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2205      	movs	r2, #5
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3301      	adds	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	429a      	cmp	r2, r3
 800285c:	d307      	bcc.n	800286e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f2      	bne.n	8002852 <HAL_DMA_IRQHandler+0x2ca>
 800286c:	e000      	b.n	8002870 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800286e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
 8002890:	e000      	b.n	8002894 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002892:	bf00      	nop
    }
  }
}
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop

0800289c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	d108      	bne.n	80028dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028da:	e007      	b.n	80028ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	60da      	str	r2, [r3, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3b10      	subs	r3, #16
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <DMA_CalcBaseAndBitshift+0x64>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <DMA_CalcBaseAndBitshift+0x68>)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d909      	bls.n	800293a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800292e:	f023 0303 	bic.w	r3, r3, #3
 8002932:	1d1a      	adds	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	659a      	str	r2, [r3, #88]	; 0x58
 8002938:	e007      	b.n	800294a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002942:	f023 0303 	bic.w	r3, r3, #3
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	aaaaaaab 	.word	0xaaaaaaab
 8002960:	08005438 	.word	0x08005438

08002964 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d11f      	bne.n	80029be <DMA_CheckFifoParam+0x5a>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d856      	bhi.n	8002a32 <DMA_CheckFifoParam+0xce>
 8002984:	a201      	add	r2, pc, #4	; (adr r2, 800298c <DMA_CheckFifoParam+0x28>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	0800299d 	.word	0x0800299d
 8002990:	080029af 	.word	0x080029af
 8002994:	0800299d 	.word	0x0800299d
 8002998:	08002a33 	.word	0x08002a33
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d046      	beq.n	8002a36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ac:	e043      	b.n	8002a36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029b6:	d140      	bne.n	8002a3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029bc:	e03d      	b.n	8002a3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c6:	d121      	bne.n	8002a0c <DMA_CheckFifoParam+0xa8>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d837      	bhi.n	8002a3e <DMA_CheckFifoParam+0xda>
 80029ce:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <DMA_CheckFifoParam+0x70>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029eb 	.word	0x080029eb
 80029dc:	080029e5 	.word	0x080029e5
 80029e0:	080029fd 	.word	0x080029fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      break;
 80029e8:	e030      	b.n	8002a4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d025      	beq.n	8002a42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fa:	e022      	b.n	8002a42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a04:	d11f      	bne.n	8002a46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a0a:	e01c      	b.n	8002a46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d903      	bls.n	8002a1a <DMA_CheckFifoParam+0xb6>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d003      	beq.n	8002a20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a18:	e018      	b.n	8002a4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1e:	e015      	b.n	8002a4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00e      	beq.n	8002a4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a30:	e00b      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a32:	bf00      	nop
 8002a34:	e00a      	b.n	8002a4c <DMA_CheckFifoParam+0xe8>
      break;
 8002a36:	bf00      	nop
 8002a38:	e008      	b.n	8002a4c <DMA_CheckFifoParam+0xe8>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e006      	b.n	8002a4c <DMA_CheckFifoParam+0xe8>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e004      	b.n	8002a4c <DMA_CheckFifoParam+0xe8>
      break;
 8002a42:	bf00      	nop
 8002a44:	e002      	b.n	8002a4c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop

08002a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	e159      	b.n	8002d2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	f040 8148 	bne.w	8002d26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d005      	beq.n	8002aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d130      	bne.n	8002b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	2203      	movs	r2, #3
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 0201 	and.w	r2, r3, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d017      	beq.n	8002b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d123      	bne.n	8002ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	08da      	lsrs	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3208      	adds	r2, #8
 8002b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	08da      	lsrs	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3208      	adds	r2, #8
 8002b9a:	69b9      	ldr	r1, [r7, #24]
 8002b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a2 	beq.w	8002d26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b57      	ldr	r3, [pc, #348]	; (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf2:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfe:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_GPIO_Init+0x2ec>)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	220f      	movs	r2, #15
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a49      	ldr	r2, [pc, #292]	; (8002d4c <HAL_GPIO_Init+0x2f0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x202>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a48      	ldr	r2, [pc, #288]	; (8002d50 <HAL_GPIO_Init+0x2f4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x1fe>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a47      	ldr	r2, [pc, #284]	; (8002d54 <HAL_GPIO_Init+0x2f8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x1fa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a46      	ldr	r2, [pc, #280]	; (8002d58 <HAL_GPIO_Init+0x2fc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x1f6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a45      	ldr	r2, [pc, #276]	; (8002d5c <HAL_GPIO_Init+0x300>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x1f2>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	e008      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c4e:	2307      	movs	r3, #7
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e004      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e002      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f002 0203 	and.w	r2, r2, #3
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	4093      	lsls	r3, r2
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c70:	4935      	ldr	r1, [pc, #212]	; (8002d48 <HAL_GPIO_Init+0x2ec>)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ccc:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d20:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	f67f aea2 	bls.w	8002a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40020800 	.word	0x40020800
 8002d58:	40020c00 	.word	0x40020c00
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40013c00 	.word	0x40013c00

08002d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
 8002d70:	4613      	mov	r3, r2
 8002d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d74:	787b      	ldrb	r3, [r7, #1]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d80:	e003      	b.n	8002d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	041a      	lsls	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	619a      	str	r2, [r3, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e264      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d075      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002db6:	4ba3      	ldr	r3, [pc, #652]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d00c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc2:	4ba0      	ldr	r3, [pc, #640]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d112      	bne.n	8002df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dce:	4b9d      	ldr	r3, [pc, #628]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dda:	d10b      	bne.n	8002df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	4b99      	ldr	r3, [pc, #612]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d05b      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x108>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d157      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e23f      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d106      	bne.n	8002e0c <HAL_RCC_OscConfig+0x74>
 8002dfe:	4b91      	ldr	r3, [pc, #580]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a90      	ldr	r2, [pc, #576]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e01d      	b.n	8002e48 <HAL_RCC_OscConfig+0xb0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x98>
 8002e16:	4b8b      	ldr	r3, [pc, #556]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a8a      	ldr	r2, [pc, #552]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b88      	ldr	r3, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a87      	ldr	r2, [pc, #540]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0xb0>
 8002e30:	4b84      	ldr	r3, [pc, #528]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a83      	ldr	r2, [pc, #524]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b81      	ldr	r3, [pc, #516]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a80      	ldr	r2, [pc, #512]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe f986 	bl	8001160 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe f982 	bl	8001160 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e204      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0xc0>
 8002e76:	e014      	b.n	8002ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe f972 	bl	8001160 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e80:	f7fe f96e 	bl	8001160 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1f0      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	4b6c      	ldr	r3, [pc, #432]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0xe8>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d063      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eae:	4b65      	ldr	r3, [pc, #404]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eba:	4b62      	ldr	r3, [pc, #392]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d11c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec6:	4b5f      	ldr	r3, [pc, #380]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d116      	bne.n	8002f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_RCC_OscConfig+0x152>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e1c4      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eea:	4b56      	ldr	r3, [pc, #344]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4952      	ldr	r1, [pc, #328]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efe:	e03a      	b.n	8002f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f08:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <HAL_RCC_OscConfig+0x2b0>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fe f927 	bl	8001160 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f16:	f7fe f923 	bl	8001160 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e1a5      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	4b46      	ldr	r3, [pc, #280]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	4b43      	ldr	r3, [pc, #268]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4940      	ldr	r1, [pc, #256]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4a:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <HAL_RCC_OscConfig+0x2b0>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe f906 	bl	8001160 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f58:	f7fe f902 	bl	8001160 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e184      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	4b36      	ldr	r3, [pc, #216]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d030      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8a:	4b30      	ldr	r3, [pc, #192]	; (800304c <HAL_RCC_OscConfig+0x2b4>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe f8e6 	bl	8001160 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f98:	f7fe f8e2 	bl	8001160 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e164      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x200>
 8002fb6:	e015      	b.n	8002fe4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <HAL_RCC_OscConfig+0x2b4>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe f8cf 	bl	8001160 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc6:	f7fe f8cb 	bl	8001160 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e14d      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80a0 	beq.w	8003132 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10f      	bne.n	8003022 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_OscConfig+0x2b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d121      	bne.n	8003072 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_RCC_OscConfig+0x2b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <HAL_RCC_OscConfig+0x2b8>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fe f891 	bl	8001160 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	e011      	b.n	8003066 <HAL_RCC_OscConfig+0x2ce>
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	42470000 	.word	0x42470000
 800304c:	42470e80 	.word	0x42470e80
 8003050:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003054:	f7fe f884 	bl	8001160 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e106      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b85      	ldr	r3, [pc, #532]	; (800327c <HAL_RCC_OscConfig+0x4e4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d106      	bne.n	8003088 <HAL_RCC_OscConfig+0x2f0>
 800307a:	4b81      	ldr	r3, [pc, #516]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a80      	ldr	r2, [pc, #512]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
 8003086:	e01c      	b.n	80030c2 <HAL_RCC_OscConfig+0x32a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b05      	cmp	r3, #5
 800308e:	d10c      	bne.n	80030aa <HAL_RCC_OscConfig+0x312>
 8003090:	4b7b      	ldr	r3, [pc, #492]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	4a7a      	ldr	r2, [pc, #488]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	6713      	str	r3, [r2, #112]	; 0x70
 800309c:	4b78      	ldr	r3, [pc, #480]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	4a77      	ldr	r2, [pc, #476]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6713      	str	r3, [r2, #112]	; 0x70
 80030a8:	e00b      	b.n	80030c2 <HAL_RCC_OscConfig+0x32a>
 80030aa:	4b75      	ldr	r3, [pc, #468]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a74      	ldr	r2, [pc, #464]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
 80030b6:	4b72      	ldr	r3, [pc, #456]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	4a71      	ldr	r2, [pc, #452]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d015      	beq.n	80030f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe f849 	bl	8001160 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe f845 	bl	8001160 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0c5      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	4b65      	ldr	r3, [pc, #404]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ee      	beq.n	80030d2 <HAL_RCC_OscConfig+0x33a>
 80030f4:	e014      	b.n	8003120 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fe f833 	bl	8001160 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe f82f 	bl	8001160 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0af      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003114:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ee      	bne.n	80030fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d105      	bne.n	8003132 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003126:	4b56      	ldr	r3, [pc, #344]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a55      	ldr	r2, [pc, #340]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 800312c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 809b 	beq.w	8003272 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d05c      	beq.n	8003202 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d141      	bne.n	80031d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7fe f803 	bl	8001160 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315e:	f7fd ffff 	bl	8001160 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e081      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003170:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	019b      	lsls	r3, r3, #6
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	3b01      	subs	r3, #1
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	4937      	ldr	r1, [pc, #220]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fd ffd8 	bl	8001160 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fd ffd4 	bl	8001160 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e056      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x41c>
 80031d2:	e04e      	b.n	8003272 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7fd ffc1 	bl	8001160 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e2:	f7fd ffbd 	bl	8001160 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e03f      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f4:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0x44a>
 8003200:	e037      	b.n	8003272 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e032      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800320e:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d028      	beq.n	800326e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d121      	bne.n	800326e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d11a      	bne.n	800326e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800323e:	4013      	ands	r3, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003244:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003246:	4293      	cmp	r3, r2
 8003248:	d111      	bne.n	800326e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	3b01      	subs	r3, #1
 8003258:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d107      	bne.n	800326e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40007000 	.word	0x40007000
 8003280:	40023800 	.word	0x40023800
 8003284:	42470060 	.word	0x42470060

08003288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0cc      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800329c:	4b68      	ldr	r3, [pc, #416]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d90c      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0b8      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032dc:	4b59      	ldr	r3, [pc, #356]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	494d      	ldr	r1, [pc, #308]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d044      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d119      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d003      	beq.n	8003346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003342:	2b03      	cmp	r3, #3
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e06f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e067      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 0203 	bic.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4934      	ldr	r1, [pc, #208]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003378:	f7fd fef2 	bl	8001160 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	e00a      	b.n	8003396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003380:	f7fd feee 	bl	8001160 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e04f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 020c 	and.w	r2, r3, #12
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d1eb      	bne.n	8003380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a8:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d20c      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e032      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4916      	ldr	r1, [pc, #88]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	490e      	ldr	r1, [pc, #56]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800340e:	f000 f821 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490a      	ldr	r1, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fe52 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023c00 	.word	0x40023c00
 8003444:	40023800 	.word	0x40023800
 8003448:	08005420 	.word	0x08005420
 800344c:	20000000 	.word	0x20000000
 8003450:	20000004 	.word	0x20000004

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	2300      	movs	r3, #0
 8003466:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800346c:	4b67      	ldr	r3, [pc, #412]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	d00d      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x40>
 8003478:	2b08      	cmp	r3, #8
 800347a:	f200 80bd 	bhi.w	80035f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x34>
 8003482:	2b04      	cmp	r3, #4
 8003484:	d003      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x3a>
 8003486:	e0b7      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b61      	ldr	r3, [pc, #388]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800348a:	60bb      	str	r3, [r7, #8]
       break;
 800348c:	e0b7      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800348e:	4b61      	ldr	r3, [pc, #388]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003490:	60bb      	str	r3, [r7, #8]
      break;
 8003492:	e0b4      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003494:	4b5d      	ldr	r3, [pc, #372]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800349c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800349e:	4b5b      	ldr	r3, [pc, #364]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d04d      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034aa:	4b58      	ldr	r3, [pc, #352]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	099b      	lsrs	r3, r3, #6
 80034b0:	461a      	mov	r2, r3
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	ea02 0800 	and.w	r8, r2, r0
 80034c2:	ea03 0901 	and.w	r9, r3, r1
 80034c6:	4640      	mov	r0, r8
 80034c8:	4649      	mov	r1, r9
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	014b      	lsls	r3, r1, #5
 80034d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034d8:	0142      	lsls	r2, r0, #5
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	ebb0 0008 	subs.w	r0, r0, r8
 80034e2:	eb61 0109 	sbc.w	r1, r1, r9
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	018b      	lsls	r3, r1, #6
 80034f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034f4:	0182      	lsls	r2, r0, #6
 80034f6:	1a12      	subs	r2, r2, r0
 80034f8:	eb63 0301 	sbc.w	r3, r3, r1
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	00d9      	lsls	r1, r3, #3
 8003506:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800350a:	00d0      	lsls	r0, r2, #3
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	eb12 0208 	adds.w	r2, r2, r8
 8003514:	eb43 0309 	adc.w	r3, r3, r9
 8003518:	f04f 0000 	mov.w	r0, #0
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	0259      	lsls	r1, r3, #9
 8003522:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003526:	0250      	lsls	r0, r2, #9
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	461a      	mov	r2, r3
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	f7fc feae 	bl	8000298 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e04a      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	461a      	mov	r2, r3
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	ea02 0400 	and.w	r4, r2, r0
 800355e:	ea03 0501 	and.w	r5, r3, r1
 8003562:	4620      	mov	r0, r4
 8003564:	4629      	mov	r1, r5
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	014b      	lsls	r3, r1, #5
 8003570:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003574:	0142      	lsls	r2, r0, #5
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	1b00      	subs	r0, r0, r4
 800357c:	eb61 0105 	sbc.w	r1, r1, r5
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	018b      	lsls	r3, r1, #6
 800358a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800358e:	0182      	lsls	r2, r0, #6
 8003590:	1a12      	subs	r2, r2, r0
 8003592:	eb63 0301 	sbc.w	r3, r3, r1
 8003596:	f04f 0000 	mov.w	r0, #0
 800359a:	f04f 0100 	mov.w	r1, #0
 800359e:	00d9      	lsls	r1, r3, #3
 80035a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a4:	00d0      	lsls	r0, r2, #3
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	1912      	adds	r2, r2, r4
 80035ac:	eb45 0303 	adc.w	r3, r5, r3
 80035b0:	f04f 0000 	mov.w	r0, #0
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	0299      	lsls	r1, r3, #10
 80035ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035be:	0290      	lsls	r0, r2, #10
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f7fc fe62 	bl	8000298 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	60bb      	str	r3, [r7, #8]
      break;
 80035f6:	e002      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035fa:	60bb      	str	r3, [r7, #8]
      break;
 80035fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fe:	68bb      	ldr	r3, [r7, #8]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	007a1200 	.word	0x007a1200

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <HAL_RCC_GetHCLKFreq+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000000 	.word	0x20000000

08003630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003634:	f7ff fff0 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	08005430 	.word	0x08005430

08003658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800365c:	f7ff ffdc 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0b5b      	lsrs	r3, r3, #13
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	; (800367c <HAL_RCC_GetPCLK2Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	08005430 	.word	0x08005430

08003680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e041      	b.n	8003716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fc22 	bl	8000ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 f950 	bl	8003964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e03c      	b.n	80037b2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_TIM_Base_Start+0xa0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_TIM_Base_Start+0x5c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d013      	beq.n	800377c <HAL_TIM_Base_Start+0x5c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_TIM_Base_Start+0xa4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_TIM_Base_Start+0x5c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a19      	ldr	r2, [pc, #100]	; (80037c8 <HAL_TIM_Base_Start+0xa8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_TIM_Base_Start+0x5c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a17      	ldr	r2, [pc, #92]	; (80037cc <HAL_TIM_Base_Start+0xac>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_TIM_Base_Start+0x5c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a16      	ldr	r2, [pc, #88]	; (80037d0 <HAL_TIM_Base_Start+0xb0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d111      	bne.n	80037a0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b06      	cmp	r3, #6
 800378c:	d010      	beq.n	80037b0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379e:	e007      	b.n	80037b0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40014000 	.word	0x40014000

080037d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_ConfigClockSource+0x1c>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0b4      	b.n	800395a <HAL_TIM_ConfigClockSource+0x186>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800380e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003828:	d03e      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0xd4>
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382e:	f200 8087 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003836:	f000 8086 	beq.w	8003946 <HAL_TIM_ConfigClockSource+0x172>
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383e:	d87f      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b70      	cmp	r3, #112	; 0x70
 8003842:	d01a      	beq.n	800387a <HAL_TIM_ConfigClockSource+0xa6>
 8003844:	2b70      	cmp	r3, #112	; 0x70
 8003846:	d87b      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b60      	cmp	r3, #96	; 0x60
 800384a:	d050      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x11a>
 800384c:	2b60      	cmp	r3, #96	; 0x60
 800384e:	d877      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003850:	2b50      	cmp	r3, #80	; 0x50
 8003852:	d03c      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0xfa>
 8003854:	2b50      	cmp	r3, #80	; 0x50
 8003856:	d873      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d058      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x13a>
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d86f      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003860:	2b30      	cmp	r3, #48	; 0x30
 8003862:	d064      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003864:	2b30      	cmp	r3, #48	; 0x30
 8003866:	d86b      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d060      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d867      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d05c      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003874:	2b10      	cmp	r3, #16
 8003876:	d05a      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003878:	e062      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6899      	ldr	r1, [r3, #8]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f000 f965 	bl	8003b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800389c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	609a      	str	r2, [r3, #8]
      break;
 80038a6:	e04f      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f000 f94e 	bl	8003b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ca:	609a      	str	r2, [r3, #8]
      break;
 80038cc:	e03c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 f8c2 	bl	8003a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2150      	movs	r1, #80	; 0x50
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f91b 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 80038ec:	e02c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 f8e1 	bl	8003ac2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2160      	movs	r1, #96	; 0x60
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f90b 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 800390c:	e01c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	461a      	mov	r2, r3
 800391c:	f000 f8a2 	bl	8003a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2140      	movs	r1, #64	; 0x40
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f8fb 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 800392c:	e00c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f000 f8f2 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 800393e:	e003      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      break;
 8003944:	e000      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <TIM_Base_SetConfig+0xe4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00f      	beq.n	800399c <TIM_Base_SetConfig+0x38>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003982:	d00b      	beq.n	800399c <TIM_Base_SetConfig+0x38>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a31      	ldr	r2, [pc, #196]	; (8003a4c <TIM_Base_SetConfig+0xe8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d007      	beq.n	800399c <TIM_Base_SetConfig+0x38>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a30      	ldr	r2, [pc, #192]	; (8003a50 <TIM_Base_SetConfig+0xec>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_Base_SetConfig+0x38>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <TIM_Base_SetConfig+0xf0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d108      	bne.n	80039ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a25      	ldr	r2, [pc, #148]	; (8003a48 <TIM_Base_SetConfig+0xe4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01b      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039bc:	d017      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a22      	ldr	r2, [pc, #136]	; (8003a4c <TIM_Base_SetConfig+0xe8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a21      	ldr	r2, [pc, #132]	; (8003a50 <TIM_Base_SetConfig+0xec>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00f      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <TIM_Base_SetConfig+0xf0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <TIM_Base_SetConfig+0xf4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <TIM_Base_SetConfig+0xf8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <TIM_Base_SetConfig+0xfc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <TIM_Base_SetConfig+0xe4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40014400 	.word	0x40014400
 8003a60:	40014800 	.word	0x40014800

08003a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0201 	bic.w	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f023 030a 	bic.w	r3, r3, #10
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b087      	sub	sp, #28
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0210 	bic.w	r2, r3, #16
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f043 0307 	orr.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	021a      	lsls	r2, r3, #8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e050      	b.n	8003c52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d013      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10c      	bne.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40014000 	.word	0x40014000

08003c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e03f      	b.n	8003d06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd f988 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	; 0x24
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f829 	bl	8003d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	b09f      	sub	sp, #124	; 0x7c
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d26:	68d9      	ldr	r1, [r3, #12]
 8003d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	ea40 0301 	orr.w	r3, r0, r1
 8003d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d54:	f021 010c 	bic.w	r1, r1, #12
 8003d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	6999      	ldr	r1, [r3, #24]
 8003d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	ea40 0301 	orr.w	r3, r0, r1
 8003d78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4bc5      	ldr	r3, [pc, #788]	; (8004094 <UART_SetConfig+0x384>)
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d004      	beq.n	8003d8e <UART_SetConfig+0x7e>
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4bc3      	ldr	r3, [pc, #780]	; (8004098 <UART_SetConfig+0x388>)
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d103      	bne.n	8003d96 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d8e:	f7ff fc63 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 8003d92:	6778      	str	r0, [r7, #116]	; 0x74
 8003d94:	e002      	b.n	8003d9c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d96:	f7ff fc4b 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 8003d9a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da4:	f040 80b6 	bne.w	8003f14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003daa:	461c      	mov	r4, r3
 8003dac:	f04f 0500 	mov.w	r5, #0
 8003db0:	4622      	mov	r2, r4
 8003db2:	462b      	mov	r3, r5
 8003db4:	1891      	adds	r1, r2, r2
 8003db6:	6439      	str	r1, [r7, #64]	; 0x40
 8003db8:	415b      	adcs	r3, r3
 8003dba:	647b      	str	r3, [r7, #68]	; 0x44
 8003dbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dc0:	1912      	adds	r2, r2, r4
 8003dc2:	eb45 0303 	adc.w	r3, r5, r3
 8003dc6:	f04f 0000 	mov.w	r0, #0
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	00d9      	lsls	r1, r3, #3
 8003dd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd4:	00d0      	lsls	r0, r2, #3
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	1911      	adds	r1, r2, r4
 8003ddc:	6639      	str	r1, [r7, #96]	; 0x60
 8003dde:	416b      	adcs	r3, r5
 8003de0:	667b      	str	r3, [r7, #100]	; 0x64
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	1891      	adds	r1, r2, r2
 8003dee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003df0:	415b      	adcs	r3, r3
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003df8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003dfc:	f7fc fa4c 	bl	8000298 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4ba5      	ldr	r3, [pc, #660]	; (800409c <UART_SetConfig+0x38c>)
 8003e06:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	011e      	lsls	r6, r3, #4
 8003e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e10:	461c      	mov	r4, r3
 8003e12:	f04f 0500 	mov.w	r5, #0
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	1891      	adds	r1, r2, r2
 8003e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e1e:	415b      	adcs	r3, r3
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e26:	1912      	adds	r2, r2, r4
 8003e28:	eb45 0303 	adc.w	r3, r5, r3
 8003e2c:	f04f 0000 	mov.w	r0, #0
 8003e30:	f04f 0100 	mov.w	r1, #0
 8003e34:	00d9      	lsls	r1, r3, #3
 8003e36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e3a:	00d0      	lsls	r0, r2, #3
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	1911      	adds	r1, r2, r4
 8003e42:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e44:	416b      	adcs	r3, r5
 8003e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	1891      	adds	r1, r2, r2
 8003e54:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e56:	415b      	adcs	r3, r3
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e62:	f7fc fa19 	bl	8000298 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4b8c      	ldr	r3, [pc, #560]	; (800409c <UART_SetConfig+0x38c>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	3332      	adds	r3, #50	; 0x32
 8003e7e:	4a87      	ldr	r2, [pc, #540]	; (800409c <UART_SetConfig+0x38c>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e8c:	441e      	add	r6, r3
 8003e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e90:	4618      	mov	r0, r3
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	1894      	adds	r4, r2, r2
 8003e9c:	623c      	str	r4, [r7, #32]
 8003e9e:	415b      	adcs	r3, r3
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ea6:	1812      	adds	r2, r2, r0
 8003ea8:	eb41 0303 	adc.w	r3, r1, r3
 8003eac:	f04f 0400 	mov.w	r4, #0
 8003eb0:	f04f 0500 	mov.w	r5, #0
 8003eb4:	00dd      	lsls	r5, r3, #3
 8003eb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003eba:	00d4      	lsls	r4, r2, #3
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	1814      	adds	r4, r2, r0
 8003ec2:	653c      	str	r4, [r7, #80]	; 0x50
 8003ec4:	414b      	adcs	r3, r1
 8003ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	1891      	adds	r1, r2, r2
 8003ed4:	61b9      	str	r1, [r7, #24]
 8003ed6:	415b      	adcs	r3, r3
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ede:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ee2:	f7fc f9d9 	bl	8000298 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4b6c      	ldr	r3, [pc, #432]	; (800409c <UART_SetConfig+0x38c>)
 8003eec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	2164      	movs	r1, #100	; 0x64
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	3332      	adds	r3, #50	; 0x32
 8003efe:	4a67      	ldr	r2, [pc, #412]	; (800409c <UART_SetConfig+0x38c>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	f003 0207 	and.w	r2, r3, #7
 8003f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4432      	add	r2, r6
 8003f10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f12:	e0b9      	b.n	8004088 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f16:	461c      	mov	r4, r3
 8003f18:	f04f 0500 	mov.w	r5, #0
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	462b      	mov	r3, r5
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	6139      	str	r1, [r7, #16]
 8003f24:	415b      	adcs	r3, r3
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f2c:	1912      	adds	r2, r2, r4
 8003f2e:	eb45 0303 	adc.w	r3, r5, r3
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	00d9      	lsls	r1, r3, #3
 8003f3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f40:	00d0      	lsls	r0, r2, #3
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	eb12 0804 	adds.w	r8, r2, r4
 8003f4a:	eb43 0905 	adc.w	r9, r3, r5
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	008b      	lsls	r3, r1, #2
 8003f62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f66:	0082      	lsls	r2, r0, #2
 8003f68:	4640      	mov	r0, r8
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	f7fc f994 	bl	8000298 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4b49      	ldr	r3, [pc, #292]	; (800409c <UART_SetConfig+0x38c>)
 8003f76:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	011e      	lsls	r6, r3, #4
 8003f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f80:	4618      	mov	r0, r3
 8003f82:	f04f 0100 	mov.w	r1, #0
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	1894      	adds	r4, r2, r2
 8003f8c:	60bc      	str	r4, [r7, #8]
 8003f8e:	415b      	adcs	r3, r3
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f96:	1812      	adds	r2, r2, r0
 8003f98:	eb41 0303 	adc.w	r3, r1, r3
 8003f9c:	f04f 0400 	mov.w	r4, #0
 8003fa0:	f04f 0500 	mov.w	r5, #0
 8003fa4:	00dd      	lsls	r5, r3, #3
 8003fa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003faa:	00d4      	lsls	r4, r2, #3
 8003fac:	4622      	mov	r2, r4
 8003fae:	462b      	mov	r3, r5
 8003fb0:	1814      	adds	r4, r2, r0
 8003fb2:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f04f 0100 	mov.w	r1, #0
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	008b      	lsls	r3, r1, #2
 8003fcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fd0:	0082      	lsls	r2, r0, #2
 8003fd2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003fd6:	f7fc f95f 	bl	8000298 <__aeabi_uldivmod>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4b2f      	ldr	r3, [pc, #188]	; (800409c <UART_SetConfig+0x38c>)
 8003fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	2164      	movs	r1, #100	; 0x64
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	3332      	adds	r3, #50	; 0x32
 8003ff2:	4a2a      	ldr	r2, [pc, #168]	; (800409c <UART_SetConfig+0x38c>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffe:	441e      	add	r6, r3
 8004000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004002:	4618      	mov	r0, r3
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	1894      	adds	r4, r2, r2
 800400e:	603c      	str	r4, [r7, #0]
 8004010:	415b      	adcs	r3, r3
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004018:	1812      	adds	r2, r2, r0
 800401a:	eb41 0303 	adc.w	r3, r1, r3
 800401e:	f04f 0400 	mov.w	r4, #0
 8004022:	f04f 0500 	mov.w	r5, #0
 8004026:	00dd      	lsls	r5, r3, #3
 8004028:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800402c:	00d4      	lsls	r4, r2, #3
 800402e:	4622      	mov	r2, r4
 8004030:	462b      	mov	r3, r5
 8004032:	eb12 0a00 	adds.w	sl, r2, r0
 8004036:	eb43 0b01 	adc.w	fp, r3, r1
 800403a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4618      	mov	r0, r3
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	008b      	lsls	r3, r1, #2
 800404e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004052:	0082      	lsls	r2, r0, #2
 8004054:	4650      	mov	r0, sl
 8004056:	4659      	mov	r1, fp
 8004058:	f7fc f91e 	bl	8000298 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4b0e      	ldr	r3, [pc, #56]	; (800409c <UART_SetConfig+0x38c>)
 8004062:	fba3 1302 	umull	r1, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2164      	movs	r1, #100	; 0x64
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	3332      	adds	r3, #50	; 0x32
 8004074:	4a09      	ldr	r2, [pc, #36]	; (800409c <UART_SetConfig+0x38c>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4432      	add	r2, r6
 8004086:	609a      	str	r2, [r3, #8]
}
 8004088:	bf00      	nop
 800408a:	377c      	adds	r7, #124	; 0x7c
 800408c:	46bd      	mov	sp, r7
 800408e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004092:	bf00      	nop
 8004094:	40011000 	.word	0x40011000
 8004098:	40011400 	.word	0x40011400
 800409c:	51eb851f 	.word	0x51eb851f

080040a0 <arm_rfft_fast_init_f32>:
 80040a0:	084b      	lsrs	r3, r1, #1
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	b410      	push	{r4}
 80040a6:	8201      	strh	r1, [r0, #16]
 80040a8:	8003      	strh	r3, [r0, #0]
 80040aa:	d047      	beq.n	800413c <arm_rfft_fast_init_f32+0x9c>
 80040ac:	d917      	bls.n	80040de <arm_rfft_fast_init_f32+0x3e>
 80040ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b2:	d03d      	beq.n	8004130 <arm_rfft_fast_init_f32+0x90>
 80040b4:	d929      	bls.n	800410a <arm_rfft_fast_init_f32+0x6a>
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ba:	d020      	beq.n	80040fe <arm_rfft_fast_init_f32+0x5e>
 80040bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c0:	d113      	bne.n	80040ea <arm_rfft_fast_init_f32+0x4a>
 80040c2:	4921      	ldr	r1, [pc, #132]	; (8004148 <arm_rfft_fast_init_f32+0xa8>)
 80040c4:	4a21      	ldr	r2, [pc, #132]	; (800414c <arm_rfft_fast_init_f32+0xac>)
 80040c6:	4b22      	ldr	r3, [pc, #136]	; (8004150 <arm_rfft_fast_init_f32+0xb0>)
 80040c8:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80040cc:	8184      	strh	r4, [r0, #12]
 80040ce:	6081      	str	r1, [r0, #8]
 80040d0:	6042      	str	r2, [r0, #4]
 80040d2:	6143      	str	r3, [r0, #20]
 80040d4:	2000      	movs	r0, #0
 80040d6:	b240      	sxtb	r0, r0
 80040d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d01c      	beq.n	800411c <arm_rfft_fast_init_f32+0x7c>
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d006      	beq.n	80040f4 <arm_rfft_fast_init_f32+0x54>
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d01d      	beq.n	8004126 <arm_rfft_fast_init_f32+0x86>
 80040ea:	20ff      	movs	r0, #255	; 0xff
 80040ec:	b240      	sxtb	r0, r0
 80040ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	2438      	movs	r4, #56	; 0x38
 80040f6:	4917      	ldr	r1, [pc, #92]	; (8004154 <arm_rfft_fast_init_f32+0xb4>)
 80040f8:	4a17      	ldr	r2, [pc, #92]	; (8004158 <arm_rfft_fast_init_f32+0xb8>)
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <arm_rfft_fast_init_f32+0xbc>)
 80040fc:	e7e6      	b.n	80040cc <arm_rfft_fast_init_f32+0x2c>
 80040fe:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004102:	4917      	ldr	r1, [pc, #92]	; (8004160 <arm_rfft_fast_init_f32+0xc0>)
 8004104:	4a17      	ldr	r2, [pc, #92]	; (8004164 <arm_rfft_fast_init_f32+0xc4>)
 8004106:	4b18      	ldr	r3, [pc, #96]	; (8004168 <arm_rfft_fast_init_f32+0xc8>)
 8004108:	e7e0      	b.n	80040cc <arm_rfft_fast_init_f32+0x2c>
 800410a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410e:	d1ec      	bne.n	80040ea <arm_rfft_fast_init_f32+0x4a>
 8004110:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004114:	4915      	ldr	r1, [pc, #84]	; (800416c <arm_rfft_fast_init_f32+0xcc>)
 8004116:	4a16      	ldr	r2, [pc, #88]	; (8004170 <arm_rfft_fast_init_f32+0xd0>)
 8004118:	4b16      	ldr	r3, [pc, #88]	; (8004174 <arm_rfft_fast_init_f32+0xd4>)
 800411a:	e7d7      	b.n	80040cc <arm_rfft_fast_init_f32+0x2c>
 800411c:	2430      	movs	r4, #48	; 0x30
 800411e:	4916      	ldr	r1, [pc, #88]	; (8004178 <arm_rfft_fast_init_f32+0xd8>)
 8004120:	4a16      	ldr	r2, [pc, #88]	; (800417c <arm_rfft_fast_init_f32+0xdc>)
 8004122:	4b17      	ldr	r3, [pc, #92]	; (8004180 <arm_rfft_fast_init_f32+0xe0>)
 8004124:	e7d2      	b.n	80040cc <arm_rfft_fast_init_f32+0x2c>
 8004126:	2414      	movs	r4, #20
 8004128:	4916      	ldr	r1, [pc, #88]	; (8004184 <arm_rfft_fast_init_f32+0xe4>)
 800412a:	4a17      	ldr	r2, [pc, #92]	; (8004188 <arm_rfft_fast_init_f32+0xe8>)
 800412c:	4b17      	ldr	r3, [pc, #92]	; (800418c <arm_rfft_fast_init_f32+0xec>)
 800412e:	e7cd      	b.n	80040cc <arm_rfft_fast_init_f32+0x2c>
 8004130:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004134:	4916      	ldr	r1, [pc, #88]	; (8004190 <arm_rfft_fast_init_f32+0xf0>)
 8004136:	4a17      	ldr	r2, [pc, #92]	; (8004194 <arm_rfft_fast_init_f32+0xf4>)
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <arm_rfft_fast_init_f32+0xf8>)
 800413a:	e7c7      	b.n	80040cc <arm_rfft_fast_init_f32+0x2c>
 800413c:	24d0      	movs	r4, #208	; 0xd0
 800413e:	4917      	ldr	r1, [pc, #92]	; (800419c <arm_rfft_fast_init_f32+0xfc>)
 8004140:	4a17      	ldr	r2, [pc, #92]	; (80041a0 <arm_rfft_fast_init_f32+0x100>)
 8004142:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <arm_rfft_fast_init_f32+0x104>)
 8004144:	e7c2      	b.n	80040cc <arm_rfft_fast_init_f32+0x2c>
 8004146:	bf00      	nop
 8004148:	08014248 	.word	0x08014248
 800414c:	08005440 	.word	0x08005440
 8004150:	0800b5b0 	.word	0x0800b5b0
 8004154:	08009540 	.word	0x08009540
 8004158:	08016008 	.word	0x08016008
 800415c:	080184f8 	.word	0x080184f8
 8004160:	08011f30 	.word	0x08011f30
 8004164:	0800fe30 	.word	0x0800fe30
 8004168:	080095b0 	.word	0x080095b0
 800416c:	08018188 	.word	0x08018188
 8004170:	0800f5b0 	.word	0x0800f5b0
 8004174:	08016208 	.word	0x08016208
 8004178:	08012de8 	.word	0x08012de8
 800417c:	08011e30 	.word	0x08011e30
 8004180:	08009440 	.word	0x08009440
 8004184:	08012d40 	.word	0x08012d40
 8004188:	0800fdb0 	.word	0x0800fdb0
 800418c:	08012d68 	.word	0x08012d68
 8004190:	08016a08 	.word	0x08016a08
 8004194:	08013248 	.word	0x08013248
 8004198:	08016d88 	.word	0x08016d88
 800419c:	080186f8 	.word	0x080186f8
 80041a0:	08012e48 	.word	0x08012e48
 80041a4:	08017d88 	.word	0x08017d88

080041a8 <arm_rfft_fast_f32>:
 80041a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ac:	8a06      	ldrh	r6, [r0, #16]
 80041ae:	0876      	lsrs	r6, r6, #1
 80041b0:	4607      	mov	r7, r0
 80041b2:	4615      	mov	r5, r2
 80041b4:	8006      	strh	r6, [r0, #0]
 80041b6:	460c      	mov	r4, r1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d15c      	bne.n	8004276 <arm_rfft_fast_f32+0xce>
 80041bc:	461a      	mov	r2, r3
 80041be:	2301      	movs	r3, #1
 80041c0:	f000 fbe6 	bl	8004990 <arm_cfft_f32>
 80041c4:	edd4 7a00 	vldr	s15, [r4]
 80041c8:	ed94 7a01 	vldr	s14, [r4, #4]
 80041cc:	883e      	ldrh	r6, [r7, #0]
 80041ce:	6978      	ldr	r0, [r7, #20]
 80041d0:	ee37 7a07 	vadd.f32	s14, s14, s14
 80041d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041d8:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80041dc:	ee77 6a87 	vadd.f32	s13, s15, s14
 80041e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041e4:	3e01      	subs	r6, #1
 80041e6:	ee26 7aa3 	vmul.f32	s14, s13, s7
 80041ea:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80041ee:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80041f2:	ed85 7a00 	vstr	s14, [r5]
 80041f6:	edc5 7a01 	vstr	s15, [r5, #4]
 80041fa:	3010      	adds	r0, #16
 80041fc:	f105 0210 	add.w	r2, r5, #16
 8004200:	3b08      	subs	r3, #8
 8004202:	f104 0110 	add.w	r1, r4, #16
 8004206:	ed51 4a02 	vldr	s9, [r1, #-8]
 800420a:	ed93 5a02 	vldr	s10, [r3, #8]
 800420e:	ed11 7a01 	vldr	s14, [r1, #-4]
 8004212:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004216:	edd3 5a03 	vldr	s11, [r3, #12]
 800421a:	ed50 6a01 	vldr	s13, [r0, #-4]
 800421e:	ee75 7a64 	vsub.f32	s15, s10, s9
 8004222:	ee35 4a87 	vadd.f32	s8, s11, s14
 8004226:	ee35 5a24 	vadd.f32	s10, s10, s9
 800422a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800422e:	ee66 4a27 	vmul.f32	s9, s12, s15
 8004232:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004236:	ee34 5a85 	vadd.f32	s10, s9, s10
 800423a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800423e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8004242:	ee77 7a25 	vadd.f32	s15, s14, s11
 8004246:	ee76 6a85 	vadd.f32	s13, s13, s10
 800424a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800424e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004252:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004256:	3e01      	subs	r6, #1
 8004258:	ed42 6a02 	vstr	s13, [r2, #-8]
 800425c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004260:	f1a3 0308 	sub.w	r3, r3, #8
 8004264:	f101 0108 	add.w	r1, r1, #8
 8004268:	f100 0008 	add.w	r0, r0, #8
 800426c:	f102 0208 	add.w	r2, r2, #8
 8004270:	d1c9      	bne.n	8004206 <arm_rfft_fast_f32+0x5e>
 8004272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004276:	edd1 7a00 	vldr	s15, [r1]
 800427a:	edd1 6a01 	vldr	s13, [r1, #4]
 800427e:	6941      	ldr	r1, [r0, #20]
 8004280:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004284:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004288:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800428c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004290:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004294:	3e01      	subs	r6, #1
 8004296:	ed82 7a00 	vstr	s14, [r2]
 800429a:	edc2 7a01 	vstr	s15, [r2, #4]
 800429e:	00f0      	lsls	r0, r6, #3
 80042a0:	b3ee      	cbz	r6, 800431e <arm_rfft_fast_f32+0x176>
 80042a2:	3808      	subs	r0, #8
 80042a4:	f101 0e10 	add.w	lr, r1, #16
 80042a8:	4420      	add	r0, r4
 80042aa:	f104 0110 	add.w	r1, r4, #16
 80042ae:	f102 0c10 	add.w	ip, r2, #16
 80042b2:	ed90 7a02 	vldr	s14, [r0, #8]
 80042b6:	ed51 6a02 	vldr	s13, [r1, #-8]
 80042ba:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80042be:	ed90 4a03 	vldr	s8, [r0, #12]
 80042c2:	ed11 5a01 	vldr	s10, [r1, #-4]
 80042c6:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80042ca:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80042ce:	ee74 4a05 	vadd.f32	s9, s8, s10
 80042d2:	ee26 3a27 	vmul.f32	s6, s12, s15
 80042d6:	ee77 6a26 	vadd.f32	s13, s14, s13
 80042da:	ee35 5a44 	vsub.f32	s10, s10, s8
 80042de:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80042e2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80042e6:	ee77 7a05 	vadd.f32	s15, s14, s10
 80042ea:	ee26 6a24 	vmul.f32	s12, s12, s9
 80042ee:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80042f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80042f6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80042fa:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80042fe:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004302:	3e01      	subs	r6, #1
 8004304:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8004308:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800430c:	f1a0 0008 	sub.w	r0, r0, #8
 8004310:	f101 0108 	add.w	r1, r1, #8
 8004314:	f10e 0e08 	add.w	lr, lr, #8
 8004318:	f10c 0c08 	add.w	ip, ip, #8
 800431c:	d1c9      	bne.n	80042b2 <arm_rfft_fast_f32+0x10a>
 800431e:	4638      	mov	r0, r7
 8004320:	4629      	mov	r1, r5
 8004322:	461a      	mov	r2, r3
 8004324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004328:	2301      	movs	r3, #1
 800432a:	f000 bb31 	b.w	8004990 <arm_cfft_f32>
 800432e:	bf00      	nop

08004330 <arm_cfft_radix8by2_f32>:
 8004330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004334:	ed2d 8b08 	vpush	{d8-d11}
 8004338:	f8b0 e000 	ldrh.w	lr, [r0]
 800433c:	6842      	ldr	r2, [r0, #4]
 800433e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8004342:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8004346:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800434a:	4607      	mov	r7, r0
 800434c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8004350:	f000 80af 	beq.w	80044b2 <arm_cfft_radix8by2_f32+0x182>
 8004354:	3310      	adds	r3, #16
 8004356:	18ce      	adds	r6, r1, r3
 8004358:	3210      	adds	r2, #16
 800435a:	4443      	add	r3, r8
 800435c:	f101 0510 	add.w	r5, r1, #16
 8004360:	f108 0410 	add.w	r4, r8, #16
 8004364:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004368:	ed13 4a04 	vldr	s8, [r3, #-16]
 800436c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004370:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004374:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004378:	ed54 6a03 	vldr	s13, [r4, #-12]
 800437c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004380:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004384:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004388:	ed15 6a03 	vldr	s12, [r5, #-12]
 800438c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004390:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004394:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004398:	ed56 0a02 	vldr	s1, [r6, #-8]
 800439c:	ed16 1a01 	vldr	s2, [r6, #-4]
 80043a0:	ed55 4a02 	vldr	s9, [r5, #-8]
 80043a4:	ee73 ba21 	vadd.f32	s23, s6, s3
 80043a8:	ee36 ba26 	vadd.f32	s22, s12, s13
 80043ac:	ee37 aa27 	vadd.f32	s20, s14, s15
 80043b0:	ee72 9a04 	vadd.f32	s19, s4, s8
 80043b4:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80043b8:	ee31 8a05 	vadd.f32	s16, s2, s10
 80043bc:	ee74 aa80 	vadd.f32	s21, s9, s0
 80043c0:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80043c4:	ed45 ba04 	vstr	s23, [r5, #-16]
 80043c8:	ed05 ba03 	vstr	s22, [r5, #-12]
 80043cc:	ed45 aa02 	vstr	s21, [r5, #-8]
 80043d0:	ed05 aa01 	vstr	s20, [r5, #-4]
 80043d4:	ed06 8a01 	vstr	s16, [r6, #-4]
 80043d8:	ed46 9a04 	vstr	s19, [r6, #-16]
 80043dc:	ed06 9a03 	vstr	s18, [r6, #-12]
 80043e0:	ed46 8a02 	vstr	s17, [r6, #-8]
 80043e4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80043e8:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80043ec:	ed12 6a03 	vldr	s12, [r2, #-12]
 80043f0:	ed52 2a04 	vldr	s5, [r2, #-16]
 80043f4:	ee33 3a61 	vsub.f32	s6, s6, s3
 80043f8:	ee34 4a42 	vsub.f32	s8, s8, s4
 80043fc:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004400:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004404:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004408:	ee24 4a22 	vmul.f32	s8, s8, s5
 800440c:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004410:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004414:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004418:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800441c:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004420:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004424:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004428:	ee71 2a88 	vadd.f32	s5, s3, s16
 800442c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004430:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004434:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004438:	ed03 6a03 	vstr	s12, [r3, #-12]
 800443c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004440:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004444:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004448:	ed52 5a02 	vldr	s11, [r2, #-8]
 800444c:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004450:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004454:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004458:	ee26 5a87 	vmul.f32	s10, s13, s14
 800445c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004460:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004464:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004468:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800446c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004470:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004474:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004478:	ee74 5a23 	vadd.f32	s11, s8, s7
 800447c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004480:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004484:	f1be 0e01 	subs.w	lr, lr, #1
 8004488:	ed44 5a02 	vstr	s11, [r4, #-8]
 800448c:	f105 0510 	add.w	r5, r5, #16
 8004490:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004494:	f106 0610 	add.w	r6, r6, #16
 8004498:	ed03 6a02 	vstr	s12, [r3, #-8]
 800449c:	ed03 7a01 	vstr	s14, [r3, #-4]
 80044a0:	f102 0210 	add.w	r2, r2, #16
 80044a4:	f104 0410 	add.w	r4, r4, #16
 80044a8:	f103 0310 	add.w	r3, r3, #16
 80044ac:	f47f af5a 	bne.w	8004364 <arm_cfft_radix8by2_f32+0x34>
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	fa1f f48c 	uxth.w	r4, ip
 80044b6:	4608      	mov	r0, r1
 80044b8:	2302      	movs	r3, #2
 80044ba:	4621      	mov	r1, r4
 80044bc:	f000 fae2 	bl	8004a84 <arm_radix8_butterfly_f32>
 80044c0:	ecbd 8b08 	vpop	{d8-d11}
 80044c4:	4640      	mov	r0, r8
 80044c6:	4621      	mov	r1, r4
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	2302      	movs	r3, #2
 80044cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044d0:	f000 bad8 	b.w	8004a84 <arm_radix8_butterfly_f32>

080044d4 <arm_cfft_radix8by4_f32>:
 80044d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d8:	ed2d 8b0a 	vpush	{d8-d12}
 80044dc:	8802      	ldrh	r2, [r0, #0]
 80044de:	ed91 6a00 	vldr	s12, [r1]
 80044e2:	b08f      	sub	sp, #60	; 0x3c
 80044e4:	460f      	mov	r7, r1
 80044e6:	0852      	lsrs	r2, r2, #1
 80044e8:	0093      	lsls	r3, r2, #2
 80044ea:	900c      	str	r0, [sp, #48]	; 0x30
 80044ec:	9103      	str	r1, [sp, #12]
 80044ee:	6841      	ldr	r1, [r0, #4]
 80044f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80044f4:	4638      	mov	r0, r7
 80044f6:	4418      	add	r0, r3
 80044f8:	4606      	mov	r6, r0
 80044fa:	9009      	str	r0, [sp, #36]	; 0x24
 80044fc:	4418      	add	r0, r3
 80044fe:	edd0 6a00 	vldr	s13, [r0]
 8004502:	edd6 3a00 	vldr	s7, [r6]
 8004506:	edd6 2a01 	vldr	s5, [r6, #4]
 800450a:	edd0 7a01 	vldr	s15, [r0, #4]
 800450e:	900a      	str	r0, [sp, #40]	; 0x28
 8004510:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004514:	4604      	mov	r4, r0
 8004516:	4625      	mov	r5, r4
 8004518:	441c      	add	r4, r3
 800451a:	ed94 4a00 	vldr	s8, [r4]
 800451e:	ed94 5a01 	vldr	s10, [r4, #4]
 8004522:	9401      	str	r4, [sp, #4]
 8004524:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8004528:	4630      	mov	r0, r6
 800452a:	ee74 4a24 	vadd.f32	s9, s8, s9
 800452e:	463e      	mov	r6, r7
 8004530:	ee14 ea90 	vmov	lr, s9
 8004534:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004538:	f846 eb08 	str.w	lr, [r6], #8
 800453c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004540:	edd0 4a01 	vldr	s9, [r0, #4]
 8004544:	9604      	str	r6, [sp, #16]
 8004546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800454a:	9e01      	ldr	r6, [sp, #4]
 800454c:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8004550:	ed96 2a01 	vldr	s4, [r6, #4]
 8004554:	ee36 7a24 	vadd.f32	s14, s12, s9
 8004558:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800455c:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8004560:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004564:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004568:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800456c:	ee73 3a45 	vsub.f32	s7, s6, s10
 8004570:	4604      	mov	r4, r0
 8004572:	ee36 6a45 	vsub.f32	s12, s12, s10
 8004576:	ee75 6a26 	vadd.f32	s13, s10, s13
 800457a:	46a3      	mov	fp, r4
 800457c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004580:	ee34 5a84 	vadd.f32	s10, s9, s8
 8004584:	ee13 8a90 	vmov	r8, s7
 8004588:	46a4      	mov	ip, r4
 800458a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800458e:	ed87 7a01 	vstr	s14, [r7, #4]
 8004592:	f84b 8b08 	str.w	r8, [fp], #8
 8004596:	f1ac 0704 	sub.w	r7, ip, #4
 800459a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800459e:	f101 0c08 	add.w	ip, r1, #8
 80045a2:	462c      	mov	r4, r5
 80045a4:	f8cd c014 	str.w	ip, [sp, #20]
 80045a8:	ee15 ca90 	vmov	ip, s11
 80045ac:	f844 cb08 	str.w	ip, [r4], #8
 80045b0:	9407      	str	r4, [sp, #28]
 80045b2:	f101 0410 	add.w	r4, r1, #16
 80045b6:	ed85 6a01 	vstr	s12, [r5, #4]
 80045ba:	0852      	lsrs	r2, r2, #1
 80045bc:	9402      	str	r4, [sp, #8]
 80045be:	462c      	mov	r4, r5
 80045c0:	f101 0518 	add.w	r5, r1, #24
 80045c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80045c6:	46b2      	mov	sl, r6
 80045c8:	9506      	str	r5, [sp, #24]
 80045ca:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80045ce:	3a02      	subs	r2, #2
 80045d0:	ee16 5a90 	vmov	r5, s13
 80045d4:	46b6      	mov	lr, r6
 80045d6:	4630      	mov	r0, r6
 80045d8:	0852      	lsrs	r2, r2, #1
 80045da:	f84a 5b08 	str.w	r5, [sl], #8
 80045de:	f1a0 0604 	sub.w	r6, r0, #4
 80045e2:	edce 7a01 	vstr	s15, [lr, #4]
 80045e6:	9208      	str	r2, [sp, #32]
 80045e8:	f000 8130 	beq.w	800484c <arm_cfft_radix8by4_f32+0x378>
 80045ec:	4691      	mov	r9, r2
 80045ee:	9a03      	ldr	r2, [sp, #12]
 80045f0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80045f4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80045f8:	3b08      	subs	r3, #8
 80045fa:	f102 0510 	add.w	r5, r2, #16
 80045fe:	f101 0c20 	add.w	ip, r1, #32
 8004602:	f1a4 020c 	sub.w	r2, r4, #12
 8004606:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800460a:	4433      	add	r3, r6
 800460c:	3410      	adds	r4, #16
 800460e:	4650      	mov	r0, sl
 8004610:	4659      	mov	r1, fp
 8004612:	ed55 3a02 	vldr	s7, [r5, #-8]
 8004616:	ed14 5a02 	vldr	s10, [r4, #-8]
 800461a:	ed91 7a00 	vldr	s14, [r1]
 800461e:	edd0 7a00 	vldr	s15, [r0]
 8004622:	ed15 4a01 	vldr	s8, [r5, #-4]
 8004626:	ed54 5a01 	vldr	s11, [r4, #-4]
 800462a:	edd0 6a01 	vldr	s13, [r0, #4]
 800462e:	ed91 6a01 	vldr	s12, [r1, #4]
 8004632:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004636:	ee34 0a25 	vadd.f32	s0, s8, s11
 800463a:	ee78 4a07 	vadd.f32	s9, s16, s14
 800463e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8004642:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8004646:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800464a:	ed45 4a02 	vstr	s9, [r5, #-8]
 800464e:	edd1 4a01 	vldr	s9, [r1, #4]
 8004652:	ed90 4a01 	vldr	s8, [r0, #4]
 8004656:	ee70 4a24 	vadd.f32	s9, s0, s9
 800465a:	ee76 aa05 	vadd.f32	s21, s12, s10
 800465e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004662:	ee35 aac7 	vsub.f32	s20, s11, s14
 8004666:	ed45 4a01 	vstr	s9, [r5, #-4]
 800466a:	edd6 1a00 	vldr	s3, [r6]
 800466e:	edd7 0a00 	vldr	s1, [r7]
 8004672:	ed92 4a02 	vldr	s8, [r2, #8]
 8004676:	edd3 3a02 	vldr	s7, [r3, #8]
 800467a:	ed93 2a01 	vldr	s4, [r3, #4]
 800467e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004682:	edd2 2a01 	vldr	s5, [r2, #4]
 8004686:	ed57 9a01 	vldr	s19, [r7, #-4]
 800468a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800468e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8004692:	ee74 8a84 	vadd.f32	s17, s9, s8
 8004696:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800469a:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800469e:	ee7a aae6 	vsub.f32	s21, s21, s13
 80046a2:	ee18 aa90 	vmov	sl, s17
 80046a6:	f847 a908 	str.w	sl, [r7], #-8
 80046aa:	edd2 8a01 	vldr	s17, [r2, #4]
 80046ae:	ed93 9a01 	vldr	s18, [r3, #4]
 80046b2:	ee73 8a28 	vadd.f32	s17, s6, s17
 80046b6:	ee3a aa27 	vadd.f32	s20, s20, s15
 80046ba:	ee78 8a89 	vadd.f32	s17, s17, s18
 80046be:	ee74 0a63 	vsub.f32	s1, s8, s7
 80046c2:	edc7 8a01 	vstr	s17, [r7, #4]
 80046c6:	ed18 ba02 	vldr	s22, [r8, #-8]
 80046ca:	ed58 8a01 	vldr	s17, [r8, #-4]
 80046ce:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80046d2:	ee6a ba28 	vmul.f32	s23, s20, s17
 80046d6:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80046da:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80046de:	ee30 9a81 	vadd.f32	s18, s1, s2
 80046e2:	ee79 9a82 	vadd.f32	s19, s19, s4
 80046e6:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80046ea:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80046ee:	ee69 baa8 	vmul.f32	s23, s19, s17
 80046f2:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80046f6:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80046fa:	ee69 8a28 	vmul.f32	s17, s18, s17
 80046fe:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8004702:	ee1c aa10 	vmov	sl, s24
 8004706:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800470a:	f841 ab08 	str.w	sl, [r1], #8
 800470e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8004712:	ee3b bacb 	vsub.f32	s22, s23, s22
 8004716:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800471a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800471e:	ed01 aa01 	vstr	s20, [r1, #-4]
 8004722:	edc2 8a01 	vstr	s17, [r2, #4]
 8004726:	ed82 ba02 	vstr	s22, [r2, #8]
 800472a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800472e:	ee74 3a63 	vsub.f32	s7, s8, s7
 8004732:	ee38 8a47 	vsub.f32	s16, s16, s14
 8004736:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800473a:	ee30 0a46 	vsub.f32	s0, s0, s12
 800473e:	ee33 3a42 	vsub.f32	s6, s6, s4
 8004742:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004746:	ee30 0a66 	vsub.f32	s0, s0, s13
 800474a:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800474e:	ee63 8a04 	vmul.f32	s17, s6, s8
 8004752:	ee28 aa24 	vmul.f32	s20, s16, s9
 8004756:	ee60 9a04 	vmul.f32	s19, s0, s8
 800475a:	ee28 8a04 	vmul.f32	s16, s16, s8
 800475e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8004762:	ee63 3a84 	vmul.f32	s7, s7, s8
 8004766:	ee39 4a68 	vsub.f32	s8, s18, s17
 800476a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800476e:	ee14 aa10 	vmov	sl, s8
 8004772:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004776:	ee63 4a24 	vmul.f32	s9, s6, s9
 800477a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800477e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004782:	ed04 0a01 	vstr	s0, [r4, #-4]
 8004786:	f846 a908 	str.w	sl, [r6], #-8
 800478a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800478e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8004792:	edc6 3a01 	vstr	s7, [r6, #4]
 8004796:	ee76 6a86 	vadd.f32	s13, s13, s12
 800479a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800479e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80047a2:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80047a6:	ee67 5a86 	vmul.f32	s11, s15, s12
 80047aa:	ee26 5a87 	vmul.f32	s10, s13, s14
 80047ae:	ee72 2a62 	vsub.f32	s5, s4, s5
 80047b2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80047b6:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80047ba:	ee75 5a25 	vadd.f32	s11, s10, s11
 80047be:	ee62 0a86 	vmul.f32	s1, s5, s12
 80047c2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80047c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047ca:	ee21 6a06 	vmul.f32	s12, s2, s12
 80047ce:	ee62 2a87 	vmul.f32	s5, s5, s14
 80047d2:	ee21 1a07 	vmul.f32	s2, s2, s14
 80047d6:	ee15 aa90 	vmov	sl, s11
 80047da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80047de:	f840 ab08 	str.w	sl, [r0], #8
 80047e2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80047e6:	ee76 2a22 	vadd.f32	s5, s12, s5
 80047ea:	f1b9 0901 	subs.w	r9, r9, #1
 80047ee:	ed40 7a01 	vstr	s15, [r0, #-4]
 80047f2:	f105 0508 	add.w	r5, r5, #8
 80047f6:	ed83 1a02 	vstr	s2, [r3, #8]
 80047fa:	edc3 2a01 	vstr	s5, [r3, #4]
 80047fe:	f108 0808 	add.w	r8, r8, #8
 8004802:	f1a2 0208 	sub.w	r2, r2, #8
 8004806:	f10c 0c10 	add.w	ip, ip, #16
 800480a:	f104 0408 	add.w	r4, r4, #8
 800480e:	f10e 0e18 	add.w	lr, lr, #24
 8004812:	f1a3 0308 	sub.w	r3, r3, #8
 8004816:	f47f aefc 	bne.w	8004612 <arm_cfft_radix8by4_f32+0x13e>
 800481a:	9908      	ldr	r1, [sp, #32]
 800481c:	9802      	ldr	r0, [sp, #8]
 800481e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004822:	00cb      	lsls	r3, r1, #3
 8004824:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004828:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800482c:	9102      	str	r1, [sp, #8]
 800482e:	9904      	ldr	r1, [sp, #16]
 8004830:	4419      	add	r1, r3
 8004832:	9104      	str	r1, [sp, #16]
 8004834:	9905      	ldr	r1, [sp, #20]
 8004836:	4419      	add	r1, r3
 8004838:	9105      	str	r1, [sp, #20]
 800483a:	9907      	ldr	r1, [sp, #28]
 800483c:	449b      	add	fp, r3
 800483e:	4419      	add	r1, r3
 8004840:	449a      	add	sl, r3
 8004842:	9b06      	ldr	r3, [sp, #24]
 8004844:	9107      	str	r1, [sp, #28]
 8004846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800484a:	9306      	str	r3, [sp, #24]
 800484c:	9a04      	ldr	r2, [sp, #16]
 800484e:	9807      	ldr	r0, [sp, #28]
 8004850:	edd2 3a00 	vldr	s7, [r2]
 8004854:	ed90 4a00 	vldr	s8, [r0]
 8004858:	eddb 7a00 	vldr	s15, [fp]
 800485c:	ed9a 3a00 	vldr	s6, [sl]
 8004860:	edd2 4a01 	vldr	s9, [r2, #4]
 8004864:	ed90 7a01 	vldr	s14, [r0, #4]
 8004868:	ed9b 2a01 	vldr	s4, [fp, #4]
 800486c:	edda 5a01 	vldr	s11, [sl, #4]
 8004870:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8004874:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004876:	ee73 6a84 	vadd.f32	s13, s7, s8
 800487a:	ee34 6a87 	vadd.f32	s12, s9, s14
 800487e:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8004882:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8004886:	ee33 5a05 	vadd.f32	s10, s6, s10
 800488a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800488e:	ed82 5a00 	vstr	s10, [r2]
 8004892:	ed9b 5a01 	vldr	s10, [fp, #4]
 8004896:	edda 4a01 	vldr	s9, [sl, #4]
 800489a:	ee36 5a05 	vadd.f32	s10, s12, s10
 800489e:	ee72 3a04 	vadd.f32	s7, s4, s8
 80048a2:	ee35 5a24 	vadd.f32	s10, s10, s9
 80048a6:	ee77 4a67 	vsub.f32	s9, s14, s15
 80048aa:	ed82 5a01 	vstr	s10, [r2, #4]
 80048ae:	9a05      	ldr	r2, [sp, #20]
 80048b0:	ee34 5a83 	vadd.f32	s10, s9, s6
 80048b4:	edd2 1a00 	vldr	s3, [r2]
 80048b8:	edd2 2a01 	vldr	s5, [r2, #4]
 80048bc:	9a02      	ldr	r2, [sp, #8]
 80048be:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80048c2:	ee36 6a42 	vsub.f32	s12, s12, s4
 80048c6:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80048ca:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80048ce:	ee65 2a22 	vmul.f32	s5, s10, s5
 80048d2:	ee25 5a21 	vmul.f32	s10, s10, s3
 80048d6:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80048da:	ee35 5a63 	vsub.f32	s10, s10, s7
 80048de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80048e2:	edcb 2a00 	vstr	s5, [fp]
 80048e6:	ed8b 5a01 	vstr	s10, [fp, #4]
 80048ea:	edd2 3a01 	vldr	s7, [r2, #4]
 80048ee:	ed92 5a00 	vldr	s10, [r2]
 80048f2:	9a06      	ldr	r2, [sp, #24]
 80048f4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80048f8:	ee36 6a65 	vsub.f32	s12, s12, s11
 80048fc:	ee66 4a85 	vmul.f32	s9, s13, s10
 8004900:	ee26 5a05 	vmul.f32	s10, s12, s10
 8004904:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004908:	ee26 6a23 	vmul.f32	s12, s12, s7
 800490c:	ee75 6a66 	vsub.f32	s13, s10, s13
 8004910:	ee34 6a86 	vadd.f32	s12, s9, s12
 8004914:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800491c:	edc0 6a01 	vstr	s13, [r0, #4]
 8004920:	ed80 6a00 	vstr	s12, [r0]
 8004924:	ed92 6a01 	vldr	s12, [r2, #4]
 8004928:	9803      	ldr	r0, [sp, #12]
 800492a:	ee77 7a43 	vsub.f32	s15, s14, s6
 800492e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8004932:	ed92 7a00 	vldr	s14, [r2]
 8004936:	ee65 6a87 	vmul.f32	s13, s11, s14
 800493a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800493e:	ee65 5a86 	vmul.f32	s11, s11, s12
 8004942:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004946:	ee77 5a65 	vsub.f32	s11, s14, s11
 800494a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494e:	edca 5a01 	vstr	s11, [sl, #4]
 8004952:	edca 7a00 	vstr	s15, [sl]
 8004956:	6872      	ldr	r2, [r6, #4]
 8004958:	4621      	mov	r1, r4
 800495a:	2304      	movs	r3, #4
 800495c:	f000 f892 	bl	8004a84 <arm_radix8_butterfly_f32>
 8004960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004962:	6872      	ldr	r2, [r6, #4]
 8004964:	4621      	mov	r1, r4
 8004966:	2304      	movs	r3, #4
 8004968:	f000 f88c 	bl	8004a84 <arm_radix8_butterfly_f32>
 800496c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800496e:	6872      	ldr	r2, [r6, #4]
 8004970:	4621      	mov	r1, r4
 8004972:	2304      	movs	r3, #4
 8004974:	f000 f886 	bl	8004a84 <arm_radix8_butterfly_f32>
 8004978:	9801      	ldr	r0, [sp, #4]
 800497a:	6872      	ldr	r2, [r6, #4]
 800497c:	4621      	mov	r1, r4
 800497e:	2304      	movs	r3, #4
 8004980:	b00f      	add	sp, #60	; 0x3c
 8004982:	ecbd 8b0a 	vpop	{d8-d12}
 8004986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	f000 b87b 	b.w	8004a84 <arm_radix8_butterfly_f32>
 800498e:	bf00      	nop

08004990 <arm_cfft_f32>:
 8004990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004994:	2a01      	cmp	r2, #1
 8004996:	4606      	mov	r6, r0
 8004998:	4617      	mov	r7, r2
 800499a:	460c      	mov	r4, r1
 800499c:	4698      	mov	r8, r3
 800499e:	8805      	ldrh	r5, [r0, #0]
 80049a0:	d054      	beq.n	8004a4c <arm_cfft_f32+0xbc>
 80049a2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80049a6:	d04c      	beq.n	8004a42 <arm_cfft_f32+0xb2>
 80049a8:	d916      	bls.n	80049d8 <arm_cfft_f32+0x48>
 80049aa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80049ae:	d01a      	beq.n	80049e6 <arm_cfft_f32+0x56>
 80049b0:	d95c      	bls.n	8004a6c <arm_cfft_f32+0xdc>
 80049b2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80049b6:	d044      	beq.n	8004a42 <arm_cfft_f32+0xb2>
 80049b8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80049bc:	d105      	bne.n	80049ca <arm_cfft_f32+0x3a>
 80049be:	4620      	mov	r0, r4
 80049c0:	4629      	mov	r1, r5
 80049c2:	6872      	ldr	r2, [r6, #4]
 80049c4:	2301      	movs	r3, #1
 80049c6:	f000 f85d 	bl	8004a84 <arm_radix8_butterfly_f32>
 80049ca:	f1b8 0f00 	cmp.w	r8, #0
 80049ce:	d111      	bne.n	80049f4 <arm_cfft_f32+0x64>
 80049d0:	2f01      	cmp	r7, #1
 80049d2:	d016      	beq.n	8004a02 <arm_cfft_f32+0x72>
 80049d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d8:	2d20      	cmp	r5, #32
 80049da:	d032      	beq.n	8004a42 <arm_cfft_f32+0xb2>
 80049dc:	d94a      	bls.n	8004a74 <arm_cfft_f32+0xe4>
 80049de:	2d40      	cmp	r5, #64	; 0x40
 80049e0:	d0ed      	beq.n	80049be <arm_cfft_f32+0x2e>
 80049e2:	2d80      	cmp	r5, #128	; 0x80
 80049e4:	d1f1      	bne.n	80049ca <arm_cfft_f32+0x3a>
 80049e6:	4630      	mov	r0, r6
 80049e8:	4621      	mov	r1, r4
 80049ea:	f7ff fca1 	bl	8004330 <arm_cfft_radix8by2_f32>
 80049ee:	f1b8 0f00 	cmp.w	r8, #0
 80049f2:	d0ed      	beq.n	80049d0 <arm_cfft_f32+0x40>
 80049f4:	4620      	mov	r0, r4
 80049f6:	89b1      	ldrh	r1, [r6, #12]
 80049f8:	68b2      	ldr	r2, [r6, #8]
 80049fa:	f7fb fbed 	bl	80001d8 <arm_bitreversal_32>
 80049fe:	2f01      	cmp	r7, #1
 8004a00:	d1e8      	bne.n	80049d4 <arm_cfft_f32+0x44>
 8004a02:	ee07 5a90 	vmov	s15, r5
 8004a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004a0e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8004a12:	2d00      	cmp	r5, #0
 8004a14:	d0de      	beq.n	80049d4 <arm_cfft_f32+0x44>
 8004a16:	f104 0108 	add.w	r1, r4, #8
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	429d      	cmp	r5, r3
 8004a20:	f101 0108 	add.w	r1, r1, #8
 8004a24:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004a28:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004a2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004a30:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004a34:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004a38:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004a3c:	d1ee      	bne.n	8004a1c <arm_cfft_f32+0x8c>
 8004a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a42:	4630      	mov	r0, r6
 8004a44:	4621      	mov	r1, r4
 8004a46:	f7ff fd45 	bl	80044d4 <arm_cfft_radix8by4_f32>
 8004a4a:	e7be      	b.n	80049ca <arm_cfft_f32+0x3a>
 8004a4c:	b1ad      	cbz	r5, 8004a7a <arm_cfft_f32+0xea>
 8004a4e:	f101 030c 	add.w	r3, r1, #12
 8004a52:	2200      	movs	r2, #0
 8004a54:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004a58:	3201      	adds	r2, #1
 8004a5a:	eef1 7a67 	vneg.f32	s15, s15
 8004a5e:	4295      	cmp	r5, r2
 8004a60:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004a64:	f103 0308 	add.w	r3, r3, #8
 8004a68:	d1f4      	bne.n	8004a54 <arm_cfft_f32+0xc4>
 8004a6a:	e79a      	b.n	80049a2 <arm_cfft_f32+0x12>
 8004a6c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004a70:	d0a5      	beq.n	80049be <arm_cfft_f32+0x2e>
 8004a72:	e7aa      	b.n	80049ca <arm_cfft_f32+0x3a>
 8004a74:	2d10      	cmp	r5, #16
 8004a76:	d0b6      	beq.n	80049e6 <arm_cfft_f32+0x56>
 8004a78:	e7a7      	b.n	80049ca <arm_cfft_f32+0x3a>
 8004a7a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004a7e:	d894      	bhi.n	80049aa <arm_cfft_f32+0x1a>
 8004a80:	e7aa      	b.n	80049d8 <arm_cfft_f32+0x48>
 8004a82:	bf00      	nop

08004a84 <arm_radix8_butterfly_f32>:
 8004a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a88:	ed2d 8b10 	vpush	{d8-d15}
 8004a8c:	b09d      	sub	sp, #116	; 0x74
 8004a8e:	461c      	mov	r4, r3
 8004a90:	ed9f bac8 	vldr	s22, [pc, #800]	; 8004db4 <arm_radix8_butterfly_f32+0x330>
 8004a94:	921a      	str	r2, [sp, #104]	; 0x68
 8004a96:	1d03      	adds	r3, r0, #4
 8004a98:	4682      	mov	sl, r0
 8004a9a:	4689      	mov	r9, r1
 8004a9c:	468b      	mov	fp, r1
 8004a9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004aa0:	9400      	str	r4, [sp, #0]
 8004aa2:	469e      	mov	lr, r3
 8004aa4:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004aa8:	005a      	lsls	r2, r3, #1
 8004aaa:	18d6      	adds	r6, r2, r3
 8004aac:	18f5      	adds	r5, r6, r3
 8004aae:	9203      	str	r2, [sp, #12]
 8004ab0:	195a      	adds	r2, r3, r5
 8004ab2:	18d0      	adds	r0, r2, r3
 8004ab4:	00df      	lsls	r7, r3, #3
 8004ab6:	1819      	adds	r1, r3, r0
 8004ab8:	463c      	mov	r4, r7
 8004aba:	9701      	str	r7, [sp, #4]
 8004abc:	4457      	add	r7, sl
 8004abe:	930c      	str	r3, [sp, #48]	; 0x30
 8004ac0:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8004aca:	eb07 0c04 	add.w	ip, r7, r4
 8004ace:	9c00      	ldr	r4, [sp, #0]
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8004ad6:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8004ada:	3204      	adds	r2, #4
 8004adc:	3104      	adds	r1, #4
 8004ade:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8004ae2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ae6:	f04f 0800 	mov.w	r8, #0
 8004aea:	eddc 7a00 	vldr	s15, [ip]
 8004aee:	edd7 6a00 	vldr	s13, [r7]
 8004af2:	edd6 3a00 	vldr	s7, [r6]
 8004af6:	ed5e aa01 	vldr	s21, [lr, #-4]
 8004afa:	edd5 4a00 	vldr	s9, [r5]
 8004afe:	ed90 2a00 	vldr	s4, [r0]
 8004b02:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004b06:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004b0a:	ee77 8a82 	vadd.f32	s17, s15, s4
 8004b0e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8004b12:	ee76 1a87 	vadd.f32	s3, s13, s14
 8004b16:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8004b1a:	ee31 6a84 	vadd.f32	s12, s3, s8
 8004b1e:	ee33 5a28 	vadd.f32	s10, s6, s17
 8004b22:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004b26:	ee75 6a06 	vadd.f32	s13, s10, s12
 8004b2a:	ee35 5a46 	vsub.f32	s10, s10, s12
 8004b2e:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8004b32:	ed85 5a00 	vstr	s10, [r5]
 8004b36:	ed96 1a01 	vldr	s2, [r6, #4]
 8004b3a:	edd7 5a01 	vldr	s11, [r7, #4]
 8004b3e:	ed92 aa00 	vldr	s20, [r2]
 8004b42:	ed91 6a00 	vldr	s12, [r1]
 8004b46:	ed9e 9a00 	vldr	s18, [lr]
 8004b4a:	ed95 5a01 	vldr	s10, [r5, #4]
 8004b4e:	eddc 6a01 	vldr	s13, [ip, #4]
 8004b52:	edd0 9a01 	vldr	s19, [r0, #4]
 8004b56:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8004b5a:	ee71 2a46 	vsub.f32	s5, s2, s12
 8004b5e:	ee75 3aca 	vsub.f32	s7, s11, s20
 8004b62:	ee37 0a60 	vsub.f32	s0, s14, s1
 8004b66:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8004b6a:	ee37 7a20 	vadd.f32	s14, s14, s1
 8004b6e:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8004b72:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8004b76:	ee79 3a05 	vadd.f32	s7, s18, s10
 8004b7a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8004b7e:	ee39 5a45 	vsub.f32	s10, s18, s10
 8004b82:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8004b86:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004b8a:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8004b8e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004b92:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004b96:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004b9a:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8004b9e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8004ba2:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004ba6:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004baa:	ee75 8a86 	vadd.f32	s17, s11, s12
 8004bae:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8004bb2:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8004bb6:	ee75 6a62 	vsub.f32	s13, s10, s5
 8004bba:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8004bbe:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004bc2:	ee33 1a89 	vadd.f32	s2, s7, s18
 8004bc6:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8004bca:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004bce:	ee75 4a22 	vadd.f32	s9, s10, s5
 8004bd2:	ee32 5a27 	vadd.f32	s10, s4, s15
 8004bd6:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004bda:	ee33 8a06 	vadd.f32	s16, s6, s12
 8004bde:	ee75 2a87 	vadd.f32	s5, s11, s14
 8004be2:	ee31 9a28 	vadd.f32	s18, s2, s17
 8004be6:	ee33 6a46 	vsub.f32	s12, s6, s12
 8004bea:	ee74 0a61 	vsub.f32	s1, s8, s3
 8004bee:	ee33 2a80 	vadd.f32	s4, s7, s0
 8004bf2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004bf6:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8004bfa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004bfe:	ee31 1a68 	vsub.f32	s2, s2, s17
 8004c02:	ee34 4a21 	vadd.f32	s8, s8, s3
 8004c06:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004c0a:	ee74 4a85 	vadd.f32	s9, s9, s10
 8004c0e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004c12:	44d8      	add	r8, fp
 8004c14:	45c1      	cmp	r9, r8
 8004c16:	ed8e 9a00 	vstr	s18, [lr]
 8004c1a:	ed85 1a01 	vstr	s2, [r5, #4]
 8004c1e:	449e      	add	lr, r3
 8004c20:	ed8c 8a00 	vstr	s16, [ip]
 8004c24:	441d      	add	r5, r3
 8004c26:	ed80 6a00 	vstr	s12, [r0]
 8004c2a:	edcc 0a01 	vstr	s1, [ip, #4]
 8004c2e:	ed80 4a01 	vstr	s8, [r0, #4]
 8004c32:	449c      	add	ip, r3
 8004c34:	ed87 2a00 	vstr	s4, [r7]
 8004c38:	4418      	add	r0, r3
 8004c3a:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004c3e:	ed42 2a01 	vstr	s5, [r2, #-4]
 8004c42:	ed86 7a00 	vstr	s14, [r6]
 8004c46:	ed87 3a01 	vstr	s6, [r7, #4]
 8004c4a:	edc1 4a00 	vstr	s9, [r1]
 8004c4e:	441f      	add	r7, r3
 8004c50:	edc2 5a00 	vstr	s11, [r2]
 8004c54:	4419      	add	r1, r3
 8004c56:	edc6 6a01 	vstr	s13, [r6, #4]
 8004c5a:	441a      	add	r2, r3
 8004c5c:	441e      	add	r6, r3
 8004c5e:	f63f af44 	bhi.w	8004aea <arm_radix8_butterfly_f32+0x66>
 8004c62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c64:	2907      	cmp	r1, #7
 8004c66:	4620      	mov	r0, r4
 8004c68:	f240 81e9 	bls.w	800503e <arm_radix8_butterfly_f32+0x5ba>
 8004c6c:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8004c70:	193e      	adds	r6, r7, r4
 8004c72:	1935      	adds	r5, r6, r4
 8004c74:	9c03      	ldr	r4, [sp, #12]
 8004c76:	9000      	str	r0, [sp, #0]
 8004c78:	4622      	mov	r2, r4
 8004c7a:	3201      	adds	r2, #1
 8004c7c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004c80:	9900      	ldr	r1, [sp, #0]
 8004c82:	1828      	adds	r0, r5, r0
 8004c84:	eb00 0e01 	add.w	lr, r0, r1
 8004c88:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c8a:	440a      	add	r2, r1
 8004c8c:	eb04 0c01 	add.w	ip, r4, r1
 8004c90:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8004c94:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8004c98:	9a00      	ldr	r2, [sp, #0]
 8004c9a:	940f      	str	r4, [sp, #60]	; 0x3c
 8004c9c:	00ed      	lsls	r5, r5, #3
 8004c9e:	9511      	str	r5, [sp, #68]	; 0x44
 8004ca0:	00d5      	lsls	r5, r2, #3
 8004ca2:	950d      	str	r5, [sp, #52]	; 0x34
 8004ca4:	9d01      	ldr	r5, [sp, #4]
 8004ca6:	3508      	adds	r5, #8
 8004ca8:	9516      	str	r5, [sp, #88]	; 0x58
 8004caa:	9d02      	ldr	r5, [sp, #8]
 8004cac:	3508      	adds	r5, #8
 8004cae:	0114      	lsls	r4, r2, #4
 8004cb0:	9517      	str	r5, [sp, #92]	; 0x5c
 8004cb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cb4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004cb6:	940e      	str	r4, [sp, #56]	; 0x38
 8004cb8:	00c0      	lsls	r0, r0, #3
 8004cba:	9010      	str	r0, [sp, #64]	; 0x40
 8004cbc:	18aa      	adds	r2, r5, r2
 8004cbe:	9207      	str	r2, [sp, #28]
 8004cc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004cc4:	18aa      	adds	r2, r5, r2
 8004cc6:	9208      	str	r2, [sp, #32]
 8004cc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004cca:	18aa      	adds	r2, r5, r2
 8004ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004cd2:	f10e 0204 	add.w	r2, lr, #4
 8004cd6:	920a      	str	r2, [sp, #40]	; 0x28
 8004cd8:	00c9      	lsls	r1, r1, #3
 8004cda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004cdc:	310c      	adds	r1, #12
 8004cde:	00f6      	lsls	r6, r6, #3
 8004ce0:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8004ce4:	9114      	str	r1, [sp, #80]	; 0x50
 8004ce6:	18a9      	adds	r1, r5, r2
 8004ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cea:	9612      	str	r6, [sp, #72]	; 0x48
 8004cec:	00ff      	lsls	r7, r7, #3
 8004cee:	19ae      	adds	r6, r5, r6
 8004cf0:	3008      	adds	r0, #8
 8004cf2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8004cf6:	9606      	str	r6, [sp, #24]
 8004cf8:	9019      	str	r0, [sp, #100]	; 0x64
 8004cfa:	18aa      	adds	r2, r5, r2
 8004cfc:	0164      	lsls	r4, r4, #5
 8004cfe:	19ee      	adds	r6, r5, r7
 8004d00:	f10c 000c 	add.w	r0, ip, #12
 8004d04:	9713      	str	r7, [sp, #76]	; 0x4c
 8004d06:	9604      	str	r6, [sp, #16]
 8004d08:	9015      	str	r0, [sp, #84]	; 0x54
 8004d0a:	9103      	str	r1, [sp, #12]
 8004d0c:	9205      	str	r2, [sp, #20]
 8004d0e:	f104 0208 	add.w	r2, r4, #8
 8004d12:	9218      	str	r2, [sp, #96]	; 0x60
 8004d14:	f04f 0801 	mov.w	r8, #1
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f102 0108 	add.w	r1, r2, #8
 8004d1e:	460f      	mov	r7, r1
 8004d20:	910b      	str	r1, [sp, #44]	; 0x2c
 8004d22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004d24:	188e      	adds	r6, r1, r2
 8004d26:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004d28:	188d      	adds	r5, r1, r2
 8004d2a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004d2c:	188c      	adds	r4, r1, r2
 8004d2e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004d30:	1888      	adds	r0, r1, r2
 8004d32:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004d34:	eb01 0c02 	add.w	ip, r1, r2
 8004d38:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004d3a:	440a      	add	r2, r1
 8004d3c:	9903      	ldr	r1, [sp, #12]
 8004d3e:	edd1 fa00 	vldr	s31, [r1]
 8004d42:	9905      	ldr	r1, [sp, #20]
 8004d44:	ed91 fa00 	vldr	s30, [r1]
 8004d48:	9904      	ldr	r1, [sp, #16]
 8004d4a:	edd1 ea00 	vldr	s29, [r1]
 8004d4e:	9906      	ldr	r1, [sp, #24]
 8004d50:	ed91 ea00 	vldr	s28, [r1]
 8004d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d56:	edd1 da00 	vldr	s27, [r1]
 8004d5a:	9908      	ldr	r1, [sp, #32]
 8004d5c:	ed91 da00 	vldr	s26, [r1]
 8004d60:	9907      	ldr	r1, [sp, #28]
 8004d62:	edd1 ca00 	vldr	s25, [r1]
 8004d66:	9903      	ldr	r1, [sp, #12]
 8004d68:	ed91 ca01 	vldr	s24, [r1, #4]
 8004d6c:	9905      	ldr	r1, [sp, #20]
 8004d6e:	edd1 ba01 	vldr	s23, [r1, #4]
 8004d72:	9904      	ldr	r1, [sp, #16]
 8004d74:	edd1 aa01 	vldr	s21, [r1, #4]
 8004d78:	9906      	ldr	r1, [sp, #24]
 8004d7a:	ed91 aa01 	vldr	s20, [r1, #4]
 8004d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d80:	edd1 7a01 	vldr	s15, [r1, #4]
 8004d84:	9908      	ldr	r1, [sp, #32]
 8004d86:	edcd 7a00 	vstr	s15, [sp]
 8004d8a:	edd1 7a01 	vldr	s15, [r1, #4]
 8004d8e:	9907      	ldr	r1, [sp, #28]
 8004d90:	edcd 7a01 	vstr	s15, [sp, #4]
 8004d94:	edd1 7a01 	vldr	s15, [r1, #4]
 8004d98:	eb0a 0e07 	add.w	lr, sl, r7
 8004d9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004d9e:	edcd 7a02 	vstr	s15, [sp, #8]
 8004da2:	eb0c 010a 	add.w	r1, ip, sl
 8004da6:	4456      	add	r6, sl
 8004da8:	4455      	add	r5, sl
 8004daa:	4454      	add	r4, sl
 8004dac:	4450      	add	r0, sl
 8004dae:	4452      	add	r2, sl
 8004db0:	46c4      	mov	ip, r8
 8004db2:	e001      	b.n	8004db8 <arm_radix8_butterfly_f32+0x334>
 8004db4:	3f3504f3 	.word	0x3f3504f3
 8004db8:	ed96 5a00 	vldr	s10, [r6]
 8004dbc:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004dc0:	ed11 6a01 	vldr	s12, [r1, #-4]
 8004dc4:	edd0 7a00 	vldr	s15, [r0]
 8004dc8:	ed17 7a01 	vldr	s14, [r7, #-4]
 8004dcc:	edde 3a00 	vldr	s7, [lr]
 8004dd0:	ed94 3a00 	vldr	s6, [r4]
 8004dd4:	ed95 2a00 	vldr	s4, [r5]
 8004dd8:	ed9e 0a01 	vldr	s0, [lr, #4]
 8004ddc:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004de0:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004de4:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004de8:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004dec:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004df0:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004df4:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004df8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004dfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e00:	ed8e 6a00 	vstr	s12, [lr]
 8004e04:	edd0 8a01 	vldr	s17, [r0, #4]
 8004e08:	ed95 9a01 	vldr	s18, [r5, #4]
 8004e0c:	edd1 2a00 	vldr	s5, [r1]
 8004e10:	ed97 7a00 	vldr	s14, [r7]
 8004e14:	edd4 0a01 	vldr	s1, [r4, #4]
 8004e18:	ed96 6a01 	vldr	s12, [r6, #4]
 8004e1c:	edd2 5a00 	vldr	s11, [r2]
 8004e20:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004e24:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004e28:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004e2c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004e30:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004e34:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004e38:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004e3c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004e40:	ee75 8a69 	vsub.f32	s17, s10, s19
 8004e44:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004e48:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004e4c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004e50:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004e54:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8004e58:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004e5c:	ee32 9a08 	vadd.f32	s18, s4, s16
 8004e60:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004e64:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004e68:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004e6c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004e70:	ee32 1a87 	vadd.f32	s2, s5, s14
 8004e74:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004e78:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004e7c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004e80:	ee73 0a29 	vadd.f32	s1, s6, s19
 8004e84:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004e88:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004e8c:	ee32 7a64 	vsub.f32	s14, s4, s9
 8004e90:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8004e94:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004e98:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004e9c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8004ea0:	ee74 3a22 	vadd.f32	s7, s8, s5
 8004ea4:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8004ea8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004eac:	ee79 1a41 	vsub.f32	s3, s18, s2
 8004eb0:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8004eb4:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004eb8:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004ebc:	ee72 4a24 	vadd.f32	s9, s4, s9
 8004ec0:	ee30 4a60 	vsub.f32	s8, s0, s1
 8004ec4:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004ec8:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004ecc:	ee77 9a85 	vadd.f32	s19, s15, s10
 8004ed0:	ee36 6a03 	vadd.f32	s12, s12, s6
 8004ed4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004ed8:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004edc:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8004ee0:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8004ee4:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004ee8:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004eec:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8004ef0:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8004ef4:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004ef8:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004efc:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004f00:	ee35 3a03 	vadd.f32	s6, s10, s6
 8004f04:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004f08:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004f0c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004f10:	ed9d 4a02 	vldr	s8, [sp, #8]
 8004f14:	ed8e 1a01 	vstr	s2, [lr, #4]
 8004f18:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004f1c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004f20:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004f24:	ed86 3a00 	vstr	s6, [r6]
 8004f28:	ee30 9a89 	vadd.f32	s18, s1, s18
 8004f2c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8004f30:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8004f34:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8004f38:	ee67 2a22 	vmul.f32	s5, s14, s5
 8004f3c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8004f40:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004f44:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8004f48:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8004f4c:	ee64 8a28 	vmul.f32	s17, s8, s17
 8004f50:	ed9d 4a00 	vldr	s8, [sp]
 8004f54:	edc6 6a01 	vstr	s13, [r6, #4]
 8004f58:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004f5c:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8004f60:	ee64 9a29 	vmul.f32	s19, s8, s19
 8004f64:	ee24 4a25 	vmul.f32	s8, s8, s11
 8004f68:	ee30 7a87 	vadd.f32	s14, s1, s14
 8004f6c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004f70:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8004f74:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8004f78:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8004f7c:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8004f80:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8004f84:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8004f88:	ee75 1a21 	vadd.f32	s3, s10, s3
 8004f8c:	ee30 0a68 	vsub.f32	s0, s0, s17
 8004f90:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8004f94:	ee70 0a84 	vadd.f32	s1, s1, s8
 8004f98:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004f9c:	44dc      	add	ip, fp
 8004f9e:	45e1      	cmp	r9, ip
 8004fa0:	ed84 9a00 	vstr	s18, [r4]
 8004fa4:	edc4 3a01 	vstr	s7, [r4, #4]
 8004fa8:	449e      	add	lr, r3
 8004faa:	ed02 7a01 	vstr	s14, [r2, #-4]
 8004fae:	edc2 2a00 	vstr	s5, [r2]
 8004fb2:	441e      	add	r6, r3
 8004fb4:	ed85 2a00 	vstr	s4, [r5]
 8004fb8:	ed85 8a01 	vstr	s16, [r5, #4]
 8004fbc:	441c      	add	r4, r3
 8004fbe:	ed47 1a01 	vstr	s3, [r7, #-4]
 8004fc2:	ed87 0a00 	vstr	s0, [r7]
 8004fc6:	441a      	add	r2, r3
 8004fc8:	ed41 4a01 	vstr	s9, [r1, #-4]
 8004fcc:	edc1 9a00 	vstr	s19, [r1]
 8004fd0:	441d      	add	r5, r3
 8004fd2:	edc0 0a00 	vstr	s1, [r0]
 8004fd6:	441f      	add	r7, r3
 8004fd8:	ed80 6a01 	vstr	s12, [r0, #4]
 8004fdc:	4419      	add	r1, r3
 8004fde:	4418      	add	r0, r3
 8004fe0:	f63f aeea 	bhi.w	8004db8 <arm_radix8_butterfly_f32+0x334>
 8004fe4:	9a03      	ldr	r2, [sp, #12]
 8004fe6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fe8:	440a      	add	r2, r1
 8004fea:	9203      	str	r2, [sp, #12]
 8004fec:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004fee:	9a05      	ldr	r2, [sp, #20]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	9205      	str	r2, [sp, #20]
 8004ff4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004ff6:	9a04      	ldr	r2, [sp, #16]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	9204      	str	r2, [sp, #16]
 8004ffc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004ffe:	9a06      	ldr	r2, [sp, #24]
 8005000:	440a      	add	r2, r1
 8005002:	9206      	str	r2, [sp, #24]
 8005004:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005008:	440a      	add	r2, r1
 800500a:	9209      	str	r2, [sp, #36]	; 0x24
 800500c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800500e:	9a08      	ldr	r2, [sp, #32]
 8005010:	440a      	add	r2, r1
 8005012:	9208      	str	r2, [sp, #32]
 8005014:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005016:	9a07      	ldr	r2, [sp, #28]
 8005018:	440a      	add	r2, r1
 800501a:	9207      	str	r2, [sp, #28]
 800501c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800501e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005020:	f108 0801 	add.w	r8, r8, #1
 8005024:	3208      	adds	r2, #8
 8005026:	4588      	cmp	r8, r1
 8005028:	920a      	str	r2, [sp, #40]	; 0x28
 800502a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800502c:	f47f ae75 	bne.w	8004d1a <arm_radix8_butterfly_f32+0x296>
 8005030:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	46c3      	mov	fp, r8
 8005038:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800503c:	e532      	b.n	8004aa4 <arm_radix8_butterfly_f32+0x20>
 800503e:	b01d      	add	sp, #116	; 0x74
 8005040:	ecbd 8b10 	vpop	{d8-d15}
 8005044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005048 <__errno>:
 8005048:	4b01      	ldr	r3, [pc, #4]	; (8005050 <__errno+0x8>)
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	2000000c 	.word	0x2000000c

08005054 <__libc_init_array>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	4d0d      	ldr	r5, [pc, #52]	; (800508c <__libc_init_array+0x38>)
 8005058:	4c0d      	ldr	r4, [pc, #52]	; (8005090 <__libc_init_array+0x3c>)
 800505a:	1b64      	subs	r4, r4, r5
 800505c:	10a4      	asrs	r4, r4, #2
 800505e:	2600      	movs	r6, #0
 8005060:	42a6      	cmp	r6, r4
 8005062:	d109      	bne.n	8005078 <__libc_init_array+0x24>
 8005064:	4d0b      	ldr	r5, [pc, #44]	; (8005094 <__libc_init_array+0x40>)
 8005066:	4c0c      	ldr	r4, [pc, #48]	; (8005098 <__libc_init_array+0x44>)
 8005068:	f000 f9ce 	bl	8005408 <_init>
 800506c:	1b64      	subs	r4, r4, r5
 800506e:	10a4      	asrs	r4, r4, #2
 8005070:	2600      	movs	r6, #0
 8005072:	42a6      	cmp	r6, r4
 8005074:	d105      	bne.n	8005082 <__libc_init_array+0x2e>
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	f855 3b04 	ldr.w	r3, [r5], #4
 800507c:	4798      	blx	r3
 800507e:	3601      	adds	r6, #1
 8005080:	e7ee      	b.n	8005060 <__libc_init_array+0xc>
 8005082:	f855 3b04 	ldr.w	r3, [r5], #4
 8005086:	4798      	blx	r3
 8005088:	3601      	adds	r6, #1
 800508a:	e7f2      	b.n	8005072 <__libc_init_array+0x1e>
 800508c:	080188a4 	.word	0x080188a4
 8005090:	080188a4 	.word	0x080188a4
 8005094:	080188a4 	.word	0x080188a4
 8005098:	080188a8 	.word	0x080188a8

0800509c <memset>:
 800509c:	4402      	add	r2, r0
 800509e:	4603      	mov	r3, r0
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d100      	bne.n	80050a6 <memset+0xa>
 80050a4:	4770      	bx	lr
 80050a6:	f803 1b01 	strb.w	r1, [r3], #1
 80050aa:	e7f9      	b.n	80050a0 <memset+0x4>

080050ac <log10f>:
 80050ac:	b508      	push	{r3, lr}
 80050ae:	ed2d 8b02 	vpush	{d8}
 80050b2:	eeb0 8a40 	vmov.f32	s16, s0
 80050b6:	f000 f855 	bl	8005164 <__ieee754_log10f>
 80050ba:	4b14      	ldr	r3, [pc, #80]	; (800510c <log10f+0x60>)
 80050bc:	f993 3000 	ldrsb.w	r3, [r3]
 80050c0:	3301      	adds	r3, #1
 80050c2:	d014      	beq.n	80050ee <log10f+0x42>
 80050c4:	eeb4 8a48 	vcmp.f32	s16, s16
 80050c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050cc:	d60f      	bvs.n	80050ee <log10f+0x42>
 80050ce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80050d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d6:	d80a      	bhi.n	80050ee <log10f+0x42>
 80050d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80050dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e0:	d108      	bne.n	80050f4 <log10f+0x48>
 80050e2:	f7ff ffb1 	bl	8005048 <__errno>
 80050e6:	2322      	movs	r3, #34	; 0x22
 80050e8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005110 <log10f+0x64>
 80050ec:	6003      	str	r3, [r0, #0]
 80050ee:	ecbd 8b02 	vpop	{d8}
 80050f2:	bd08      	pop	{r3, pc}
 80050f4:	f7ff ffa8 	bl	8005048 <__errno>
 80050f8:	ecbd 8b02 	vpop	{d8}
 80050fc:	2321      	movs	r3, #33	; 0x21
 80050fe:	6003      	str	r3, [r0, #0]
 8005100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005104:	4803      	ldr	r0, [pc, #12]	; (8005114 <log10f+0x68>)
 8005106:	f000 b889 	b.w	800521c <nanf>
 800510a:	bf00      	nop
 800510c:	20000070 	.word	0x20000070
 8005110:	ff800000 	.word	0xff800000
 8005114:	08018898 	.word	0x08018898

08005118 <sqrtf>:
 8005118:	b508      	push	{r3, lr}
 800511a:	ed2d 8b02 	vpush	{d8}
 800511e:	eeb0 8a40 	vmov.f32	s16, s0
 8005122:	f000 f877 	bl	8005214 <__ieee754_sqrtf>
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <sqrtf+0x44>)
 8005128:	f993 3000 	ldrsb.w	r3, [r3]
 800512c:	3301      	adds	r3, #1
 800512e:	d011      	beq.n	8005154 <sqrtf+0x3c>
 8005130:	eeb4 8a48 	vcmp.f32	s16, s16
 8005134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005138:	d60c      	bvs.n	8005154 <sqrtf+0x3c>
 800513a:	eddf 8a09 	vldr	s17, [pc, #36]	; 8005160 <sqrtf+0x48>
 800513e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005146:	d505      	bpl.n	8005154 <sqrtf+0x3c>
 8005148:	f7ff ff7e 	bl	8005048 <__errno>
 800514c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005150:	2321      	movs	r3, #33	; 0x21
 8005152:	6003      	str	r3, [r0, #0]
 8005154:	ecbd 8b02 	vpop	{d8}
 8005158:	bd08      	pop	{r3, pc}
 800515a:	bf00      	nop
 800515c:	20000070 	.word	0x20000070
 8005160:	00000000 	.word	0x00000000

08005164 <__ieee754_log10f>:
 8005164:	b508      	push	{r3, lr}
 8005166:	ee10 2a10 	vmov	r2, s0
 800516a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800516e:	ed2d 8b02 	vpush	{d8}
 8005172:	d108      	bne.n	8005186 <__ieee754_log10f+0x22>
 8005174:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80051fc <__ieee754_log10f+0x98>
 8005178:	eddf 7a21 	vldr	s15, [pc, #132]	; 8005200 <__ieee754_log10f+0x9c>
 800517c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005180:	ecbd 8b02 	vpop	{d8}
 8005184:	bd08      	pop	{r3, pc}
 8005186:	2a00      	cmp	r2, #0
 8005188:	da02      	bge.n	8005190 <__ieee754_log10f+0x2c>
 800518a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800518e:	e7f3      	b.n	8005178 <__ieee754_log10f+0x14>
 8005190:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005194:	db02      	blt.n	800519c <__ieee754_log10f+0x38>
 8005196:	ee30 0a00 	vadd.f32	s0, s0, s0
 800519a:	e7f1      	b.n	8005180 <__ieee754_log10f+0x1c>
 800519c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80051a0:	bfbf      	itttt	lt
 80051a2:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8005204 <__ieee754_log10f+0xa0>
 80051a6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80051aa:	f06f 0118 	mvnlt.w	r1, #24
 80051ae:	ee17 2a90 	vmovlt	r2, s15
 80051b2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80051b6:	bfa8      	it	ge
 80051b8:	2100      	movge	r1, #0
 80051ba:	3b7f      	subs	r3, #127	; 0x7f
 80051bc:	440b      	add	r3, r1
 80051be:	0fd9      	lsrs	r1, r3, #31
 80051c0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80051cc:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80051d0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80051d4:	ee00 3a10 	vmov	s0, r3
 80051d8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80051dc:	f000 f824 	bl	8005228 <__ieee754_logf>
 80051e0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005208 <__ieee754_log10f+0xa4>
 80051e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80051e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800520c <__ieee754_log10f+0xa8>
 80051ec:	eea8 0a27 	vfma.f32	s0, s16, s15
 80051f0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005210 <__ieee754_log10f+0xac>
 80051f4:	eea8 0a27 	vfma.f32	s0, s16, s15
 80051f8:	e7c2      	b.n	8005180 <__ieee754_log10f+0x1c>
 80051fa:	bf00      	nop
 80051fc:	cc000000 	.word	0xcc000000
 8005200:	00000000 	.word	0x00000000
 8005204:	4c000000 	.word	0x4c000000
 8005208:	3ede5bd9 	.word	0x3ede5bd9
 800520c:	355427db 	.word	0x355427db
 8005210:	3e9a2080 	.word	0x3e9a2080

08005214 <__ieee754_sqrtf>:
 8005214:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005218:	4770      	bx	lr
	...

0800521c <nanf>:
 800521c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005224 <nanf+0x8>
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	7fc00000 	.word	0x7fc00000

08005228 <__ieee754_logf>:
 8005228:	ee10 3a10 	vmov	r3, s0
 800522c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005230:	d106      	bne.n	8005240 <__ieee754_logf+0x18>
 8005232:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80053c8 <__ieee754_logf+0x1a0>
 8005236:	eddf 7a65 	vldr	s15, [pc, #404]	; 80053cc <__ieee754_logf+0x1a4>
 800523a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800523e:	4770      	bx	lr
 8005240:	2b00      	cmp	r3, #0
 8005242:	da02      	bge.n	800524a <__ieee754_logf+0x22>
 8005244:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005248:	e7f5      	b.n	8005236 <__ieee754_logf+0xe>
 800524a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800524e:	db02      	blt.n	8005256 <__ieee754_logf+0x2e>
 8005250:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005254:	4770      	bx	lr
 8005256:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800525a:	bfb8      	it	lt
 800525c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80053d0 <__ieee754_logf+0x1a8>
 8005260:	485c      	ldr	r0, [pc, #368]	; (80053d4 <__ieee754_logf+0x1ac>)
 8005262:	bfbe      	ittt	lt
 8005264:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005268:	f06f 0118 	mvnlt.w	r1, #24
 800526c:	ee17 3a90 	vmovlt	r3, s15
 8005270:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8005274:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005278:	4418      	add	r0, r3
 800527a:	bfa8      	it	ge
 800527c:	2100      	movge	r1, #0
 800527e:	3a7f      	subs	r2, #127	; 0x7f
 8005280:	440a      	add	r2, r1
 8005282:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8005286:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800528a:	4319      	orrs	r1, r3
 800528c:	ee00 1a10 	vmov	s0, r1
 8005290:	4951      	ldr	r1, [pc, #324]	; (80053d8 <__ieee754_logf+0x1b0>)
 8005292:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8005296:	f103 000f 	add.w	r0, r3, #15
 800529a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800529e:	4001      	ands	r1, r0
 80052a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80052a4:	bb89      	cbnz	r1, 800530a <__ieee754_logf+0xe2>
 80052a6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80052aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ae:	d10f      	bne.n	80052d0 <__ieee754_logf+0xa8>
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	f000 8085 	beq.w	80053c0 <__ieee754_logf+0x198>
 80052b6:	ee07 2a90 	vmov	s15, r2
 80052ba:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80053dc <__ieee754_logf+0x1b4>
 80052be:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80053e0 <__ieee754_logf+0x1b8>
 80052c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80052ca:	eea7 0a87 	vfma.f32	s0, s15, s14
 80052ce:	4770      	bx	lr
 80052d0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80053e4 <__ieee754_logf+0x1bc>
 80052d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80052d8:	eee0 7a66 	vfms.f32	s15, s0, s13
 80052dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80052e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052e4:	b912      	cbnz	r2, 80052ec <__ieee754_logf+0xc4>
 80052e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80052ea:	4770      	bx	lr
 80052ec:	ee07 2a90 	vmov	s15, r2
 80052f0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80053dc <__ieee754_logf+0x1b4>
 80052f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80052fc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005300:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80053e0 <__ieee754_logf+0x1b8>
 8005304:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8005308:	4770      	bx	lr
 800530a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800530e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8005312:	eddf 5a35 	vldr	s11, [pc, #212]	; 80053e8 <__ieee754_logf+0x1c0>
 8005316:	eddf 4a35 	vldr	s9, [pc, #212]	; 80053ec <__ieee754_logf+0x1c4>
 800531a:	4935      	ldr	r1, [pc, #212]	; (80053f0 <__ieee754_logf+0x1c8>)
 800531c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8005320:	4419      	add	r1, r3
 8005322:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8005326:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800532a:	430b      	orrs	r3, r1
 800532c:	2b00      	cmp	r3, #0
 800532e:	ee07 2a90 	vmov	s15, r2
 8005332:	ee26 5a06 	vmul.f32	s10, s12, s12
 8005336:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800533a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800533e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80053f4 <__ieee754_logf+0x1cc>
 8005342:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005346:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80053f8 <__ieee754_logf+0x1d0>
 800534a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800534e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80053fc <__ieee754_logf+0x1d4>
 8005352:	eee7 7a24 	vfma.f32	s15, s14, s9
 8005356:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8005400 <__ieee754_logf+0x1d8>
 800535a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800535e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8005404 <__ieee754_logf+0x1dc>
 8005362:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005366:	ee67 7a85 	vmul.f32	s15, s15, s10
 800536a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800536e:	dd1c      	ble.n	80053aa <__ieee754_logf+0x182>
 8005370:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005374:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005378:	ee27 7a00 	vmul.f32	s14, s14, s0
 800537c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005380:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005384:	b922      	cbnz	r2, 8005390 <__ieee754_logf+0x168>
 8005386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800538a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800538e:	4770      	bx	lr
 8005390:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80053dc <__ieee754_logf+0x1b4>
 8005394:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800539c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80053a0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80053e0 <__ieee754_logf+0x1b8>
 80053a4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80053a8:	4770      	bx	lr
 80053aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80053ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d0e9      	beq.n	800538a <__ieee754_logf+0x162>
 80053b6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80053dc <__ieee754_logf+0x1b4>
 80053ba:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80053be:	e7ed      	b.n	800539c <__ieee754_logf+0x174>
 80053c0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80053cc <__ieee754_logf+0x1a4>
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	cc000000 	.word	0xcc000000
 80053cc:	00000000 	.word	0x00000000
 80053d0:	4c000000 	.word	0x4c000000
 80053d4:	004afb20 	.word	0x004afb20
 80053d8:	007ffff0 	.word	0x007ffff0
 80053dc:	3717f7d1 	.word	0x3717f7d1
 80053e0:	3f317180 	.word	0x3f317180
 80053e4:	3eaaaaab 	.word	0x3eaaaaab
 80053e8:	3e1cd04f 	.word	0x3e1cd04f
 80053ec:	3e178897 	.word	0x3e178897
 80053f0:	ffcf5c30 	.word	0xffcf5c30
 80053f4:	3e638e29 	.word	0x3e638e29
 80053f8:	3ecccccd 	.word	0x3ecccccd
 80053fc:	3e3a3325 	.word	0x3e3a3325
 8005400:	3e924925 	.word	0x3e924925
 8005404:	3f2aaaab 	.word	0x3f2aaaab

08005408 <_init>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr

08005414 <_fini>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr
