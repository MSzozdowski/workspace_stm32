
T4_L25_RTCAlarms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc4  08002dc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002dc4  08002dc4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dc4  08002dc4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  08002e3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08002e3c  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ac1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dbb  00000000  00000000  00028b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002b158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b0b  00000000  00000000  0002b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009deb  00000000  00000000  000433cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b9f  00000000  00000000  0004d1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1d55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e8  00000000  00000000  000d1da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d10 	.word	0x08002d10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002d10 	.word	0x08002d10

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4815      	ldr	r0, [pc, #84]	; (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f000 fd5f 	bl	8000c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f000 fbce 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001e4:	2320      	movs	r3, #32
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 fbc0 	bl	8000980 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	; 0x28
 8000206:	f000 fb84 	bl	8000912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	; 0x28
 800020c:	f000 fb9d 	bl	800094a <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b5b0      	push	{r4, r5, r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 fa37 	bl	80006a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f853 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f7ff ff89 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800023a:	f000 f9a3 	bl	8000584 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800023e:	f000 f8ab 	bl	8000398 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc,&RtcTime, RTC_FORMAT_BIN);
 8000242:	2200      	movs	r2, #0
 8000244:	491d      	ldr	r1, [pc, #116]	; (80002bc <main+0x94>)
 8000246:	481e      	ldr	r0, [pc, #120]	; (80002c0 <main+0x98>)
 8000248:	f001 fb8e 	bl	8001968 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&RtcDate,RTC_FORMAT_BIN);
 800024c:	2200      	movs	r2, #0
 800024e:	491d      	ldr	r1, [pc, #116]	; (80002c4 <main+0x9c>)
 8000250:	481b      	ldr	r0, [pc, #108]	; (80002c0 <main+0x98>)
 8000252:	f001 fc61 	bl	8001b18 <HAL_RTC_GetDate>
	  //Milliseconds = ((RtcTime.SecondsFraction-RtcTime.SubSeconds)/((float)RtcTime.SecondsFaction+1) * 100); dla serii F4
	  if(CompareSeconds != RtcTime.Seconds)
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <main+0x94>)
 8000258:	789a      	ldrb	r2, [r3, #2]
 800025a:	4b1b      	ldr	r3, [pc, #108]	; (80002c8 <main+0xa0>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	429a      	cmp	r2, r3
 8000260:	d0ef      	beq.n	8000242 <main+0x1a>
	  {
		  MessageLen = sprintf((char*)Message,"Date: %02d.%02d.%02d Time: %02d:%02d:%02d \n\r",
				  RtcDate.Date, RtcDate.Month, RtcDate.Year, RtcTime.Hours,RtcTime.Minutes,RtcTime.Seconds);
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <main+0x9c>)
 8000264:	789b      	ldrb	r3, [r3, #2]
		  MessageLen = sprintf((char*)Message,"Date: %02d.%02d.%02d Time: %02d:%02d:%02d \n\r",
 8000266:	461c      	mov	r4, r3
				  RtcDate.Date, RtcDate.Month, RtcDate.Year, RtcTime.Hours,RtcTime.Minutes,RtcTime.Seconds);
 8000268:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <main+0x9c>)
 800026a:	785b      	ldrb	r3, [r3, #1]
		  MessageLen = sprintf((char*)Message,"Date: %02d.%02d.%02d Time: %02d:%02d:%02d \n\r",
 800026c:	461d      	mov	r5, r3
				  RtcDate.Date, RtcDate.Month, RtcDate.Year, RtcTime.Hours,RtcTime.Minutes,RtcTime.Seconds);
 800026e:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <main+0x9c>)
 8000270:	78db      	ldrb	r3, [r3, #3]
		  MessageLen = sprintf((char*)Message,"Date: %02d.%02d.%02d Time: %02d:%02d:%02d \n\r",
 8000272:	461a      	mov	r2, r3
				  RtcDate.Date, RtcDate.Month, RtcDate.Year, RtcTime.Hours,RtcTime.Minutes,RtcTime.Seconds);
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <main+0x94>)
 8000276:	781b      	ldrb	r3, [r3, #0]
		  MessageLen = sprintf((char*)Message,"Date: %02d.%02d.%02d Time: %02d:%02d:%02d \n\r",
 8000278:	4619      	mov	r1, r3
				  RtcDate.Date, RtcDate.Month, RtcDate.Year, RtcTime.Hours,RtcTime.Minutes,RtcTime.Seconds);
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <main+0x94>)
 800027c:	785b      	ldrb	r3, [r3, #1]
		  MessageLen = sprintf((char*)Message,"Date: %02d.%02d.%02d Time: %02d:%02d:%02d \n\r",
 800027e:	4618      	mov	r0, r3
				  RtcDate.Date, RtcDate.Month, RtcDate.Year, RtcTime.Hours,RtcTime.Minutes,RtcTime.Seconds);
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <main+0x94>)
 8000282:	789b      	ldrb	r3, [r3, #2]
		  MessageLen = sprintf((char*)Message,"Date: %02d.%02d.%02d Time: %02d:%02d:%02d \n\r",
 8000284:	9303      	str	r3, [sp, #12]
 8000286:	9002      	str	r0, [sp, #8]
 8000288:	9101      	str	r1, [sp, #4]
 800028a:	9200      	str	r2, [sp, #0]
 800028c:	462b      	mov	r3, r5
 800028e:	4622      	mov	r2, r4
 8000290:	490e      	ldr	r1, [pc, #56]	; (80002cc <main+0xa4>)
 8000292:	480f      	ldr	r0, [pc, #60]	; (80002d0 <main+0xa8>)
 8000294:	f002 f902 	bl	800249c <siprintf>
 8000298:	4603      	mov	r3, r0
 800029a:	b2da      	uxtb	r2, r3
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <main+0xac>)
 800029e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,Message,MessageLen,100);
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <main+0xac>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	2364      	movs	r3, #100	; 0x64
 80002a8:	4909      	ldr	r1, [pc, #36]	; (80002d0 <main+0xa8>)
 80002aa:	480b      	ldr	r0, [pc, #44]	; (80002d8 <main+0xb0>)
 80002ac:	f001 ff59 	bl	8002162 <HAL_UART_Transmit>
		  CompareSeconds = RtcTime.Seconds;
 80002b0:	4b02      	ldr	r3, [pc, #8]	; (80002bc <main+0x94>)
 80002b2:	789a      	ldrb	r2, [r3, #2]
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <main+0xa0>)
 80002b6:	701a      	strb	r2, [r3, #0]
	  HAL_RTC_GetTime(&hrtc,&RtcTime, RTC_FORMAT_BIN);
 80002b8:	e7c3      	b.n	8000242 <main+0x1a>
 80002ba:	bf00      	nop
 80002bc:	200000e0 	.word	0x200000e0
 80002c0:	200000ec 	.word	0x200000ec
 80002c4:	200000e4 	.word	0x200000e4
 80002c8:	200000e8 	.word	0x200000e8
 80002cc:	08002d28 	.word	0x08002d28
 80002d0:	200000a0 	.word	0x200000a0
 80002d4:	2000009c 	.word	0x2000009c
 80002d8:	20000100 	.word	0x20000100

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b094      	sub	sp, #80	; 0x50
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e6:	2228      	movs	r2, #40	; 0x28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 f8ce 	bl	800248c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	f107 0314 	add.w	r3, r7, #20
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800030c:	2306      	movs	r3, #6
 800030e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000310:	2301      	movs	r3, #1
 8000312:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	2301      	movs	r3, #1
 8000316:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000318:	2310      	movs	r3, #16
 800031a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031c:	2302      	movs	r3, #2
 800031e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000320:	2300      	movs	r3, #0
 8000322:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000324:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000328:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fcf0 	bl	8000d14 <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800033a:	f000 f828 	bl	800038e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	2302      	movs	r3, #2
 8000344:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000354:	f107 0314 	add.w	r3, r7, #20
 8000358:	2102      	movs	r1, #2
 800035a:	4618      	mov	r0, r3
 800035c:	f000 ff5a 	bl	8001214 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000366:	f000 f812 	bl	800038e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800036a:	2301      	movs	r3, #1
 800036c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800036e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000372:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4618      	mov	r0, r3
 8000378:	f001 f8e6 	bl	8001548 <HAL_RCCEx_PeriphCLKConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000382:	f000 f804 	bl	800038e <Error_Handler>
  }
}
 8000386:	bf00      	nop
 8000388:	3750      	adds	r7, #80	; 0x50
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000392:	b672      	cpsid	i
}
 8000394:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000396:	e7fe      	b.n	8000396 <Error_Handler+0x8>

08000398 <MX_RTC_Init>:
RTC_HandleTypeDef hrtc;
extern RTC_TimeTypeDef RtcTime;
extern RTC_DateTypeDef RtcDate;
/* RTC init function */
void MX_RTC_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2100      	movs	r1, #0
 80003a2:	460a      	mov	r2, r1
 80003a4:	801a      	strh	r2, [r3, #0]
 80003a6:	460a      	mov	r2, r1
 80003a8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80003aa:	2300      	movs	r3, #0
 80003ac:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_RTC_Init+0x58>)
 80003b0:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <MX_RTC_Init+0x5c>)
 80003b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_RTC_Init+0x58>)
 80003b6:	f04f 32ff 	mov.w	r2, #4294967295
 80003ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_RTC_Init+0x58>)
 80003be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003c2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003c4:	480a      	ldr	r0, [pc, #40]	; (80003f0 <MX_RTC_Init+0x58>)
 80003c6:	f001 fa39 	bl	800183c <HAL_RTC_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80003d0:	f7ff ffdd 	bl	800038e <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  HAL_RTC_GetTime(&hrtc,&RtcTime, RTC_FORMAT_BIN);
 80003d4:	2200      	movs	r2, #0
 80003d6:	4908      	ldr	r1, [pc, #32]	; (80003f8 <MX_RTC_Init+0x60>)
 80003d8:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_RTC_Init+0x58>)
 80003da:	f001 fac5 	bl	8001968 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&RtcDate,RTC_FORMAT_BIN);
 80003de:	2200      	movs	r2, #0
 80003e0:	4906      	ldr	r1, [pc, #24]	; (80003fc <MX_RTC_Init+0x64>)
 80003e2:	4803      	ldr	r0, [pc, #12]	; (80003f0 <MX_RTC_Init+0x58>)
 80003e4:	f001 fb98 	bl	8001b18 <HAL_RTC_GetDate>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200000ec 	.word	0x200000ec
 80003f4:	40002800 	.word	0x40002800
 80003f8:	200000e0 	.word	0x200000e0
 80003fc:	200000e4 	.word	0x200000e4

08000400 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a0b      	ldr	r2, [pc, #44]	; (800043c <HAL_RTC_MspInit+0x3c>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d110      	bne.n	8000434 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000412:	f000 fc73 	bl	8000cfc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <HAL_RTC_MspInit+0x40>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a09      	ldr	r2, [pc, #36]	; (8000440 <HAL_RTC_MspInit+0x40>)
 800041c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b07      	ldr	r3, [pc, #28]	; (8000440 <HAL_RTC_MspInit+0x40>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800042e:	4b05      	ldr	r3, [pc, #20]	; (8000444 <HAL_RTC_MspInit+0x44>)
 8000430:	2201      	movs	r2, #1
 8000432:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40002800 	.word	0x40002800
 8000440:	40021000 	.word	0x40021000
 8000444:	4242043c 	.word	0x4242043c

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a14      	ldr	r2, [pc, #80]	; (80004a4 <HAL_MspInit+0x5c>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <HAL_MspInit+0x5c>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <HAL_MspInit+0x60>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <HAL_MspInit+0x60>)
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000

080004ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <NMI_Handler+0x4>

080004b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <HardFault_Handler+0x4>

080004b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <MemManage_Handler+0x4>

080004be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <BusFault_Handler+0x4>

080004c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <UsageFault_Handler+0x4>

080004ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f2:	f000 f91b 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}

080004fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80004fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000502:	f000 fbd9 	bl	8000cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <_sbrk+0x5c>)
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <_sbrk+0x60>)
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <_sbrk+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <_sbrk+0x64>)
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <_sbrk+0x68>)
 800052c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	429a      	cmp	r2, r3
 800053a:	d207      	bcs.n	800054c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800053c:	f001 ff7c 	bl	8002438 <__errno>
 8000540:	4603      	mov	r3, r0
 8000542:	220c      	movs	r2, #12
 8000544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	e009      	b.n	8000560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <_sbrk+0x64>)
 800055c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20005000 	.word	0x20005000
 800056c:	00000400 	.word	0x00000400
 8000570:	2000008c 	.word	0x2000008c
 8000574:	20000158 	.word	0x20000158

08000578 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <MX_USART2_UART_Init+0x50>)
 800058c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005bc:	f001 fd84 	bl	80020c8 <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005c6:	f7ff fee2 	bl	800038e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000100 	.word	0x20000100
 80005d4:	40004400 	.word	0x40004400

080005d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a15      	ldr	r2, [pc, #84]	; (8000648 <HAL_UART_MspInit+0x70>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d123      	bne.n	8000640 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_UART_MspInit+0x74>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <HAL_UART_MspInit+0x74>)
 80005fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000602:	61d3      	str	r3, [r2, #28]
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_UART_MspInit+0x74>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_UART_MspInit+0x74>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <HAL_UART_MspInit+0x74>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <HAL_UART_MspInit+0x74>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000628:	230c      	movs	r3, #12
 800062a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <HAL_UART_MspInit+0x78>)
 800063c:	f000 f9a0 	bl	8000980 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40004400 	.word	0x40004400
 800064c:	40021000 	.word	0x40021000
 8000650:	40010800 	.word	0x40010800

08000654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800066c:	4c0a      	ldr	r4, [pc, #40]	; (8000698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800067a:	f7ff ff7d 	bl	8000578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067e:	f001 fee1 	bl	8002444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff fdd1 	bl	8000228 <main>
  bx lr
 8000686:	4770      	bx	lr
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000690:	08002dcc 	.word	0x08002dcc
  ldr r2, =_sbss
 8000694:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000698:	20000158 	.word	0x20000158

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>
	...

080006a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_Init+0x28>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_Init+0x28>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f923 	bl	80008fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 f808 	bl	80006cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006bc:	f7ff fec4 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40022000 	.word	0x40022000

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_InitTick+0x54>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f93b 	bl	8000966 <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00e      	b.n	8000718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d80a      	bhi.n	8000716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 f903 	bl	8000912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_InitTick+0x5c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <HAL_IncTick+0x20>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000008 	.word	0x20000008
 800074c:	20000144 	.word	0x20000144

08000750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000144 	.word	0x20000144

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db0b      	blt.n	80007f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 021f 	and.w	r2, r3, #31
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <__NVIC_EnableIRQ+0x34>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	2001      	movs	r0, #1
 80007ea:	fa00 f202 	lsl.w	r2, r0, r2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	e000e100 	.word	0xe000e100

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	; 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c8:	d301      	bcc.n	80008ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00f      	b.n	80008ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <SysTick_Config+0x40>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d6:	210f      	movs	r1, #15
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f7ff ff90 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <SysTick_Config+0x40>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <SysTick_Config+0x40>)
 80008e8:	2207      	movs	r2, #7
 80008ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	e000e010 	.word	0xe000e010

080008fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ff2d 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000924:	f7ff ff42 	bl	80007ac <__NVIC_GetPriorityGrouping>
 8000928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f7ff ff90 	bl	8000854 <NVIC_EncodePriority>
 8000934:	4602      	mov	r2, r0
 8000936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff5f 	bl	8000800 <__NVIC_SetPriority>
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff35 	bl	80007c8 <__NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ffa2 	bl	80008b8 <SysTick_Config>
 8000974:	4603      	mov	r3, r0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	b480      	push	{r7}
 8000982:	b08b      	sub	sp, #44	; 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000992:	e169      	b.n	8000c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000994:	2201      	movs	r2, #1
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	4013      	ands	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f040 8158 	bne.w	8000c62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	4a9a      	ldr	r2, [pc, #616]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d05e      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009bc:	4a98      	ldr	r2, [pc, #608]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d875      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009c2:	4a98      	ldr	r2, [pc, #608]	; (8000c24 <HAL_GPIO_Init+0x2a4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d058      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009c8:	4a96      	ldr	r2, [pc, #600]	; (8000c24 <HAL_GPIO_Init+0x2a4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d86f      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009ce:	4a96      	ldr	r2, [pc, #600]	; (8000c28 <HAL_GPIO_Init+0x2a8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d052      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009d4:	4a94      	ldr	r2, [pc, #592]	; (8000c28 <HAL_GPIO_Init+0x2a8>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d869      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009da:	4a94      	ldr	r2, [pc, #592]	; (8000c2c <HAL_GPIO_Init+0x2ac>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d04c      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009e0:	4a92      	ldr	r2, [pc, #584]	; (8000c2c <HAL_GPIO_Init+0x2ac>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d863      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009e6:	4a92      	ldr	r2, [pc, #584]	; (8000c30 <HAL_GPIO_Init+0x2b0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d046      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009ec:	4a90      	ldr	r2, [pc, #576]	; (8000c30 <HAL_GPIO_Init+0x2b0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d85d      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d82a      	bhi.n	8000a4c <HAL_GPIO_Init+0xcc>
 80009f6:	2b12      	cmp	r3, #18
 80009f8:	d859      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009fa:	a201      	add	r2, pc, #4	; (adr r2, 8000a00 <HAL_GPIO_Init+0x80>)
 80009fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a00:	08000a7b 	.word	0x08000a7b
 8000a04:	08000a55 	.word	0x08000a55
 8000a08:	08000a67 	.word	0x08000a67
 8000a0c:	08000aa9 	.word	0x08000aa9
 8000a10:	08000aaf 	.word	0x08000aaf
 8000a14:	08000aaf 	.word	0x08000aaf
 8000a18:	08000aaf 	.word	0x08000aaf
 8000a1c:	08000aaf 	.word	0x08000aaf
 8000a20:	08000aaf 	.word	0x08000aaf
 8000a24:	08000aaf 	.word	0x08000aaf
 8000a28:	08000aaf 	.word	0x08000aaf
 8000a2c:	08000aaf 	.word	0x08000aaf
 8000a30:	08000aaf 	.word	0x08000aaf
 8000a34:	08000aaf 	.word	0x08000aaf
 8000a38:	08000aaf 	.word	0x08000aaf
 8000a3c:	08000aaf 	.word	0x08000aaf
 8000a40:	08000aaf 	.word	0x08000aaf
 8000a44:	08000a5d 	.word	0x08000a5d
 8000a48:	08000a71 	.word	0x08000a71
 8000a4c:	4a79      	ldr	r2, [pc, #484]	; (8000c34 <HAL_GPIO_Init+0x2b4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d013      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a52:	e02c      	b.n	8000aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	623b      	str	r3, [r7, #32]
          break;
 8000a5a:	e029      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	3304      	adds	r3, #4
 8000a62:	623b      	str	r3, [r7, #32]
          break;
 8000a64:	e024      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	623b      	str	r3, [r7, #32]
          break;
 8000a6e:	e01f      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	330c      	adds	r3, #12
 8000a76:	623b      	str	r3, [r7, #32]
          break;
 8000a78:	e01a      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a82:	2304      	movs	r3, #4
 8000a84:	623b      	str	r3, [r7, #32]
          break;
 8000a86:	e013      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d105      	bne.n	8000a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a90:	2308      	movs	r3, #8
 8000a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	611a      	str	r2, [r3, #16]
          break;
 8000a9a:	e009      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	615a      	str	r2, [r3, #20]
          break;
 8000aa6:	e003      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
          break;
 8000aac:	e000      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          break;
 8000aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	2bff      	cmp	r3, #255	; 0xff
 8000ab4:	d801      	bhi.n	8000aba <HAL_GPIO_Init+0x13a>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	e001      	b.n	8000abe <HAL_GPIO_Init+0x13e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3304      	adds	r3, #4
 8000abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	2bff      	cmp	r3, #255	; 0xff
 8000ac4:	d802      	bhi.n	8000acc <HAL_GPIO_Init+0x14c>
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0x152>
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	3b08      	subs	r3, #8
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	210f      	movs	r1, #15
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	6a39      	ldr	r1, [r7, #32]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	431a      	orrs	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 80b1 	beq.w	8000c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a4c      	ldr	r2, [pc, #304]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b18:	4a48      	ldr	r2, [pc, #288]	; (8000c3c <HAL_GPIO_Init+0x2bc>)
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	3302      	adds	r3, #2
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220f      	movs	r2, #15
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a40      	ldr	r2, [pc, #256]	; (8000c40 <HAL_GPIO_Init+0x2c0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d013      	beq.n	8000b6c <HAL_GPIO_Init+0x1ec>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d00d      	beq.n	8000b68 <HAL_GPIO_Init+0x1e8>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a3e      	ldr	r2, [pc, #248]	; (8000c48 <HAL_GPIO_Init+0x2c8>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d007      	beq.n	8000b64 <HAL_GPIO_Init+0x1e4>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a3d      	ldr	r2, [pc, #244]	; (8000c4c <HAL_GPIO_Init+0x2cc>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d101      	bne.n	8000b60 <HAL_GPIO_Init+0x1e0>
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e006      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b60:	2304      	movs	r3, #4
 8000b62:	e004      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e002      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b70:	f002 0203 	and.w	r2, r2, #3
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	4093      	lsls	r3, r2
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b7e:	492f      	ldr	r1, [pc, #188]	; (8000c3c <HAL_GPIO_Init+0x2bc>)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	3302      	adds	r3, #2
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	492c      	ldr	r1, [pc, #176]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	600b      	str	r3, [r1, #0]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	4928      	ldr	r1, [pc, #160]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	4922      	ldr	r1, [pc, #136]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	491e      	ldr	r1, [pc, #120]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d006      	beq.n	8000bf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	4918      	ldr	r1, [pc, #96]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
 8000bf4:	e006      	b.n	8000c04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	4914      	ldr	r1, [pc, #80]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d021      	beq.n	8000c54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	490e      	ldr	r1, [pc, #56]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60cb      	str	r3, [r1, #12]
 8000c1c:	e021      	b.n	8000c62 <HAL_GPIO_Init+0x2e2>
 8000c1e:	bf00      	nop
 8000c20:	10320000 	.word	0x10320000
 8000c24:	10310000 	.word	0x10310000
 8000c28:	10220000 	.word	0x10220000
 8000c2c:	10210000 	.word	0x10210000
 8000c30:	10120000 	.word	0x10120000
 8000c34:	10110000 	.word	0x10110000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40010c00 	.word	0x40010c00
 8000c48:	40011000 	.word	0x40011000
 8000c4c:	40011400 	.word	0x40011400
 8000c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_GPIO_Init+0x304>)
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	4909      	ldr	r1, [pc, #36]	; (8000c84 <HAL_GPIO_Init+0x304>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	3301      	adds	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f47f ae8e 	bne.w	8000994 <HAL_GPIO_Init+0x14>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	372c      	adds	r7, #44	; 0x2c
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40010400 	.word	0x40010400

08000c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ca4:	e003      	b.n	8000cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	041a      	lsls	r2, r3, #16
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	611a      	str	r2, [r3, #16]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cc4:	695a      	ldr	r2, [r3, #20]
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d006      	beq.n	8000cdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f806 	bl	8000ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	601a      	str	r2, [r3, #0]
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	420e0020 	.word	0x420e0020

08000d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e26c      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 8087 	beq.w	8000e42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d34:	4b92      	ldr	r3, [pc, #584]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d00c      	beq.n	8000d5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d40:	4b8f      	ldr	r3, [pc, #572]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 030c 	and.w	r3, r3, #12
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d112      	bne.n	8000d72 <HAL_RCC_OscConfig+0x5e>
 8000d4c:	4b8c      	ldr	r3, [pc, #560]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d58:	d10b      	bne.n	8000d72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5a:	4b89      	ldr	r3, [pc, #548]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d06c      	beq.n	8000e40 <HAL_RCC_OscConfig+0x12c>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d168      	bne.n	8000e40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e246      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7a:	d106      	bne.n	8000d8a <HAL_RCC_OscConfig+0x76>
 8000d7c:	4b80      	ldr	r3, [pc, #512]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a7f      	ldr	r2, [pc, #508]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	e02e      	b.n	8000de8 <HAL_RCC_OscConfig+0xd4>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10c      	bne.n	8000dac <HAL_RCC_OscConfig+0x98>
 8000d92:	4b7b      	ldr	r3, [pc, #492]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a7a      	ldr	r2, [pc, #488]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	4b78      	ldr	r3, [pc, #480]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a77      	ldr	r2, [pc, #476]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e01d      	b.n	8000de8 <HAL_RCC_OscConfig+0xd4>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db4:	d10c      	bne.n	8000dd0 <HAL_RCC_OscConfig+0xbc>
 8000db6:	4b72      	ldr	r3, [pc, #456]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a71      	ldr	r2, [pc, #452]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	4b6f      	ldr	r3, [pc, #444]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a6e      	ldr	r2, [pc, #440]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e00b      	b.n	8000de8 <HAL_RCC_OscConfig+0xd4>
 8000dd0:	4b6b      	ldr	r3, [pc, #428]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a6a      	ldr	r2, [pc, #424]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b68      	ldr	r3, [pc, #416]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a67      	ldr	r2, [pc, #412]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d013      	beq.n	8000e18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fcae 	bl	8000750 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fcaa 	bl	8000750 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	; 0x64
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e1fa      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0a:	4b5d      	ldr	r3, [pc, #372]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f0      	beq.n	8000df8 <HAL_RCC_OscConfig+0xe4>
 8000e16:	e014      	b.n	8000e42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fc9a 	bl	8000750 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e20:	f7ff fc96 	bl	8000750 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b64      	cmp	r3, #100	; 0x64
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e1e6      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e32:	4b53      	ldr	r3, [pc, #332]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f0      	bne.n	8000e20 <HAL_RCC_OscConfig+0x10c>
 8000e3e:	e000      	b.n	8000e42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d063      	beq.n	8000f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e4e:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00b      	beq.n	8000e72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e5a:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d11c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x18c>
 8000e66:	4b46      	ldr	r3, [pc, #280]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d116      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e72:	4b43      	ldr	r3, [pc, #268]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d005      	beq.n	8000e8a <HAL_RCC_OscConfig+0x176>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d001      	beq.n	8000e8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e1ba      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	4939      	ldr	r1, [pc, #228]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9e:	e03a      	b.n	8000f16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d020      	beq.n	8000eea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <HAL_RCC_OscConfig+0x270>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fc4f 	bl	8000750 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fc4b 	bl	8000750 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e19b      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4927      	ldr	r1, [pc, #156]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	600b      	str	r3, [r1, #0]
 8000ee8:	e015      	b.n	8000f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <HAL_RCC_OscConfig+0x270>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fc2e 	bl	8000750 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc2a 	bl	8000750 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e17a      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f0      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d03a      	beq.n	8000f98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d019      	beq.n	8000f5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_RCC_OscConfig+0x274>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f30:	f7ff fc0e 	bl	8000750 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f38:	f7ff fc0a 	bl	8000750 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e15a      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f000 fad8 	bl	800150c <RCC_Delay>
 8000f5c:	e01c      	b.n	8000f98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_RCC_OscConfig+0x274>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f64:	f7ff fbf4 	bl	8000750 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6a:	e00f      	b.n	8000f8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fbf0 	bl	8000750 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d908      	bls.n	8000f8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e140      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	42420000 	.word	0x42420000
 8000f88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8c:	4b9e      	ldr	r3, [pc, #632]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1e9      	bne.n	8000f6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80a6 	beq.w	80010f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000faa:	4b97      	ldr	r3, [pc, #604]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10d      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b94      	ldr	r3, [pc, #592]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a93      	ldr	r2, [pc, #588]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b91      	ldr	r3, [pc, #580]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd2:	4b8e      	ldr	r3, [pc, #568]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d118      	bne.n	8001010 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fde:	4b8b      	ldr	r3, [pc, #556]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a8a      	ldr	r2, [pc, #552]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fbb1 	bl	8000750 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff2:	f7ff fbad 	bl	8000750 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b64      	cmp	r3, #100	; 0x64
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e0fd      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001004:	4b81      	ldr	r3, [pc, #516]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d106      	bne.n	8001026 <HAL_RCC_OscConfig+0x312>
 8001018:	4b7b      	ldr	r3, [pc, #492]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4a7a      	ldr	r2, [pc, #488]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6213      	str	r3, [r2, #32]
 8001024:	e02d      	b.n	8001082 <HAL_RCC_OscConfig+0x36e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x334>
 800102e:	4b76      	ldr	r3, [pc, #472]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a75      	ldr	r2, [pc, #468]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	4b73      	ldr	r3, [pc, #460]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	4a72      	ldr	r2, [pc, #456]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001040:	f023 0304 	bic.w	r3, r3, #4
 8001044:	6213      	str	r3, [r2, #32]
 8001046:	e01c      	b.n	8001082 <HAL_RCC_OscConfig+0x36e>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b05      	cmp	r3, #5
 800104e:	d10c      	bne.n	800106a <HAL_RCC_OscConfig+0x356>
 8001050:	4b6d      	ldr	r3, [pc, #436]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a6c      	ldr	r2, [pc, #432]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6213      	str	r3, [r2, #32]
 800105c:	4b6a      	ldr	r3, [pc, #424]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4a69      	ldr	r2, [pc, #420]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6213      	str	r3, [r2, #32]
 8001068:	e00b      	b.n	8001082 <HAL_RCC_OscConfig+0x36e>
 800106a:	4b67      	ldr	r3, [pc, #412]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a66      	ldr	r2, [pc, #408]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b64      	ldr	r3, [pc, #400]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a63      	ldr	r2, [pc, #396]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d015      	beq.n	80010b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fb61 	bl	8000750 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff fb5d 	bl	8000750 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e0ab      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a8:	4b57      	ldr	r3, [pc, #348]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0ee      	beq.n	8001092 <HAL_RCC_OscConfig+0x37e>
 80010b4:	e014      	b.n	80010e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fb4b 	bl	8000750 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010bc:	e00a      	b.n	80010d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010be:	f7ff fb47 	bl	8000750 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e095      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d4:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1ee      	bne.n	80010be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d105      	bne.n	80010f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e6:	4b48      	ldr	r3, [pc, #288]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a47      	ldr	r2, [pc, #284]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 80010ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8081 	beq.w	80011fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010fc:	4b42      	ldr	r3, [pc, #264]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b08      	cmp	r3, #8
 8001106:	d061      	beq.n	80011cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d146      	bne.n	800119e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001110:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <HAL_RCC_OscConfig+0x4fc>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fb1b 	bl	8000750 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111e:	f7ff fb17 	bl	8000750 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e067      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001130:	4b35      	ldr	r3, [pc, #212]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f0      	bne.n	800111e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001144:	d108      	bne.n	8001158 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001146:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	492d      	ldr	r1, [pc, #180]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a19      	ldr	r1, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	430b      	orrs	r3, r1
 800116a:	4927      	ldr	r1, [pc, #156]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <HAL_RCC_OscConfig+0x4fc>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001176:	f7ff faeb 	bl	8000750 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117e:	f7ff fae7 	bl	8000750 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e037      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f0      	beq.n	800117e <HAL_RCC_OscConfig+0x46a>
 800119c:	e02f      	b.n	80011fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_RCC_OscConfig+0x4fc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fad4 	bl	8000750 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ac:	f7ff fad0 	bl	8000750 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e020      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x498>
 80011ca:	e018      	b.n	80011fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e013      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_RCC_OscConfig+0x4f4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d106      	bne.n	80011fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	40007000 	.word	0x40007000
 8001210:	42420060 	.word	0x42420060

08001214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e0d0      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001228:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d910      	bls.n	8001258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001236:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 0207 	bic.w	r2, r3, #7
 800123e:	4965      	ldr	r1, [pc, #404]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001246:	4b63      	ldr	r3, [pc, #396]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0b8      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800127a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001288:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a52      	ldr	r2, [pc, #328]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001292:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001294:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	494d      	ldr	r1, [pc, #308]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d040      	beq.n	8001334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d115      	bne.n	80012f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e07f      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d107      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e073      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e2:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e06b      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f2:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f023 0203 	bic.w	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4936      	ldr	r1, [pc, #216]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001304:	f7ff fa24 	bl	8000750 <HAL_GetTick>
 8001308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130a:	e00a      	b.n	8001322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130c:	f7ff fa20 	bl	8000750 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	; 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e053      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 020c 	and.w	r2, r3, #12
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	429a      	cmp	r2, r3
 8001332:	d1eb      	bne.n	800130c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d210      	bcs.n	8001364 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 0207 	bic.w	r2, r3, #7
 800134a:	4922      	ldr	r1, [pc, #136]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e032      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4916      	ldr	r1, [pc, #88]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	490e      	ldr	r1, [pc, #56]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013a2:	f000 f821 	bl	80013e8 <HAL_RCC_GetSysClockFreq>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	490a      	ldr	r1, [pc, #40]	; (80013dc <HAL_RCC_ClockConfig+0x1c8>)
 80013b4:	5ccb      	ldrb	r3, [r1, r3]
 80013b6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_RCC_ClockConfig+0x1cc>)
 80013bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RCC_ClockConfig+0x1d0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f982 	bl	80006cc <HAL_InitTick>

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40022000 	.word	0x40022000
 80013d8:	40021000 	.word	0x40021000
 80013dc:	08002d78 	.word	0x08002d78
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e8:	b490      	push	{r4, r7}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013f0:	1d3c      	adds	r4, r7, #4
 80013f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013f8:	f240 2301 	movw	r3, #513	; 0x201
 80013fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b04      	cmp	r3, #4
 8001420:	d002      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x40>
 8001422:	2b08      	cmp	r3, #8
 8001424:	d003      	beq.n	800142e <HAL_RCC_GetSysClockFreq+0x46>
 8001426:	e02d      	b.n	8001484 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800142a:	623b      	str	r3, [r7, #32]
      break;
 800142c:	e02d      	b.n	800148a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	0c9b      	lsrs	r3, r3, #18
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800143a:	4413      	add	r3, r2
 800143c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001440:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d013      	beq.n	8001474 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_RCC_GetSysClockFreq+0xb4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	0c5b      	lsrs	r3, r3, #17
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800145a:	4413      	add	r3, r2
 800145c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001460:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001466:	fb02 f203 	mul.w	r2, r2, r3
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
 8001472:	e004      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	623b      	str	r3, [r7, #32]
      break;
 8001482:	e002      	b.n	800148a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001486:	623b      	str	r3, [r7, #32]
      break;
 8001488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800148a:	6a3b      	ldr	r3, [r7, #32]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bc90      	pop	{r4, r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	08002d58 	.word	0x08002d58
 800149c:	40021000 	.word	0x40021000
 80014a0:	007a1200 	.word	0x007a1200
 80014a4:	003d0900 	.word	0x003d0900

080014a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000000 	.word	0x20000000

080014bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c0:	f7ff fff2 	bl	80014a8 <HAL_RCC_GetHCLKFreq>
 80014c4:	4602      	mov	r2, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4903      	ldr	r1, [pc, #12]	; (80014e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014d2:	5ccb      	ldrb	r3, [r1, r3]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	08002d88 	.word	0x08002d88

080014e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014e8:	f7ff ffde 	bl	80014a8 <HAL_RCC_GetHCLKFreq>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	0adb      	lsrs	r3, r3, #11
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	4903      	ldr	r1, [pc, #12]	; (8001508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	08002d88 	.word	0x08002d88

0800150c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <RCC_Delay+0x34>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <RCC_Delay+0x38>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0a5b      	lsrs	r3, r3, #9
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001528:	bf00      	nop
  }
  while (Delay --);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	60fa      	str	r2, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f9      	bne.n	8001528 <RCC_Delay+0x1c>
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000000 	.word	0x20000000
 8001544:	10624dd3 	.word	0x10624dd3

08001548 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d07d      	beq.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001568:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10d      	bne.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	61d3      	str	r3, [r2, #28]
 8001580:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158c:	2301      	movs	r3, #1
 800158e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b46      	ldr	r3, [pc, #280]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d118      	bne.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159c:	4b43      	ldr	r3, [pc, #268]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a42      	ldr	r2, [pc, #264]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a8:	f7ff f8d2 	bl	8000750 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	e008      	b.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b0:	f7ff f8ce 	bl	8000750 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e06d      	b.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d02e      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d027      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001602:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d014      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff f89d 	bl	8000750 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff f899 	bl	8000750 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e036      	b.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ee      	beq.n	800161a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4917      	ldr	r1, [pc, #92]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800164a:	4313      	orrs	r3, r2
 800164c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800165a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	490b      	ldr	r1, [pc, #44]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800167a:	4313      	orrs	r3, r2
 800167c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	4904      	ldr	r1, [pc, #16]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42420440 	.word	0x42420440

080016b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b08d      	sub	sp, #52	; 0x34
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016bc:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80016be:	f107 040c 	add.w	r4, r7, #12
 80016c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016c8:	f240 2301 	movw	r3, #513	; 0x201
 80016cc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b10      	cmp	r3, #16
 80016e6:	d00a      	beq.n	80016fe <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b10      	cmp	r3, #16
 80016ec:	f200 8091 	bhi.w	8001812 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d04c      	beq.n	8001790 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d07c      	beq.n	80017f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80016fc:	e089      	b.n	8001812 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80016fe:	4b4b      	ldr	r3, [pc, #300]	; (800182c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001704:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 8082 	beq.w	8001816 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	0c9b      	lsrs	r3, r3, #18
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800171e:	4413      	add	r3, r2
 8001720:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001724:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d018      	beq.n	8001762 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001730:	4b3e      	ldr	r3, [pc, #248]	; (800182c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	0c5b      	lsrs	r3, r3, #17
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800173e:	4413      	add	r3, r2
 8001740:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00d      	beq.n	800176c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001750:	4a37      	ldr	r2, [pc, #220]	; (8001830 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	fbb2 f2f3 	udiv	r2, r2, r3
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001760:	e004      	b.n	800176c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	4a33      	ldr	r2, [pc, #204]	; (8001834 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001778:	d102      	bne.n	8001780 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800177e:	e04a      	b.n	8001816 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4a2c      	ldr	r2, [pc, #176]	; (8001838 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800178e:	e042      	b.n	8001816 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001790:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800179c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a0:	d108      	bne.n	80017b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80017ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b2:	e01f      	b.n	80017f4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017be:	d109      	bne.n	80017d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80017cc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d2:	e00f      	b.n	80017f4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017de:	d11c      	bne.n	800181a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d016      	beq.n	800181a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80017ec:	f24f 4324 	movw	r3, #62500	; 0xf424
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80017f2:	e012      	b.n	800181a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80017f4:	e011      	b.n	800181a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80017f6:	f7ff fe75 	bl	80014e4 <HAL_RCC_GetPCLK2Freq>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	0b9b      	lsrs	r3, r3, #14
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	3301      	adds	r3, #1
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001810:	e004      	b.n	800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001812:	bf00      	nop
 8001814:	e002      	b.n	800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001816:	bf00      	nop
 8001818:	e000      	b.n	800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800181a:	bf00      	nop
    }
  }
  return (frequency);
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800181e:	4618      	mov	r0, r3
 8001820:	3734      	adds	r7, #52	; 0x34
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	08002d68 	.word	0x08002d68
 800182c:	40021000 	.word	0x40021000
 8001830:	007a1200 	.word	0x007a1200
 8001834:	003d0900 	.word	0x003d0900
 8001838:	aaaaaaab 	.word	0xaaaaaaab

0800183c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e084      	b.n	800195c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7c5b      	ldrb	r3, [r3, #17]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7fe fdcc 	bl	8000400 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f9a6 	bl	8001bc0 <HAL_RTC_WaitForSynchro>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2204      	movs	r2, #4
 800187e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e06b      	b.n	800195c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa5f 	bl	8001d48 <RTC_EnterInitMode>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2204      	movs	r2, #4
 8001894:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e060      	b.n	800195c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0207 	bic.w	r2, r2, #7
 80018a8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <HAL_RTC_Init+0x128>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <HAL_RTC_Init+0x128>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_RTC_Init+0x128>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	4926      	ldr	r1, [pc, #152]	; (8001964 <HAL_RTC_Init+0x128>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d8:	d003      	beq.n	80018e2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e00e      	b.n	8001900 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f7ff fee6 	bl	80016b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80018e8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d104      	bne.n	80018fa <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2204      	movs	r2, #4
 80018f4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e030      	b.n	800195c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f023 010f 	bic.w	r1, r3, #15
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	0c1a      	lsrs	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	041b      	lsls	r3, r3, #16
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	b291      	uxth	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	430b      	orrs	r3, r1
 800192a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 fa33 	bl	8001d98 <RTC_ExitInitMode>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2204      	movs	r2, #4
 800193c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00c      	b.n	800195c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800195a:	2300      	movs	r3, #0
  }
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40006c00 	.word	0x40006c00

08001968 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_RTC_GetTime+0x28>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0b5      	b.n	8001b00 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0ac      	b.n	8001b00 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f937 	bl	8001c1a <RTC_ReadTimeCounter>
 80019ac:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4a55      	ldr	r2, [pc, #340]	; (8001b08 <HAL_RTC_GetTime+0x1a0>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0adb      	lsrs	r3, r3, #11
 80019b8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <HAL_RTC_GetTime+0x1a0>)
 80019be:	fba3 1302 	umull	r1, r3, r3, r2
 80019c2:	0adb      	lsrs	r3, r3, #11
 80019c4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	4a4f      	ldr	r2, [pc, #316]	; (8001b0c <HAL_RTC_GetTime+0x1a4>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	095b      	lsrs	r3, r3, #5
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <HAL_RTC_GetTime+0x1a0>)
 80019e0:	fba2 1203 	umull	r1, r2, r2, r3
 80019e4:	0ad2      	lsrs	r2, r2, #11
 80019e6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80019ea:	fb01 f202 	mul.w	r2, r1, r2
 80019ee:	1a9a      	subs	r2, r3, r2
 80019f0:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <HAL_RTC_GetTime+0x1a4>)
 80019f2:	fba3 1302 	umull	r1, r3, r3, r2
 80019f6:	0959      	lsrs	r1, r3, #5
 80019f8:	460b      	mov	r3, r1
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	1a5b      	subs	r3, r3, r1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	1ad1      	subs	r1, r2, r3
 8001a02:	b2ca      	uxtb	r2, r1
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b17      	cmp	r3, #23
 8001a0c:	d955      	bls.n	8001aba <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4a3f      	ldr	r2, [pc, #252]	; (8001b10 <HAL_RTC_GetTime+0x1a8>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001a1a:	6939      	ldr	r1, [r7, #16]
 8001a1c:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <HAL_RTC_GetTime+0x1a8>)
 8001a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a22:	091a      	lsrs	r2, r3, #4
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1aca      	subs	r2, r1, r3
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 f947 	bl	8001cc8 <RTC_ReadAlarmCounter>
 8001a3a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a42:	d008      	beq.n	8001a56 <HAL_RTC_GetTime+0xee>
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d904      	bls.n	8001a56 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	e002      	b.n	8001a5c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <HAL_RTC_GetTime+0x1ac>)
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f904 	bl	8001c7a <RTC_WriteTimeCounter>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e041      	b.n	8001b00 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a82:	d00c      	beq.n	8001a9e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4413      	add	r3, r2
 8001a8a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001a8c:	69f9      	ldr	r1, [r7, #28]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f933 	bl	8001cfa <RTC_WriteAlarmCounter>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00a      	beq.n	8001ab0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e030      	b.n	8001b00 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001a9e:	69f9      	ldr	r1, [r7, #28]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f92a 	bl	8001cfa <RTC_WriteAlarmCounter>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e027      	b.n	8001b00 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001ab0:	6979      	ldr	r1, [r7, #20]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f9b5 	bl	8001e22 <RTC_DateUpdate>
 8001ab8:	e003      	b.n	8001ac2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01a      	beq.n	8001afe <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 f98b 	bl	8001de8 <RTC_ByteToBcd2>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	785b      	ldrb	r3, [r3, #1]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f982 	bl	8001de8 <RTC_ByteToBcd2>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	789b      	ldrb	r3, [r3, #2]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f979 	bl	8001de8 <RTC_ByteToBcd2>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461a      	mov	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	91a2b3c5 	.word	0x91a2b3c5
 8001b0c:	88888889 	.word	0x88888889
 8001b10:	aaaaaaab 	.word	0xaaaaaaab
 8001b14:	00015180 	.word	0x00015180

08001b18 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2100      	movs	r1, #0
 8001b2a:	460a      	mov	r2, r1
 8001b2c:	801a      	strh	r2, [r3, #0]
 8001b2e:	460a      	mov	r2, r1
 8001b30:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_RTC_GetDate+0x26>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e03a      	b.n	8001bb8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff ff0c 	bl	8001968 <HAL_RTC_GetTime>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e02e      	b.n	8001bb8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	7b1a      	ldrb	r2, [r3, #12]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	7bda      	ldrb	r2, [r3, #15]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	7b5a      	ldrb	r2, [r3, #13]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	7b9a      	ldrb	r2, [r3, #14]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01a      	beq.n	8001bb6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	78db      	ldrb	r3, [r3, #3]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f92f 	bl	8001de8 <RTC_ByteToBcd2>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	785b      	ldrb	r3, [r3, #1]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f926 	bl	8001de8 <RTC_ByteToBcd2>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	789b      	ldrb	r3, [r3, #2]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f91d 	bl	8001de8 <RTC_ByteToBcd2>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e01d      	b.n	8001c12 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0208 	bic.w	r2, r2, #8
 8001be4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001be6:	f7fe fdb3 	bl	8000750 <HAL_GetTick>
 8001bea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001bec:	e009      	b.n	8001c02 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001bee:	f7fe fdaf 	bl	8000750 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bfc:	d901      	bls.n	8001c02 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e007      	b.n	8001c12 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ee      	beq.n	8001bee <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b087      	sub	sp, #28
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	827b      	strh	r3, [r7, #18]
 8001c26:	2300      	movs	r3, #0
 8001c28:	823b      	strh	r3, [r7, #16]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001c4a:	8a7a      	ldrh	r2, [r7, #18]
 8001c4c:	8a3b      	ldrh	r3, [r7, #16]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d008      	beq.n	8001c64 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001c52:	8a3b      	ldrh	r3, [r7, #16]
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e004      	b.n	8001c6e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001c64:	8a7b      	ldrh	r3, [r7, #18]
 8001c66:	041a      	lsls	r2, r3, #16
 8001c68:	89fb      	ldrh	r3, [r7, #14]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001c6e:	697b      	ldr	r3, [r7, #20]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f85d 	bl	8001d48 <RTC_EnterInitMode>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e011      	b.n	8001cbe <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	0c12      	lsrs	r2, r2, #16
 8001ca2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	b292      	uxth	r2, r2
 8001cac:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f872 	bl	8001d98 <RTC_ExitInitMode>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	81fb      	strh	r3, [r7, #14]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	89bb      	ldrh	r3, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f81d 	bl	8001d48 <RTC_EnterInitMode>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e011      	b.n	8001d3e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	0c12      	lsrs	r2, r2, #16
 8001d22:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f832 	bl	8001d98 <RTC_ExitInitMode>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001d54:	f7fe fcfc 	bl	8000750 <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001d5a:	e009      	b.n	8001d70 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001d5c:	f7fe fcf8 	bl	8000750 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d6a:	d901      	bls.n	8001d70 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e00f      	b.n	8001d90 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0ee      	beq.n	8001d5c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0210 	orr.w	r2, r2, #16
 8001d8c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0210 	bic.w	r2, r2, #16
 8001db2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001db4:	f7fe fccc 	bl	8000750 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001dba:	e009      	b.n	8001dd0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001dbc:	f7fe fcc8 	bl	8000750 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dca:	d901      	bls.n	8001dd0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e007      	b.n	8001de0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0ee      	beq.n	8001dbc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8001df6:	e005      	b.n	8001e04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	3b0a      	subs	r3, #10
 8001e02:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b09      	cmp	r3, #9
 8001e08:	d8f6      	bhi.n	8001df8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b2db      	uxtb	r3, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7bdb      	ldrb	r3, [r3, #15]
 8001e40:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7b5b      	ldrb	r3, [r3, #13]
 8001e46:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7b9b      	ldrb	r3, [r3, #14]
 8001e4c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	e06f      	b.n	8001f34 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d011      	beq.n	8001e7e <RTC_DateUpdate+0x5c>
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d00e      	beq.n	8001e7e <RTC_DateUpdate+0x5c>
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d00b      	beq.n	8001e7e <RTC_DateUpdate+0x5c>
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b07      	cmp	r3, #7
 8001e6a:	d008      	beq.n	8001e7e <RTC_DateUpdate+0x5c>
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d005      	beq.n	8001e7e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b0a      	cmp	r3, #10
 8001e76:	d002      	beq.n	8001e7e <RTC_DateUpdate+0x5c>
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d117      	bne.n	8001eae <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b1e      	cmp	r3, #30
 8001e82:	d803      	bhi.n	8001e8c <RTC_DateUpdate+0x6a>
      {
        day++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3301      	adds	r3, #1
 8001e88:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8001e8a:	e050      	b.n	8001f2e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d005      	beq.n	8001e9e <RTC_DateUpdate+0x7c>
        {
          month++;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	3301      	adds	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8001e9c:	e047      	b.n	8001f2e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
          year++;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8001eac:	e03f      	b.n	8001f2e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d008      	beq.n	8001ec6 <RTC_DateUpdate+0xa4>
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d005      	beq.n	8001ec6 <RTC_DateUpdate+0xa4>
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b09      	cmp	r3, #9
 8001ebe:	d002      	beq.n	8001ec6 <RTC_DateUpdate+0xa4>
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b0b      	cmp	r3, #11
 8001ec4:	d10c      	bne.n	8001ee0 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b1d      	cmp	r3, #29
 8001eca:	d803      	bhi.n	8001ed4 <RTC_DateUpdate+0xb2>
      {
        day++;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8001ed2:	e02c      	b.n	8001f2e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	613b      	str	r3, [r7, #16]
        day = 1U;
 8001eda:	2301      	movs	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8001ede:	e026      	b.n	8001f2e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d123      	bne.n	8001f2e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b1b      	cmp	r3, #27
 8001eea:	d803      	bhi.n	8001ef4 <RTC_DateUpdate+0xd2>
      {
        day++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e01c      	b.n	8001f2e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b1c      	cmp	r3, #28
 8001ef8:	d111      	bne.n	8001f1e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f838 	bl	8001f74 <RTC_IsLeapYear>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <RTC_DateUpdate+0xf0>
        {
          day++;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e00d      	b.n	8001f2e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	3301      	adds	r3, #1
 8001f16:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	e007      	b.n	8001f2e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b1d      	cmp	r3, #29
 8001f22:	d104      	bne.n	8001f2e <RTC_DateUpdate+0x10c>
      {
        month++;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	3301      	adds	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
        day = 1U;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3301      	adds	r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d38b      	bcc.n	8001e54 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f000 f83a 	bl	8001fd8 <RTC_WeekDayNum>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	731a      	strb	r2, [r3, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e01d      	b.n	8001fca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <RTC_IsLeapYear+0x60>)
 8001f92:	fba2 1203 	umull	r1, r2, r2, r3
 8001f96:	0952      	lsrs	r2, r2, #5
 8001f98:	2164      	movs	r1, #100	; 0x64
 8001f9a:	fb01 f202 	mul.w	r2, r1, r2
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <RTC_IsLeapYear+0x60>)
 8001fae:	fba2 1203 	umull	r1, r2, r2, r3
 8001fb2:	09d2      	lsrs	r2, r2, #7
 8001fb4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001fb8:	fb01 f202 	mul.w	r2, r1, r2
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8001fc8:	2300      	movs	r3, #0
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	51eb851f 	.word	0x51eb851f

08001fd8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001ff6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d82d      	bhi.n	800205a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	4a2c      	ldr	r2, [pc, #176]	; (80020bc <RTC_WeekDayNum+0xe4>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	085a      	lsrs	r2, r3, #1
 8002012:	78bb      	ldrb	r3, [r7, #2]
 8002014:	441a      	add	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	441a      	add	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3b01      	subs	r3, #1
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	441a      	add	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3b01      	subs	r3, #1
 8002026:	4926      	ldr	r1, [pc, #152]	; (80020c0 <RTC_WeekDayNum+0xe8>)
 8002028:	fba1 1303 	umull	r1, r3, r1, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	1ad2      	subs	r2, r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3b01      	subs	r3, #1
 8002034:	4922      	ldr	r1, [pc, #136]	; (80020c0 <RTC_WeekDayNum+0xe8>)
 8002036:	fba1 1303 	umull	r1, r3, r1, r3
 800203a:	09db      	lsrs	r3, r3, #7
 800203c:	4413      	add	r3, r2
 800203e:	1d1a      	adds	r2, r3, #4
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <RTC_WeekDayNum+0xec>)
 8002042:	fba3 1302 	umull	r1, r3, r3, r2
 8002046:	1ad1      	subs	r1, r2, r3
 8002048:	0849      	lsrs	r1, r1, #1
 800204a:	440b      	add	r3, r1
 800204c:	0899      	lsrs	r1, r3, #2
 800204e:	460b      	mov	r3, r1
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	1a5b      	subs	r3, r3, r1
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e029      	b.n	80020ae <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <RTC_WeekDayNum+0xe4>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	085a      	lsrs	r2, r3, #1
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	441a      	add	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	441a      	add	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	441a      	add	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4910      	ldr	r1, [pc, #64]	; (80020c0 <RTC_WeekDayNum+0xe8>)
 8002080:	fba1 1303 	umull	r1, r3, r1, r3
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	490d      	ldr	r1, [pc, #52]	; (80020c0 <RTC_WeekDayNum+0xe8>)
 800208c:	fba1 1303 	umull	r1, r3, r1, r3
 8002090:	09db      	lsrs	r3, r3, #7
 8002092:	4413      	add	r3, r2
 8002094:	1c9a      	adds	r2, r3, #2
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <RTC_WeekDayNum+0xec>)
 8002098:	fba3 1302 	umull	r1, r3, r3, r2
 800209c:	1ad1      	subs	r1, r2, r3
 800209e:	0849      	lsrs	r1, r1, #1
 80020a0:	440b      	add	r3, r1
 80020a2:	0899      	lsrs	r1, r3, #2
 80020a4:	460b      	mov	r3, r1
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a5b      	subs	r3, r3, r1
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	b2db      	uxtb	r3, r3
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	38e38e39 	.word	0x38e38e39
 80020c0:	51eb851f 	.word	0x51eb851f
 80020c4:	24924925 	.word	0x24924925

080020c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e03f      	b.n	800215a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fa72 	bl	80005d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2224      	movs	r2, #36	; 0x24
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800210a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f905 	bl	800231c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b08a      	sub	sp, #40	; 0x28
 8002166:	af02      	add	r7, sp, #8
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b20      	cmp	r3, #32
 8002180:	d17c      	bne.n	800227c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_UART_Transmit+0x2c>
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e075      	b.n	800227e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_UART_Transmit+0x3e>
 800219c:	2302      	movs	r3, #2
 800219e:	e06e      	b.n	800227e <HAL_UART_Transmit+0x11c>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2221      	movs	r2, #33	; 0x21
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021b6:	f7fe facb 	bl	8000750 <HAL_GetTick>
 80021ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	88fa      	ldrh	r2, [r7, #6]
 80021c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	88fa      	ldrh	r2, [r7, #6]
 80021c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d0:	d108      	bne.n	80021e4 <HAL_UART_Transmit+0x82>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d104      	bne.n	80021e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	e003      	b.n	80021ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021f4:	e02a      	b.n	800224c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f840 	bl	8002286 <UART_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e036      	b.n	800227e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002224:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	3302      	adds	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	e007      	b.n	800223e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	3301      	adds	r3, #1
 800223c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1cf      	bne.n	80021f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2200      	movs	r2, #0
 800225e:	2140      	movs	r1, #64	; 0x40
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f810 	bl	8002286 <UART_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e006      	b.n	800227e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e000      	b.n	800227e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800227c:	2302      	movs	r3, #2
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	4613      	mov	r3, r2
 8002294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002296:	e02c      	b.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229e:	d028      	beq.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80022a6:	f7fe fa53 	bl	8000750 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d21d      	bcs.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e00f      	b.n	8002312 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4013      	ands	r3, r2
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	429a      	cmp	r2, r3
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	429a      	cmp	r2, r3
 800230e:	d0c3      	beq.n	8002298 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002356:	f023 030c 	bic.w	r3, r3, #12
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	430b      	orrs	r3, r1
 8002362:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a2c      	ldr	r2, [pc, #176]	; (8002430 <UART_SetConfig+0x114>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d103      	bne.n	800238c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002384:	f7ff f8ae 	bl	80014e4 <HAL_RCC_GetPCLK2Freq>
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	e002      	b.n	8002392 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800238c:	f7ff f896 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
 8002390:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	009a      	lsls	r2, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	4a22      	ldr	r2, [pc, #136]	; (8002434 <UART_SetConfig+0x118>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	0119      	lsls	r1, r3, #4
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	009a      	lsls	r2, r3, #2
 80023bc:	441a      	add	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <UART_SetConfig+0x118>)
 80023ca:	fba3 0302 	umull	r0, r3, r3, r2
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2064      	movs	r0, #100	; 0x64
 80023d2:	fb00 f303 	mul.w	r3, r0, r3
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	3332      	adds	r3, #50	; 0x32
 80023dc:	4a15      	ldr	r2, [pc, #84]	; (8002434 <UART_SetConfig+0x118>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e8:	4419      	add	r1, r3
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009a      	lsls	r2, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <UART_SetConfig+0x118>)
 8002402:	fba3 0302 	umull	r0, r3, r3, r2
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2064      	movs	r0, #100	; 0x64
 800240a:	fb00 f303 	mul.w	r3, r0, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	3332      	adds	r3, #50	; 0x32
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <UART_SetConfig+0x118>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	440a      	add	r2, r1
 8002426:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40013800 	.word	0x40013800
 8002434:	51eb851f 	.word	0x51eb851f

08002438 <__errno>:
 8002438:	4b01      	ldr	r3, [pc, #4]	; (8002440 <__errno+0x8>)
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	2000000c 	.word	0x2000000c

08002444 <__libc_init_array>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	2600      	movs	r6, #0
 8002448:	4d0c      	ldr	r5, [pc, #48]	; (800247c <__libc_init_array+0x38>)
 800244a:	4c0d      	ldr	r4, [pc, #52]	; (8002480 <__libc_init_array+0x3c>)
 800244c:	1b64      	subs	r4, r4, r5
 800244e:	10a4      	asrs	r4, r4, #2
 8002450:	42a6      	cmp	r6, r4
 8002452:	d109      	bne.n	8002468 <__libc_init_array+0x24>
 8002454:	f000 fc5c 	bl	8002d10 <_init>
 8002458:	2600      	movs	r6, #0
 800245a:	4d0a      	ldr	r5, [pc, #40]	; (8002484 <__libc_init_array+0x40>)
 800245c:	4c0a      	ldr	r4, [pc, #40]	; (8002488 <__libc_init_array+0x44>)
 800245e:	1b64      	subs	r4, r4, r5
 8002460:	10a4      	asrs	r4, r4, #2
 8002462:	42a6      	cmp	r6, r4
 8002464:	d105      	bne.n	8002472 <__libc_init_array+0x2e>
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	f855 3b04 	ldr.w	r3, [r5], #4
 800246c:	4798      	blx	r3
 800246e:	3601      	adds	r6, #1
 8002470:	e7ee      	b.n	8002450 <__libc_init_array+0xc>
 8002472:	f855 3b04 	ldr.w	r3, [r5], #4
 8002476:	4798      	blx	r3
 8002478:	3601      	adds	r6, #1
 800247a:	e7f2      	b.n	8002462 <__libc_init_array+0x1e>
 800247c:	08002dc4 	.word	0x08002dc4
 8002480:	08002dc4 	.word	0x08002dc4
 8002484:	08002dc4 	.word	0x08002dc4
 8002488:	08002dc8 	.word	0x08002dc8

0800248c <memset>:
 800248c:	4603      	mov	r3, r0
 800248e:	4402      	add	r2, r0
 8002490:	4293      	cmp	r3, r2
 8002492:	d100      	bne.n	8002496 <memset+0xa>
 8002494:	4770      	bx	lr
 8002496:	f803 1b01 	strb.w	r1, [r3], #1
 800249a:	e7f9      	b.n	8002490 <memset+0x4>

0800249c <siprintf>:
 800249c:	b40e      	push	{r1, r2, r3}
 800249e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024a2:	b500      	push	{lr}
 80024a4:	b09c      	sub	sp, #112	; 0x70
 80024a6:	ab1d      	add	r3, sp, #116	; 0x74
 80024a8:	9002      	str	r0, [sp, #8]
 80024aa:	9006      	str	r0, [sp, #24]
 80024ac:	9107      	str	r1, [sp, #28]
 80024ae:	9104      	str	r1, [sp, #16]
 80024b0:	4808      	ldr	r0, [pc, #32]	; (80024d4 <siprintf+0x38>)
 80024b2:	4909      	ldr	r1, [pc, #36]	; (80024d8 <siprintf+0x3c>)
 80024b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80024b8:	9105      	str	r1, [sp, #20]
 80024ba:	6800      	ldr	r0, [r0, #0]
 80024bc:	a902      	add	r1, sp, #8
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	f000 f868 	bl	8002594 <_svfiprintf_r>
 80024c4:	2200      	movs	r2, #0
 80024c6:	9b02      	ldr	r3, [sp, #8]
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	b01c      	add	sp, #112	; 0x70
 80024cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80024d0:	b003      	add	sp, #12
 80024d2:	4770      	bx	lr
 80024d4:	2000000c 	.word	0x2000000c
 80024d8:	ffff0208 	.word	0xffff0208

080024dc <__ssputs_r>:
 80024dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024e0:	688e      	ldr	r6, [r1, #8]
 80024e2:	4682      	mov	sl, r0
 80024e4:	429e      	cmp	r6, r3
 80024e6:	460c      	mov	r4, r1
 80024e8:	4690      	mov	r8, r2
 80024ea:	461f      	mov	r7, r3
 80024ec:	d838      	bhi.n	8002560 <__ssputs_r+0x84>
 80024ee:	898a      	ldrh	r2, [r1, #12]
 80024f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024f4:	d032      	beq.n	800255c <__ssputs_r+0x80>
 80024f6:	6825      	ldr	r5, [r4, #0]
 80024f8:	6909      	ldr	r1, [r1, #16]
 80024fa:	3301      	adds	r3, #1
 80024fc:	eba5 0901 	sub.w	r9, r5, r1
 8002500:	6965      	ldr	r5, [r4, #20]
 8002502:	444b      	add	r3, r9
 8002504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800250c:	106d      	asrs	r5, r5, #1
 800250e:	429d      	cmp	r5, r3
 8002510:	bf38      	it	cc
 8002512:	461d      	movcc	r5, r3
 8002514:	0553      	lsls	r3, r2, #21
 8002516:	d531      	bpl.n	800257c <__ssputs_r+0xa0>
 8002518:	4629      	mov	r1, r5
 800251a:	f000 fb53 	bl	8002bc4 <_malloc_r>
 800251e:	4606      	mov	r6, r0
 8002520:	b950      	cbnz	r0, 8002538 <__ssputs_r+0x5c>
 8002522:	230c      	movs	r3, #12
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f8ca 3000 	str.w	r3, [sl]
 800252c:	89a3      	ldrh	r3, [r4, #12]
 800252e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002532:	81a3      	strh	r3, [r4, #12]
 8002534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002538:	464a      	mov	r2, r9
 800253a:	6921      	ldr	r1, [r4, #16]
 800253c:	f000 face 	bl	8002adc <memcpy>
 8002540:	89a3      	ldrh	r3, [r4, #12]
 8002542:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254a:	81a3      	strh	r3, [r4, #12]
 800254c:	6126      	str	r6, [r4, #16]
 800254e:	444e      	add	r6, r9
 8002550:	6026      	str	r6, [r4, #0]
 8002552:	463e      	mov	r6, r7
 8002554:	6165      	str	r5, [r4, #20]
 8002556:	eba5 0509 	sub.w	r5, r5, r9
 800255a:	60a5      	str	r5, [r4, #8]
 800255c:	42be      	cmp	r6, r7
 800255e:	d900      	bls.n	8002562 <__ssputs_r+0x86>
 8002560:	463e      	mov	r6, r7
 8002562:	4632      	mov	r2, r6
 8002564:	4641      	mov	r1, r8
 8002566:	6820      	ldr	r0, [r4, #0]
 8002568:	f000 fac6 	bl	8002af8 <memmove>
 800256c:	68a3      	ldr	r3, [r4, #8]
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	1b9b      	subs	r3, r3, r6
 8002572:	4432      	add	r2, r6
 8002574:	2000      	movs	r0, #0
 8002576:	60a3      	str	r3, [r4, #8]
 8002578:	6022      	str	r2, [r4, #0]
 800257a:	e7db      	b.n	8002534 <__ssputs_r+0x58>
 800257c:	462a      	mov	r2, r5
 800257e:	f000 fb7b 	bl	8002c78 <_realloc_r>
 8002582:	4606      	mov	r6, r0
 8002584:	2800      	cmp	r0, #0
 8002586:	d1e1      	bne.n	800254c <__ssputs_r+0x70>
 8002588:	4650      	mov	r0, sl
 800258a:	6921      	ldr	r1, [r4, #16]
 800258c:	f000 face 	bl	8002b2c <_free_r>
 8002590:	e7c7      	b.n	8002522 <__ssputs_r+0x46>
	...

08002594 <_svfiprintf_r>:
 8002594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002598:	4698      	mov	r8, r3
 800259a:	898b      	ldrh	r3, [r1, #12]
 800259c:	4607      	mov	r7, r0
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	460d      	mov	r5, r1
 80025a2:	4614      	mov	r4, r2
 80025a4:	b09d      	sub	sp, #116	; 0x74
 80025a6:	d50e      	bpl.n	80025c6 <_svfiprintf_r+0x32>
 80025a8:	690b      	ldr	r3, [r1, #16]
 80025aa:	b963      	cbnz	r3, 80025c6 <_svfiprintf_r+0x32>
 80025ac:	2140      	movs	r1, #64	; 0x40
 80025ae:	f000 fb09 	bl	8002bc4 <_malloc_r>
 80025b2:	6028      	str	r0, [r5, #0]
 80025b4:	6128      	str	r0, [r5, #16]
 80025b6:	b920      	cbnz	r0, 80025c2 <_svfiprintf_r+0x2e>
 80025b8:	230c      	movs	r3, #12
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	e0d1      	b.n	8002766 <_svfiprintf_r+0x1d2>
 80025c2:	2340      	movs	r3, #64	; 0x40
 80025c4:	616b      	str	r3, [r5, #20]
 80025c6:	2300      	movs	r3, #0
 80025c8:	9309      	str	r3, [sp, #36]	; 0x24
 80025ca:	2320      	movs	r3, #32
 80025cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025d0:	2330      	movs	r3, #48	; 0x30
 80025d2:	f04f 0901 	mov.w	r9, #1
 80025d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80025da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002780 <_svfiprintf_r+0x1ec>
 80025de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025e2:	4623      	mov	r3, r4
 80025e4:	469a      	mov	sl, r3
 80025e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025ea:	b10a      	cbz	r2, 80025f0 <_svfiprintf_r+0x5c>
 80025ec:	2a25      	cmp	r2, #37	; 0x25
 80025ee:	d1f9      	bne.n	80025e4 <_svfiprintf_r+0x50>
 80025f0:	ebba 0b04 	subs.w	fp, sl, r4
 80025f4:	d00b      	beq.n	800260e <_svfiprintf_r+0x7a>
 80025f6:	465b      	mov	r3, fp
 80025f8:	4622      	mov	r2, r4
 80025fa:	4629      	mov	r1, r5
 80025fc:	4638      	mov	r0, r7
 80025fe:	f7ff ff6d 	bl	80024dc <__ssputs_r>
 8002602:	3001      	adds	r0, #1
 8002604:	f000 80aa 	beq.w	800275c <_svfiprintf_r+0x1c8>
 8002608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800260a:	445a      	add	r2, fp
 800260c:	9209      	str	r2, [sp, #36]	; 0x24
 800260e:	f89a 3000 	ldrb.w	r3, [sl]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80a2 	beq.w	800275c <_svfiprintf_r+0x1c8>
 8002618:	2300      	movs	r3, #0
 800261a:	f04f 32ff 	mov.w	r2, #4294967295
 800261e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002622:	f10a 0a01 	add.w	sl, sl, #1
 8002626:	9304      	str	r3, [sp, #16]
 8002628:	9307      	str	r3, [sp, #28]
 800262a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800262e:	931a      	str	r3, [sp, #104]	; 0x68
 8002630:	4654      	mov	r4, sl
 8002632:	2205      	movs	r2, #5
 8002634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002638:	4851      	ldr	r0, [pc, #324]	; (8002780 <_svfiprintf_r+0x1ec>)
 800263a:	f000 fa41 	bl	8002ac0 <memchr>
 800263e:	9a04      	ldr	r2, [sp, #16]
 8002640:	b9d8      	cbnz	r0, 800267a <_svfiprintf_r+0xe6>
 8002642:	06d0      	lsls	r0, r2, #27
 8002644:	bf44      	itt	mi
 8002646:	2320      	movmi	r3, #32
 8002648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800264c:	0711      	lsls	r1, r2, #28
 800264e:	bf44      	itt	mi
 8002650:	232b      	movmi	r3, #43	; 0x2b
 8002652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002656:	f89a 3000 	ldrb.w	r3, [sl]
 800265a:	2b2a      	cmp	r3, #42	; 0x2a
 800265c:	d015      	beq.n	800268a <_svfiprintf_r+0xf6>
 800265e:	4654      	mov	r4, sl
 8002660:	2000      	movs	r0, #0
 8002662:	f04f 0c0a 	mov.w	ip, #10
 8002666:	9a07      	ldr	r2, [sp, #28]
 8002668:	4621      	mov	r1, r4
 800266a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800266e:	3b30      	subs	r3, #48	; 0x30
 8002670:	2b09      	cmp	r3, #9
 8002672:	d94e      	bls.n	8002712 <_svfiprintf_r+0x17e>
 8002674:	b1b0      	cbz	r0, 80026a4 <_svfiprintf_r+0x110>
 8002676:	9207      	str	r2, [sp, #28]
 8002678:	e014      	b.n	80026a4 <_svfiprintf_r+0x110>
 800267a:	eba0 0308 	sub.w	r3, r0, r8
 800267e:	fa09 f303 	lsl.w	r3, r9, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	46a2      	mov	sl, r4
 8002686:	9304      	str	r3, [sp, #16]
 8002688:	e7d2      	b.n	8002630 <_svfiprintf_r+0x9c>
 800268a:	9b03      	ldr	r3, [sp, #12]
 800268c:	1d19      	adds	r1, r3, #4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	9103      	str	r1, [sp, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	bfbb      	ittet	lt
 8002696:	425b      	neglt	r3, r3
 8002698:	f042 0202 	orrlt.w	r2, r2, #2
 800269c:	9307      	strge	r3, [sp, #28]
 800269e:	9307      	strlt	r3, [sp, #28]
 80026a0:	bfb8      	it	lt
 80026a2:	9204      	strlt	r2, [sp, #16]
 80026a4:	7823      	ldrb	r3, [r4, #0]
 80026a6:	2b2e      	cmp	r3, #46	; 0x2e
 80026a8:	d10c      	bne.n	80026c4 <_svfiprintf_r+0x130>
 80026aa:	7863      	ldrb	r3, [r4, #1]
 80026ac:	2b2a      	cmp	r3, #42	; 0x2a
 80026ae:	d135      	bne.n	800271c <_svfiprintf_r+0x188>
 80026b0:	9b03      	ldr	r3, [sp, #12]
 80026b2:	3402      	adds	r4, #2
 80026b4:	1d1a      	adds	r2, r3, #4
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	9203      	str	r2, [sp, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bfb8      	it	lt
 80026be:	f04f 33ff 	movlt.w	r3, #4294967295
 80026c2:	9305      	str	r3, [sp, #20]
 80026c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002790 <_svfiprintf_r+0x1fc>
 80026c8:	2203      	movs	r2, #3
 80026ca:	4650      	mov	r0, sl
 80026cc:	7821      	ldrb	r1, [r4, #0]
 80026ce:	f000 f9f7 	bl	8002ac0 <memchr>
 80026d2:	b140      	cbz	r0, 80026e6 <_svfiprintf_r+0x152>
 80026d4:	2340      	movs	r3, #64	; 0x40
 80026d6:	eba0 000a 	sub.w	r0, r0, sl
 80026da:	fa03 f000 	lsl.w	r0, r3, r0
 80026de:	9b04      	ldr	r3, [sp, #16]
 80026e0:	3401      	adds	r4, #1
 80026e2:	4303      	orrs	r3, r0
 80026e4:	9304      	str	r3, [sp, #16]
 80026e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026ea:	2206      	movs	r2, #6
 80026ec:	4825      	ldr	r0, [pc, #148]	; (8002784 <_svfiprintf_r+0x1f0>)
 80026ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026f2:	f000 f9e5 	bl	8002ac0 <memchr>
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d038      	beq.n	800276c <_svfiprintf_r+0x1d8>
 80026fa:	4b23      	ldr	r3, [pc, #140]	; (8002788 <_svfiprintf_r+0x1f4>)
 80026fc:	bb1b      	cbnz	r3, 8002746 <_svfiprintf_r+0x1b2>
 80026fe:	9b03      	ldr	r3, [sp, #12]
 8002700:	3307      	adds	r3, #7
 8002702:	f023 0307 	bic.w	r3, r3, #7
 8002706:	3308      	adds	r3, #8
 8002708:	9303      	str	r3, [sp, #12]
 800270a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800270c:	4433      	add	r3, r6
 800270e:	9309      	str	r3, [sp, #36]	; 0x24
 8002710:	e767      	b.n	80025e2 <_svfiprintf_r+0x4e>
 8002712:	460c      	mov	r4, r1
 8002714:	2001      	movs	r0, #1
 8002716:	fb0c 3202 	mla	r2, ip, r2, r3
 800271a:	e7a5      	b.n	8002668 <_svfiprintf_r+0xd4>
 800271c:	2300      	movs	r3, #0
 800271e:	f04f 0c0a 	mov.w	ip, #10
 8002722:	4619      	mov	r1, r3
 8002724:	3401      	adds	r4, #1
 8002726:	9305      	str	r3, [sp, #20]
 8002728:	4620      	mov	r0, r4
 800272a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800272e:	3a30      	subs	r2, #48	; 0x30
 8002730:	2a09      	cmp	r2, #9
 8002732:	d903      	bls.n	800273c <_svfiprintf_r+0x1a8>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0c5      	beq.n	80026c4 <_svfiprintf_r+0x130>
 8002738:	9105      	str	r1, [sp, #20]
 800273a:	e7c3      	b.n	80026c4 <_svfiprintf_r+0x130>
 800273c:	4604      	mov	r4, r0
 800273e:	2301      	movs	r3, #1
 8002740:	fb0c 2101 	mla	r1, ip, r1, r2
 8002744:	e7f0      	b.n	8002728 <_svfiprintf_r+0x194>
 8002746:	ab03      	add	r3, sp, #12
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	462a      	mov	r2, r5
 800274c:	4638      	mov	r0, r7
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <_svfiprintf_r+0x1f8>)
 8002750:	a904      	add	r1, sp, #16
 8002752:	f3af 8000 	nop.w
 8002756:	1c42      	adds	r2, r0, #1
 8002758:	4606      	mov	r6, r0
 800275a:	d1d6      	bne.n	800270a <_svfiprintf_r+0x176>
 800275c:	89ab      	ldrh	r3, [r5, #12]
 800275e:	065b      	lsls	r3, r3, #25
 8002760:	f53f af2c 	bmi.w	80025bc <_svfiprintf_r+0x28>
 8002764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002766:	b01d      	add	sp, #116	; 0x74
 8002768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800276c:	ab03      	add	r3, sp, #12
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	462a      	mov	r2, r5
 8002772:	4638      	mov	r0, r7
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <_svfiprintf_r+0x1f8>)
 8002776:	a904      	add	r1, sp, #16
 8002778:	f000 f87c 	bl	8002874 <_printf_i>
 800277c:	e7eb      	b.n	8002756 <_svfiprintf_r+0x1c2>
 800277e:	bf00      	nop
 8002780:	08002d90 	.word	0x08002d90
 8002784:	08002d9a 	.word	0x08002d9a
 8002788:	00000000 	.word	0x00000000
 800278c:	080024dd 	.word	0x080024dd
 8002790:	08002d96 	.word	0x08002d96

08002794 <_printf_common>:
 8002794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002798:	4616      	mov	r6, r2
 800279a:	4699      	mov	r9, r3
 800279c:	688a      	ldr	r2, [r1, #8]
 800279e:	690b      	ldr	r3, [r1, #16]
 80027a0:	4607      	mov	r7, r0
 80027a2:	4293      	cmp	r3, r2
 80027a4:	bfb8      	it	lt
 80027a6:	4613      	movlt	r3, r2
 80027a8:	6033      	str	r3, [r6, #0]
 80027aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027ae:	460c      	mov	r4, r1
 80027b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027b4:	b10a      	cbz	r2, 80027ba <_printf_common+0x26>
 80027b6:	3301      	adds	r3, #1
 80027b8:	6033      	str	r3, [r6, #0]
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	0699      	lsls	r1, r3, #26
 80027be:	bf42      	ittt	mi
 80027c0:	6833      	ldrmi	r3, [r6, #0]
 80027c2:	3302      	addmi	r3, #2
 80027c4:	6033      	strmi	r3, [r6, #0]
 80027c6:	6825      	ldr	r5, [r4, #0]
 80027c8:	f015 0506 	ands.w	r5, r5, #6
 80027cc:	d106      	bne.n	80027dc <_printf_common+0x48>
 80027ce:	f104 0a19 	add.w	sl, r4, #25
 80027d2:	68e3      	ldr	r3, [r4, #12]
 80027d4:	6832      	ldr	r2, [r6, #0]
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	42ab      	cmp	r3, r5
 80027da:	dc28      	bgt.n	800282e <_printf_common+0x9a>
 80027dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027e0:	1e13      	subs	r3, r2, #0
 80027e2:	6822      	ldr	r2, [r4, #0]
 80027e4:	bf18      	it	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	0692      	lsls	r2, r2, #26
 80027ea:	d42d      	bmi.n	8002848 <_printf_common+0xb4>
 80027ec:	4649      	mov	r1, r9
 80027ee:	4638      	mov	r0, r7
 80027f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027f4:	47c0      	blx	r8
 80027f6:	3001      	adds	r0, #1
 80027f8:	d020      	beq.n	800283c <_printf_common+0xa8>
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	68e5      	ldr	r5, [r4, #12]
 80027fe:	f003 0306 	and.w	r3, r3, #6
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf18      	it	ne
 8002806:	2500      	movne	r5, #0
 8002808:	6832      	ldr	r2, [r6, #0]
 800280a:	f04f 0600 	mov.w	r6, #0
 800280e:	68a3      	ldr	r3, [r4, #8]
 8002810:	bf08      	it	eq
 8002812:	1aad      	subeq	r5, r5, r2
 8002814:	6922      	ldr	r2, [r4, #16]
 8002816:	bf08      	it	eq
 8002818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800281c:	4293      	cmp	r3, r2
 800281e:	bfc4      	itt	gt
 8002820:	1a9b      	subgt	r3, r3, r2
 8002822:	18ed      	addgt	r5, r5, r3
 8002824:	341a      	adds	r4, #26
 8002826:	42b5      	cmp	r5, r6
 8002828:	d11a      	bne.n	8002860 <_printf_common+0xcc>
 800282a:	2000      	movs	r0, #0
 800282c:	e008      	b.n	8002840 <_printf_common+0xac>
 800282e:	2301      	movs	r3, #1
 8002830:	4652      	mov	r2, sl
 8002832:	4649      	mov	r1, r9
 8002834:	4638      	mov	r0, r7
 8002836:	47c0      	blx	r8
 8002838:	3001      	adds	r0, #1
 800283a:	d103      	bne.n	8002844 <_printf_common+0xb0>
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002844:	3501      	adds	r5, #1
 8002846:	e7c4      	b.n	80027d2 <_printf_common+0x3e>
 8002848:	2030      	movs	r0, #48	; 0x30
 800284a:	18e1      	adds	r1, r4, r3
 800284c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002856:	4422      	add	r2, r4
 8002858:	3302      	adds	r3, #2
 800285a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800285e:	e7c5      	b.n	80027ec <_printf_common+0x58>
 8002860:	2301      	movs	r3, #1
 8002862:	4622      	mov	r2, r4
 8002864:	4649      	mov	r1, r9
 8002866:	4638      	mov	r0, r7
 8002868:	47c0      	blx	r8
 800286a:	3001      	adds	r0, #1
 800286c:	d0e6      	beq.n	800283c <_printf_common+0xa8>
 800286e:	3601      	adds	r6, #1
 8002870:	e7d9      	b.n	8002826 <_printf_common+0x92>
	...

08002874 <_printf_i>:
 8002874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002878:	460c      	mov	r4, r1
 800287a:	7e27      	ldrb	r7, [r4, #24]
 800287c:	4691      	mov	r9, r2
 800287e:	2f78      	cmp	r7, #120	; 0x78
 8002880:	4680      	mov	r8, r0
 8002882:	469a      	mov	sl, r3
 8002884:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002886:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800288a:	d807      	bhi.n	800289c <_printf_i+0x28>
 800288c:	2f62      	cmp	r7, #98	; 0x62
 800288e:	d80a      	bhi.n	80028a6 <_printf_i+0x32>
 8002890:	2f00      	cmp	r7, #0
 8002892:	f000 80d9 	beq.w	8002a48 <_printf_i+0x1d4>
 8002896:	2f58      	cmp	r7, #88	; 0x58
 8002898:	f000 80a4 	beq.w	80029e4 <_printf_i+0x170>
 800289c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80028a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028a4:	e03a      	b.n	800291c <_printf_i+0xa8>
 80028a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028aa:	2b15      	cmp	r3, #21
 80028ac:	d8f6      	bhi.n	800289c <_printf_i+0x28>
 80028ae:	a001      	add	r0, pc, #4	; (adr r0, 80028b4 <_printf_i+0x40>)
 80028b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80028b4:	0800290d 	.word	0x0800290d
 80028b8:	08002921 	.word	0x08002921
 80028bc:	0800289d 	.word	0x0800289d
 80028c0:	0800289d 	.word	0x0800289d
 80028c4:	0800289d 	.word	0x0800289d
 80028c8:	0800289d 	.word	0x0800289d
 80028cc:	08002921 	.word	0x08002921
 80028d0:	0800289d 	.word	0x0800289d
 80028d4:	0800289d 	.word	0x0800289d
 80028d8:	0800289d 	.word	0x0800289d
 80028dc:	0800289d 	.word	0x0800289d
 80028e0:	08002a2f 	.word	0x08002a2f
 80028e4:	08002951 	.word	0x08002951
 80028e8:	08002a11 	.word	0x08002a11
 80028ec:	0800289d 	.word	0x0800289d
 80028f0:	0800289d 	.word	0x0800289d
 80028f4:	08002a51 	.word	0x08002a51
 80028f8:	0800289d 	.word	0x0800289d
 80028fc:	08002951 	.word	0x08002951
 8002900:	0800289d 	.word	0x0800289d
 8002904:	0800289d 	.word	0x0800289d
 8002908:	08002a19 	.word	0x08002a19
 800290c:	680b      	ldr	r3, [r1, #0]
 800290e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002912:	1d1a      	adds	r2, r3, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	600a      	str	r2, [r1, #0]
 8002918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800291c:	2301      	movs	r3, #1
 800291e:	e0a4      	b.n	8002a6a <_printf_i+0x1f6>
 8002920:	6825      	ldr	r5, [r4, #0]
 8002922:	6808      	ldr	r0, [r1, #0]
 8002924:	062e      	lsls	r6, r5, #24
 8002926:	f100 0304 	add.w	r3, r0, #4
 800292a:	d50a      	bpl.n	8002942 <_printf_i+0xce>
 800292c:	6805      	ldr	r5, [r0, #0]
 800292e:	600b      	str	r3, [r1, #0]
 8002930:	2d00      	cmp	r5, #0
 8002932:	da03      	bge.n	800293c <_printf_i+0xc8>
 8002934:	232d      	movs	r3, #45	; 0x2d
 8002936:	426d      	negs	r5, r5
 8002938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800293c:	230a      	movs	r3, #10
 800293e:	485e      	ldr	r0, [pc, #376]	; (8002ab8 <_printf_i+0x244>)
 8002940:	e019      	b.n	8002976 <_printf_i+0x102>
 8002942:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002946:	6805      	ldr	r5, [r0, #0]
 8002948:	600b      	str	r3, [r1, #0]
 800294a:	bf18      	it	ne
 800294c:	b22d      	sxthne	r5, r5
 800294e:	e7ef      	b.n	8002930 <_printf_i+0xbc>
 8002950:	680b      	ldr	r3, [r1, #0]
 8002952:	6825      	ldr	r5, [r4, #0]
 8002954:	1d18      	adds	r0, r3, #4
 8002956:	6008      	str	r0, [r1, #0]
 8002958:	0628      	lsls	r0, r5, #24
 800295a:	d501      	bpl.n	8002960 <_printf_i+0xec>
 800295c:	681d      	ldr	r5, [r3, #0]
 800295e:	e002      	b.n	8002966 <_printf_i+0xf2>
 8002960:	0669      	lsls	r1, r5, #25
 8002962:	d5fb      	bpl.n	800295c <_printf_i+0xe8>
 8002964:	881d      	ldrh	r5, [r3, #0]
 8002966:	2f6f      	cmp	r7, #111	; 0x6f
 8002968:	bf0c      	ite	eq
 800296a:	2308      	moveq	r3, #8
 800296c:	230a      	movne	r3, #10
 800296e:	4852      	ldr	r0, [pc, #328]	; (8002ab8 <_printf_i+0x244>)
 8002970:	2100      	movs	r1, #0
 8002972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002976:	6866      	ldr	r6, [r4, #4]
 8002978:	2e00      	cmp	r6, #0
 800297a:	bfa8      	it	ge
 800297c:	6821      	ldrge	r1, [r4, #0]
 800297e:	60a6      	str	r6, [r4, #8]
 8002980:	bfa4      	itt	ge
 8002982:	f021 0104 	bicge.w	r1, r1, #4
 8002986:	6021      	strge	r1, [r4, #0]
 8002988:	b90d      	cbnz	r5, 800298e <_printf_i+0x11a>
 800298a:	2e00      	cmp	r6, #0
 800298c:	d04d      	beq.n	8002a2a <_printf_i+0x1b6>
 800298e:	4616      	mov	r6, r2
 8002990:	fbb5 f1f3 	udiv	r1, r5, r3
 8002994:	fb03 5711 	mls	r7, r3, r1, r5
 8002998:	5dc7      	ldrb	r7, [r0, r7]
 800299a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800299e:	462f      	mov	r7, r5
 80029a0:	42bb      	cmp	r3, r7
 80029a2:	460d      	mov	r5, r1
 80029a4:	d9f4      	bls.n	8002990 <_printf_i+0x11c>
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d10b      	bne.n	80029c2 <_printf_i+0x14e>
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	07df      	lsls	r7, r3, #31
 80029ae:	d508      	bpl.n	80029c2 <_printf_i+0x14e>
 80029b0:	6923      	ldr	r3, [r4, #16]
 80029b2:	6861      	ldr	r1, [r4, #4]
 80029b4:	4299      	cmp	r1, r3
 80029b6:	bfde      	ittt	le
 80029b8:	2330      	movle	r3, #48	; 0x30
 80029ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80029be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80029c2:	1b92      	subs	r2, r2, r6
 80029c4:	6122      	str	r2, [r4, #16]
 80029c6:	464b      	mov	r3, r9
 80029c8:	4621      	mov	r1, r4
 80029ca:	4640      	mov	r0, r8
 80029cc:	f8cd a000 	str.w	sl, [sp]
 80029d0:	aa03      	add	r2, sp, #12
 80029d2:	f7ff fedf 	bl	8002794 <_printf_common>
 80029d6:	3001      	adds	r0, #1
 80029d8:	d14c      	bne.n	8002a74 <_printf_i+0x200>
 80029da:	f04f 30ff 	mov.w	r0, #4294967295
 80029de:	b004      	add	sp, #16
 80029e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e4:	4834      	ldr	r0, [pc, #208]	; (8002ab8 <_printf_i+0x244>)
 80029e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80029ea:	680e      	ldr	r6, [r1, #0]
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80029f2:	061f      	lsls	r7, r3, #24
 80029f4:	600e      	str	r6, [r1, #0]
 80029f6:	d514      	bpl.n	8002a22 <_printf_i+0x1ae>
 80029f8:	07d9      	lsls	r1, r3, #31
 80029fa:	bf44      	itt	mi
 80029fc:	f043 0320 	orrmi.w	r3, r3, #32
 8002a00:	6023      	strmi	r3, [r4, #0]
 8002a02:	b91d      	cbnz	r5, 8002a0c <_printf_i+0x198>
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	f023 0320 	bic.w	r3, r3, #32
 8002a0a:	6023      	str	r3, [r4, #0]
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	e7af      	b.n	8002970 <_printf_i+0xfc>
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	f043 0320 	orr.w	r3, r3, #32
 8002a16:	6023      	str	r3, [r4, #0]
 8002a18:	2378      	movs	r3, #120	; 0x78
 8002a1a:	4828      	ldr	r0, [pc, #160]	; (8002abc <_printf_i+0x248>)
 8002a1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a20:	e7e3      	b.n	80029ea <_printf_i+0x176>
 8002a22:	065e      	lsls	r6, r3, #25
 8002a24:	bf48      	it	mi
 8002a26:	b2ad      	uxthmi	r5, r5
 8002a28:	e7e6      	b.n	80029f8 <_printf_i+0x184>
 8002a2a:	4616      	mov	r6, r2
 8002a2c:	e7bb      	b.n	80029a6 <_printf_i+0x132>
 8002a2e:	680b      	ldr	r3, [r1, #0]
 8002a30:	6826      	ldr	r6, [r4, #0]
 8002a32:	1d1d      	adds	r5, r3, #4
 8002a34:	6960      	ldr	r0, [r4, #20]
 8002a36:	600d      	str	r5, [r1, #0]
 8002a38:	0635      	lsls	r5, r6, #24
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	d501      	bpl.n	8002a42 <_printf_i+0x1ce>
 8002a3e:	6018      	str	r0, [r3, #0]
 8002a40:	e002      	b.n	8002a48 <_printf_i+0x1d4>
 8002a42:	0671      	lsls	r1, r6, #25
 8002a44:	d5fb      	bpl.n	8002a3e <_printf_i+0x1ca>
 8002a46:	8018      	strh	r0, [r3, #0]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	4616      	mov	r6, r2
 8002a4c:	6123      	str	r3, [r4, #16]
 8002a4e:	e7ba      	b.n	80029c6 <_printf_i+0x152>
 8002a50:	680b      	ldr	r3, [r1, #0]
 8002a52:	1d1a      	adds	r2, r3, #4
 8002a54:	600a      	str	r2, [r1, #0]
 8002a56:	681e      	ldr	r6, [r3, #0]
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	6862      	ldr	r2, [r4, #4]
 8002a5e:	f000 f82f 	bl	8002ac0 <memchr>
 8002a62:	b108      	cbz	r0, 8002a68 <_printf_i+0x1f4>
 8002a64:	1b80      	subs	r0, r0, r6
 8002a66:	6060      	str	r0, [r4, #4]
 8002a68:	6863      	ldr	r3, [r4, #4]
 8002a6a:	6123      	str	r3, [r4, #16]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a72:	e7a8      	b.n	80029c6 <_printf_i+0x152>
 8002a74:	4632      	mov	r2, r6
 8002a76:	4649      	mov	r1, r9
 8002a78:	4640      	mov	r0, r8
 8002a7a:	6923      	ldr	r3, [r4, #16]
 8002a7c:	47d0      	blx	sl
 8002a7e:	3001      	adds	r0, #1
 8002a80:	d0ab      	beq.n	80029da <_printf_i+0x166>
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	079b      	lsls	r3, r3, #30
 8002a86:	d413      	bmi.n	8002ab0 <_printf_i+0x23c>
 8002a88:	68e0      	ldr	r0, [r4, #12]
 8002a8a:	9b03      	ldr	r3, [sp, #12]
 8002a8c:	4298      	cmp	r0, r3
 8002a8e:	bfb8      	it	lt
 8002a90:	4618      	movlt	r0, r3
 8002a92:	e7a4      	b.n	80029de <_printf_i+0x16a>
 8002a94:	2301      	movs	r3, #1
 8002a96:	4632      	mov	r2, r6
 8002a98:	4649      	mov	r1, r9
 8002a9a:	4640      	mov	r0, r8
 8002a9c:	47d0      	blx	sl
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	d09b      	beq.n	80029da <_printf_i+0x166>
 8002aa2:	3501      	adds	r5, #1
 8002aa4:	68e3      	ldr	r3, [r4, #12]
 8002aa6:	9903      	ldr	r1, [sp, #12]
 8002aa8:	1a5b      	subs	r3, r3, r1
 8002aaa:	42ab      	cmp	r3, r5
 8002aac:	dcf2      	bgt.n	8002a94 <_printf_i+0x220>
 8002aae:	e7eb      	b.n	8002a88 <_printf_i+0x214>
 8002ab0:	2500      	movs	r5, #0
 8002ab2:	f104 0619 	add.w	r6, r4, #25
 8002ab6:	e7f5      	b.n	8002aa4 <_printf_i+0x230>
 8002ab8:	08002da1 	.word	0x08002da1
 8002abc:	08002db2 	.word	0x08002db2

08002ac0 <memchr>:
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b510      	push	{r4, lr}
 8002ac4:	b2c9      	uxtb	r1, r1
 8002ac6:	4402      	add	r2, r0
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	d101      	bne.n	8002ad2 <memchr+0x12>
 8002ace:	2000      	movs	r0, #0
 8002ad0:	e003      	b.n	8002ada <memchr+0x1a>
 8002ad2:	7804      	ldrb	r4, [r0, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	428c      	cmp	r4, r1
 8002ad8:	d1f6      	bne.n	8002ac8 <memchr+0x8>
 8002ada:	bd10      	pop	{r4, pc}

08002adc <memcpy>:
 8002adc:	440a      	add	r2, r1
 8002ade:	4291      	cmp	r1, r2
 8002ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ae4:	d100      	bne.n	8002ae8 <memcpy+0xc>
 8002ae6:	4770      	bx	lr
 8002ae8:	b510      	push	{r4, lr}
 8002aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002aee:	4291      	cmp	r1, r2
 8002af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002af4:	d1f9      	bne.n	8002aea <memcpy+0xe>
 8002af6:	bd10      	pop	{r4, pc}

08002af8 <memmove>:
 8002af8:	4288      	cmp	r0, r1
 8002afa:	b510      	push	{r4, lr}
 8002afc:	eb01 0402 	add.w	r4, r1, r2
 8002b00:	d902      	bls.n	8002b08 <memmove+0x10>
 8002b02:	4284      	cmp	r4, r0
 8002b04:	4623      	mov	r3, r4
 8002b06:	d807      	bhi.n	8002b18 <memmove+0x20>
 8002b08:	1e43      	subs	r3, r0, #1
 8002b0a:	42a1      	cmp	r1, r4
 8002b0c:	d008      	beq.n	8002b20 <memmove+0x28>
 8002b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b16:	e7f8      	b.n	8002b0a <memmove+0x12>
 8002b18:	4601      	mov	r1, r0
 8002b1a:	4402      	add	r2, r0
 8002b1c:	428a      	cmp	r2, r1
 8002b1e:	d100      	bne.n	8002b22 <memmove+0x2a>
 8002b20:	bd10      	pop	{r4, pc}
 8002b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b2a:	e7f7      	b.n	8002b1c <memmove+0x24>

08002b2c <_free_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	4605      	mov	r5, r0
 8002b30:	2900      	cmp	r1, #0
 8002b32:	d043      	beq.n	8002bbc <_free_r+0x90>
 8002b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b38:	1f0c      	subs	r4, r1, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bfb8      	it	lt
 8002b3e:	18e4      	addlt	r4, r4, r3
 8002b40:	f000 f8d0 	bl	8002ce4 <__malloc_lock>
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <_free_r+0x94>)
 8002b46:	6813      	ldr	r3, [r2, #0]
 8002b48:	4610      	mov	r0, r2
 8002b4a:	b933      	cbnz	r3, 8002b5a <_free_r+0x2e>
 8002b4c:	6063      	str	r3, [r4, #4]
 8002b4e:	6014      	str	r4, [r2, #0]
 8002b50:	4628      	mov	r0, r5
 8002b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b56:	f000 b8cb 	b.w	8002cf0 <__malloc_unlock>
 8002b5a:	42a3      	cmp	r3, r4
 8002b5c:	d90a      	bls.n	8002b74 <_free_r+0x48>
 8002b5e:	6821      	ldr	r1, [r4, #0]
 8002b60:	1862      	adds	r2, r4, r1
 8002b62:	4293      	cmp	r3, r2
 8002b64:	bf01      	itttt	eq
 8002b66:	681a      	ldreq	r2, [r3, #0]
 8002b68:	685b      	ldreq	r3, [r3, #4]
 8002b6a:	1852      	addeq	r2, r2, r1
 8002b6c:	6022      	streq	r2, [r4, #0]
 8002b6e:	6063      	str	r3, [r4, #4]
 8002b70:	6004      	str	r4, [r0, #0]
 8002b72:	e7ed      	b.n	8002b50 <_free_r+0x24>
 8002b74:	461a      	mov	r2, r3
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	b10b      	cbz	r3, 8002b7e <_free_r+0x52>
 8002b7a:	42a3      	cmp	r3, r4
 8002b7c:	d9fa      	bls.n	8002b74 <_free_r+0x48>
 8002b7e:	6811      	ldr	r1, [r2, #0]
 8002b80:	1850      	adds	r0, r2, r1
 8002b82:	42a0      	cmp	r0, r4
 8002b84:	d10b      	bne.n	8002b9e <_free_r+0x72>
 8002b86:	6820      	ldr	r0, [r4, #0]
 8002b88:	4401      	add	r1, r0
 8002b8a:	1850      	adds	r0, r2, r1
 8002b8c:	4283      	cmp	r3, r0
 8002b8e:	6011      	str	r1, [r2, #0]
 8002b90:	d1de      	bne.n	8002b50 <_free_r+0x24>
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4401      	add	r1, r0
 8002b98:	6011      	str	r1, [r2, #0]
 8002b9a:	6053      	str	r3, [r2, #4]
 8002b9c:	e7d8      	b.n	8002b50 <_free_r+0x24>
 8002b9e:	d902      	bls.n	8002ba6 <_free_r+0x7a>
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	602b      	str	r3, [r5, #0]
 8002ba4:	e7d4      	b.n	8002b50 <_free_r+0x24>
 8002ba6:	6820      	ldr	r0, [r4, #0]
 8002ba8:	1821      	adds	r1, r4, r0
 8002baa:	428b      	cmp	r3, r1
 8002bac:	bf01      	itttt	eq
 8002bae:	6819      	ldreq	r1, [r3, #0]
 8002bb0:	685b      	ldreq	r3, [r3, #4]
 8002bb2:	1809      	addeq	r1, r1, r0
 8002bb4:	6021      	streq	r1, [r4, #0]
 8002bb6:	6063      	str	r3, [r4, #4]
 8002bb8:	6054      	str	r4, [r2, #4]
 8002bba:	e7c9      	b.n	8002b50 <_free_r+0x24>
 8002bbc:	bd38      	pop	{r3, r4, r5, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000090 	.word	0x20000090

08002bc4 <_malloc_r>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	1ccd      	adds	r5, r1, #3
 8002bc8:	f025 0503 	bic.w	r5, r5, #3
 8002bcc:	3508      	adds	r5, #8
 8002bce:	2d0c      	cmp	r5, #12
 8002bd0:	bf38      	it	cc
 8002bd2:	250c      	movcc	r5, #12
 8002bd4:	2d00      	cmp	r5, #0
 8002bd6:	4606      	mov	r6, r0
 8002bd8:	db01      	blt.n	8002bde <_malloc_r+0x1a>
 8002bda:	42a9      	cmp	r1, r5
 8002bdc:	d903      	bls.n	8002be6 <_malloc_r+0x22>
 8002bde:	230c      	movs	r3, #12
 8002be0:	6033      	str	r3, [r6, #0]
 8002be2:	2000      	movs	r0, #0
 8002be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002be6:	f000 f87d 	bl	8002ce4 <__malloc_lock>
 8002bea:	4921      	ldr	r1, [pc, #132]	; (8002c70 <_malloc_r+0xac>)
 8002bec:	680a      	ldr	r2, [r1, #0]
 8002bee:	4614      	mov	r4, r2
 8002bf0:	b99c      	cbnz	r4, 8002c1a <_malloc_r+0x56>
 8002bf2:	4f20      	ldr	r7, [pc, #128]	; (8002c74 <_malloc_r+0xb0>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b923      	cbnz	r3, 8002c02 <_malloc_r+0x3e>
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f000 f862 	bl	8002cc4 <_sbrk_r>
 8002c00:	6038      	str	r0, [r7, #0]
 8002c02:	4629      	mov	r1, r5
 8002c04:	4630      	mov	r0, r6
 8002c06:	f000 f85d 	bl	8002cc4 <_sbrk_r>
 8002c0a:	1c43      	adds	r3, r0, #1
 8002c0c:	d123      	bne.n	8002c56 <_malloc_r+0x92>
 8002c0e:	230c      	movs	r3, #12
 8002c10:	4630      	mov	r0, r6
 8002c12:	6033      	str	r3, [r6, #0]
 8002c14:	f000 f86c 	bl	8002cf0 <__malloc_unlock>
 8002c18:	e7e3      	b.n	8002be2 <_malloc_r+0x1e>
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	1b5b      	subs	r3, r3, r5
 8002c1e:	d417      	bmi.n	8002c50 <_malloc_r+0x8c>
 8002c20:	2b0b      	cmp	r3, #11
 8002c22:	d903      	bls.n	8002c2c <_malloc_r+0x68>
 8002c24:	6023      	str	r3, [r4, #0]
 8002c26:	441c      	add	r4, r3
 8002c28:	6025      	str	r5, [r4, #0]
 8002c2a:	e004      	b.n	8002c36 <_malloc_r+0x72>
 8002c2c:	6863      	ldr	r3, [r4, #4]
 8002c2e:	42a2      	cmp	r2, r4
 8002c30:	bf0c      	ite	eq
 8002c32:	600b      	streq	r3, [r1, #0]
 8002c34:	6053      	strne	r3, [r2, #4]
 8002c36:	4630      	mov	r0, r6
 8002c38:	f000 f85a 	bl	8002cf0 <__malloc_unlock>
 8002c3c:	f104 000b 	add.w	r0, r4, #11
 8002c40:	1d23      	adds	r3, r4, #4
 8002c42:	f020 0007 	bic.w	r0, r0, #7
 8002c46:	1ac2      	subs	r2, r0, r3
 8002c48:	d0cc      	beq.n	8002be4 <_malloc_r+0x20>
 8002c4a:	1a1b      	subs	r3, r3, r0
 8002c4c:	50a3      	str	r3, [r4, r2]
 8002c4e:	e7c9      	b.n	8002be4 <_malloc_r+0x20>
 8002c50:	4622      	mov	r2, r4
 8002c52:	6864      	ldr	r4, [r4, #4]
 8002c54:	e7cc      	b.n	8002bf0 <_malloc_r+0x2c>
 8002c56:	1cc4      	adds	r4, r0, #3
 8002c58:	f024 0403 	bic.w	r4, r4, #3
 8002c5c:	42a0      	cmp	r0, r4
 8002c5e:	d0e3      	beq.n	8002c28 <_malloc_r+0x64>
 8002c60:	1a21      	subs	r1, r4, r0
 8002c62:	4630      	mov	r0, r6
 8002c64:	f000 f82e 	bl	8002cc4 <_sbrk_r>
 8002c68:	3001      	adds	r0, #1
 8002c6a:	d1dd      	bne.n	8002c28 <_malloc_r+0x64>
 8002c6c:	e7cf      	b.n	8002c0e <_malloc_r+0x4a>
 8002c6e:	bf00      	nop
 8002c70:	20000090 	.word	0x20000090
 8002c74:	20000094 	.word	0x20000094

08002c78 <_realloc_r>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	4607      	mov	r7, r0
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	460e      	mov	r6, r1
 8002c80:	b921      	cbnz	r1, 8002c8c <_realloc_r+0x14>
 8002c82:	4611      	mov	r1, r2
 8002c84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c88:	f7ff bf9c 	b.w	8002bc4 <_malloc_r>
 8002c8c:	b922      	cbnz	r2, 8002c98 <_realloc_r+0x20>
 8002c8e:	f7ff ff4d 	bl	8002b2c <_free_r>
 8002c92:	4625      	mov	r5, r4
 8002c94:	4628      	mov	r0, r5
 8002c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c98:	f000 f830 	bl	8002cfc <_malloc_usable_size_r>
 8002c9c:	42a0      	cmp	r0, r4
 8002c9e:	d20f      	bcs.n	8002cc0 <_realloc_r+0x48>
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	4638      	mov	r0, r7
 8002ca4:	f7ff ff8e 	bl	8002bc4 <_malloc_r>
 8002ca8:	4605      	mov	r5, r0
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d0f2      	beq.n	8002c94 <_realloc_r+0x1c>
 8002cae:	4631      	mov	r1, r6
 8002cb0:	4622      	mov	r2, r4
 8002cb2:	f7ff ff13 	bl	8002adc <memcpy>
 8002cb6:	4631      	mov	r1, r6
 8002cb8:	4638      	mov	r0, r7
 8002cba:	f7ff ff37 	bl	8002b2c <_free_r>
 8002cbe:	e7e9      	b.n	8002c94 <_realloc_r+0x1c>
 8002cc0:	4635      	mov	r5, r6
 8002cc2:	e7e7      	b.n	8002c94 <_realloc_r+0x1c>

08002cc4 <_sbrk_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4d05      	ldr	r5, [pc, #20]	; (8002ce0 <_sbrk_r+0x1c>)
 8002cca:	4604      	mov	r4, r0
 8002ccc:	4608      	mov	r0, r1
 8002cce:	602b      	str	r3, [r5, #0]
 8002cd0:	f7fd fc1c 	bl	800050c <_sbrk>
 8002cd4:	1c43      	adds	r3, r0, #1
 8002cd6:	d102      	bne.n	8002cde <_sbrk_r+0x1a>
 8002cd8:	682b      	ldr	r3, [r5, #0]
 8002cda:	b103      	cbz	r3, 8002cde <_sbrk_r+0x1a>
 8002cdc:	6023      	str	r3, [r4, #0]
 8002cde:	bd38      	pop	{r3, r4, r5, pc}
 8002ce0:	20000148 	.word	0x20000148

08002ce4 <__malloc_lock>:
 8002ce4:	4801      	ldr	r0, [pc, #4]	; (8002cec <__malloc_lock+0x8>)
 8002ce6:	f000 b811 	b.w	8002d0c <__retarget_lock_acquire_recursive>
 8002cea:	bf00      	nop
 8002cec:	20000150 	.word	0x20000150

08002cf0 <__malloc_unlock>:
 8002cf0:	4801      	ldr	r0, [pc, #4]	; (8002cf8 <__malloc_unlock+0x8>)
 8002cf2:	f000 b80c 	b.w	8002d0e <__retarget_lock_release_recursive>
 8002cf6:	bf00      	nop
 8002cf8:	20000150 	.word	0x20000150

08002cfc <_malloc_usable_size_r>:
 8002cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d00:	1f18      	subs	r0, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bfbc      	itt	lt
 8002d06:	580b      	ldrlt	r3, [r1, r0]
 8002d08:	18c0      	addlt	r0, r0, r3
 8002d0a:	4770      	bx	lr

08002d0c <__retarget_lock_acquire_recursive>:
 8002d0c:	4770      	bx	lr

08002d0e <__retarget_lock_release_recursive>:
 8002d0e:	4770      	bx	lr

08002d10 <_init>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	bf00      	nop
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr

08002d1c <_fini>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	bf00      	nop
 8002d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d22:	bc08      	pop	{r3}
 8002d24:	469e      	mov	lr, r3
 8002d26:	4770      	bx	lr
