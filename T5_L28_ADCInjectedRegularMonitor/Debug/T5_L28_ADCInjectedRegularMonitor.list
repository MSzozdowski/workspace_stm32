
T5_L28_ADCInjectedRegularMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004878  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a74  08004a74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a7c  08004a7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  20000070  08004af4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a3c  08004af4  00020a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124a1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b9  00000000  00000000  00032541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00034d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00035b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186cb  00000000  00000000  00036878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122af  00000000  00000000  0004ef43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a60f  00000000  00000000  000611f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e70  00000000  00000000  000fb854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a00 	.word	0x08004a00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004a00 	.word	0x08004a00

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08c      	sub	sp, #48	; 0x30
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2220      	movs	r2, #32
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 fdfe 	bl	8004194 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000598:	4b39      	ldr	r3, [pc, #228]	; (8000680 <MX_ADC1_Init+0x108>)
 800059a:	4a3a      	ldr	r2, [pc, #232]	; (8000684 <MX_ADC1_Init+0x10c>)
 800059c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800059e:	4b38      	ldr	r3, [pc, #224]	; (8000680 <MX_ADC1_Init+0x108>)
 80005a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a6:	4b36      	ldr	r3, [pc, #216]	; (8000680 <MX_ADC1_Init+0x108>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ac:	4b34      	ldr	r3, [pc, #208]	; (8000680 <MX_ADC1_Init+0x108>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b2:	4b33      	ldr	r3, [pc, #204]	; (8000680 <MX_ADC1_Init+0x108>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b8:	4b31      	ldr	r3, [pc, #196]	; (8000680 <MX_ADC1_Init+0x108>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <MX_ADC1_Init+0x108>)
 80005c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80005c8:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <MX_ADC1_Init+0x108>)
 80005ca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80005ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d0:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <MX_ADC1_Init+0x108>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <MX_ADC1_Init+0x108>)
 80005d8:	2202      	movs	r2, #2
 80005da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <MX_ADC1_Init+0x108>)
 80005de:	2201      	movs	r2, #1
 80005e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <MX_ADC1_Init+0x108>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ea:	4825      	ldr	r0, [pc, #148]	; (8000680 <MX_ADC1_Init+0x108>)
 80005ec:	f000 fd04 	bl	8000ff8 <HAL_ADC_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 80005f6:	f000 fa6b 	bl	8000ad0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000602:	2300      	movs	r3, #0
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	4619      	mov	r1, r3
 800060c:	481c      	ldr	r0, [pc, #112]	; (8000680 <MX_ADC1_Init+0x108>)
 800060e:	f000 ff85 	bl	800151c <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8000618:	f000 fa5a 	bl	8000ad0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4619      	mov	r1, r3
 800062a:	4815      	ldr	r0, [pc, #84]	; (8000680 <MX_ADC1_Init+0x108>)
 800062c:	f000 ff76 	bl	800151c <HAL_ADC_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000636:	f000 fa4b 	bl	8000ad0 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800063a:	2304      	movs	r3, #4
 800063c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 800064a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800064e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T4_TRGO;
 8000650:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8000654:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <MX_ADC1_Init+0x108>)
 8000668:	f001 fb12 	bl	8001c90 <HAL_ADCEx_InjectedConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000672:	f000 fa2d 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	3730      	adds	r7, #48	; 0x30
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000a8 	.word	0x200000a8
 8000684:	40012000 	.word	0x40012000

08000688 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a2f      	ldr	r2, [pc, #188]	; (8000764 <HAL_ADC_MspInit+0xdc>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d157      	bne.n	800075a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <HAL_ADC_MspInit+0xe0>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <HAL_ADC_MspInit+0xe0>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <HAL_ADC_MspInit+0xe0>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <HAL_ADC_MspInit+0xe0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a26      	ldr	r2, [pc, #152]	; (8000768 <HAL_ADC_MspInit+0xe0>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b24      	ldr	r3, [pc, #144]	; (8000768 <HAL_ADC_MspInit+0xe0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80006e2:	2313      	movs	r3, #19
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	481d      	ldr	r0, [pc, #116]	; (800076c <HAL_ADC_MspInit+0xe4>)
 80006f6:	f002 f8e7 	bl	80028c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <HAL_ADC_MspInit+0xec>)
 80006fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 8000714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000718:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 800071c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000720:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 8000724:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000728:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 800072c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000730:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 8000740:	f001 fd52 	bl	80021e8 <HAL_DMA_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800074a:	f000 f9c1 	bl	8000ad0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 8000752:	639a      	str	r2, [r3, #56]	; 0x38
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_ADC_MspInit+0xe8>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40012000 	.word	0x40012000
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	200000f0 	.word	0x200000f0
 8000774:	40026410 	.word	0x40026410

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_DMA_Init+0x3c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <MX_DMA_Init+0x3c>)
 8000788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2038      	movs	r0, #56	; 0x38
 80007a0:	f001 fceb 	bl	800217a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a4:	2038      	movs	r0, #56	; 0x38
 80007a6:	f001 fd04 	bl	80021b2 <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a2c      	ldr	r2, [pc, #176]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <MX_GPIO_Init+0xd0>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2160      	movs	r1, #96	; 0x60
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_GPIO_Init+0xd4>)
 8000844:	f002 f9c4 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_GPIO_Init+0xd8>)
 8000860:	f002 f832 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8000864:	2360      	movs	r3, #96	; 0x60
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_GPIO_Init+0xd4>)
 800087c:	f002 f824 	bl	80028c8 <HAL_GPIO_Init>

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020800 	.word	0x40020800

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 fb3c 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089c:	f000 f826 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a0:	f7ff ff8a 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008a4:	f000 fa9a 	bl	8000ddc <MX_USART2_UART_Init>
  MX_DMA_Init();
 80008a8:	f7ff ff66 	bl	8000778 <MX_DMA_Init>
  MX_ADC1_Init();
 80008ac:	f7ff fe64 	bl	8000578 <MX_ADC1_Init>
  MX_TIM2_Init();
 80008b0:	f000 f9c2 	bl	8000c38 <MX_TIM2_Init>
  MX_TIM4_Init();
 80008b4:	f000 fa0e 	bl	8000cd4 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008b8:	f000 f882 	bl	80009c0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <main+0x48>)
 80008be:	f002 fe7f 	bl	80035c0 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&AdcRegular,2);
 80008c2:	2202      	movs	r2, #2
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <main+0x4c>)
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <main+0x50>)
 80008c8:	f000 fd1a 	bl	8001300 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim4);
 80008cc:	4806      	ldr	r0, [pc, #24]	; (80008e8 <main+0x54>)
 80008ce:	f002 fe77 	bl	80035c0 <HAL_TIM_Base_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <main+0x50>)
 80008d4:	f001 f8d2 	bl	8001a7c <HAL_ADCEx_InjectedStart_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <main+0x44>
 80008da:	bf00      	nop
 80008dc:	2000099c 	.word	0x2000099c
 80008e0:	20000950 	.word	0x20000950
 80008e4:	200000a8 	.word	0x200000a8
 80008e8:	20000954 	.word	0x20000954

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	2230      	movs	r2, #48	; 0x30
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fc4a 	bl	8004194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <SystemClock_Config+0xcc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a27      	ldr	r2, [pc, #156]	; (80009b8 <SystemClock_Config+0xcc>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <SystemClock_Config+0xcc>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <SystemClock_Config+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <SystemClock_Config+0xd0>)
 8000936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <SystemClock_Config+0xd0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000948:	2302      	movs	r3, #2
 800094a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094c:	2301      	movs	r3, #1
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000950:	2310      	movs	r3, #16
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000954:	2302      	movs	r3, #2
 8000956:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000958:	2300      	movs	r3, #0
 800095a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800095c:	2310      	movs	r3, #16
 800095e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000960:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000964:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000966:	2304      	movs	r3, #4
 8000968:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800096a:	2304      	movs	r3, #4
 800096c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	4618      	mov	r0, r3
 8000974:	f002 f960 	bl	8002c38 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800097e:	f000 f8a7 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	230f      	movs	r3, #15
 8000984:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2302      	movs	r3, #2
 8000988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fbc2 	bl	8003128 <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009aa:	f000 f891 	bl	8000ad0 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3750      	adds	r7, #80	; 0x50
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40007000 	.word	0x40007000

080009c0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2012      	movs	r0, #18
 80009ca:	f001 fbd6 	bl	800217a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009ce:	2012      	movs	r0, #18
 80009d0:	f001 fbef 	bl	80021b2 <HAL_NVIC_EnableIRQ>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <HAL_ADC_ConvCpltCallback+0x24>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d103      	bne.n	80009f2 <HAL_ADC_ConvCpltCallback+0x1a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80009ea:	2120      	movs	r1, #32
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <HAL_ADC_ConvCpltCallback+0x28>)
 80009ee:	f002 f908 	bl	8002c02 <HAL_GPIO_TogglePin>
	}
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40012000 	.word	0x40012000
 8000a00:	40020000 	.word	0x40020000

08000a04 <HAL_ADCEx_InjectedConvCpltCallback>:
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	static uint16_t i = 0;
	static uint8_t tmp[8];
	static uint8_t size;
	if(hadc -> Instance == ADC1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <HAL_ADCEx_InjectedConvCpltCallback+0xac>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d148      	bne.n	8000aa8 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>
	{
		AdcInjected[i] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000a16:	2101      	movs	r1, #1
 8000a18:	4826      	ldr	r0, [pc, #152]	; (8000ab4 <HAL_ADCEx_InjectedConvCpltCallback+0xb0>)
 8000a1a:	f001 f901 	bl	8001c20 <HAL_ADCEx_InjectedGetValue>
 8000a1e:	4601      	mov	r1, r0
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	b289      	uxth	r1, r1
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <HAL_ADCEx_InjectedConvCpltCallback+0xb8>)
 8000a2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		i = (i+1) % 1024;
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	425a      	negs	r2, r3
 8000a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a3a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a3e:	bf58      	it	pl
 8000a40:	4253      	negpl	r3, r2
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8000a46:	801a      	strh	r2, [r3, #0]

		if(i == 1023)
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d129      	bne.n	8000aa8 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>
		{
			for(i = 0; i< 1024; i++)
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	801a      	strh	r2, [r3, #0]
 8000a5a:	e01c      	b.n	8000a96 <HAL_ADCEx_InjectedConvCpltCallback+0x92>
			{
				size = sprintf((char*)tmp, "%i\n\r" ,AdcInjected[i]);
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_ADCEx_InjectedConvCpltCallback+0xb8>)
 8000a64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4915      	ldr	r1, [pc, #84]	; (8000ac0 <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 8000a6c:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000a6e:	f003 fb99 	bl	80041a4 <siprintf>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8000a78:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,tmp,size,100);
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	4910      	ldr	r1, [pc, #64]	; (8000ac4 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8000a86:	f003 f892 	bl	8003bae <HAL_UART_Transmit>
			for(i = 0; i< 1024; i++)
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8000a94:	801a      	strh	r2, [r3, #0]
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a9e:	d3dd      	bcc.n	8000a5c <HAL_ADCEx_InjectedConvCpltCallback+0x58>
			}
			i = 1023;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8000aa2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000aa6:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40012000 	.word	0x40012000
 8000ab4:	200000a8 	.word	0x200000a8
 8000ab8:	2000008c 	.word	0x2000008c
 8000abc:	20000150 	.word	0x20000150
 8000ac0:	08004a18 	.word	0x08004a18
 8000ac4:	20000090 	.word	0x20000090
 8000ac8:	20000098 	.word	0x20000098
 8000acc:	200009e4 	.word	0x200009e4

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <HAL_MspInit+0x4c>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b1a:	2007      	movs	r0, #7
 8000b1c:	f001 fb22 	bl	8002164 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 fa1e 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <ADC_IRQHandler+0x10>)
 8000b86:	f000 fa7a 	bl	800107e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000a8 	.word	0x200000a8

08000b94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <DMA2_Stream0_IRQHandler+0x10>)
 8000b9a:	f001 fc2b 	bl	80023f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000f0 	.word	0x200000f0

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f003 fab2 	bl	8004140 <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20020000 	.word	0x20020000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	2000009c 	.word	0x2000009c
 8000c10:	20000a40 	.word	0x20000a40

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c5e:	f240 3247 	movw	r2, #839	; 0x347
 8000c62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c7e:	4814      	ldr	r0, [pc, #80]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c80:	f002 fc4e 	bl	8003520 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c8a:	f7ff ff21 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000c9c:	f002 fcea 	bl	8003674 <HAL_TIM_ConfigClockSource>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ca6:	f7ff ff13 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000caa:	2320      	movs	r3, #32
 8000cac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_TIM2_Init+0x98>)
 8000cb8:	f002 febe 	bl	8003a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cc2:	f7ff ff05 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000099c 	.word	0x2000099c

08000cd4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <MX_TIM4_Init+0x98>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 634;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d04:	f240 227a 	movw	r2, #634	; 0x27a
 8000d08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d16:	4814      	ldr	r0, [pc, #80]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d18:	f002 fc02 	bl	8003520 <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d22:	f7ff fed5 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4619      	mov	r1, r3
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d34:	f002 fc9e 	bl	8003674 <HAL_TIM_ConfigClockSource>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f7ff fec7 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d42:	2320      	movs	r3, #32
 8000d44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_TIM4_Init+0x94>)
 8000d50:	f002 fe72 	bl	8003a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000d5a:	f7ff feb9 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000954 	.word	0x20000954
 8000d6c:	40000800 	.word	0x40000800

08000d70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d80:	d10e      	bne.n	8000da0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_TIM_Base_MspInit+0x64>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <HAL_TIM_Base_MspInit+0x64>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_TIM_Base_MspInit+0x64>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d9e:	e012      	b.n	8000dc6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <HAL_TIM_Base_MspInit+0x68>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10d      	bne.n	8000dc6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_TIM_Base_MspInit+0x64>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_TIM_Base_MspInit+0x64>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_TIM_Base_MspInit+0x64>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40000800 	.word	0x40000800

08000ddc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_USART2_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e14:	f002 fe7e 	bl	8003b14 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f7ff fe57 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200009e4 	.word	0x200009e4
 8000e2c:	40004400 	.word	0x40004400

08000e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12b      	bne.n	8000eaa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000ea6:	f001 fd0f 	bl	80028c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ec6:	490e      	ldr	r1, [pc, #56]	; (8000f00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000edc:	4c0b      	ldr	r4, [pc, #44]	; (8000f0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eea:	f7ff fe93 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eee:	f003 f92d 	bl	800414c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fccf 	bl	8000894 <main>
  bx  lr    
 8000ef6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f04:	08004a84 	.word	0x08004a84
  ldr r2, =_sbss
 8000f08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f0c:	20000a3c 	.word	0x20000a3c

08000f10 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <DMA1_Stream0_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_Init+0x40>)
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_Init+0x40>)
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x40>)
 8000f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f001 f911 	bl	8002164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fdc8 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 f929 	bl	80021ce <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f001 f8f1 	bl	800217a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000a28 	.word	0x20000a28

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000a28 	.word	0x20000a28

08000ff8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e033      	b.n	8001076 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	2b00      	cmp	r3, #0
 8001014:	d109      	bne.n	800102a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fb36 	bl	8000688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	2b00      	cmp	r3, #0
 8001034:	d118      	bne.n	8001068 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800103e:	f023 0302 	bic.w	r3, r3, #2
 8001042:	f043 0202 	orr.w	r2, r3, #2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fb98 	bl	8001780 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f023 0303 	bic.w	r3, r3, #3
 800105e:	f043 0201 	orr.w	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
 8001066:	e001      	b.n	800106c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b084      	sub	sp, #16
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b02      	cmp	r3, #2
 800109a:	bf0c      	ite	eq
 800109c:	2301      	moveq	r3, #1
 800109e:	2300      	movne	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	2b20      	cmp	r3, #32
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d049      	beq.n	8001154 <HAL_ADC_IRQHandler+0xd6>
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d046      	beq.n	8001154 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d105      	bne.n	80010de <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d12b      	bne.n	8001144 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d127      	bne.n	8001144 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800110c:	2b00      	cmp	r3, #0
 800110e:	d119      	bne.n	8001144 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0220 	bic.w	r2, r2, #32
 800111e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d105      	bne.n	8001144 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f043 0201 	orr.w	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff fc47 	bl	80009d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f06f 0212 	mvn.w	r2, #18
 8001152:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001174:	2b80      	cmp	r3, #128	; 0x80
 8001176:	bf0c      	ite	eq
 8001178:	2301      	moveq	r3, #1
 800117a:	2300      	movne	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d057      	beq.n	8001236 <HAL_ADC_IRQHandler+0x1b8>
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d054      	beq.n	8001236 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d139      	bne.n	8001226 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12b      	bne.n	8001226 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d124      	bne.n	8001226 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d11d      	bne.n	8001226 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d119      	bne.n	8001226 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001200:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001216:	2b00      	cmp	r3, #0
 8001218:	d105      	bne.n	8001226 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fbec 	bl	8000a04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f06f 020c 	mvn.w	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b01      	cmp	r3, #1
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001256:	2b40      	cmp	r3, #64	; 0x40
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d017      	beq.n	8001298 <HAL_ADC_IRQHandler+0x21a>
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d014      	beq.n	8001298 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b01      	cmp	r3, #1
 800127a:	d10d      	bne.n	8001298 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f933 	bl	80014f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f06f 0201 	mvn.w	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0320 	and.w	r3, r3, #32
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	bf0c      	ite	eq
 80012a6:	2301      	moveq	r3, #1
 80012a8:	2300      	movne	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80012bc:	bf0c      	ite	eq
 80012be:	2301      	moveq	r3, #1
 80012c0:	2300      	movne	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d015      	beq.n	80012f8 <HAL_ADC_IRQHandler+0x27a>
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d012      	beq.n	80012f8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f043 0202 	orr.w	r2, r3, #2
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f06f 0220 	mvn.w	r2, #32
 80012e6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f90d 	bl	8001508 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f06f 0220 	mvn.w	r2, #32
 80012f6:	601a      	str	r2, [r3, #0]
  }
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_ADC_Start_DMA+0x1e>
 800131a:	2302      	movs	r3, #2
 800131c:	e0ce      	b.n	80014bc <HAL_ADC_Start_DMA+0x1bc>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d018      	beq.n	8001366 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0201 	orr.w	r2, r2, #1
 8001342:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001344:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <HAL_ADC_Start_DMA+0x1c4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a5f      	ldr	r2, [pc, #380]	; (80014c8 <HAL_ADC_Start_DMA+0x1c8>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0c9a      	lsrs	r2, r3, #18
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001358:	e002      	b.n	8001360 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	3b01      	subs	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f9      	bne.n	800135a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001374:	d107      	bne.n	8001386 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001384:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b01      	cmp	r3, #1
 8001392:	f040 8086 	bne.w	80014a2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d007      	beq.n	80013c8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013d4:	d106      	bne.n	80013e4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f023 0206 	bic.w	r2, r3, #6
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	645a      	str	r2, [r3, #68]	; 0x44
 80013e2:	e002      	b.n	80013ea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_ADC_Start_DMA+0x1cc>)
 80013f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fa:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <HAL_ADC_Start_DMA+0x1d0>)
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001402:	4a34      	ldr	r2, [pc, #208]	; (80014d4 <HAL_ADC_Start_DMA+0x1d4>)
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <HAL_ADC_Start_DMA+0x1d8>)
 800140c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001416:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001426:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001436:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	334c      	adds	r3, #76	; 0x4c
 8001442:	4619      	mov	r1, r3
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f000 ff7c 	bl	8002344 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10f      	bne.n	8001478 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d129      	bne.n	80014ba <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	e020      	b.n	80014ba <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_ADC_Start_DMA+0x1dc>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d11b      	bne.n	80014ba <HAL_ADC_Start_DMA+0x1ba>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d114      	bne.n	80014ba <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	e00b      	b.n	80014ba <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f043 0210 	orr.w	r2, r3, #16
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f043 0201 	orr.w	r2, r3, #1
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000000 	.word	0x20000000
 80014c8:	431bde83 	.word	0x431bde83
 80014cc:	40012300 	.word	0x40012300
 80014d0:	08001979 	.word	0x08001979
 80014d4:	08001a33 	.word	0x08001a33
 80014d8:	08001a4f 	.word	0x08001a4f
 80014dc:	40012000 	.word	0x40012000

080014e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x1c>
 8001534:	2302      	movs	r3, #2
 8001536:	e113      	b.n	8001760 <HAL_ADC_ConfigChannel+0x244>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b09      	cmp	r3, #9
 8001546:	d925      	bls.n	8001594 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68d9      	ldr	r1, [r3, #12]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	3b1e      	subs	r3, #30
 800155e:	2207      	movs	r2, #7
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43da      	mvns	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	400a      	ands	r2, r1
 800156c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68d9      	ldr	r1, [r3, #12]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	4603      	mov	r3, r0
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4403      	add	r3, r0
 8001586:	3b1e      	subs	r3, #30
 8001588:	409a      	lsls	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	e022      	b.n	80015da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6919      	ldr	r1, [r3, #16]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	2207      	movs	r2, #7
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	400a      	ands	r2, r1
 80015b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6919      	ldr	r1, [r3, #16]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4403      	add	r3, r0
 80015d0:	409a      	lsls	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d824      	bhi.n	800162c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	3b05      	subs	r3, #5
 80015f4:	221f      	movs	r2, #31
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	400a      	ands	r2, r1
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	3b05      	subs	r3, #5
 800161e:	fa00 f203 	lsl.w	r2, r0, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
 800162a:	e04c      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b0c      	cmp	r3, #12
 8001632:	d824      	bhi.n	800167e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3b23      	subs	r3, #35	; 0x23
 8001646:	221f      	movs	r2, #31
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43da      	mvns	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	400a      	ands	r2, r1
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b23      	subs	r3, #35	; 0x23
 8001670:	fa00 f203 	lsl.w	r2, r0, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
 800167c:	e023      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3b41      	subs	r3, #65	; 0x41
 8001690:	221f      	movs	r2, #31
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	400a      	ands	r2, r1
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3b41      	subs	r3, #65	; 0x41
 80016ba:	fa00 f203 	lsl.w	r2, r0, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_ADC_ConfigChannel+0x250>)
 80016c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a28      	ldr	r2, [pc, #160]	; (8001770 <HAL_ADC_ConfigChannel+0x254>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d10f      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1d8>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b12      	cmp	r3, #18
 80016da:	d10b      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_ADC_ConfigChannel+0x254>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12b      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x23a>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <HAL_ADC_ConfigChannel+0x258>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d003      	beq.n	8001710 <HAL_ADC_ConfigChannel+0x1f4>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b11      	cmp	r3, #17
 800170e:	d122      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a11      	ldr	r2, [pc, #68]	; (8001774 <HAL_ADC_ConfigChannel+0x258>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d111      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_ADC_ConfigChannel+0x25c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a11      	ldr	r2, [pc, #68]	; (800177c <HAL_ADC_ConfigChannel+0x260>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	0c9a      	lsrs	r2, r3, #18
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001748:	e002      	b.n	8001750 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3b01      	subs	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f9      	bne.n	800174a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40012300 	.word	0x40012300
 8001770:	40012000 	.word	0x40012000
 8001774:	10000012 	.word	0x10000012
 8001778:	20000000 	.word	0x20000000
 800177c:	431bde83 	.word	0x431bde83

08001780 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001788:	4b79      	ldr	r3, [pc, #484]	; (8001970 <ADC_Init+0x1f0>)
 800178a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	021a      	lsls	r2, r3, #8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6899      	ldr	r1, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	4a58      	ldr	r2, [pc, #352]	; (8001974 <ADC_Init+0x1f4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d022      	beq.n	800185e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6899      	ldr	r1, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6899      	ldr	r1, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	e00f      	b.n	800187e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800186c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800187c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0202 	bic.w	r2, r2, #2
 800188c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6899      	ldr	r1, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e1b      	ldrb	r3, [r3, #24]
 8001898:	005a      	lsls	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01b      	beq.n	80018e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6859      	ldr	r1, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	3b01      	subs	r3, #1
 80018d8:	035a      	lsls	r2, r3, #13
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	e007      	b.n	80018f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	3b01      	subs	r3, #1
 8001910:	051a      	lsls	r2, r3, #20
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6899      	ldr	r1, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001936:	025a      	lsls	r2, r3, #9
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800194e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6899      	ldr	r1, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	029a      	lsls	r2, r3, #10
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	609a      	str	r2, [r3, #8]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40012300 	.word	0x40012300
 8001974:	0f000001 	.word	0x0f000001

08001978 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800198e:	2b00      	cmp	r3, #0
 8001990:	d13c      	bne.n	8001a0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d12b      	bne.n	8001a04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d127      	bne.n	8001a04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d119      	bne.n	8001a04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0220 	bic.w	r2, r2, #32
 80019de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7fe ffe7 	bl	80009d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a0a:	e00e      	b.n	8001a2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff fd75 	bl	8001508 <HAL_ADC_ErrorCallback>
}
 8001a1e:	e004      	b.n	8001a2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff fd4d 	bl	80014e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f043 0204 	orr.w	r2, r3, #4
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff fd4a 	bl	8001508 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ADCEx_InjectedStart_IT+0x22>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e0b2      	b.n	8001c04 <HAL_ADCEx_InjectedStart_IT+0x188>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d018      	beq.n	8001ae6 <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac4:	4b52      	ldr	r3, [pc, #328]	; (8001c10 <HAL_ADCEx_InjectedStart_IT+0x194>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_ADCEx_InjectedStart_IT+0x198>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9a      	lsrs	r2, r3, #18
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ad8:	e002      	b.n	8001ae0 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d17a      	bne.n	8001bea <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f06f 0204 	mvn.w	r2, #4
 8001b2a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b3a:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_ADCEx_InjectedStart_IT+0x19c>)
 8001b3e:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d124      	bne.n	8001b96 <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bf0c      	ite	eq
 8001b5a:	2301      	moveq	r3, #1
 8001b5c:	2300      	movne	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf0c      	ite	eq
 8001b70:	2301      	moveq	r3, #1
 8001b72:	2300      	movne	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d041      	beq.n	8001c02 <HAL_ADCEx_InjectedStart_IT+0x186>
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d03e      	beq.n	8001c02 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	e035      	b.n	8001c02 <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf0c      	ite	eq
 8001bba:	2301      	moveq	r3, #1
 8001bbc:	2300      	movne	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d11a      	bne.n	8001c02 <HAL_ADCEx_InjectedStart_IT+0x186>
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d017      	beq.n	8001c02 <HAL_ADCEx_InjectedStart_IT+0x186>
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d014      	beq.n	8001c02 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	e00b      	b.n	8001c02 <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f043 0210 	orr.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	20000000 	.word	0x20000000
 8001c14:	431bde83 	.word	0x431bde83
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	40012000 	.word	0x40012000

08001c20 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f06f 0204 	mvn.w	r2, #4
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d81f      	bhi.n	8001c80 <HAL_ADCEx_InjectedGetValue+0x60>
 8001c40:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <HAL_ADCEx_InjectedGetValue+0x28>)
 8001c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c46:	bf00      	nop
 8001c48:	08001c77 	.word	0x08001c77
 8001c4c:	08001c6d 	.word	0x08001c6d
 8001c50:	08001c63 	.word	0x08001c63
 8001c54:	08001c59 	.word	0x08001c59
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5e:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001c60:	e00f      	b.n	8001c82 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001c6a:	e00a      	b.n	8001c82 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001c74:	e005      	b.n	8001c82 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001c7e:	e000      	b.n	8001c82 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001c80:	bf00      	nop
  }
  return tmp;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e17e      	b.n	8001fa6 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	d925      	bls.n	8001d04 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68d9      	ldr	r1, [r3, #12]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b1e      	subs	r3, #30
 8001cce:	2207      	movs	r2, #7
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43da      	mvns	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	400a      	ands	r2, r1
 8001cdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68d9      	ldr	r1, [r3, #12]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4403      	add	r3, r0
 8001cf6:	3b1e      	subs	r3, #30
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	e022      	b.n	8001d4a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6919      	ldr	r1, [r3, #16]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	2207      	movs	r2, #7
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	400a      	ands	r2, r1
 8001d26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6919      	ldr	r1, [r3, #16]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4403      	add	r3, r0
 8001d40:	409a      	lsls	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	051a      	lsls	r2, r3, #20
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	3303      	adds	r3, #3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	221f      	movs	r2, #31
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	400a      	ands	r2, r1
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	3303      	adds	r3, #3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a75      	ldr	r2, [pc, #468]	; (8001fb4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d022      	beq.n	8001e28 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6899      	ldr	r1, [r3, #8]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	e00f      	b.n	8001e48 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e46:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	7d5b      	ldrb	r3, [r3, #21]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	e007      	b.n	8001e72 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e70:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	7d1b      	ldrb	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	e007      	b.n	8001e9c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e9a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d02e      	beq.n	8001f02 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d840      	bhi.n	8001f2a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d002      	beq.n	8001eb2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d014      	beq.n	8001eda <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8001eb0:	e03b      	b.n	8001f2a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001ec0:	f023 030f 	bic.w	r3, r3, #15
 8001ec4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6959      	ldr	r1, [r3, #20]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	615a      	str	r2, [r3, #20]
      break;
 8001ed8:	e03b      	b.n	8001f52 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001ee8:	f023 030f 	bic.w	r3, r3, #15
 8001eec:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6999      	ldr	r1, [r3, #24]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	619a      	str	r2, [r3, #24]
      break;
 8001f00:	e027      	b.n	8001f52 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f10:	f023 030f 	bic.w	r3, r3, #15
 8001f14:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69d9      	ldr	r1, [r3, #28]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	61da      	str	r2, [r3, #28]
      break;
 8001f28:	e013      	b.n	8001f52 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f38:	f023 030f 	bic.w	r3, r3, #15
 8001f3c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a19      	ldr	r1, [r3, #32]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	621a      	str	r2, [r3, #32]
      break;
 8001f50:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8001f54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d109      	bne.n	8001f74 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b12      	cmp	r3, #18
 8001f66:	d105      	bne.n	8001f74 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10e      	bne.n	8001f9c <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d003      	beq.n	8001f90 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b11      	cmp	r3, #17
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	000f0001 	.word	0x000f0001
 8001fb8:	40012300 	.word	0x40012300
 8001fbc:	40012000 	.word	0x40012000
 8001fc0:	10000012 	.word	0x10000012

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4907      	ldr	r1, [pc, #28]	; (8002060 <__NVIC_EnableIRQ+0x38>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	; (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf28      	it	cs
 80020d6:	2304      	movcs	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3304      	adds	r3, #4
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d902      	bls.n	80020e8 <NVIC_EncodePriority+0x30>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b03      	subs	r3, #3
 80020e6:	e000      	b.n	80020ea <NVIC_EncodePriority+0x32>
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43d9      	mvns	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	4313      	orrs	r3, r2
         );
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002130:	d301      	bcc.n	8002136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002132:	2301      	movs	r3, #1
 8002134:	e00f      	b.n	8002156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <SysTick_Config+0x40>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213e:	210f      	movs	r1, #15
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f7ff ff8e 	bl	8002064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SysTick_Config+0x40>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SysTick_Config+0x40>)
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff29 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800218c:	f7ff ff3e 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7ff ff8e 	bl	80020b8 <NVIC_EncodePriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff5d 	bl	8002064 <__NVIC_SetPriority>
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff31 	bl	8002028 <__NVIC_EnableIRQ>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ffa2 	bl	8002120 <SysTick_Config>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7fe fef4 	bl	8000fe0 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e099      	b.n	8002338 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002224:	e00f      	b.n	8002246 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002226:	f7fe fedb 	bl	8000fe0 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b05      	cmp	r3, #5
 8002232:	d908      	bls.n	8002246 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2203      	movs	r2, #3
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e078      	b.n	8002338 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e8      	bne.n	8002226 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	4b38      	ldr	r3, [pc, #224]	; (8002340 <HAL_DMA_Init+0x158>)
 8002260:	4013      	ands	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002272:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2b04      	cmp	r3, #4
 800229e:	d107      	bne.n	80022b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	4313      	orrs	r3, r2
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f023 0307 	bic.w	r3, r3, #7
 80022c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d117      	bne.n	800230a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00e      	beq.n	800230a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fa6f 	bl	80027d0 <DMA_CheckFifoParam>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2240      	movs	r2, #64	; 0x40
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002306:	2301      	movs	r3, #1
 8002308:	e016      	b.n	8002338 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa26 	bl	8002764 <DMA_CalcBaseAndBitshift>
 8002318:	4603      	mov	r3, r0
 800231a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	223f      	movs	r2, #63	; 0x3f
 8002322:	409a      	lsls	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	f010803f 	.word	0xf010803f

08002344 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_DMA_Start_IT+0x26>
 8002366:	2302      	movs	r3, #2
 8002368:	e040      	b.n	80023ec <HAL_DMA_Start_IT+0xa8>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d12f      	bne.n	80023de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2202      	movs	r2, #2
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f9b8 	bl	8002708 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	223f      	movs	r2, #63	; 0x3f
 800239e:	409a      	lsls	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0216 	orr.w	r2, r2, #22
 80023b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0208 	orr.w	r2, r2, #8
 80023ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e005      	b.n	80023ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002400:	4b92      	ldr	r3, [pc, #584]	; (800264c <HAL_DMA_IRQHandler+0x258>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a92      	ldr	r2, [pc, #584]	; (8002650 <HAL_DMA_IRQHandler+0x25c>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0a9b      	lsrs	r3, r3, #10
 800240c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	2208      	movs	r2, #8
 8002420:	409a      	lsls	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d01a      	beq.n	8002460 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0204 	bic.w	r2, r2, #4
 8002446:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	2208      	movs	r2, #8
 800244e:	409a      	lsls	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002464:	2201      	movs	r2, #1
 8002466:	409a      	lsls	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	2201      	movs	r2, #1
 8002484:	409a      	lsls	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	f043 0202 	orr.w	r2, r3, #2
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	2204      	movs	r2, #4
 800249c:	409a      	lsls	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	2204      	movs	r2, #4
 80024ba:	409a      	lsls	r2, r3
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f043 0204 	orr.w	r2, r3, #4
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	2210      	movs	r2, #16
 80024d2:	409a      	lsls	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d043      	beq.n	8002564 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d03c      	beq.n	8002564 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	2210      	movs	r2, #16
 80024f0:	409a      	lsls	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d018      	beq.n	8002536 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d108      	bne.n	8002524 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d024      	beq.n	8002564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	4798      	blx	r3
 8002522:	e01f      	b.n	8002564 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01b      	beq.n	8002564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
 8002534:	e016      	b.n	8002564 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0208 	bic.w	r2, r2, #8
 8002552:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	2220      	movs	r2, #32
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 808e 	beq.w	8002692 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8086 	beq.w	8002692 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	2220      	movs	r2, #32
 800258c:	409a      	lsls	r2, r3
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b05      	cmp	r3, #5
 800259c:	d136      	bne.n	800260c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0216 	bic.w	r2, r2, #22
 80025ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_DMA_IRQHandler+0x1da>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0208 	bic.w	r2, r2, #8
 80025dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	223f      	movs	r2, #63	; 0x3f
 80025e4:	409a      	lsls	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d07d      	beq.n	80026fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
        }
        return;
 800260a:	e078      	b.n	80026fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01c      	beq.n	8002654 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d108      	bne.n	800263a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	2b00      	cmp	r3, #0
 800262e:	d030      	beq.n	8002692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4798      	blx	r3
 8002638:	e02b      	b.n	8002692 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	2b00      	cmp	r3, #0
 8002640:	d027      	beq.n	8002692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
 800264a:	e022      	b.n	8002692 <HAL_DMA_IRQHandler+0x29e>
 800264c:	20000000 	.word	0x20000000
 8002650:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10f      	bne.n	8002682 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0210 	bic.w	r2, r2, #16
 8002670:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	2b00      	cmp	r3, #0
 8002698:	d032      	beq.n	8002700 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d022      	beq.n	80026ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2205      	movs	r2, #5
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d307      	bcc.n	80026da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f2      	bne.n	80026be <HAL_DMA_IRQHandler+0x2ca>
 80026d8:	e000      	b.n	80026dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
 80026fc:	e000      	b.n	8002700 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026fe:	bf00      	nop
    }
  }
}
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop

08002708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002724:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b40      	cmp	r3, #64	; 0x40
 8002734:	d108      	bne.n	8002748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002746:	e007      	b.n	8002758 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	60da      	str	r2, [r3, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	3b10      	subs	r3, #16
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800277e:	4a13      	ldr	r2, [pc, #76]	; (80027cc <DMA_CalcBaseAndBitshift+0x68>)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d909      	bls.n	80027a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800279a:	f023 0303 	bic.w	r3, r3, #3
 800279e:	1d1a      	adds	r2, r3, #4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	659a      	str	r2, [r3, #88]	; 0x58
 80027a4:	e007      	b.n	80027b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ae:	f023 0303 	bic.w	r3, r3, #3
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	aaaaaaab 	.word	0xaaaaaaab
 80027cc:	08004a38 	.word	0x08004a38

080027d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d11f      	bne.n	800282a <DMA_CheckFifoParam+0x5a>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d856      	bhi.n	800289e <DMA_CheckFifoParam+0xce>
 80027f0:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <DMA_CheckFifoParam+0x28>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	08002809 	.word	0x08002809
 80027fc:	0800281b 	.word	0x0800281b
 8002800:	08002809 	.word	0x08002809
 8002804:	0800289f 	.word	0x0800289f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d046      	beq.n	80028a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002818:	e043      	b.n	80028a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002822:	d140      	bne.n	80028a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002828:	e03d      	b.n	80028a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002832:	d121      	bne.n	8002878 <DMA_CheckFifoParam+0xa8>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b03      	cmp	r3, #3
 8002838:	d837      	bhi.n	80028aa <DMA_CheckFifoParam+0xda>
 800283a:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <DMA_CheckFifoParam+0x70>)
 800283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002840:	08002851 	.word	0x08002851
 8002844:	08002857 	.word	0x08002857
 8002848:	08002851 	.word	0x08002851
 800284c:	08002869 	.word	0x08002869
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      break;
 8002854:	e030      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d025      	beq.n	80028ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002866:	e022      	b.n	80028ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002870:	d11f      	bne.n	80028b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002876:	e01c      	b.n	80028b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d903      	bls.n	8002886 <DMA_CheckFifoParam+0xb6>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d003      	beq.n	800288c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002884:	e018      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
      break;
 800288a:	e015      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00e      	beq.n	80028b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      break;
 800289c:	e00b      	b.n	80028b6 <DMA_CheckFifoParam+0xe6>
      break;
 800289e:	bf00      	nop
 80028a0:	e00a      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
      break;
 80028a2:	bf00      	nop
 80028a4:	e008      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
      break;
 80028a6:	bf00      	nop
 80028a8:	e006      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
      break;
 80028aa:	bf00      	nop
 80028ac:	e004      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ae:	bf00      	nop
 80028b0:	e002      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
      break;
 80028b6:	bf00      	nop
    }
  } 
  
  return status; 
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop

080028c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	e159      	b.n	8002b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e4:	2201      	movs	r2, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	f040 8148 	bne.w	8002b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d005      	beq.n	800291a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002916:	2b02      	cmp	r3, #2
 8002918:	d130      	bne.n	800297c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 0201 	and.w	r2, r3, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b03      	cmp	r3, #3
 8002986:	d017      	beq.n	80029b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d123      	bne.n	8002a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	08da      	lsrs	r2, r3, #3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3208      	adds	r2, #8
 80029cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	220f      	movs	r2, #15
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	08da      	lsrs	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3208      	adds	r2, #8
 8002a06:	69b9      	ldr	r1, [r7, #24]
 8002a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0203 	and.w	r2, r3, #3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80a2 	beq.w	8002b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b57      	ldr	r3, [pc, #348]	; (8002bb0 <HAL_GPIO_Init+0x2e8>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a56      	ldr	r2, [pc, #344]	; (8002bb0 <HAL_GPIO_Init+0x2e8>)
 8002a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b54      	ldr	r3, [pc, #336]	; (8002bb0 <HAL_GPIO_Init+0x2e8>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6a:	4a52      	ldr	r2, [pc, #328]	; (8002bb4 <HAL_GPIO_Init+0x2ec>)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a49      	ldr	r2, [pc, #292]	; (8002bb8 <HAL_GPIO_Init+0x2f0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d019      	beq.n	8002aca <HAL_GPIO_Init+0x202>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a48      	ldr	r2, [pc, #288]	; (8002bbc <HAL_GPIO_Init+0x2f4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_GPIO_Init+0x1fe>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a47      	ldr	r2, [pc, #284]	; (8002bc0 <HAL_GPIO_Init+0x2f8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00d      	beq.n	8002ac2 <HAL_GPIO_Init+0x1fa>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a46      	ldr	r2, [pc, #280]	; (8002bc4 <HAL_GPIO_Init+0x2fc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d007      	beq.n	8002abe <HAL_GPIO_Init+0x1f6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a45      	ldr	r2, [pc, #276]	; (8002bc8 <HAL_GPIO_Init+0x300>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_GPIO_Init+0x1f2>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002aba:	2307      	movs	r3, #7
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002aca:	2300      	movs	r3, #0
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f002 0203 	and.w	r2, r2, #3
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002adc:	4935      	ldr	r1, [pc, #212]	; (8002bb4 <HAL_GPIO_Init+0x2ec>)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aea:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <HAL_GPIO_Init+0x304>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b0e:	4a2f      	ldr	r2, [pc, #188]	; (8002bcc <HAL_GPIO_Init+0x304>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b14:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_GPIO_Init+0x304>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b38:	4a24      	ldr	r2, [pc, #144]	; (8002bcc <HAL_GPIO_Init+0x304>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <HAL_GPIO_Init+0x304>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b62:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <HAL_GPIO_Init+0x304>)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_GPIO_Init+0x304>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <HAL_GPIO_Init+0x304>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3301      	adds	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b0f      	cmp	r3, #15
 8002b9c:	f67f aea2 	bls.w	80028e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3724      	adds	r7, #36	; 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	40020c00 	.word	0x40020c00
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40013c00 	.word	0x40013c00

08002bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be0:	787b      	ldrb	r3, [r7, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c14:	887a      	ldrh	r2, [r7, #2]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	041a      	lsls	r2, r3, #16
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	400b      	ands	r3, r1
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e264      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d075      	beq.n	8002d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c56:	4ba3      	ldr	r3, [pc, #652]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d00c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c62:	4ba0      	ldr	r3, [pc, #640]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d112      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6e:	4b9d      	ldr	r3, [pc, #628]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7a:	d10b      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	4b99      	ldr	r3, [pc, #612]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d05b      	beq.n	8002d40 <HAL_RCC_OscConfig+0x108>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d157      	bne.n	8002d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e23f      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d106      	bne.n	8002cac <HAL_RCC_OscConfig+0x74>
 8002c9e:	4b91      	ldr	r3, [pc, #580]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a90      	ldr	r2, [pc, #576]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e01d      	b.n	8002ce8 <HAL_RCC_OscConfig+0xb0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x98>
 8002cb6:	4b8b      	ldr	r3, [pc, #556]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a8a      	ldr	r2, [pc, #552]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b88      	ldr	r3, [pc, #544]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a87      	ldr	r2, [pc, #540]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0xb0>
 8002cd0:	4b84      	ldr	r3, [pc, #528]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a83      	ldr	r2, [pc, #524]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b81      	ldr	r3, [pc, #516]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a80      	ldr	r2, [pc, #512]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe f976 	bl	8000fe0 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe f972 	bl	8000fe0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e204      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b76      	ldr	r3, [pc, #472]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xc0>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe f962 	bl	8000fe0 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe f95e 	bl	8000fe0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1f0      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d32:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0xe8>
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d063      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d11c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d66:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d116      	bne.n	8002da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	4b5c      	ldr	r3, [pc, #368]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_RCC_OscConfig+0x152>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e1c4      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8a:	4b56      	ldr	r3, [pc, #344]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4952      	ldr	r1, [pc, #328]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	e03a      	b.n	8002e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d020      	beq.n	8002dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da8:	4b4f      	ldr	r3, [pc, #316]	; (8002ee8 <HAL_RCC_OscConfig+0x2b0>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fe f917 	bl	8000fe0 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db6:	f7fe f913 	bl	8000fe0 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e1a5      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc8:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b43      	ldr	r3, [pc, #268]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4940      	ldr	r1, [pc, #256]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]
 8002de8:	e015      	b.n	8002e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_OscConfig+0x2b0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe f8f6 	bl	8000fe0 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df8:	f7fe f8f2 	bl	8000fe0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e184      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0a:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d030      	beq.n	8002e84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2a:	4b30      	ldr	r3, [pc, #192]	; (8002eec <HAL_RCC_OscConfig+0x2b4>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe f8d6 	bl	8000fe0 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fe f8d2 	bl	8000fe0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e164      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4a:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x200>
 8002e56:	e015      	b.n	8002e84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x2b4>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe f8bf 	bl	8000fe0 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e66:	f7fe f8bb 	bl	8000fe0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e14d      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a0 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x2b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d121      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_RCC_OscConfig+0x2b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <HAL_RCC_OscConfig+0x2b8>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eda:	f7fe f881 	bl	8000fe0 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	e011      	b.n	8002f06 <HAL_RCC_OscConfig+0x2ce>
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	42470000 	.word	0x42470000
 8002eec:	42470e80 	.word	0x42470e80
 8002ef0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef4:	f7fe f874 	bl	8000fe0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e106      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b85      	ldr	r3, [pc, #532]	; (800311c <HAL_RCC_OscConfig+0x4e4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d106      	bne.n	8002f28 <HAL_RCC_OscConfig+0x2f0>
 8002f1a:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a80      	ldr	r2, [pc, #512]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	e01c      	b.n	8002f62 <HAL_RCC_OscConfig+0x32a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCC_OscConfig+0x312>
 8002f30:	4b7b      	ldr	r3, [pc, #492]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a7a      	ldr	r2, [pc, #488]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3c:	4b78      	ldr	r3, [pc, #480]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a77      	ldr	r2, [pc, #476]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	e00b      	b.n	8002f62 <HAL_RCC_OscConfig+0x32a>
 8002f4a:	4b75      	ldr	r3, [pc, #468]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a74      	ldr	r2, [pc, #464]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
 8002f56:	4b72      	ldr	r3, [pc, #456]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	4a71      	ldr	r2, [pc, #452]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d015      	beq.n	8002f96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7fe f839 	bl	8000fe0 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fe f835 	bl	8000fe0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0c5      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	4b65      	ldr	r3, [pc, #404]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ee      	beq.n	8002f72 <HAL_RCC_OscConfig+0x33a>
 8002f94:	e014      	b.n	8002fc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe f823 	bl	8000fe0 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe f81f 	bl	8000fe0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0af      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	4b5a      	ldr	r3, [pc, #360]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d105      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc6:	4b56      	ldr	r3, [pc, #344]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a55      	ldr	r2, [pc, #340]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 809b 	beq.w	8003112 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fdc:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d05c      	beq.n	80030a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d141      	bne.n	8003074 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <HAL_RCC_OscConfig+0x4ec>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fd fff3 	bl	8000fe0 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fd ffef 	bl	8000fe0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e081      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003010:	4b43      	ldr	r3, [pc, #268]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	019b      	lsls	r3, r3, #6
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	041b      	lsls	r3, r3, #16
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	061b      	lsls	r3, r3, #24
 8003040:	4937      	ldr	r1, [pc, #220]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003046:	4b37      	ldr	r3, [pc, #220]	; (8003124 <HAL_RCC_OscConfig+0x4ec>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fd ffc8 	bl	8000fe0 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003054:	f7fd ffc4 	bl	8000fe0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e056      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x41c>
 8003072:	e04e      	b.n	8003112 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <HAL_RCC_OscConfig+0x4ec>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fd ffb1 	bl	8000fe0 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7fd ffad 	bl	8000fe0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e03f      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x44a>
 80030a0:	e037      	b.n	8003112 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e032      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_RCC_OscConfig+0x4e8>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d028      	beq.n	800310e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d121      	bne.n	800310e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d11a      	bne.n	800310e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030de:	4013      	ands	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d111      	bne.n	800310e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	3b01      	subs	r3, #1
 80030f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d107      	bne.n	800310e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40007000 	.word	0x40007000
 8003120:	40023800 	.word	0x40023800
 8003124:	42470060 	.word	0x42470060

08003128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0cc      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800313c:	4b68      	ldr	r3, [pc, #416]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d90c      	bls.n	8003164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0b8      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800317c:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800319e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	494d      	ldr	r1, [pc, #308]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d044      	beq.n	8003248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d119      	bne.n	8003206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e07f      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d003      	beq.n	80031e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e06f      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e067      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003206:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 0203 	bic.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4934      	ldr	r1, [pc, #208]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003218:	f7fd fee2 	bl	8000fe0 <HAL_GetTick>
 800321c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	e00a      	b.n	8003236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003220:	f7fd fede 	bl	8000fe0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e04f      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 020c 	and.w	r2, r3, #12
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	429a      	cmp	r2, r3
 8003246:	d1eb      	bne.n	8003220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003248:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d20c      	bcs.n	8003270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e032      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4916      	ldr	r1, [pc, #88]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	490e      	ldr	r1, [pc, #56]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ae:	f000 f821 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	490a      	ldr	r1, [pc, #40]	; (80032e8 <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	5ccb      	ldrb	r3, [r1, r3]
 80032c2:	fa22 f303 	lsr.w	r3, r2, r3
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fe42 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023c00 	.word	0x40023c00
 80032e4:	40023800 	.word	0x40023800
 80032e8:	08004a20 	.word	0x08004a20
 80032ec:	20000000 	.word	0x20000000
 80032f0:	20000004 	.word	0x20000004

080032f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	2300      	movs	r3, #0
 8003306:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800330c:	4b67      	ldr	r3, [pc, #412]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b08      	cmp	r3, #8
 8003316:	d00d      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x40>
 8003318:	2b08      	cmp	r3, #8
 800331a:	f200 80bd 	bhi.w	8003498 <HAL_RCC_GetSysClockFreq+0x1a4>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x34>
 8003322:	2b04      	cmp	r3, #4
 8003324:	d003      	beq.n	800332e <HAL_RCC_GetSysClockFreq+0x3a>
 8003326:	e0b7      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003328:	4b61      	ldr	r3, [pc, #388]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800332a:	60bb      	str	r3, [r7, #8]
       break;
 800332c:	e0b7      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800332e:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003330:	60bb      	str	r3, [r7, #8]
      break;
 8003332:	e0b4      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003334:	4b5d      	ldr	r3, [pc, #372]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800333c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800333e:	4b5b      	ldr	r3, [pc, #364]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d04d      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334a:	4b58      	ldr	r3, [pc, #352]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	099b      	lsrs	r3, r3, #6
 8003350:	461a      	mov	r2, r3
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	f240 10ff 	movw	r0, #511	; 0x1ff
 800335a:	f04f 0100 	mov.w	r1, #0
 800335e:	ea02 0800 	and.w	r8, r2, r0
 8003362:	ea03 0901 	and.w	r9, r3, r1
 8003366:	4640      	mov	r0, r8
 8003368:	4649      	mov	r1, r9
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	014b      	lsls	r3, r1, #5
 8003374:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003378:	0142      	lsls	r2, r0, #5
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	ebb0 0008 	subs.w	r0, r0, r8
 8003382:	eb61 0109 	sbc.w	r1, r1, r9
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	018b      	lsls	r3, r1, #6
 8003390:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003394:	0182      	lsls	r2, r0, #6
 8003396:	1a12      	subs	r2, r2, r0
 8003398:	eb63 0301 	sbc.w	r3, r3, r1
 800339c:	f04f 0000 	mov.w	r0, #0
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	00d9      	lsls	r1, r3, #3
 80033a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033aa:	00d0      	lsls	r0, r2, #3
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	eb12 0208 	adds.w	r2, r2, r8
 80033b4:	eb43 0309 	adc.w	r3, r3, r9
 80033b8:	f04f 0000 	mov.w	r0, #0
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	0259      	lsls	r1, r3, #9
 80033c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033c6:	0250      	lsls	r0, r2, #9
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	461a      	mov	r2, r3
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	f7fc ff52 	bl	8000280 <__aeabi_uldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4613      	mov	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e04a      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e6:	4b31      	ldr	r3, [pc, #196]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	099b      	lsrs	r3, r3, #6
 80033ec:	461a      	mov	r2, r3
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	ea02 0400 	and.w	r4, r2, r0
 80033fe:	ea03 0501 	and.w	r5, r3, r1
 8003402:	4620      	mov	r0, r4
 8003404:	4629      	mov	r1, r5
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	014b      	lsls	r3, r1, #5
 8003410:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003414:	0142      	lsls	r2, r0, #5
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	1b00      	subs	r0, r0, r4
 800341c:	eb61 0105 	sbc.w	r1, r1, r5
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	018b      	lsls	r3, r1, #6
 800342a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800342e:	0182      	lsls	r2, r0, #6
 8003430:	1a12      	subs	r2, r2, r0
 8003432:	eb63 0301 	sbc.w	r3, r3, r1
 8003436:	f04f 0000 	mov.w	r0, #0
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	00d9      	lsls	r1, r3, #3
 8003440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003444:	00d0      	lsls	r0, r2, #3
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	1912      	adds	r2, r2, r4
 800344c:	eb45 0303 	adc.w	r3, r5, r3
 8003450:	f04f 0000 	mov.w	r0, #0
 8003454:	f04f 0100 	mov.w	r1, #0
 8003458:	0299      	lsls	r1, r3, #10
 800345a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800345e:	0290      	lsls	r0, r2, #10
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	f7fc ff06 	bl	8000280 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	3301      	adds	r3, #1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	60bb      	str	r3, [r7, #8]
      break;
 8003496:	e002      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800349a:	60bb      	str	r3, [r7, #8]
      break;
 800349c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349e:	68bb      	ldr	r3, [r7, #8]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	007a1200 	.word	0x007a1200

080034b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_RCC_GetHCLKFreq+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000000 	.word	0x20000000

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d4:	f7ff fff0 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0a9b      	lsrs	r3, r3, #10
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08004a30 	.word	0x08004a30

080034f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034fc:	f7ff ffdc 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0b5b      	lsrs	r3, r3, #13
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	; (800351c <HAL_RCC_GetPCLK2Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800
 800351c:	08004a30 	.word	0x08004a30

08003520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e041      	b.n	80035b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fd fc12 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f000 f950 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d001      	beq.n	80035d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e03c      	b.n	8003652 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <HAL_TIM_Base_Start+0xa0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d018      	beq.n	800361c <HAL_TIM_Base_Start+0x5c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d013      	beq.n	800361c <HAL_TIM_Base_Start+0x5c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <HAL_TIM_Base_Start+0xa4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00e      	beq.n	800361c <HAL_TIM_Base_Start+0x5c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_TIM_Base_Start+0xa8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d009      	beq.n	800361c <HAL_TIM_Base_Start+0x5c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a17      	ldr	r2, [pc, #92]	; (800366c <HAL_TIM_Base_Start+0xac>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIM_Base_Start+0x5c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <HAL_TIM_Base_Start+0xb0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d111      	bne.n	8003640 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b06      	cmp	r3, #6
 800362c:	d010      	beq.n	8003650 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	e007      	b.n	8003650 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40014000 	.word	0x40014000

08003674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIM_ConfigClockSource+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e0b4      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x186>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c8:	d03e      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0xd4>
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ce:	f200 8087 	bhi.w	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	f000 8086 	beq.w	80037e6 <HAL_TIM_ConfigClockSource+0x172>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d87f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b70      	cmp	r3, #112	; 0x70
 80036e2:	d01a      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xa6>
 80036e4:	2b70      	cmp	r3, #112	; 0x70
 80036e6:	d87b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b60      	cmp	r3, #96	; 0x60
 80036ea:	d050      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x11a>
 80036ec:	2b60      	cmp	r3, #96	; 0x60
 80036ee:	d877      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b50      	cmp	r3, #80	; 0x50
 80036f2:	d03c      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xfa>
 80036f4:	2b50      	cmp	r3, #80	; 0x50
 80036f6:	d873      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d058      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x13a>
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d86f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b30      	cmp	r3, #48	; 0x30
 8003702:	d064      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b30      	cmp	r3, #48	; 0x30
 8003706:	d86b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d060      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d867      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05c      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d05a      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	e062      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f000 f965 	bl	80039f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800373c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	609a      	str	r2, [r3, #8]
      break;
 8003746:	e04f      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f000 f94e 	bl	80039f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800376a:	609a      	str	r2, [r3, #8]
      break;
 800376c:	e03c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	461a      	mov	r2, r3
 800377c:	f000 f8c2 	bl	8003904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2150      	movs	r1, #80	; 0x50
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f91b 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 800378c:	e02c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	f000 f8e1 	bl	8003962 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2160      	movs	r1, #96	; 0x60
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f90b 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e01c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 f8a2 	bl	8003904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2140      	movs	r1, #64	; 0x40
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f8fb 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e00c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 f8f2 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80037de:	e003      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e000      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <TIM_Base_SetConfig+0xe4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00f      	beq.n	800383c <TIM_Base_SetConfig+0x38>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d00b      	beq.n	800383c <TIM_Base_SetConfig+0x38>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a31      	ldr	r2, [pc, #196]	; (80038ec <TIM_Base_SetConfig+0xe8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_Base_SetConfig+0x38>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a30      	ldr	r2, [pc, #192]	; (80038f0 <TIM_Base_SetConfig+0xec>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_Base_SetConfig+0x38>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <TIM_Base_SetConfig+0xf0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <TIM_Base_SetConfig+0xe4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01b      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385c:	d017      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <TIM_Base_SetConfig+0xe8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <TIM_Base_SetConfig+0xec>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00f      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <TIM_Base_SetConfig+0xf0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00b      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <TIM_Base_SetConfig+0xf4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <TIM_Base_SetConfig+0xf8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <TIM_Base_SetConfig+0xfc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <TIM_Base_SetConfig+0xe4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d103      	bne.n	80038d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	615a      	str	r2, [r3, #20]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40014000 	.word	0x40014000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800

08003904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800392e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f023 030a 	bic.w	r3, r3, #10
 8003940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003962:	b480      	push	{r7}
 8003964:	b087      	sub	sp, #28
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f023 0210 	bic.w	r2, r3, #16
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800398c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	031b      	lsls	r3, r3, #12
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800399e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f043 0307 	orr.w	r3, r3, #7
 80039e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	021a      	lsls	r2, r3, #8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	609a      	str	r2, [r3, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e050      	b.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d018      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d013      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d009      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d004      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40014000 	.word	0x40014000

08003b14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e03f      	b.n	8003ba6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd f978 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2224      	movs	r2, #36	; 0x24
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f929 	bl	8003db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b08a      	sub	sp, #40	; 0x28
 8003bb2:	af02      	add	r7, sp, #8
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d17c      	bne.n	8003cc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_UART_Transmit+0x2c>
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e075      	b.n	8003cca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_UART_Transmit+0x3e>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e06e      	b.n	8003cca <HAL_UART_Transmit+0x11c>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2221      	movs	r2, #33	; 0x21
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c02:	f7fd f9ed 	bl	8000fe0 <HAL_GetTick>
 8003c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	88fa      	ldrh	r2, [r7, #6]
 8003c0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	88fa      	ldrh	r2, [r7, #6]
 8003c12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1c:	d108      	bne.n	8003c30 <HAL_UART_Transmit+0x82>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d104      	bne.n	8003c30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	e003      	b.n	8003c38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c40:	e02a      	b.n	8003c98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2180      	movs	r1, #128	; 0x80
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f840 	bl	8003cd2 <UART_WaitOnFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e036      	b.n	8003cca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10b      	bne.n	8003c7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	3302      	adds	r3, #2
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	e007      	b.n	8003c8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	781a      	ldrb	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	3301      	adds	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1cf      	bne.n	8003c42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2140      	movs	r1, #64	; 0x40
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f810 	bl	8003cd2 <UART_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e006      	b.n	8003cca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b090      	sub	sp, #64	; 0x40
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce2:	e050      	b.n	8003d86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d04c      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf2:	f7fd f975 	bl	8000fe0 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d241      	bcs.n	8003d86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	330c      	adds	r3, #12
 8003d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d22:	637a      	str	r2, [r7, #52]	; 0x34
 8003d24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e5      	bne.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	613b      	str	r3, [r7, #16]
   return(result);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d56:	623a      	str	r2, [r7, #32]
 8003d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	69f9      	ldr	r1, [r7, #28]
 8003d5c:	6a3a      	ldr	r2, [r7, #32]
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e5      	bne.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e00f      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d09f      	beq.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3740      	adds	r7, #64	; 0x40
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db4:	b09f      	sub	sp, #124	; 0x7c
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	68d9      	ldr	r1, [r3, #12]
 8003dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	ea40 0301 	orr.w	r3, r0, r1
 8003dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003df4:	f021 010c 	bic.w	r1, r1, #12
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0e:	6999      	ldr	r1, [r3, #24]
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	ea40 0301 	orr.w	r3, r0, r1
 8003e18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4bc5      	ldr	r3, [pc, #788]	; (8004134 <UART_SetConfig+0x384>)
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d004      	beq.n	8003e2e <UART_SetConfig+0x7e>
 8003e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4bc3      	ldr	r3, [pc, #780]	; (8004138 <UART_SetConfig+0x388>)
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d103      	bne.n	8003e36 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e2e:	f7ff fb63 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 8003e32:	6778      	str	r0, [r7, #116]	; 0x74
 8003e34:	e002      	b.n	8003e3c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e36:	f7ff fb4b 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8003e3a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e44:	f040 80b6 	bne.w	8003fb4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e4a:	461c      	mov	r4, r3
 8003e4c:	f04f 0500 	mov.w	r5, #0
 8003e50:	4622      	mov	r2, r4
 8003e52:	462b      	mov	r3, r5
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	6439      	str	r1, [r7, #64]	; 0x40
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e60:	1912      	adds	r2, r2, r4
 8003e62:	eb45 0303 	adc.w	r3, r5, r3
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	00d9      	lsls	r1, r3, #3
 8003e70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e74:	00d0      	lsls	r0, r2, #3
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	1911      	adds	r1, r2, r4
 8003e7c:	6639      	str	r1, [r7, #96]	; 0x60
 8003e7e:	416b      	adcs	r3, r5
 8003e80:	667b      	str	r3, [r7, #100]	; 0x64
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	1891      	adds	r1, r2, r2
 8003e8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e90:	415b      	adcs	r3, r3
 8003e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e9c:	f7fc f9f0 	bl	8000280 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4ba5      	ldr	r3, [pc, #660]	; (800413c <UART_SetConfig+0x38c>)
 8003ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	011e      	lsls	r6, r3, #4
 8003eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb0:	461c      	mov	r4, r3
 8003eb2:	f04f 0500 	mov.w	r5, #0
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	1891      	adds	r1, r2, r2
 8003ebc:	6339      	str	r1, [r7, #48]	; 0x30
 8003ebe:	415b      	adcs	r3, r3
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ec6:	1912      	adds	r2, r2, r4
 8003ec8:	eb45 0303 	adc.w	r3, r5, r3
 8003ecc:	f04f 0000 	mov.w	r0, #0
 8003ed0:	f04f 0100 	mov.w	r1, #0
 8003ed4:	00d9      	lsls	r1, r3, #3
 8003ed6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eda:	00d0      	lsls	r0, r2, #3
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	1911      	adds	r1, r2, r4
 8003ee2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ee4:	416b      	adcs	r3, r5
 8003ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	461a      	mov	r2, r3
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	1891      	adds	r1, r2, r2
 8003ef4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ef6:	415b      	adcs	r3, r3
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003efe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f02:	f7fc f9bd 	bl	8000280 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4b8c      	ldr	r3, [pc, #560]	; (800413c <UART_SetConfig+0x38c>)
 8003f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	2164      	movs	r1, #100	; 0x64
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	3332      	adds	r3, #50	; 0x32
 8003f1e:	4a87      	ldr	r2, [pc, #540]	; (800413c <UART_SetConfig+0x38c>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f2c:	441e      	add	r6, r3
 8003f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f30:	4618      	mov	r0, r3
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	1894      	adds	r4, r2, r2
 8003f3c:	623c      	str	r4, [r7, #32]
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
 8003f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f46:	1812      	adds	r2, r2, r0
 8003f48:	eb41 0303 	adc.w	r3, r1, r3
 8003f4c:	f04f 0400 	mov.w	r4, #0
 8003f50:	f04f 0500 	mov.w	r5, #0
 8003f54:	00dd      	lsls	r5, r3, #3
 8003f56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f5a:	00d4      	lsls	r4, r2, #3
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	462b      	mov	r3, r5
 8003f60:	1814      	adds	r4, r2, r0
 8003f62:	653c      	str	r4, [r7, #80]	; 0x50
 8003f64:	414b      	adcs	r3, r1
 8003f66:	657b      	str	r3, [r7, #84]	; 0x54
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	1891      	adds	r1, r2, r2
 8003f74:	61b9      	str	r1, [r7, #24]
 8003f76:	415b      	adcs	r3, r3
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f82:	f7fc f97d 	bl	8000280 <__aeabi_uldivmod>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4b6c      	ldr	r3, [pc, #432]	; (800413c <UART_SetConfig+0x38c>)
 8003f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	2164      	movs	r1, #100	; 0x64
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	3332      	adds	r3, #50	; 0x32
 8003f9e:	4a67      	ldr	r2, [pc, #412]	; (800413c <UART_SetConfig+0x38c>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	f003 0207 	and.w	r2, r3, #7
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4432      	add	r2, r6
 8003fb0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fb2:	e0b9      	b.n	8004128 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb6:	461c      	mov	r4, r3
 8003fb8:	f04f 0500 	mov.w	r5, #0
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	462b      	mov	r3, r5
 8003fc0:	1891      	adds	r1, r2, r2
 8003fc2:	6139      	str	r1, [r7, #16]
 8003fc4:	415b      	adcs	r3, r3
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fcc:	1912      	adds	r2, r2, r4
 8003fce:	eb45 0303 	adc.w	r3, r5, r3
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	00d9      	lsls	r1, r3, #3
 8003fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fe0:	00d0      	lsls	r0, r2, #3
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	eb12 0804 	adds.w	r8, r2, r4
 8003fea:	eb43 0905 	adc.w	r9, r3, r5
 8003fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f04f 0100 	mov.w	r1, #0
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	008b      	lsls	r3, r1, #2
 8004002:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004006:	0082      	lsls	r2, r0, #2
 8004008:	4640      	mov	r0, r8
 800400a:	4649      	mov	r1, r9
 800400c:	f7fc f938 	bl	8000280 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4b49      	ldr	r3, [pc, #292]	; (800413c <UART_SetConfig+0x38c>)
 8004016:	fba3 2302 	umull	r2, r3, r3, r2
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	011e      	lsls	r6, r3, #4
 800401e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004020:	4618      	mov	r0, r3
 8004022:	f04f 0100 	mov.w	r1, #0
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	1894      	adds	r4, r2, r2
 800402c:	60bc      	str	r4, [r7, #8]
 800402e:	415b      	adcs	r3, r3
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004036:	1812      	adds	r2, r2, r0
 8004038:	eb41 0303 	adc.w	r3, r1, r3
 800403c:	f04f 0400 	mov.w	r4, #0
 8004040:	f04f 0500 	mov.w	r5, #0
 8004044:	00dd      	lsls	r5, r3, #3
 8004046:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800404a:	00d4      	lsls	r4, r2, #3
 800404c:	4622      	mov	r2, r4
 800404e:	462b      	mov	r3, r5
 8004050:	1814      	adds	r4, r2, r0
 8004052:	64bc      	str	r4, [r7, #72]	; 0x48
 8004054:	414b      	adcs	r3, r1
 8004056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	008b      	lsls	r3, r1, #2
 800406c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004070:	0082      	lsls	r2, r0, #2
 8004072:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004076:	f7fc f903 	bl	8000280 <__aeabi_uldivmod>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4b2f      	ldr	r3, [pc, #188]	; (800413c <UART_SetConfig+0x38c>)
 8004080:	fba3 1302 	umull	r1, r3, r3, r2
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	2164      	movs	r1, #100	; 0x64
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	3332      	adds	r3, #50	; 0x32
 8004092:	4a2a      	ldr	r2, [pc, #168]	; (800413c <UART_SetConfig+0x38c>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800409e:	441e      	add	r6, r3
 80040a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a2:	4618      	mov	r0, r3
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	1894      	adds	r4, r2, r2
 80040ae:	603c      	str	r4, [r7, #0]
 80040b0:	415b      	adcs	r3, r3
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040b8:	1812      	adds	r2, r2, r0
 80040ba:	eb41 0303 	adc.w	r3, r1, r3
 80040be:	f04f 0400 	mov.w	r4, #0
 80040c2:	f04f 0500 	mov.w	r5, #0
 80040c6:	00dd      	lsls	r5, r3, #3
 80040c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040cc:	00d4      	lsls	r4, r2, #3
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	eb12 0a00 	adds.w	sl, r2, r0
 80040d6:	eb43 0b01 	adc.w	fp, r3, r1
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4618      	mov	r0, r3
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	008b      	lsls	r3, r1, #2
 80040ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040f2:	0082      	lsls	r2, r0, #2
 80040f4:	4650      	mov	r0, sl
 80040f6:	4659      	mov	r1, fp
 80040f8:	f7fc f8c2 	bl	8000280 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4b0e      	ldr	r3, [pc, #56]	; (800413c <UART_SetConfig+0x38c>)
 8004102:	fba3 1302 	umull	r1, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2164      	movs	r1, #100	; 0x64
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	3332      	adds	r3, #50	; 0x32
 8004114:	4a09      	ldr	r2, [pc, #36]	; (800413c <UART_SetConfig+0x38c>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	f003 020f 	and.w	r2, r3, #15
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4432      	add	r2, r6
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	bf00      	nop
 800412a:	377c      	adds	r7, #124	; 0x7c
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004132:	bf00      	nop
 8004134:	40011000 	.word	0x40011000
 8004138:	40011400 	.word	0x40011400
 800413c:	51eb851f 	.word	0x51eb851f

08004140 <__errno>:
 8004140:	4b01      	ldr	r3, [pc, #4]	; (8004148 <__errno+0x8>)
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	2000000c 	.word	0x2000000c

0800414c <__libc_init_array>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	4d0d      	ldr	r5, [pc, #52]	; (8004184 <__libc_init_array+0x38>)
 8004150:	4c0d      	ldr	r4, [pc, #52]	; (8004188 <__libc_init_array+0x3c>)
 8004152:	1b64      	subs	r4, r4, r5
 8004154:	10a4      	asrs	r4, r4, #2
 8004156:	2600      	movs	r6, #0
 8004158:	42a6      	cmp	r6, r4
 800415a:	d109      	bne.n	8004170 <__libc_init_array+0x24>
 800415c:	4d0b      	ldr	r5, [pc, #44]	; (800418c <__libc_init_array+0x40>)
 800415e:	4c0c      	ldr	r4, [pc, #48]	; (8004190 <__libc_init_array+0x44>)
 8004160:	f000 fc4e 	bl	8004a00 <_init>
 8004164:	1b64      	subs	r4, r4, r5
 8004166:	10a4      	asrs	r4, r4, #2
 8004168:	2600      	movs	r6, #0
 800416a:	42a6      	cmp	r6, r4
 800416c:	d105      	bne.n	800417a <__libc_init_array+0x2e>
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	f855 3b04 	ldr.w	r3, [r5], #4
 8004174:	4798      	blx	r3
 8004176:	3601      	adds	r6, #1
 8004178:	e7ee      	b.n	8004158 <__libc_init_array+0xc>
 800417a:	f855 3b04 	ldr.w	r3, [r5], #4
 800417e:	4798      	blx	r3
 8004180:	3601      	adds	r6, #1
 8004182:	e7f2      	b.n	800416a <__libc_init_array+0x1e>
 8004184:	08004a7c 	.word	0x08004a7c
 8004188:	08004a7c 	.word	0x08004a7c
 800418c:	08004a7c 	.word	0x08004a7c
 8004190:	08004a80 	.word	0x08004a80

08004194 <memset>:
 8004194:	4402      	add	r2, r0
 8004196:	4603      	mov	r3, r0
 8004198:	4293      	cmp	r3, r2
 800419a:	d100      	bne.n	800419e <memset+0xa>
 800419c:	4770      	bx	lr
 800419e:	f803 1b01 	strb.w	r1, [r3], #1
 80041a2:	e7f9      	b.n	8004198 <memset+0x4>

080041a4 <siprintf>:
 80041a4:	b40e      	push	{r1, r2, r3}
 80041a6:	b500      	push	{lr}
 80041a8:	b09c      	sub	sp, #112	; 0x70
 80041aa:	ab1d      	add	r3, sp, #116	; 0x74
 80041ac:	9002      	str	r0, [sp, #8]
 80041ae:	9006      	str	r0, [sp, #24]
 80041b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041b4:	4809      	ldr	r0, [pc, #36]	; (80041dc <siprintf+0x38>)
 80041b6:	9107      	str	r1, [sp, #28]
 80041b8:	9104      	str	r1, [sp, #16]
 80041ba:	4909      	ldr	r1, [pc, #36]	; (80041e0 <siprintf+0x3c>)
 80041bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80041c0:	9105      	str	r1, [sp, #20]
 80041c2:	6800      	ldr	r0, [r0, #0]
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	a902      	add	r1, sp, #8
 80041c8:	f000 f868 	bl	800429c <_svfiprintf_r>
 80041cc:	9b02      	ldr	r3, [sp, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	b01c      	add	sp, #112	; 0x70
 80041d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041d8:	b003      	add	sp, #12
 80041da:	4770      	bx	lr
 80041dc:	2000000c 	.word	0x2000000c
 80041e0:	ffff0208 	.word	0xffff0208

080041e4 <__ssputs_r>:
 80041e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	688e      	ldr	r6, [r1, #8]
 80041ea:	429e      	cmp	r6, r3
 80041ec:	4682      	mov	sl, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	4690      	mov	r8, r2
 80041f2:	461f      	mov	r7, r3
 80041f4:	d838      	bhi.n	8004268 <__ssputs_r+0x84>
 80041f6:	898a      	ldrh	r2, [r1, #12]
 80041f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041fc:	d032      	beq.n	8004264 <__ssputs_r+0x80>
 80041fe:	6825      	ldr	r5, [r4, #0]
 8004200:	6909      	ldr	r1, [r1, #16]
 8004202:	eba5 0901 	sub.w	r9, r5, r1
 8004206:	6965      	ldr	r5, [r4, #20]
 8004208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800420c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004210:	3301      	adds	r3, #1
 8004212:	444b      	add	r3, r9
 8004214:	106d      	asrs	r5, r5, #1
 8004216:	429d      	cmp	r5, r3
 8004218:	bf38      	it	cc
 800421a:	461d      	movcc	r5, r3
 800421c:	0553      	lsls	r3, r2, #21
 800421e:	d531      	bpl.n	8004284 <__ssputs_r+0xa0>
 8004220:	4629      	mov	r1, r5
 8004222:	f000 fb47 	bl	80048b4 <_malloc_r>
 8004226:	4606      	mov	r6, r0
 8004228:	b950      	cbnz	r0, 8004240 <__ssputs_r+0x5c>
 800422a:	230c      	movs	r3, #12
 800422c:	f8ca 3000 	str.w	r3, [sl]
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004236:	81a3      	strh	r3, [r4, #12]
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004240:	6921      	ldr	r1, [r4, #16]
 8004242:	464a      	mov	r2, r9
 8004244:	f000 fabe 	bl	80047c4 <memcpy>
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	81a3      	strh	r3, [r4, #12]
 8004254:	6126      	str	r6, [r4, #16]
 8004256:	6165      	str	r5, [r4, #20]
 8004258:	444e      	add	r6, r9
 800425a:	eba5 0509 	sub.w	r5, r5, r9
 800425e:	6026      	str	r6, [r4, #0]
 8004260:	60a5      	str	r5, [r4, #8]
 8004262:	463e      	mov	r6, r7
 8004264:	42be      	cmp	r6, r7
 8004266:	d900      	bls.n	800426a <__ssputs_r+0x86>
 8004268:	463e      	mov	r6, r7
 800426a:	4632      	mov	r2, r6
 800426c:	6820      	ldr	r0, [r4, #0]
 800426e:	4641      	mov	r1, r8
 8004270:	f000 fab6 	bl	80047e0 <memmove>
 8004274:	68a3      	ldr	r3, [r4, #8]
 8004276:	6822      	ldr	r2, [r4, #0]
 8004278:	1b9b      	subs	r3, r3, r6
 800427a:	4432      	add	r2, r6
 800427c:	60a3      	str	r3, [r4, #8]
 800427e:	6022      	str	r2, [r4, #0]
 8004280:	2000      	movs	r0, #0
 8004282:	e7db      	b.n	800423c <__ssputs_r+0x58>
 8004284:	462a      	mov	r2, r5
 8004286:	f000 fb6f 	bl	8004968 <_realloc_r>
 800428a:	4606      	mov	r6, r0
 800428c:	2800      	cmp	r0, #0
 800428e:	d1e1      	bne.n	8004254 <__ssputs_r+0x70>
 8004290:	6921      	ldr	r1, [r4, #16]
 8004292:	4650      	mov	r0, sl
 8004294:	f000 fabe 	bl	8004814 <_free_r>
 8004298:	e7c7      	b.n	800422a <__ssputs_r+0x46>
	...

0800429c <_svfiprintf_r>:
 800429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a0:	4698      	mov	r8, r3
 80042a2:	898b      	ldrh	r3, [r1, #12]
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	b09d      	sub	sp, #116	; 0x74
 80042a8:	4607      	mov	r7, r0
 80042aa:	460d      	mov	r5, r1
 80042ac:	4614      	mov	r4, r2
 80042ae:	d50e      	bpl.n	80042ce <_svfiprintf_r+0x32>
 80042b0:	690b      	ldr	r3, [r1, #16]
 80042b2:	b963      	cbnz	r3, 80042ce <_svfiprintf_r+0x32>
 80042b4:	2140      	movs	r1, #64	; 0x40
 80042b6:	f000 fafd 	bl	80048b4 <_malloc_r>
 80042ba:	6028      	str	r0, [r5, #0]
 80042bc:	6128      	str	r0, [r5, #16]
 80042be:	b920      	cbnz	r0, 80042ca <_svfiprintf_r+0x2e>
 80042c0:	230c      	movs	r3, #12
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	e0d1      	b.n	800446e <_svfiprintf_r+0x1d2>
 80042ca:	2340      	movs	r3, #64	; 0x40
 80042cc:	616b      	str	r3, [r5, #20]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9309      	str	r3, [sp, #36]	; 0x24
 80042d2:	2320      	movs	r3, #32
 80042d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80042dc:	2330      	movs	r3, #48	; 0x30
 80042de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004488 <_svfiprintf_r+0x1ec>
 80042e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042e6:	f04f 0901 	mov.w	r9, #1
 80042ea:	4623      	mov	r3, r4
 80042ec:	469a      	mov	sl, r3
 80042ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f2:	b10a      	cbz	r2, 80042f8 <_svfiprintf_r+0x5c>
 80042f4:	2a25      	cmp	r2, #37	; 0x25
 80042f6:	d1f9      	bne.n	80042ec <_svfiprintf_r+0x50>
 80042f8:	ebba 0b04 	subs.w	fp, sl, r4
 80042fc:	d00b      	beq.n	8004316 <_svfiprintf_r+0x7a>
 80042fe:	465b      	mov	r3, fp
 8004300:	4622      	mov	r2, r4
 8004302:	4629      	mov	r1, r5
 8004304:	4638      	mov	r0, r7
 8004306:	f7ff ff6d 	bl	80041e4 <__ssputs_r>
 800430a:	3001      	adds	r0, #1
 800430c:	f000 80aa 	beq.w	8004464 <_svfiprintf_r+0x1c8>
 8004310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004312:	445a      	add	r2, fp
 8004314:	9209      	str	r2, [sp, #36]	; 0x24
 8004316:	f89a 3000 	ldrb.w	r3, [sl]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80a2 	beq.w	8004464 <_svfiprintf_r+0x1c8>
 8004320:	2300      	movs	r3, #0
 8004322:	f04f 32ff 	mov.w	r2, #4294967295
 8004326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800432a:	f10a 0a01 	add.w	sl, sl, #1
 800432e:	9304      	str	r3, [sp, #16]
 8004330:	9307      	str	r3, [sp, #28]
 8004332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004336:	931a      	str	r3, [sp, #104]	; 0x68
 8004338:	4654      	mov	r4, sl
 800433a:	2205      	movs	r2, #5
 800433c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004340:	4851      	ldr	r0, [pc, #324]	; (8004488 <_svfiprintf_r+0x1ec>)
 8004342:	f7fb ff4d 	bl	80001e0 <memchr>
 8004346:	9a04      	ldr	r2, [sp, #16]
 8004348:	b9d8      	cbnz	r0, 8004382 <_svfiprintf_r+0xe6>
 800434a:	06d0      	lsls	r0, r2, #27
 800434c:	bf44      	itt	mi
 800434e:	2320      	movmi	r3, #32
 8004350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004354:	0711      	lsls	r1, r2, #28
 8004356:	bf44      	itt	mi
 8004358:	232b      	movmi	r3, #43	; 0x2b
 800435a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800435e:	f89a 3000 	ldrb.w	r3, [sl]
 8004362:	2b2a      	cmp	r3, #42	; 0x2a
 8004364:	d015      	beq.n	8004392 <_svfiprintf_r+0xf6>
 8004366:	9a07      	ldr	r2, [sp, #28]
 8004368:	4654      	mov	r4, sl
 800436a:	2000      	movs	r0, #0
 800436c:	f04f 0c0a 	mov.w	ip, #10
 8004370:	4621      	mov	r1, r4
 8004372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004376:	3b30      	subs	r3, #48	; 0x30
 8004378:	2b09      	cmp	r3, #9
 800437a:	d94e      	bls.n	800441a <_svfiprintf_r+0x17e>
 800437c:	b1b0      	cbz	r0, 80043ac <_svfiprintf_r+0x110>
 800437e:	9207      	str	r2, [sp, #28]
 8004380:	e014      	b.n	80043ac <_svfiprintf_r+0x110>
 8004382:	eba0 0308 	sub.w	r3, r0, r8
 8004386:	fa09 f303 	lsl.w	r3, r9, r3
 800438a:	4313      	orrs	r3, r2
 800438c:	9304      	str	r3, [sp, #16]
 800438e:	46a2      	mov	sl, r4
 8004390:	e7d2      	b.n	8004338 <_svfiprintf_r+0x9c>
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	1d19      	adds	r1, r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	9103      	str	r1, [sp, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	bfbb      	ittet	lt
 800439e:	425b      	neglt	r3, r3
 80043a0:	f042 0202 	orrlt.w	r2, r2, #2
 80043a4:	9307      	strge	r3, [sp, #28]
 80043a6:	9307      	strlt	r3, [sp, #28]
 80043a8:	bfb8      	it	lt
 80043aa:	9204      	strlt	r2, [sp, #16]
 80043ac:	7823      	ldrb	r3, [r4, #0]
 80043ae:	2b2e      	cmp	r3, #46	; 0x2e
 80043b0:	d10c      	bne.n	80043cc <_svfiprintf_r+0x130>
 80043b2:	7863      	ldrb	r3, [r4, #1]
 80043b4:	2b2a      	cmp	r3, #42	; 0x2a
 80043b6:	d135      	bne.n	8004424 <_svfiprintf_r+0x188>
 80043b8:	9b03      	ldr	r3, [sp, #12]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	9203      	str	r2, [sp, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bfb8      	it	lt
 80043c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80043c8:	3402      	adds	r4, #2
 80043ca:	9305      	str	r3, [sp, #20]
 80043cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004498 <_svfiprintf_r+0x1fc>
 80043d0:	7821      	ldrb	r1, [r4, #0]
 80043d2:	2203      	movs	r2, #3
 80043d4:	4650      	mov	r0, sl
 80043d6:	f7fb ff03 	bl	80001e0 <memchr>
 80043da:	b140      	cbz	r0, 80043ee <_svfiprintf_r+0x152>
 80043dc:	2340      	movs	r3, #64	; 0x40
 80043de:	eba0 000a 	sub.w	r0, r0, sl
 80043e2:	fa03 f000 	lsl.w	r0, r3, r0
 80043e6:	9b04      	ldr	r3, [sp, #16]
 80043e8:	4303      	orrs	r3, r0
 80043ea:	3401      	adds	r4, #1
 80043ec:	9304      	str	r3, [sp, #16]
 80043ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f2:	4826      	ldr	r0, [pc, #152]	; (800448c <_svfiprintf_r+0x1f0>)
 80043f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043f8:	2206      	movs	r2, #6
 80043fa:	f7fb fef1 	bl	80001e0 <memchr>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d038      	beq.n	8004474 <_svfiprintf_r+0x1d8>
 8004402:	4b23      	ldr	r3, [pc, #140]	; (8004490 <_svfiprintf_r+0x1f4>)
 8004404:	bb1b      	cbnz	r3, 800444e <_svfiprintf_r+0x1b2>
 8004406:	9b03      	ldr	r3, [sp, #12]
 8004408:	3307      	adds	r3, #7
 800440a:	f023 0307 	bic.w	r3, r3, #7
 800440e:	3308      	adds	r3, #8
 8004410:	9303      	str	r3, [sp, #12]
 8004412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004414:	4433      	add	r3, r6
 8004416:	9309      	str	r3, [sp, #36]	; 0x24
 8004418:	e767      	b.n	80042ea <_svfiprintf_r+0x4e>
 800441a:	fb0c 3202 	mla	r2, ip, r2, r3
 800441e:	460c      	mov	r4, r1
 8004420:	2001      	movs	r0, #1
 8004422:	e7a5      	b.n	8004370 <_svfiprintf_r+0xd4>
 8004424:	2300      	movs	r3, #0
 8004426:	3401      	adds	r4, #1
 8004428:	9305      	str	r3, [sp, #20]
 800442a:	4619      	mov	r1, r3
 800442c:	f04f 0c0a 	mov.w	ip, #10
 8004430:	4620      	mov	r0, r4
 8004432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004436:	3a30      	subs	r2, #48	; 0x30
 8004438:	2a09      	cmp	r2, #9
 800443a:	d903      	bls.n	8004444 <_svfiprintf_r+0x1a8>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0c5      	beq.n	80043cc <_svfiprintf_r+0x130>
 8004440:	9105      	str	r1, [sp, #20]
 8004442:	e7c3      	b.n	80043cc <_svfiprintf_r+0x130>
 8004444:	fb0c 2101 	mla	r1, ip, r1, r2
 8004448:	4604      	mov	r4, r0
 800444a:	2301      	movs	r3, #1
 800444c:	e7f0      	b.n	8004430 <_svfiprintf_r+0x194>
 800444e:	ab03      	add	r3, sp, #12
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	462a      	mov	r2, r5
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <_svfiprintf_r+0x1f8>)
 8004456:	a904      	add	r1, sp, #16
 8004458:	4638      	mov	r0, r7
 800445a:	f3af 8000 	nop.w
 800445e:	1c42      	adds	r2, r0, #1
 8004460:	4606      	mov	r6, r0
 8004462:	d1d6      	bne.n	8004412 <_svfiprintf_r+0x176>
 8004464:	89ab      	ldrh	r3, [r5, #12]
 8004466:	065b      	lsls	r3, r3, #25
 8004468:	f53f af2c 	bmi.w	80042c4 <_svfiprintf_r+0x28>
 800446c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800446e:	b01d      	add	sp, #116	; 0x74
 8004470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004474:	ab03      	add	r3, sp, #12
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	462a      	mov	r2, r5
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <_svfiprintf_r+0x1f8>)
 800447c:	a904      	add	r1, sp, #16
 800447e:	4638      	mov	r0, r7
 8004480:	f000 f87a 	bl	8004578 <_printf_i>
 8004484:	e7eb      	b.n	800445e <_svfiprintf_r+0x1c2>
 8004486:	bf00      	nop
 8004488:	08004a40 	.word	0x08004a40
 800448c:	08004a4a 	.word	0x08004a4a
 8004490:	00000000 	.word	0x00000000
 8004494:	080041e5 	.word	0x080041e5
 8004498:	08004a46 	.word	0x08004a46

0800449c <_printf_common>:
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	4616      	mov	r6, r2
 80044a2:	4699      	mov	r9, r3
 80044a4:	688a      	ldr	r2, [r1, #8]
 80044a6:	690b      	ldr	r3, [r1, #16]
 80044a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	bfb8      	it	lt
 80044b0:	4613      	movlt	r3, r2
 80044b2:	6033      	str	r3, [r6, #0]
 80044b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044b8:	4607      	mov	r7, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	b10a      	cbz	r2, 80044c2 <_printf_common+0x26>
 80044be:	3301      	adds	r3, #1
 80044c0:	6033      	str	r3, [r6, #0]
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	0699      	lsls	r1, r3, #26
 80044c6:	bf42      	ittt	mi
 80044c8:	6833      	ldrmi	r3, [r6, #0]
 80044ca:	3302      	addmi	r3, #2
 80044cc:	6033      	strmi	r3, [r6, #0]
 80044ce:	6825      	ldr	r5, [r4, #0]
 80044d0:	f015 0506 	ands.w	r5, r5, #6
 80044d4:	d106      	bne.n	80044e4 <_printf_common+0x48>
 80044d6:	f104 0a19 	add.w	sl, r4, #25
 80044da:	68e3      	ldr	r3, [r4, #12]
 80044dc:	6832      	ldr	r2, [r6, #0]
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	42ab      	cmp	r3, r5
 80044e2:	dc26      	bgt.n	8004532 <_printf_common+0x96>
 80044e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044e8:	1e13      	subs	r3, r2, #0
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	bf18      	it	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	0692      	lsls	r2, r2, #26
 80044f2:	d42b      	bmi.n	800454c <_printf_common+0xb0>
 80044f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044f8:	4649      	mov	r1, r9
 80044fa:	4638      	mov	r0, r7
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d01e      	beq.n	8004540 <_printf_common+0xa4>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	68e5      	ldr	r5, [r4, #12]
 8004506:	6832      	ldr	r2, [r6, #0]
 8004508:	f003 0306 	and.w	r3, r3, #6
 800450c:	2b04      	cmp	r3, #4
 800450e:	bf08      	it	eq
 8004510:	1aad      	subeq	r5, r5, r2
 8004512:	68a3      	ldr	r3, [r4, #8]
 8004514:	6922      	ldr	r2, [r4, #16]
 8004516:	bf0c      	ite	eq
 8004518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800451c:	2500      	movne	r5, #0
 800451e:	4293      	cmp	r3, r2
 8004520:	bfc4      	itt	gt
 8004522:	1a9b      	subgt	r3, r3, r2
 8004524:	18ed      	addgt	r5, r5, r3
 8004526:	2600      	movs	r6, #0
 8004528:	341a      	adds	r4, #26
 800452a:	42b5      	cmp	r5, r6
 800452c:	d11a      	bne.n	8004564 <_printf_common+0xc8>
 800452e:	2000      	movs	r0, #0
 8004530:	e008      	b.n	8004544 <_printf_common+0xa8>
 8004532:	2301      	movs	r3, #1
 8004534:	4652      	mov	r2, sl
 8004536:	4649      	mov	r1, r9
 8004538:	4638      	mov	r0, r7
 800453a:	47c0      	blx	r8
 800453c:	3001      	adds	r0, #1
 800453e:	d103      	bne.n	8004548 <_printf_common+0xac>
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004548:	3501      	adds	r5, #1
 800454a:	e7c6      	b.n	80044da <_printf_common+0x3e>
 800454c:	18e1      	adds	r1, r4, r3
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	2030      	movs	r0, #48	; 0x30
 8004552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004556:	4422      	add	r2, r4
 8004558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800455c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004560:	3302      	adds	r3, #2
 8004562:	e7c7      	b.n	80044f4 <_printf_common+0x58>
 8004564:	2301      	movs	r3, #1
 8004566:	4622      	mov	r2, r4
 8004568:	4649      	mov	r1, r9
 800456a:	4638      	mov	r0, r7
 800456c:	47c0      	blx	r8
 800456e:	3001      	adds	r0, #1
 8004570:	d0e6      	beq.n	8004540 <_printf_common+0xa4>
 8004572:	3601      	adds	r6, #1
 8004574:	e7d9      	b.n	800452a <_printf_common+0x8e>
	...

08004578 <_printf_i>:
 8004578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	460c      	mov	r4, r1
 800457e:	4691      	mov	r9, r2
 8004580:	7e27      	ldrb	r7, [r4, #24]
 8004582:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004584:	2f78      	cmp	r7, #120	; 0x78
 8004586:	4680      	mov	r8, r0
 8004588:	469a      	mov	sl, r3
 800458a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800458e:	d807      	bhi.n	80045a0 <_printf_i+0x28>
 8004590:	2f62      	cmp	r7, #98	; 0x62
 8004592:	d80a      	bhi.n	80045aa <_printf_i+0x32>
 8004594:	2f00      	cmp	r7, #0
 8004596:	f000 80d8 	beq.w	800474a <_printf_i+0x1d2>
 800459a:	2f58      	cmp	r7, #88	; 0x58
 800459c:	f000 80a3 	beq.w	80046e6 <_printf_i+0x16e>
 80045a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045a8:	e03a      	b.n	8004620 <_printf_i+0xa8>
 80045aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ae:	2b15      	cmp	r3, #21
 80045b0:	d8f6      	bhi.n	80045a0 <_printf_i+0x28>
 80045b2:	a001      	add	r0, pc, #4	; (adr r0, 80045b8 <_printf_i+0x40>)
 80045b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045b8:	08004611 	.word	0x08004611
 80045bc:	08004625 	.word	0x08004625
 80045c0:	080045a1 	.word	0x080045a1
 80045c4:	080045a1 	.word	0x080045a1
 80045c8:	080045a1 	.word	0x080045a1
 80045cc:	080045a1 	.word	0x080045a1
 80045d0:	08004625 	.word	0x08004625
 80045d4:	080045a1 	.word	0x080045a1
 80045d8:	080045a1 	.word	0x080045a1
 80045dc:	080045a1 	.word	0x080045a1
 80045e0:	080045a1 	.word	0x080045a1
 80045e4:	08004731 	.word	0x08004731
 80045e8:	08004655 	.word	0x08004655
 80045ec:	08004713 	.word	0x08004713
 80045f0:	080045a1 	.word	0x080045a1
 80045f4:	080045a1 	.word	0x080045a1
 80045f8:	08004753 	.word	0x08004753
 80045fc:	080045a1 	.word	0x080045a1
 8004600:	08004655 	.word	0x08004655
 8004604:	080045a1 	.word	0x080045a1
 8004608:	080045a1 	.word	0x080045a1
 800460c:	0800471b 	.word	0x0800471b
 8004610:	680b      	ldr	r3, [r1, #0]
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	600a      	str	r2, [r1, #0]
 8004618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800461c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004620:	2301      	movs	r3, #1
 8004622:	e0a3      	b.n	800476c <_printf_i+0x1f4>
 8004624:	6825      	ldr	r5, [r4, #0]
 8004626:	6808      	ldr	r0, [r1, #0]
 8004628:	062e      	lsls	r6, r5, #24
 800462a:	f100 0304 	add.w	r3, r0, #4
 800462e:	d50a      	bpl.n	8004646 <_printf_i+0xce>
 8004630:	6805      	ldr	r5, [r0, #0]
 8004632:	600b      	str	r3, [r1, #0]
 8004634:	2d00      	cmp	r5, #0
 8004636:	da03      	bge.n	8004640 <_printf_i+0xc8>
 8004638:	232d      	movs	r3, #45	; 0x2d
 800463a:	426d      	negs	r5, r5
 800463c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004640:	485e      	ldr	r0, [pc, #376]	; (80047bc <_printf_i+0x244>)
 8004642:	230a      	movs	r3, #10
 8004644:	e019      	b.n	800467a <_printf_i+0x102>
 8004646:	f015 0f40 	tst.w	r5, #64	; 0x40
 800464a:	6805      	ldr	r5, [r0, #0]
 800464c:	600b      	str	r3, [r1, #0]
 800464e:	bf18      	it	ne
 8004650:	b22d      	sxthne	r5, r5
 8004652:	e7ef      	b.n	8004634 <_printf_i+0xbc>
 8004654:	680b      	ldr	r3, [r1, #0]
 8004656:	6825      	ldr	r5, [r4, #0]
 8004658:	1d18      	adds	r0, r3, #4
 800465a:	6008      	str	r0, [r1, #0]
 800465c:	0628      	lsls	r0, r5, #24
 800465e:	d501      	bpl.n	8004664 <_printf_i+0xec>
 8004660:	681d      	ldr	r5, [r3, #0]
 8004662:	e002      	b.n	800466a <_printf_i+0xf2>
 8004664:	0669      	lsls	r1, r5, #25
 8004666:	d5fb      	bpl.n	8004660 <_printf_i+0xe8>
 8004668:	881d      	ldrh	r5, [r3, #0]
 800466a:	4854      	ldr	r0, [pc, #336]	; (80047bc <_printf_i+0x244>)
 800466c:	2f6f      	cmp	r7, #111	; 0x6f
 800466e:	bf0c      	ite	eq
 8004670:	2308      	moveq	r3, #8
 8004672:	230a      	movne	r3, #10
 8004674:	2100      	movs	r1, #0
 8004676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800467a:	6866      	ldr	r6, [r4, #4]
 800467c:	60a6      	str	r6, [r4, #8]
 800467e:	2e00      	cmp	r6, #0
 8004680:	bfa2      	ittt	ge
 8004682:	6821      	ldrge	r1, [r4, #0]
 8004684:	f021 0104 	bicge.w	r1, r1, #4
 8004688:	6021      	strge	r1, [r4, #0]
 800468a:	b90d      	cbnz	r5, 8004690 <_printf_i+0x118>
 800468c:	2e00      	cmp	r6, #0
 800468e:	d04d      	beq.n	800472c <_printf_i+0x1b4>
 8004690:	4616      	mov	r6, r2
 8004692:	fbb5 f1f3 	udiv	r1, r5, r3
 8004696:	fb03 5711 	mls	r7, r3, r1, r5
 800469a:	5dc7      	ldrb	r7, [r0, r7]
 800469c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046a0:	462f      	mov	r7, r5
 80046a2:	42bb      	cmp	r3, r7
 80046a4:	460d      	mov	r5, r1
 80046a6:	d9f4      	bls.n	8004692 <_printf_i+0x11a>
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d10b      	bne.n	80046c4 <_printf_i+0x14c>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	07df      	lsls	r7, r3, #31
 80046b0:	d508      	bpl.n	80046c4 <_printf_i+0x14c>
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	6861      	ldr	r1, [r4, #4]
 80046b6:	4299      	cmp	r1, r3
 80046b8:	bfde      	ittt	le
 80046ba:	2330      	movle	r3, #48	; 0x30
 80046bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046c4:	1b92      	subs	r2, r2, r6
 80046c6:	6122      	str	r2, [r4, #16]
 80046c8:	f8cd a000 	str.w	sl, [sp]
 80046cc:	464b      	mov	r3, r9
 80046ce:	aa03      	add	r2, sp, #12
 80046d0:	4621      	mov	r1, r4
 80046d2:	4640      	mov	r0, r8
 80046d4:	f7ff fee2 	bl	800449c <_printf_common>
 80046d8:	3001      	adds	r0, #1
 80046da:	d14c      	bne.n	8004776 <_printf_i+0x1fe>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	b004      	add	sp, #16
 80046e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e6:	4835      	ldr	r0, [pc, #212]	; (80047bc <_printf_i+0x244>)
 80046e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	680e      	ldr	r6, [r1, #0]
 80046f0:	061f      	lsls	r7, r3, #24
 80046f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80046f6:	600e      	str	r6, [r1, #0]
 80046f8:	d514      	bpl.n	8004724 <_printf_i+0x1ac>
 80046fa:	07d9      	lsls	r1, r3, #31
 80046fc:	bf44      	itt	mi
 80046fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004702:	6023      	strmi	r3, [r4, #0]
 8004704:	b91d      	cbnz	r5, 800470e <_printf_i+0x196>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	f023 0320 	bic.w	r3, r3, #32
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	2310      	movs	r3, #16
 8004710:	e7b0      	b.n	8004674 <_printf_i+0xfc>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f043 0320 	orr.w	r3, r3, #32
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	2378      	movs	r3, #120	; 0x78
 800471c:	4828      	ldr	r0, [pc, #160]	; (80047c0 <_printf_i+0x248>)
 800471e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004722:	e7e3      	b.n	80046ec <_printf_i+0x174>
 8004724:	065e      	lsls	r6, r3, #25
 8004726:	bf48      	it	mi
 8004728:	b2ad      	uxthmi	r5, r5
 800472a:	e7e6      	b.n	80046fa <_printf_i+0x182>
 800472c:	4616      	mov	r6, r2
 800472e:	e7bb      	b.n	80046a8 <_printf_i+0x130>
 8004730:	680b      	ldr	r3, [r1, #0]
 8004732:	6826      	ldr	r6, [r4, #0]
 8004734:	6960      	ldr	r0, [r4, #20]
 8004736:	1d1d      	adds	r5, r3, #4
 8004738:	600d      	str	r5, [r1, #0]
 800473a:	0635      	lsls	r5, r6, #24
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	d501      	bpl.n	8004744 <_printf_i+0x1cc>
 8004740:	6018      	str	r0, [r3, #0]
 8004742:	e002      	b.n	800474a <_printf_i+0x1d2>
 8004744:	0671      	lsls	r1, r6, #25
 8004746:	d5fb      	bpl.n	8004740 <_printf_i+0x1c8>
 8004748:	8018      	strh	r0, [r3, #0]
 800474a:	2300      	movs	r3, #0
 800474c:	6123      	str	r3, [r4, #16]
 800474e:	4616      	mov	r6, r2
 8004750:	e7ba      	b.n	80046c8 <_printf_i+0x150>
 8004752:	680b      	ldr	r3, [r1, #0]
 8004754:	1d1a      	adds	r2, r3, #4
 8004756:	600a      	str	r2, [r1, #0]
 8004758:	681e      	ldr	r6, [r3, #0]
 800475a:	6862      	ldr	r2, [r4, #4]
 800475c:	2100      	movs	r1, #0
 800475e:	4630      	mov	r0, r6
 8004760:	f7fb fd3e 	bl	80001e0 <memchr>
 8004764:	b108      	cbz	r0, 800476a <_printf_i+0x1f2>
 8004766:	1b80      	subs	r0, r0, r6
 8004768:	6060      	str	r0, [r4, #4]
 800476a:	6863      	ldr	r3, [r4, #4]
 800476c:	6123      	str	r3, [r4, #16]
 800476e:	2300      	movs	r3, #0
 8004770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004774:	e7a8      	b.n	80046c8 <_printf_i+0x150>
 8004776:	6923      	ldr	r3, [r4, #16]
 8004778:	4632      	mov	r2, r6
 800477a:	4649      	mov	r1, r9
 800477c:	4640      	mov	r0, r8
 800477e:	47d0      	blx	sl
 8004780:	3001      	adds	r0, #1
 8004782:	d0ab      	beq.n	80046dc <_printf_i+0x164>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	079b      	lsls	r3, r3, #30
 8004788:	d413      	bmi.n	80047b2 <_printf_i+0x23a>
 800478a:	68e0      	ldr	r0, [r4, #12]
 800478c:	9b03      	ldr	r3, [sp, #12]
 800478e:	4298      	cmp	r0, r3
 8004790:	bfb8      	it	lt
 8004792:	4618      	movlt	r0, r3
 8004794:	e7a4      	b.n	80046e0 <_printf_i+0x168>
 8004796:	2301      	movs	r3, #1
 8004798:	4632      	mov	r2, r6
 800479a:	4649      	mov	r1, r9
 800479c:	4640      	mov	r0, r8
 800479e:	47d0      	blx	sl
 80047a0:	3001      	adds	r0, #1
 80047a2:	d09b      	beq.n	80046dc <_printf_i+0x164>
 80047a4:	3501      	adds	r5, #1
 80047a6:	68e3      	ldr	r3, [r4, #12]
 80047a8:	9903      	ldr	r1, [sp, #12]
 80047aa:	1a5b      	subs	r3, r3, r1
 80047ac:	42ab      	cmp	r3, r5
 80047ae:	dcf2      	bgt.n	8004796 <_printf_i+0x21e>
 80047b0:	e7eb      	b.n	800478a <_printf_i+0x212>
 80047b2:	2500      	movs	r5, #0
 80047b4:	f104 0619 	add.w	r6, r4, #25
 80047b8:	e7f5      	b.n	80047a6 <_printf_i+0x22e>
 80047ba:	bf00      	nop
 80047bc:	08004a51 	.word	0x08004a51
 80047c0:	08004a62 	.word	0x08004a62

080047c4 <memcpy>:
 80047c4:	440a      	add	r2, r1
 80047c6:	4291      	cmp	r1, r2
 80047c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047cc:	d100      	bne.n	80047d0 <memcpy+0xc>
 80047ce:	4770      	bx	lr
 80047d0:	b510      	push	{r4, lr}
 80047d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047da:	4291      	cmp	r1, r2
 80047dc:	d1f9      	bne.n	80047d2 <memcpy+0xe>
 80047de:	bd10      	pop	{r4, pc}

080047e0 <memmove>:
 80047e0:	4288      	cmp	r0, r1
 80047e2:	b510      	push	{r4, lr}
 80047e4:	eb01 0402 	add.w	r4, r1, r2
 80047e8:	d902      	bls.n	80047f0 <memmove+0x10>
 80047ea:	4284      	cmp	r4, r0
 80047ec:	4623      	mov	r3, r4
 80047ee:	d807      	bhi.n	8004800 <memmove+0x20>
 80047f0:	1e43      	subs	r3, r0, #1
 80047f2:	42a1      	cmp	r1, r4
 80047f4:	d008      	beq.n	8004808 <memmove+0x28>
 80047f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047fe:	e7f8      	b.n	80047f2 <memmove+0x12>
 8004800:	4402      	add	r2, r0
 8004802:	4601      	mov	r1, r0
 8004804:	428a      	cmp	r2, r1
 8004806:	d100      	bne.n	800480a <memmove+0x2a>
 8004808:	bd10      	pop	{r4, pc}
 800480a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800480e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004812:	e7f7      	b.n	8004804 <memmove+0x24>

08004814 <_free_r>:
 8004814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004816:	2900      	cmp	r1, #0
 8004818:	d048      	beq.n	80048ac <_free_r+0x98>
 800481a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800481e:	9001      	str	r0, [sp, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f1a1 0404 	sub.w	r4, r1, #4
 8004826:	bfb8      	it	lt
 8004828:	18e4      	addlt	r4, r4, r3
 800482a:	f000 f8d3 	bl	80049d4 <__malloc_lock>
 800482e:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <_free_r+0x9c>)
 8004830:	9801      	ldr	r0, [sp, #4]
 8004832:	6813      	ldr	r3, [r2, #0]
 8004834:	4615      	mov	r5, r2
 8004836:	b933      	cbnz	r3, 8004846 <_free_r+0x32>
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	6014      	str	r4, [r2, #0]
 800483c:	b003      	add	sp, #12
 800483e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004842:	f000 b8cd 	b.w	80049e0 <__malloc_unlock>
 8004846:	42a3      	cmp	r3, r4
 8004848:	d90b      	bls.n	8004862 <_free_r+0x4e>
 800484a:	6821      	ldr	r1, [r4, #0]
 800484c:	1862      	adds	r2, r4, r1
 800484e:	4293      	cmp	r3, r2
 8004850:	bf04      	itt	eq
 8004852:	681a      	ldreq	r2, [r3, #0]
 8004854:	685b      	ldreq	r3, [r3, #4]
 8004856:	6063      	str	r3, [r4, #4]
 8004858:	bf04      	itt	eq
 800485a:	1852      	addeq	r2, r2, r1
 800485c:	6022      	streq	r2, [r4, #0]
 800485e:	602c      	str	r4, [r5, #0]
 8004860:	e7ec      	b.n	800483c <_free_r+0x28>
 8004862:	461a      	mov	r2, r3
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	b10b      	cbz	r3, 800486c <_free_r+0x58>
 8004868:	42a3      	cmp	r3, r4
 800486a:	d9fa      	bls.n	8004862 <_free_r+0x4e>
 800486c:	6811      	ldr	r1, [r2, #0]
 800486e:	1855      	adds	r5, r2, r1
 8004870:	42a5      	cmp	r5, r4
 8004872:	d10b      	bne.n	800488c <_free_r+0x78>
 8004874:	6824      	ldr	r4, [r4, #0]
 8004876:	4421      	add	r1, r4
 8004878:	1854      	adds	r4, r2, r1
 800487a:	42a3      	cmp	r3, r4
 800487c:	6011      	str	r1, [r2, #0]
 800487e:	d1dd      	bne.n	800483c <_free_r+0x28>
 8004880:	681c      	ldr	r4, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	6053      	str	r3, [r2, #4]
 8004886:	4421      	add	r1, r4
 8004888:	6011      	str	r1, [r2, #0]
 800488a:	e7d7      	b.n	800483c <_free_r+0x28>
 800488c:	d902      	bls.n	8004894 <_free_r+0x80>
 800488e:	230c      	movs	r3, #12
 8004890:	6003      	str	r3, [r0, #0]
 8004892:	e7d3      	b.n	800483c <_free_r+0x28>
 8004894:	6825      	ldr	r5, [r4, #0]
 8004896:	1961      	adds	r1, r4, r5
 8004898:	428b      	cmp	r3, r1
 800489a:	bf04      	itt	eq
 800489c:	6819      	ldreq	r1, [r3, #0]
 800489e:	685b      	ldreq	r3, [r3, #4]
 80048a0:	6063      	str	r3, [r4, #4]
 80048a2:	bf04      	itt	eq
 80048a4:	1949      	addeq	r1, r1, r5
 80048a6:	6021      	streq	r1, [r4, #0]
 80048a8:	6054      	str	r4, [r2, #4]
 80048aa:	e7c7      	b.n	800483c <_free_r+0x28>
 80048ac:	b003      	add	sp, #12
 80048ae:	bd30      	pop	{r4, r5, pc}
 80048b0:	200000a0 	.word	0x200000a0

080048b4 <_malloc_r>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	1ccd      	adds	r5, r1, #3
 80048b8:	f025 0503 	bic.w	r5, r5, #3
 80048bc:	3508      	adds	r5, #8
 80048be:	2d0c      	cmp	r5, #12
 80048c0:	bf38      	it	cc
 80048c2:	250c      	movcc	r5, #12
 80048c4:	2d00      	cmp	r5, #0
 80048c6:	4606      	mov	r6, r0
 80048c8:	db01      	blt.n	80048ce <_malloc_r+0x1a>
 80048ca:	42a9      	cmp	r1, r5
 80048cc:	d903      	bls.n	80048d6 <_malloc_r+0x22>
 80048ce:	230c      	movs	r3, #12
 80048d0:	6033      	str	r3, [r6, #0]
 80048d2:	2000      	movs	r0, #0
 80048d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d6:	f000 f87d 	bl	80049d4 <__malloc_lock>
 80048da:	4921      	ldr	r1, [pc, #132]	; (8004960 <_malloc_r+0xac>)
 80048dc:	680a      	ldr	r2, [r1, #0]
 80048de:	4614      	mov	r4, r2
 80048e0:	b99c      	cbnz	r4, 800490a <_malloc_r+0x56>
 80048e2:	4f20      	ldr	r7, [pc, #128]	; (8004964 <_malloc_r+0xb0>)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	b923      	cbnz	r3, 80048f2 <_malloc_r+0x3e>
 80048e8:	4621      	mov	r1, r4
 80048ea:	4630      	mov	r0, r6
 80048ec:	f000 f862 	bl	80049b4 <_sbrk_r>
 80048f0:	6038      	str	r0, [r7, #0]
 80048f2:	4629      	mov	r1, r5
 80048f4:	4630      	mov	r0, r6
 80048f6:	f000 f85d 	bl	80049b4 <_sbrk_r>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	d123      	bne.n	8004946 <_malloc_r+0x92>
 80048fe:	230c      	movs	r3, #12
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	4630      	mov	r0, r6
 8004904:	f000 f86c 	bl	80049e0 <__malloc_unlock>
 8004908:	e7e3      	b.n	80048d2 <_malloc_r+0x1e>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	1b5b      	subs	r3, r3, r5
 800490e:	d417      	bmi.n	8004940 <_malloc_r+0x8c>
 8004910:	2b0b      	cmp	r3, #11
 8004912:	d903      	bls.n	800491c <_malloc_r+0x68>
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	441c      	add	r4, r3
 8004918:	6025      	str	r5, [r4, #0]
 800491a:	e004      	b.n	8004926 <_malloc_r+0x72>
 800491c:	6863      	ldr	r3, [r4, #4]
 800491e:	42a2      	cmp	r2, r4
 8004920:	bf0c      	ite	eq
 8004922:	600b      	streq	r3, [r1, #0]
 8004924:	6053      	strne	r3, [r2, #4]
 8004926:	4630      	mov	r0, r6
 8004928:	f000 f85a 	bl	80049e0 <__malloc_unlock>
 800492c:	f104 000b 	add.w	r0, r4, #11
 8004930:	1d23      	adds	r3, r4, #4
 8004932:	f020 0007 	bic.w	r0, r0, #7
 8004936:	1ac2      	subs	r2, r0, r3
 8004938:	d0cc      	beq.n	80048d4 <_malloc_r+0x20>
 800493a:	1a1b      	subs	r3, r3, r0
 800493c:	50a3      	str	r3, [r4, r2]
 800493e:	e7c9      	b.n	80048d4 <_malloc_r+0x20>
 8004940:	4622      	mov	r2, r4
 8004942:	6864      	ldr	r4, [r4, #4]
 8004944:	e7cc      	b.n	80048e0 <_malloc_r+0x2c>
 8004946:	1cc4      	adds	r4, r0, #3
 8004948:	f024 0403 	bic.w	r4, r4, #3
 800494c:	42a0      	cmp	r0, r4
 800494e:	d0e3      	beq.n	8004918 <_malloc_r+0x64>
 8004950:	1a21      	subs	r1, r4, r0
 8004952:	4630      	mov	r0, r6
 8004954:	f000 f82e 	bl	80049b4 <_sbrk_r>
 8004958:	3001      	adds	r0, #1
 800495a:	d1dd      	bne.n	8004918 <_malloc_r+0x64>
 800495c:	e7cf      	b.n	80048fe <_malloc_r+0x4a>
 800495e:	bf00      	nop
 8004960:	200000a0 	.word	0x200000a0
 8004964:	200000a4 	.word	0x200000a4

08004968 <_realloc_r>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	4607      	mov	r7, r0
 800496c:	4614      	mov	r4, r2
 800496e:	460e      	mov	r6, r1
 8004970:	b921      	cbnz	r1, 800497c <_realloc_r+0x14>
 8004972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004976:	4611      	mov	r1, r2
 8004978:	f7ff bf9c 	b.w	80048b4 <_malloc_r>
 800497c:	b922      	cbnz	r2, 8004988 <_realloc_r+0x20>
 800497e:	f7ff ff49 	bl	8004814 <_free_r>
 8004982:	4625      	mov	r5, r4
 8004984:	4628      	mov	r0, r5
 8004986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004988:	f000 f830 	bl	80049ec <_malloc_usable_size_r>
 800498c:	42a0      	cmp	r0, r4
 800498e:	d20f      	bcs.n	80049b0 <_realloc_r+0x48>
 8004990:	4621      	mov	r1, r4
 8004992:	4638      	mov	r0, r7
 8004994:	f7ff ff8e 	bl	80048b4 <_malloc_r>
 8004998:	4605      	mov	r5, r0
 800499a:	2800      	cmp	r0, #0
 800499c:	d0f2      	beq.n	8004984 <_realloc_r+0x1c>
 800499e:	4631      	mov	r1, r6
 80049a0:	4622      	mov	r2, r4
 80049a2:	f7ff ff0f 	bl	80047c4 <memcpy>
 80049a6:	4631      	mov	r1, r6
 80049a8:	4638      	mov	r0, r7
 80049aa:	f7ff ff33 	bl	8004814 <_free_r>
 80049ae:	e7e9      	b.n	8004984 <_realloc_r+0x1c>
 80049b0:	4635      	mov	r5, r6
 80049b2:	e7e7      	b.n	8004984 <_realloc_r+0x1c>

080049b4 <_sbrk_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d06      	ldr	r5, [pc, #24]	; (80049d0 <_sbrk_r+0x1c>)
 80049b8:	2300      	movs	r3, #0
 80049ba:	4604      	mov	r4, r0
 80049bc:	4608      	mov	r0, r1
 80049be:	602b      	str	r3, [r5, #0]
 80049c0:	f7fc f8f2 	bl	8000ba8 <_sbrk>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_sbrk_r+0x1a>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_sbrk_r+0x1a>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	20000a2c 	.word	0x20000a2c

080049d4 <__malloc_lock>:
 80049d4:	4801      	ldr	r0, [pc, #4]	; (80049dc <__malloc_lock+0x8>)
 80049d6:	f000 b811 	b.w	80049fc <__retarget_lock_acquire_recursive>
 80049da:	bf00      	nop
 80049dc:	20000a34 	.word	0x20000a34

080049e0 <__malloc_unlock>:
 80049e0:	4801      	ldr	r0, [pc, #4]	; (80049e8 <__malloc_unlock+0x8>)
 80049e2:	f000 b80c 	b.w	80049fe <__retarget_lock_release_recursive>
 80049e6:	bf00      	nop
 80049e8:	20000a34 	.word	0x20000a34

080049ec <_malloc_usable_size_r>:
 80049ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f0:	1f18      	subs	r0, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bfbc      	itt	lt
 80049f6:	580b      	ldrlt	r3, [r1, r0]
 80049f8:	18c0      	addlt	r0, r0, r3
 80049fa:	4770      	bx	lr

080049fc <__retarget_lock_acquire_recursive>:
 80049fc:	4770      	bx	lr

080049fe <__retarget_lock_release_recursive>:
 80049fe:	4770      	bx	lr

08004a00 <_init>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr

08004a0c <_fini>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr
