
T9_L12_USBDeviceHIDKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000644c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006634  08006634  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08006634  08006634  00016634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800663c  0800663c  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006640  08006640  00016640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08006644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  2000015c  080067a0  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20000ab8  080067a0  00020ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015323  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fed  00000000  00000000  000354af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  000384a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00039178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018757  00000000  00000000  00039d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011416  00000000  00000000  0005247f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895d6  00000000  00000000  00063895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ece6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003378  00000000  00000000  000ecec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000015c 	.word	0x2000015c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080065cc 	.word	0x080065cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000160 	.word	0x20000160
 80001d4:	080065cc 	.word	0x080065cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <MX_GPIO_Init+0xd0>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <MX_GPIO_Init+0xd0>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <MX_GPIO_Init+0xd0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a25      	ldr	r2, [pc, #148]	; (80005a0 <MX_GPIO_Init+0xd0>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	4812      	ldr	r0, [pc, #72]	; (80005a4 <MX_GPIO_Init+0xd4>)
 800055c:	f000 fd3c 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000566:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <MX_GPIO_Init+0xd8>)
 8000578:	f000 fb92 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800057c:	2320      	movs	r3, #32
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000594:	f000 fb84 	bl	8000ca0 <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020000 	.word	0x40020000
 80005a8:	40020800 	.word	0x40020800

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 f9cd 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f851 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f7ff ff89 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f92b 	bl	8000818 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005c2:	f005 fba9 	bl	8005d18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  UsbHidKeyboardReportBuffer[0]=0;		// Modifier
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <main+0xa0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
  UsbHidKeyboardReportBuffer[1]=0;		// OEM / Reserved
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <main+0xa0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	705a      	strb	r2, [r3, #1]
  UsbHidKeyboardReportBuffer[2]=0x04;	// Key 1 (0x04 = 'a')
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <main+0xa0>)
 80005d4:	2204      	movs	r2, #4
 80005d6:	709a      	strb	r2, [r3, #2]
  UsbHidKeyboardReportBuffer[3]=0;		// Key 2
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <main+0xa0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	70da      	strb	r2, [r3, #3]
  UsbHidKeyboardReportBuffer[4]=0;		// Key 3
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <main+0xa0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	711a      	strb	r2, [r3, #4]
  UsbHidKeyboardReportBuffer[5]=0;		// Key 4
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <main+0xa0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	715a      	strb	r2, [r3, #5]
  UsbHidKeyboardReportBuffer[6]=0;		// Key 5
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <main+0xa0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	719a      	strb	r2, [r3, #6]
  UsbHidKeyboardReportBuffer[7]=0;		// Key 6
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <main+0xa0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	71da      	strb	r2, [r3, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80005f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fa:	4815      	ldr	r0, [pc, #84]	; (8000650 <main+0xa4>)
 80005fc:	f000 fcd4 	bl	8000fa8 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1f7      	bne.n	80005f6 <main+0x4a>
	  {
		  for(uint8_t i = 0; i < 17; i++)
 8000606:	2300      	movs	r3, #0
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	e01a      	b.n	8000642 <main+0x96>
		  {
			  UsbHidKeyboardReportBuffer[2] = MichalSzozdowskiKeycodes[i];
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <main+0xa8>)
 8000610:	5cd2      	ldrb	r2, [r2, r3]
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <main+0xa0>)
 8000614:	709a      	strb	r2, [r3, #2]
			  USBD_HID_SendReport(&hUsbDeviceFS,UsbHidKeyboardReportBuffer,8);
 8000616:	2208      	movs	r2, #8
 8000618:	490c      	ldr	r1, [pc, #48]	; (800064c <main+0xa0>)
 800061a:	480f      	ldr	r0, [pc, #60]	; (8000658 <main+0xac>)
 800061c:	f004 f9ba 	bl	8004994 <USBD_HID_SendReport>
			  HAL_Delay(10);
 8000620:	200a      	movs	r0, #10
 8000622:	f000 fa07 	bl	8000a34 <HAL_Delay>

			  UsbHidKeyboardReportBuffer[2] = 0x00;	// Key 1 (none)
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <main+0xa0>)
 8000628:	2200      	movs	r2, #0
 800062a:	709a      	strb	r2, [r3, #2]
			  USBD_HID_SendReport(&hUsbDeviceFS,UsbHidKeyboardReportBuffer,8);
 800062c:	2208      	movs	r2, #8
 800062e:	4907      	ldr	r1, [pc, #28]	; (800064c <main+0xa0>)
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <main+0xac>)
 8000632:	f004 f9af 	bl	8004994 <USBD_HID_SendReport>
			  HAL_Delay(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f000 f9fc 	bl	8000a34 <HAL_Delay>
		  for(uint8_t i = 0; i < 17; i++)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	3301      	adds	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b10      	cmp	r3, #16
 8000646:	d9e1      	bls.n	800060c <main+0x60>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000648:	e7d5      	b.n	80005f6 <main+0x4a>
 800064a:	bf00      	nop
 800064c:	20000190 	.word	0x20000190
 8000650:	40020800 	.word	0x40020800
 8000654:	20000000 	.word	0x20000000
 8000658:	200001e0 	.word	0x200001e0

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 ffa6 	bl	80065bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <SystemClock_Config+0xc8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <SystemClock_Config+0xc8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <SystemClock_Config+0xc8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <SystemClock_Config+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a20      	ldr	r2, [pc, #128]	; (8000728 <SystemClock_Config+0xcc>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <SystemClock_Config+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006d0:	2348      	movs	r3, #72	; 0x48
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006d8:	2303      	movs	r3, #3
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fdfd 	bl	80022e0 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f81e 	bl	800072c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2102      	movs	r1, #2
 800070c:	4618      	mov	r0, r3
 800070e:	f002 f85f 	bl	80027d0 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000718:	f000 f808 	bl	800072c <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <HAL_MspInit+0x4c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <HAL_MspInit+0x4c>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6453      	str	r3, [r2, #68]	; 0x44
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <HAL_MspInit+0x4c>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_MspInit+0x4c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	6413      	str	r3, [r2, #64]	; 0x40
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_MspInit+0x4c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800077a:	2007      	movs	r0, #7
 800077c:	f000 fa4e 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <NMI_Handler+0x4>

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f90c 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <OTG_FS_IRQHandler+0x10>)
 80007e6:	f000 fd60 	bl	80012aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200006b0 	.word	0x200006b0

080007f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <SystemInit+0x20>)
 80007fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <SystemInit+0x20>)
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_USART2_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000850:	f002 f9ba 	bl	8002bc8 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f7ff ff67 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000198 	.word	0x20000198
 8000868:	40004400 	.word	0x40004400

0800086c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <HAL_UART_MspInit+0x84>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d12b      	bne.n	80008e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0x88>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0x88>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d6:	2307      	movs	r3, #7
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <HAL_UART_MspInit+0x8c>)
 80008e2:	f000 f9dd 	bl	8000ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000

080008fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000902:	490e      	ldr	r1, [pc, #56]	; (800093c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000918:	4c0b      	ldr	r4, [pc, #44]	; (8000948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000926:	f7ff ff65 	bl	80007f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092a:	f005 fe23 	bl	8006574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092e:	f7ff fe3d 	bl	80005ac <main>
  bx  lr    
 8000932:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000940:	08006644 	.word	0x08006644
  ldr r2, =_sbss
 8000944:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000948:	20000ab8 	.word	0x20000ab8

0800094c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <HAL_Init+0x40>)
 800095a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_Init+0x40>)
 8000966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800096a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_Init+0x40>)
 8000972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f94f 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	2000      	movs	r0, #0
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff feda 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023c00 	.word	0x40023c00

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f967 	bl	8000c86 <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f92f 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000014 	.word	0x20000014
 80009ec:	2000001c 	.word	0x2000001c
 80009f0:	20000018 	.word	0x20000018

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	2000001c 	.word	0x2000001c
 8000a18:	200001dc 	.word	0x200001dc

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200001dc 	.word	0x200001dc

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff ffee 	bl	8000a1c <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffde 	bl	8000a1c <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000001c 	.word	0x2000001c

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4907      	ldr	r1, [pc, #28]	; (8000b18 <__NVIC_EnableIRQ+0x38>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	; (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff29 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff3e 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff8e 	bl	8000b70 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff31 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa2 	bl	8000bd8 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e159      	b.n	8000f70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 8148 	bne.w	8000f6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d005      	beq.n	8000cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d130      	bne.n	8000d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	091b      	lsrs	r3, r3, #4
 8000d3e:	f003 0201 	and.w	r2, r3, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d017      	beq.n	8000d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	69b9      	ldr	r1, [r7, #24]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80a2 	beq.w	8000f6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b57      	ldr	r3, [pc, #348]	; (8000f88 <HAL_GPIO_Init+0x2e8>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a56      	ldr	r2, [pc, #344]	; (8000f88 <HAL_GPIO_Init+0x2e8>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <HAL_GPIO_Init+0x2e8>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e42:	4a52      	ldr	r2, [pc, #328]	; (8000f8c <HAL_GPIO_Init+0x2ec>)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a49      	ldr	r2, [pc, #292]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d019      	beq.n	8000ea2 <HAL_GPIO_Init+0x202>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a48      	ldr	r2, [pc, #288]	; (8000f94 <HAL_GPIO_Init+0x2f4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x1fe>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a47      	ldr	r2, [pc, #284]	; (8000f98 <HAL_GPIO_Init+0x2f8>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x1fa>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a46      	ldr	r2, [pc, #280]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a45      	ldr	r2, [pc, #276]	; (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x1f2>
 8000e8e:	2304      	movs	r3, #4
 8000e90:	e008      	b.n	8000ea4 <HAL_GPIO_Init+0x204>
 8000e92:	2307      	movs	r3, #7
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x204>
 8000e96:	2303      	movs	r3, #3
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x204>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x204>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x204>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb4:	4935      	ldr	r1, [pc, #212]	; (8000f8c <HAL_GPIO_Init+0x2ec>)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec2:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ee6:	4a2f      	ldr	r2, [pc, #188]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f10:	4a24      	ldr	r2, [pc, #144]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f3a:	4a1a      	ldr	r2, [pc, #104]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f64:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	f67f aea2 	bls.w	8000cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020c00 	.word	0x40020c00
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40013c00 	.word	0x40013c00

08000fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e001      	b.n	8000fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff4:	e003      	b.n	8000ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800100a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100c:	b08f      	sub	sp, #60	; 0x3c
 800100e:	af0a      	add	r7, sp, #40	; 0x28
 8001010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e10f      	b.n	800123c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d106      	bne.n	800103c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f004 ffa4 	bl	8005f84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f002 f8df 	bl	800321e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	687e      	ldr	r6, [r7, #4]
 8001068:	466d      	mov	r5, sp
 800106a:	f106 0410 	add.w	r4, r6, #16
 800106e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800107a:	e885 0003 	stmia.w	r5, {r0, r1}
 800107e:	1d33      	adds	r3, r6, #4
 8001080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f001 ffb6 	bl	8002ff4 <USB_CoreInit>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2202      	movs	r2, #2
 8001092:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0d0      	b.n	800123c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 f8cd 	bl	8003240 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e04a      	b.n	8001142 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	333d      	adds	r3, #61	; 0x3d
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	333c      	adds	r3, #60	; 0x3c
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	b298      	uxth	r0, r3
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	1a9b      	subs	r3, r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	3342      	adds	r3, #66	; 0x42
 80010e8:	4602      	mov	r2, r0
 80010ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	333f      	adds	r3, #63	; 0x3f
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	1a9b      	subs	r3, r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	3344      	adds	r3, #68	; 0x44
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	3348      	adds	r3, #72	; 0x48
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	1a9b      	subs	r3, r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	3350      	adds	r3, #80	; 0x50
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	3301      	adds	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	d3af      	bcc.n	80010ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e044      	b.n	80011dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	3301      	adds	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3b5      	bcc.n	8001152 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	687e      	ldr	r6, [r7, #4]
 80011ee:	466d      	mov	r5, sp
 80011f0:	f106 0410 	add.w	r4, r6, #16
 80011f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001200:	e885 0003 	stmia.w	r5, {r0, r1}
 8001204:	1d33      	adds	r3, r6, #4
 8001206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f002 f865 	bl	80032d8 <USB_DevInit>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e00d      	b.n	800123c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f003 f8e1 	bl	80043fc <USB_DevDisconnect>

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001244 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_PCD_Start+0x1c>
 800125c:	2302      	movs	r3, #2
 800125e:	e020      	b.n	80012a2 <HAL_PCD_Start+0x5e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	2b01      	cmp	r3, #1
 800126e:	d109      	bne.n	8001284 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001274:	2b01      	cmp	r3, #1
 8001276:	d005      	beq.n	8001284 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f001 ffb7 	bl	80031fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f003 f891 	bl	80043ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012aa:	b590      	push	{r4, r7, lr}
 80012ac:	b08d      	sub	sp, #52	; 0x34
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 f94f 	bl	8004564 <USB_GetMode>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f040 839d 	bne.w	8001a08 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 f8b3 	bl	800443e <USB_ReadInterrupts>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8393 	beq.w	8001a06 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 f8aa 	bl	800443e <USB_ReadInterrupts>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d107      	bne.n	8001304 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f002 0202 	and.w	r2, r2, #2
 8001302:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f003 f898 	bl	800443e <USB_ReadInterrupts>
 800130e:	4603      	mov	r3, r0
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b10      	cmp	r3, #16
 8001316:	d161      	bne.n	80013dc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699a      	ldr	r2, [r3, #24]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0210 	bic.w	r2, r2, #16
 8001326:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f003 020f 	and.w	r2, r3, #15
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	3304      	adds	r3, #4
 8001346:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	0c5b      	lsrs	r3, r3, #17
 800134c:	f003 030f 	and.w	r3, r3, #15
 8001350:	2b02      	cmp	r3, #2
 8001352:	d124      	bne.n	800139e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d035      	beq.n	80013cc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800136a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136e:	b29b      	uxth	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	6a38      	ldr	r0, [r7, #32]
 8001374:	f002 fecf 	bl	8004116 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001384:	441a      	add	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001396:	441a      	add	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	619a      	str	r2, [r3, #24]
 800139c:	e016      	b.n	80013cc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	0c5b      	lsrs	r3, r3, #17
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d110      	bne.n	80013cc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013b0:	2208      	movs	r2, #8
 80013b2:	4619      	mov	r1, r3
 80013b4:	6a38      	ldr	r0, [r7, #32]
 80013b6:	f002 feae 	bl	8004116 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c6:	441a      	add	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0210 	orr.w	r2, r2, #16
 80013da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 f82c 	bl	800443e <USB_ReadInterrupts>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013f0:	d16e      	bne.n	80014d0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 f832 	bl	8004464 <USB_ReadDevAllOutEpInterrupt>
 8001400:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001402:	e062      	b.n	80014ca <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d057      	beq.n	80014be <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f003 f857 	bl	80044cc <USB_ReadDevOutEPInterrupt>
 800141e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00c      	beq.n	8001444 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001436:	461a      	mov	r2, r3
 8001438:	2301      	movs	r3, #1
 800143a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800143c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fd98 	bl	8001f74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00c      	beq.n	8001468 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	015a      	lsls	r2, r3, #5
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4413      	add	r3, r2
 8001456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800145a:	461a      	mov	r2, r3
 800145c:	2308      	movs	r3, #8
 800145e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fe92 	bl	800218c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	d008      	beq.n	8001484 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	015a      	lsls	r2, r3, #5
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4413      	add	r3, r2
 800147a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147e:	461a      	mov	r2, r3
 8001480:	2310      	movs	r3, #16
 8001482:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	015a      	lsls	r2, r3, #5
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800149a:	461a      	mov	r2, r3
 800149c:	2320      	movs	r3, #32
 800149e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	015a      	lsls	r2, r3, #5
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b6:	461a      	mov	r2, r3
 80014b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	3301      	adds	r3, #1
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d199      	bne.n	8001404 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f002 ffb2 	bl	800443e <USB_ReadInterrupts>
 80014da:	4603      	mov	r3, r0
 80014dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014e4:	f040 80c0 	bne.w	8001668 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 ffd3 	bl	8004498 <USB_ReadDevAllInEpInterrupt>
 80014f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014f8:	e0b2      	b.n	8001660 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80a7 	beq.w	8001654 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fff9 	bl	8004508 <USB_ReadDevInEPInterrupt>
 8001516:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d057      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	2201      	movs	r2, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	69f9      	ldr	r1, [r7, #28]
 800153e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001542:	4013      	ands	r3, r2
 8001544:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	015a      	lsls	r2, r3, #5
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	4413      	add	r3, r2
 800154e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001552:	461a      	mov	r2, r3
 8001554:	2301      	movs	r3, #1
 8001556:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d132      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3348      	adds	r3, #72	; 0x48
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4403      	add	r3, r0
 8001580:	3344      	adds	r3, #68	; 0x44
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4419      	add	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4403      	add	r3, r0
 8001594:	3348      	adds	r3, #72	; 0x48
 8001596:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	2b00      	cmp	r3, #0
 800159c:	d113      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x31c>
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3350      	adds	r3, #80	; 0x50
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d108      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015be:	461a      	mov	r2, r3
 80015c0:	2101      	movs	r1, #1
 80015c2:	f003 f801 	bl	80045c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f004 fd5a 	bl	8006086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2308      	movs	r3, #8
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001604:	461a      	mov	r2, r3
 8001606:	2310      	movs	r3, #16
 8001608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001620:	461a      	mov	r2, r3
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	015a      	lsls	r2, r3, #5
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	4413      	add	r3, r2
 8001638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800163c:	461a      	mov	r2, r3
 800163e:	2302      	movs	r3, #2
 8001640:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800164c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fc03 	bl	8001e5a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3301      	adds	r3, #1
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	085b      	lsrs	r3, r3, #1
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f af49 	bne.w	80014fa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f002 fee6 	bl	800443e <USB_ReadInterrupts>
 8001672:	4603      	mov	r3, r0
 8001674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800167c:	d122      	bne.n	80016c4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001698:	2b01      	cmp	r3, #1
 800169a:	d108      	bne.n	80016ae <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016a4:	2100      	movs	r1, #0
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fe0e 	bl	80022c8 <HAL_PCDEx_LPM_Callback>
 80016ac:	e002      	b.n	80016b4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f004 fd56 	bl	8006160 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 feb8 	bl	800443e <USB_ReadInterrupts>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016d8:	d112      	bne.n	8001700 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d102      	bne.n	80016f0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f004 fd12 	bl	8006114 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016fe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fe9a 	bl	800443e <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001714:	f040 80c7 	bne.w	80018a6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2110      	movs	r1, #16
 8001732:	4618      	mov	r0, r3
 8001734:	f001 ff34 	bl	80035a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173c:	e056      	b.n	80017ec <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800174a:	461a      	mov	r2, r3
 800174c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001750:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	015a      	lsls	r2, r3, #5
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	4413      	add	r3, r2
 800175a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001762:	0151      	lsls	r1, r2, #5
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	440a      	add	r2, r1
 8001768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800176c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001770:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001782:	0151      	lsls	r1, r2, #5
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	440a      	add	r2, r1
 8001788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800178c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001790:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	015a      	lsls	r2, r3, #5
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4413      	add	r3, r2
 800179a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179e:	461a      	mov	r2, r3
 80017a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b6:	0151      	lsls	r1, r2, #5
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	440a      	add	r2, r1
 80017bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d6:	0151      	lsls	r1, r2, #5
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	440a      	add	r2, r1
 80017dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	3301      	adds	r3, #1
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3a3      	bcc.n	800173e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001804:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001808:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	2b00      	cmp	r3, #0
 8001810:	d016      	beq.n	8001840 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001822:	f043 030b 	orr.w	r3, r3, #11
 8001826:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001838:	f043 030b 	orr.w	r3, r3, #11
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	e015      	b.n	800186c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001852:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001856:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001866:	f043 030b 	orr.w	r3, r3, #11
 800186a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800187e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001890:	461a      	mov	r2, r3
 8001892:	f002 fe99 	bl	80045c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fdc7 	bl	800443e <USB_ReadInterrupts>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ba:	d124      	bne.n	8001906 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fe5d 	bl	8004580 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fec5 	bl	800365a <USB_GetDevSpeed>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681c      	ldr	r4, [r3, #0]
 80018dc:	f001 f940 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 80018e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	4620      	mov	r0, r4
 80018ec:	f001 fbe4 	bl	80030b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f004 fbf0 	bl	80060d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001904:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 fd97 	bl	800443e <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b08      	cmp	r3, #8
 8001918:	d10a      	bne.n	8001930 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f004 fbcd 	bl	80060ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f002 0208 	and.w	r2, r2, #8
 800192e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f002 fd82 	bl	800443e <USB_ReadInterrupts>
 800193a:	4603      	mov	r3, r0
 800193c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001944:	d10f      	bne.n	8001966 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	b2db      	uxtb	r3, r3
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f004 fc25 	bl	80061a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fd67 	bl	800443e <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800197a:	d10f      	bne.n	800199c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4619      	mov	r1, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f004 fbf8 	bl	800617c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800199a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fd4c 	bl	800443e <USB_ReadInterrupts>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b0:	d10a      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f004 fc06 	bl	80061c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80019c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fd36 	bl	800443e <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d115      	bne.n	8001a08 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f004 fbf6 	bl	80061e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6859      	ldr	r1, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	e000      	b.n	8001a08 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001a06:	bf00      	nop
    }
  }
}
 8001a08:	3734      	adds	r7, #52	; 0x34
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd90      	pop	{r4, r7, pc}

08001a0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_PCD_SetAddress+0x1a>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e013      	b.n	8001a50 <HAL_PCD_SetAddress+0x42>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fc94 	bl	800436e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	70fb      	strb	r3, [r7, #3]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	803b      	strh	r3, [r7, #0]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da0f      	bge.n	8001a9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 020f 	and.w	r2, r3, #15
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	3338      	adds	r3, #56	; 0x38
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	3304      	adds	r3, #4
 8001a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	705a      	strb	r2, [r3, #1]
 8001a9c:	e00f      	b.n	8001abe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	f003 020f 	and.w	r2, r3, #15
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001aca:	883a      	ldrh	r2, [r7, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	78ba      	ldrb	r2, [r7, #2]
 8001ad4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ae8:	78bb      	ldrb	r3, [r7, #2]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d102      	bne.n	8001af4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_PCD_EP_Open+0xaa>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e00e      	b.n	8001b20 <HAL_PCD_EP_Open+0xc8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68f9      	ldr	r1, [r7, #12]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 fdc7 	bl	80036a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da0f      	bge.n	8001b5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	f003 020f 	and.w	r2, r3, #15
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	3338      	adds	r3, #56	; 0x38
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	3304      	adds	r3, #4
 8001b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2201      	movs	r2, #1
 8001b58:	705a      	strb	r2, [r3, #1]
 8001b5a:	e00f      	b.n	8001b7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	f003 020f 	and.w	r2, r3, #15
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	3304      	adds	r3, #4
 8001b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_EP_Close+0x6e>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e00e      	b.n	8001bb4 <HAL_PCD_EP_Close+0x8c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f001 fe05 	bl	80037b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	f003 020f 	and.w	r2, r3, #15
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4413      	add	r3, r2
 8001be2:	3304      	adds	r3, #4
 8001be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c18:	7afb      	ldrb	r3, [r7, #11]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	6979      	ldr	r1, [r7, #20]
 8001c30:	f002 f8e0 	bl	8003df4 <USB_EP0StartXfer>
 8001c34:	e008      	b.n	8001c48 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	6979      	ldr	r1, [r7, #20]
 8001c44:	f001 fe92 	bl	800396c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	f003 020f 	and.w	r2, r3, #15
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3338      	adds	r3, #56	; 0x38
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	3304      	adds	r3, #4
 8001c78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6979      	ldr	r1, [r7, #20]
 8001cc4:	f002 f896 	bl	8003df4 <USB_EP0StartXfer>
 8001cc8:	e008      	b.n	8001cdc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	f001 fe48 	bl	800396c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d901      	bls.n	8001d04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e050      	b.n	8001da6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da0f      	bge.n	8001d2c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 020f 	and.w	r2, r3, #15
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	3338      	adds	r3, #56	; 0x38
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	705a      	strb	r2, [r3, #1]
 8001d2a:	e00d      	b.n	8001d48 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3304      	adds	r3, #4
 8001d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_EP_SetStall+0x82>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e01e      	b.n	8001da6 <HAL_PCD_EP_SetStall+0xc0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fa25 	bl	80041c6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10a      	bne.n	8001d9c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	b2d9      	uxtb	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d96:	461a      	mov	r2, r3
 8001d98:	f002 fc16 	bl	80045c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 020f 	and.w	r2, r3, #15
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d901      	bls.n	8001dcc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e042      	b.n	8001e52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	da0f      	bge.n	8001df4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	f003 020f 	and.w	r2, r3, #15
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	3338      	adds	r3, #56	; 0x38
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	3304      	adds	r3, #4
 8001dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	705a      	strb	r2, [r3, #1]
 8001df2:	e00f      	b.n	8001e14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_PCD_EP_ClrStall+0x86>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e00e      	b.n	8001e52 <HAL_PCD_EP_ClrStall+0xa4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fa2d 	bl	80042a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b08a      	sub	sp, #40	; 0x28
 8001e5e:	af02      	add	r7, sp, #8
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	3338      	adds	r3, #56	; 0x38
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3304      	adds	r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d901      	bls.n	8001e92 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e06c      	b.n	8001f6c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d902      	bls.n	8001eae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eb6:	e02b      	b.n	8001f10 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d902      	bls.n	8001ed4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	3303      	adds	r3, #3
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	68d9      	ldr	r1, [r3, #12]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f002 f8d1 	bl	800409a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	441a      	add	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	699a      	ldr	r2, [r3, #24]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	441a      	add	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d809      	bhi.n	8001f3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d203      	bcs.n	8001f3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1be      	bne.n	8001eb8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d811      	bhi.n	8001f6a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	6939      	ldr	r1, [r7, #16]
 8001f62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f66:	4013      	ands	r3, r2
 8001f68:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	333c      	adds	r3, #60	; 0x3c
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	f040 80a0 	bne.w	80020ec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d015      	beq.n	8001fe2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4a72      	ldr	r2, [pc, #456]	; (8002184 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	f240 80dd 	bls.w	800217a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80d7 	beq.w	800217a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fde:	6093      	str	r3, [r2, #8]
 8001fe0:	e0cb      	b.n	800217a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	6093      	str	r3, [r2, #8]
 8001ffe:	e0bc      	b.n	800217a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 80b7 	bne.w	800217a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a5d      	ldr	r2, [pc, #372]	; (8002184 <PCD_EP_OutXfrComplete_int+0x210>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d90f      	bls.n	8002034 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202a:	461a      	mov	r2, r3
 800202c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002030:	6093      	str	r3, [r2, #8]
 8002032:	e0a2      	b.n	800217a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002046:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	0159      	lsls	r1, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	440b      	add	r3, r1
 8002050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800205a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4403      	add	r3, r0
 800206a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800206e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4403      	add	r3, r0
 8002092:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4419      	add	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4403      	add	r3, r0
 80020a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020ac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d114      	bne.n	80020de <PCD_EP_OutXfrComplete_int+0x16a>
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d108      	bne.n	80020de <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020d6:	461a      	mov	r2, r3
 80020d8:	2101      	movs	r1, #1
 80020da:	f002 fa75 	bl	80045c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f003 ffb3 	bl	8006050 <HAL_PCD_DataOutStageCallback>
 80020ea:	e046      	b.n	800217a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a26      	ldr	r2, [pc, #152]	; (8002188 <PCD_EP_OutXfrComplete_int+0x214>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d124      	bne.n	800213e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210a:	461a      	mov	r2, r3
 800210c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002110:	6093      	str	r3, [r2, #8]
 8002112:	e032      	b.n	800217a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b00      	cmp	r3, #0
 800211c:	d008      	beq.n	8002130 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212a:	461a      	mov	r2, r3
 800212c:	2320      	movs	r3, #32
 800212e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	4619      	mov	r1, r3
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f003 ff8a 	bl	8006050 <HAL_PCD_DataOutStageCallback>
 800213c:	e01d      	b.n	800217a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d114      	bne.n	800216e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d108      	bne.n	800216e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002166:	461a      	mov	r2, r3
 8002168:	2100      	movs	r1, #0
 800216a:	f002 fa2d 	bl	80045c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f003 ff6b 	bl	8006050 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	4f54300a 	.word	0x4f54300a
 8002188:	4f54310a 	.word	0x4f54310a

0800218c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	333c      	adds	r3, #60	; 0x3c
 80021a4:	3304      	adds	r3, #4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4a15      	ldr	r2, [pc, #84]	; (8002214 <PCD_EP_OutSetupPacket_int+0x88>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d90e      	bls.n	80021e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d009      	beq.n	80021e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d8:	461a      	mov	r2, r3
 80021da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f003 ff23 	bl	800602c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d90c      	bls.n	8002208 <PCD_EP_OutSetupPacket_int+0x7c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d108      	bne.n	8002208 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002200:	461a      	mov	r2, r3
 8002202:	2101      	movs	r1, #1
 8002204:	f002 f9e0 	bl	80045c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	4f54300a 	.word	0x4f54300a

08002218 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
 8002224:	4613      	mov	r3, r2
 8002226:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d107      	bne.n	8002246 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002236:	883b      	ldrh	r3, [r7, #0]
 8002238:	0419      	lsls	r1, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	430a      	orrs	r2, r1
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
 8002244:	e028      	b.n	8002298 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4413      	add	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e00d      	b.n	8002276 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	3340      	adds	r3, #64	; 0x40
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4413      	add	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	3301      	adds	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	3b01      	subs	r3, #1
 800227c:	429a      	cmp	r2, r3
 800227e:	d3ec      	bcc.n	800225a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002280:	883b      	ldrh	r3, [r7, #0]
 8002282:	0418      	lsls	r0, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	3b01      	subs	r3, #1
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	4302      	orrs	r2, r0
 8002290:	3340      	adds	r3, #64	; 0x40
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e264      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d075      	beq.n	80023ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fe:	4ba3      	ldr	r3, [pc, #652]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d00c      	beq.n	8002324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4ba0      	ldr	r3, [pc, #640]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	2b08      	cmp	r3, #8
 8002314:	d112      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b9d      	ldr	r3, [pc, #628]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002322:	d10b      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	4b99      	ldr	r3, [pc, #612]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d05b      	beq.n	80023e8 <HAL_RCC_OscConfig+0x108>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d157      	bne.n	80023e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e23f      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x74>
 8002346:	4b91      	ldr	r3, [pc, #580]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a90      	ldr	r2, [pc, #576]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x98>
 800235e:	4b8b      	ldr	r3, [pc, #556]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a8a      	ldr	r2, [pc, #552]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b88      	ldr	r3, [pc, #544]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a87      	ldr	r2, [pc, #540]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002378:	4b84      	ldr	r3, [pc, #528]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a83      	ldr	r2, [pc, #524]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b81      	ldr	r3, [pc, #516]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a80      	ldr	r2, [pc, #512]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe fb40 	bl	8000a1c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fe fb3c 	bl	8000a1c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e204      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xc0>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fb2c 	bl	8000a1c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe fb28 	bl	8000a1c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1f0      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b6c      	ldr	r3, [pc, #432]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0xe8>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d063      	beq.n	80024be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f6:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b62      	ldr	r3, [pc, #392]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b5f      	ldr	r3, [pc, #380]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1c4      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b56      	ldr	r3, [pc, #344]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4952      	ldr	r1, [pc, #328]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e03a      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_RCC_OscConfig+0x2b0>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe fae1 	bl	8000a1c <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245e:	f7fe fadd 	bl	8000a1c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1a5      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247c:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4940      	ldr	r1, [pc, #256]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002492:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <HAL_RCC_OscConfig+0x2b0>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fac0 	bl	8000a1c <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a0:	f7fe fabc 	bl	8000a1c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e184      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d030      	beq.n	800252c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_RCC_OscConfig+0x2b4>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe faa0 	bl	8000a1c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e0:	f7fe fa9c 	bl	8000a1c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e164      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x200>
 80024fe:	e015      	b.n	800252c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_OscConfig+0x2b4>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe fa89 	bl	8000a1c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250e:	f7fe fa85 	bl	8000a1c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e14d      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a0 	beq.w	800267a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_OscConfig+0x2b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d121      	bne.n	80025ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <HAL_RCC_OscConfig+0x2b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <HAL_RCC_OscConfig+0x2b8>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7fe fa4b 	bl	8000a1c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e011      	b.n	80025ae <HAL_RCC_OscConfig+0x2ce>
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	42470000 	.word	0x42470000
 8002594:	42470e80 	.word	0x42470e80
 8002598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259c:	f7fe fa3e 	bl	8000a1c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e106      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ae:	4b85      	ldr	r3, [pc, #532]	; (80027c4 <HAL_RCC_OscConfig+0x4e4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2f0>
 80025c2:	4b81      	ldr	r3, [pc, #516]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a80      	ldr	r2, [pc, #512]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	e01c      	b.n	800260a <HAL_RCC_OscConfig+0x32a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x312>
 80025d8:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a7a      	ldr	r2, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	4b78      	ldr	r3, [pc, #480]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a77      	ldr	r2, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
 80025f0:	e00b      	b.n	800260a <HAL_RCC_OscConfig+0x32a>
 80025f2:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a74      	ldr	r2, [pc, #464]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	4b72      	ldr	r3, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a71      	ldr	r2, [pc, #452]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d015      	beq.n	800263e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fe fa03 	bl	8000a1c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe f9ff 	bl	8000a1c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0c5      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ee      	beq.n	800261a <HAL_RCC_OscConfig+0x33a>
 800263c:	e014      	b.n	8002668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7fe f9ed 	bl	8000a1c <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe f9e9 	bl	8000a1c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0af      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ee      	bne.n	8002646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4b56      	ldr	r3, [pc, #344]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a55      	ldr	r2, [pc, #340]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 809b 	beq.w	80027ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002684:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d05c      	beq.n	800274a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d141      	bne.n	800271c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe f9bd 	bl	8000a1c <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe f9b9 	bl	8000a1c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e081      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b8:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	019b      	lsls	r3, r3, #6
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	3b01      	subs	r3, #1
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	4937      	ldr	r1, [pc, #220]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe f992 	bl	8000a1c <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe f98e 	bl	8000a1c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e056      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x41c>
 800271a:	e04e      	b.n	80027ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe f97b 	bl	8000a1c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe f977 	bl	8000a1c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e03f      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x44a>
 8002748:	e037      	b.n	80027ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e032      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d028      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d121      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d11a      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002786:	4013      	ands	r3, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800278c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278e:	4293      	cmp	r3, r2
 8002790:	d111      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	3b01      	subs	r3, #1
 80027a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40007000 	.word	0x40007000
 80027c8:	40023800 	.word	0x40023800
 80027cc:	42470060 	.word	0x42470060

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0cc      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d90c      	bls.n	800280c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800282e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d044      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d119      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d003      	beq.n	800288e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	2b03      	cmp	r3, #3
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e067      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4934      	ldr	r1, [pc, #208]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7fe f8ac 	bl	8000a1c <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fe f8a8 	bl	8000a1c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d20c      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe f80c 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023c00 	.word	0x40023c00
 800298c:	40023800 	.word	0x40023800
 8002990:	0800661c 	.word	0x0800661c
 8002994:	20000014 	.word	0x20000014
 8002998:	20000018 	.word	0x20000018

0800299c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	2300      	movs	r3, #0
 80029ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b4:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d00d      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x40>
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	f200 80bd 	bhi.w	8002b40 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x34>
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ce:	e0b7      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b61      	ldr	r3, [pc, #388]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029d2:	60bb      	str	r3, [r7, #8]
       break;
 80029d4:	e0b7      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029d6:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029d8:	60bb      	str	r3, [r7, #8]
      break;
 80029da:	e0b4      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029dc:	4b5d      	ldr	r3, [pc, #372]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e6:	4b5b      	ldr	r3, [pc, #364]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04d      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f2:	4b58      	ldr	r3, [pc, #352]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	461a      	mov	r2, r3
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a02:	f04f 0100 	mov.w	r1, #0
 8002a06:	ea02 0800 	and.w	r8, r2, r0
 8002a0a:	ea03 0901 	and.w	r9, r3, r1
 8002a0e:	4640      	mov	r0, r8
 8002a10:	4649      	mov	r1, r9
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	014b      	lsls	r3, r1, #5
 8002a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a20:	0142      	lsls	r2, r0, #5
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	ebb0 0008 	subs.w	r0, r0, r8
 8002a2a:	eb61 0109 	sbc.w	r1, r1, r9
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	018b      	lsls	r3, r1, #6
 8002a38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a3c:	0182      	lsls	r2, r0, #6
 8002a3e:	1a12      	subs	r2, r2, r0
 8002a40:	eb63 0301 	sbc.w	r3, r3, r1
 8002a44:	f04f 0000 	mov.w	r0, #0
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	00d9      	lsls	r1, r3, #3
 8002a4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a52:	00d0      	lsls	r0, r2, #3
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	eb12 0208 	adds.w	r2, r2, r8
 8002a5c:	eb43 0309 	adc.w	r3, r3, r9
 8002a60:	f04f 0000 	mov.w	r0, #0
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	0259      	lsls	r1, r3, #9
 8002a6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a6e:	0250      	lsls	r0, r2, #9
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	f7fd fbaa 	bl	80001d8 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e04a      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	099b      	lsrs	r3, r3, #6
 8002a94:	461a      	mov	r2, r3
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	ea02 0400 	and.w	r4, r2, r0
 8002aa6:	ea03 0501 	and.w	r5, r3, r1
 8002aaa:	4620      	mov	r0, r4
 8002aac:	4629      	mov	r1, r5
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	014b      	lsls	r3, r1, #5
 8002ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002abc:	0142      	lsls	r2, r0, #5
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	1b00      	subs	r0, r0, r4
 8002ac4:	eb61 0105 	sbc.w	r1, r1, r5
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	018b      	lsls	r3, r1, #6
 8002ad2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ad6:	0182      	lsls	r2, r0, #6
 8002ad8:	1a12      	subs	r2, r2, r0
 8002ada:	eb63 0301 	sbc.w	r3, r3, r1
 8002ade:	f04f 0000 	mov.w	r0, #0
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	00d9      	lsls	r1, r3, #3
 8002ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aec:	00d0      	lsls	r0, r2, #3
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	1912      	adds	r2, r2, r4
 8002af4:	eb45 0303 	adc.w	r3, r5, r3
 8002af8:	f04f 0000 	mov.w	r0, #0
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	0299      	lsls	r1, r3, #10
 8002b02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b06:	0290      	lsls	r0, r2, #10
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	f7fd fb5e 	bl	80001d8 <__aeabi_uldivmod>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4613      	mov	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	60bb      	str	r3, [r7, #8]
      break;
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b42:	60bb      	str	r3, [r7, #8]
      break;
 8002b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b46:	68bb      	ldr	r3, [r7, #8]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	00f42400 	.word	0x00f42400
 8002b5c:	007a1200 	.word	0x007a1200

08002b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000014 	.word	0x20000014

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b7c:	f7ff fff0 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0a9b      	lsrs	r3, r3, #10
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	0800662c 	.word	0x0800662c

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ba4:	f7ff ffdc 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0b5b      	lsrs	r3, r3, #13
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	0800662c 	.word	0x0800662c

08002bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e03f      	b.n	8002c5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd fe3c 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f829 	bl	8002c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c68:	b09f      	sub	sp, #124	; 0x7c
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	68d9      	ldr	r1, [r3, #12]
 8002c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	ea40 0301 	orr.w	r3, r0, r1
 8002c84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ca8:	f021 010c 	bic.w	r1, r1, #12
 8002cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc2:	6999      	ldr	r1, [r3, #24]
 8002cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	ea40 0301 	orr.w	r3, r0, r1
 8002ccc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4bc5      	ldr	r3, [pc, #788]	; (8002fe8 <UART_SetConfig+0x384>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d004      	beq.n	8002ce2 <UART_SetConfig+0x7e>
 8002cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4bc3      	ldr	r3, [pc, #780]	; (8002fec <UART_SetConfig+0x388>)
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d103      	bne.n	8002cea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ce2:	f7ff ff5d 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8002ce6:	6778      	str	r0, [r7, #116]	; 0x74
 8002ce8:	e002      	b.n	8002cf0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cea:	f7ff ff45 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8002cee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf8:	f040 80b6 	bne.w	8002e68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cfe:	461c      	mov	r4, r3
 8002d00:	f04f 0500 	mov.w	r5, #0
 8002d04:	4622      	mov	r2, r4
 8002d06:	462b      	mov	r3, r5
 8002d08:	1891      	adds	r1, r2, r2
 8002d0a:	6439      	str	r1, [r7, #64]	; 0x40
 8002d0c:	415b      	adcs	r3, r3
 8002d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d14:	1912      	adds	r2, r2, r4
 8002d16:	eb45 0303 	adc.w	r3, r5, r3
 8002d1a:	f04f 0000 	mov.w	r0, #0
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	00d9      	lsls	r1, r3, #3
 8002d24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d28:	00d0      	lsls	r0, r2, #3
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	1911      	adds	r1, r2, r4
 8002d30:	6639      	str	r1, [r7, #96]	; 0x60
 8002d32:	416b      	adcs	r3, r5
 8002d34:	667b      	str	r3, [r7, #100]	; 0x64
 8002d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	1891      	adds	r1, r2, r2
 8002d42:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d44:	415b      	adcs	r3, r3
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d50:	f7fd fa42 	bl	80001d8 <__aeabi_uldivmod>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4ba5      	ldr	r3, [pc, #660]	; (8002ff0 <UART_SetConfig+0x38c>)
 8002d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	011e      	lsls	r6, r3, #4
 8002d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d64:	461c      	mov	r4, r3
 8002d66:	f04f 0500 	mov.w	r5, #0
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	462b      	mov	r3, r5
 8002d6e:	1891      	adds	r1, r2, r2
 8002d70:	6339      	str	r1, [r7, #48]	; 0x30
 8002d72:	415b      	adcs	r3, r3
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
 8002d76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d7a:	1912      	adds	r2, r2, r4
 8002d7c:	eb45 0303 	adc.w	r3, r5, r3
 8002d80:	f04f 0000 	mov.w	r0, #0
 8002d84:	f04f 0100 	mov.w	r1, #0
 8002d88:	00d9      	lsls	r1, r3, #3
 8002d8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d8e:	00d0      	lsls	r0, r2, #3
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	1911      	adds	r1, r2, r4
 8002d96:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d98:	416b      	adcs	r3, r5
 8002d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	1891      	adds	r1, r2, r2
 8002da8:	62b9      	str	r1, [r7, #40]	; 0x28
 8002daa:	415b      	adcs	r3, r3
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002db2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002db6:	f7fd fa0f 	bl	80001d8 <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4b8c      	ldr	r3, [pc, #560]	; (8002ff0 <UART_SetConfig+0x38c>)
 8002dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	2164      	movs	r1, #100	; 0x64
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	3332      	adds	r3, #50	; 0x32
 8002dd2:	4a87      	ldr	r2, [pc, #540]	; (8002ff0 <UART_SetConfig+0x38c>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002de0:	441e      	add	r6, r3
 8002de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de4:	4618      	mov	r0, r3
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	1894      	adds	r4, r2, r2
 8002df0:	623c      	str	r4, [r7, #32]
 8002df2:	415b      	adcs	r3, r3
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
 8002df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dfa:	1812      	adds	r2, r2, r0
 8002dfc:	eb41 0303 	adc.w	r3, r1, r3
 8002e00:	f04f 0400 	mov.w	r4, #0
 8002e04:	f04f 0500 	mov.w	r5, #0
 8002e08:	00dd      	lsls	r5, r3, #3
 8002e0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e0e:	00d4      	lsls	r4, r2, #3
 8002e10:	4622      	mov	r2, r4
 8002e12:	462b      	mov	r3, r5
 8002e14:	1814      	adds	r4, r2, r0
 8002e16:	653c      	str	r4, [r7, #80]	; 0x50
 8002e18:	414b      	adcs	r3, r1
 8002e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	461a      	mov	r2, r3
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	1891      	adds	r1, r2, r2
 8002e28:	61b9      	str	r1, [r7, #24]
 8002e2a:	415b      	adcs	r3, r3
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e36:	f7fd f9cf 	bl	80001d8 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ff0 <UART_SetConfig+0x38c>)
 8002e40:	fba3 1302 	umull	r1, r3, r3, r2
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	2164      	movs	r1, #100	; 0x64
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	3332      	adds	r3, #50	; 0x32
 8002e52:	4a67      	ldr	r2, [pc, #412]	; (8002ff0 <UART_SetConfig+0x38c>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	f003 0207 	and.w	r2, r3, #7
 8002e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4432      	add	r2, r6
 8002e64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e66:	e0b9      	b.n	8002fdc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6a:	461c      	mov	r4, r3
 8002e6c:	f04f 0500 	mov.w	r5, #0
 8002e70:	4622      	mov	r2, r4
 8002e72:	462b      	mov	r3, r5
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	6139      	str	r1, [r7, #16]
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e80:	1912      	adds	r2, r2, r4
 8002e82:	eb45 0303 	adc.w	r3, r5, r3
 8002e86:	f04f 0000 	mov.w	r0, #0
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	00d9      	lsls	r1, r3, #3
 8002e90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e94:	00d0      	lsls	r0, r2, #3
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	eb12 0804 	adds.w	r8, r2, r4
 8002e9e:	eb43 0905 	adc.w	r9, r3, r5
 8002ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f04f 0100 	mov.w	r1, #0
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	008b      	lsls	r3, r1, #2
 8002eb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002eba:	0082      	lsls	r2, r0, #2
 8002ebc:	4640      	mov	r0, r8
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	f7fd f98a 	bl	80001d8 <__aeabi_uldivmod>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4b49      	ldr	r3, [pc, #292]	; (8002ff0 <UART_SetConfig+0x38c>)
 8002eca:	fba3 2302 	umull	r2, r3, r3, r2
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	011e      	lsls	r6, r3, #4
 8002ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	1894      	adds	r4, r2, r2
 8002ee0:	60bc      	str	r4, [r7, #8]
 8002ee2:	415b      	adcs	r3, r3
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eea:	1812      	adds	r2, r2, r0
 8002eec:	eb41 0303 	adc.w	r3, r1, r3
 8002ef0:	f04f 0400 	mov.w	r4, #0
 8002ef4:	f04f 0500 	mov.w	r5, #0
 8002ef8:	00dd      	lsls	r5, r3, #3
 8002efa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002efe:	00d4      	lsls	r4, r2, #3
 8002f00:	4622      	mov	r2, r4
 8002f02:	462b      	mov	r3, r5
 8002f04:	1814      	adds	r4, r2, r0
 8002f06:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f08:	414b      	adcs	r3, r1
 8002f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f04f 0100 	mov.w	r1, #0
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	008b      	lsls	r3, r1, #2
 8002f20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f24:	0082      	lsls	r2, r0, #2
 8002f26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f2a:	f7fd f955 	bl	80001d8 <__aeabi_uldivmod>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <UART_SetConfig+0x38c>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	2164      	movs	r1, #100	; 0x64
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	3332      	adds	r3, #50	; 0x32
 8002f46:	4a2a      	ldr	r2, [pc, #168]	; (8002ff0 <UART_SetConfig+0x38c>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f52:	441e      	add	r6, r3
 8002f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f56:	4618      	mov	r0, r3
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	1894      	adds	r4, r2, r2
 8002f62:	603c      	str	r4, [r7, #0]
 8002f64:	415b      	adcs	r3, r3
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f6c:	1812      	adds	r2, r2, r0
 8002f6e:	eb41 0303 	adc.w	r3, r1, r3
 8002f72:	f04f 0400 	mov.w	r4, #0
 8002f76:	f04f 0500 	mov.w	r5, #0
 8002f7a:	00dd      	lsls	r5, r3, #3
 8002f7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f80:	00d4      	lsls	r4, r2, #3
 8002f82:	4622      	mov	r2, r4
 8002f84:	462b      	mov	r3, r5
 8002f86:	eb12 0a00 	adds.w	sl, r2, r0
 8002f8a:	eb43 0b01 	adc.w	fp, r3, r1
 8002f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	008b      	lsls	r3, r1, #2
 8002fa2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fa6:	0082      	lsls	r2, r0, #2
 8002fa8:	4650      	mov	r0, sl
 8002faa:	4659      	mov	r1, fp
 8002fac:	f7fd f914 	bl	80001d8 <__aeabi_uldivmod>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <UART_SetConfig+0x38c>)
 8002fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2164      	movs	r1, #100	; 0x64
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	3332      	adds	r3, #50	; 0x32
 8002fc8:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <UART_SetConfig+0x38c>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4432      	add	r2, r6
 8002fda:	609a      	str	r2, [r3, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	377c      	adds	r7, #124	; 0x7c
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40011000 	.word	0x40011000
 8002fec:	40011400 	.word	0x40011400
 8002ff0:	51eb851f 	.word	0x51eb851f

08002ff4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	f107 001c 	add.w	r0, r7, #28
 8003002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	2b01      	cmp	r3, #1
 800300a:	d122      	bne.n	8003052 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d105      	bne.n	8003046 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f001 fb1c 	bl	8004684 <USB_CoreReset>
 800304c:	4603      	mov	r3, r0
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e01a      	b.n	8003088 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f001 fb10 	bl	8004684 <USB_CoreReset>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
 800307a:	e005      	b.n	8003088 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10b      	bne.n	80030a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f043 0206 	orr.w	r2, r3, #6
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030b2:	b004      	add	sp, #16
 80030b4:	4770      	bx	lr
	...

080030b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d165      	bne.n	8003198 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4a41      	ldr	r2, [pc, #260]	; (80031d4 <USB_SetTurnaroundTime+0x11c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d906      	bls.n	80030e2 <USB_SetTurnaroundTime+0x2a>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4a40      	ldr	r2, [pc, #256]	; (80031d8 <USB_SetTurnaroundTime+0x120>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d202      	bcs.n	80030e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80030dc:	230f      	movs	r3, #15
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e062      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <USB_SetTurnaroundTime+0x120>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d306      	bcc.n	80030f8 <USB_SetTurnaroundTime+0x40>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <USB_SetTurnaroundTime+0x124>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d202      	bcs.n	80030f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80030f2:	230e      	movs	r3, #14
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e057      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4a38      	ldr	r2, [pc, #224]	; (80031dc <USB_SetTurnaroundTime+0x124>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d306      	bcc.n	800310e <USB_SetTurnaroundTime+0x56>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4a37      	ldr	r2, [pc, #220]	; (80031e0 <USB_SetTurnaroundTime+0x128>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d202      	bcs.n	800310e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003108:	230d      	movs	r3, #13
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	e04c      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4a33      	ldr	r2, [pc, #204]	; (80031e0 <USB_SetTurnaroundTime+0x128>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d306      	bcc.n	8003124 <USB_SetTurnaroundTime+0x6c>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4a32      	ldr	r2, [pc, #200]	; (80031e4 <USB_SetTurnaroundTime+0x12c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d802      	bhi.n	8003124 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800311e:	230c      	movs	r3, #12
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e041      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4a2f      	ldr	r2, [pc, #188]	; (80031e4 <USB_SetTurnaroundTime+0x12c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d906      	bls.n	800313a <USB_SetTurnaroundTime+0x82>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4a2e      	ldr	r2, [pc, #184]	; (80031e8 <USB_SetTurnaroundTime+0x130>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d802      	bhi.n	800313a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003134:	230b      	movs	r3, #11
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e036      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <USB_SetTurnaroundTime+0x130>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d906      	bls.n	8003150 <USB_SetTurnaroundTime+0x98>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <USB_SetTurnaroundTime+0x134>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d802      	bhi.n	8003150 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800314a:	230a      	movs	r3, #10
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e02b      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4a26      	ldr	r2, [pc, #152]	; (80031ec <USB_SetTurnaroundTime+0x134>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d906      	bls.n	8003166 <USB_SetTurnaroundTime+0xae>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <USB_SetTurnaroundTime+0x138>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d202      	bcs.n	8003166 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003160:	2309      	movs	r3, #9
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	e020      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <USB_SetTurnaroundTime+0x138>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d306      	bcc.n	800317c <USB_SetTurnaroundTime+0xc4>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <USB_SetTurnaroundTime+0x13c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d802      	bhi.n	800317c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003176:	2308      	movs	r3, #8
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e015      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <USB_SetTurnaroundTime+0x13c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d906      	bls.n	8003192 <USB_SetTurnaroundTime+0xda>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <USB_SetTurnaroundTime+0x140>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d202      	bcs.n	8003192 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800318c:	2307      	movs	r3, #7
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	e00a      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003192:	2306      	movs	r3, #6
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e007      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800319e:	2309      	movs	r3, #9
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	e001      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80031a4:	2309      	movs	r3, #9
 80031a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	029b      	lsls	r3, r3, #10
 80031bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	00d8acbf 	.word	0x00d8acbf
 80031d8:	00e4e1c0 	.word	0x00e4e1c0
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	01067380 	.word	0x01067380
 80031e4:	011a499f 	.word	0x011a499f
 80031e8:	01312cff 	.word	0x01312cff
 80031ec:	014ca43f 	.word	0x014ca43f
 80031f0:	016e3600 	.word	0x016e3600
 80031f4:	01a6ab1f 	.word	0x01a6ab1f
 80031f8:	01e84800 	.word	0x01e84800

080031fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f043 0201 	orr.w	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f023 0201 	bic.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d115      	bne.n	800328e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800326e:	2001      	movs	r0, #1
 8003270:	f7fd fbe0 	bl	8000a34 <HAL_Delay>
      ms++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3301      	adds	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f001 f972 	bl	8004564 <USB_GetMode>
 8003280:	4603      	mov	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	d01e      	beq.n	80032c4 <USB_SetCurrentMode+0x84>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b31      	cmp	r3, #49	; 0x31
 800328a:	d9f0      	bls.n	800326e <USB_SetCurrentMode+0x2e>
 800328c:	e01a      	b.n	80032c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d115      	bne.n	80032c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f7fd fbc7 	bl	8000a34 <HAL_Delay>
      ms++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f001 f959 	bl	8004564 <USB_GetMode>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <USB_SetCurrentMode+0x84>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b31      	cmp	r3, #49	; 0x31
 80032bc:	d9f0      	bls.n	80032a0 <USB_SetCurrentMode+0x60>
 80032be:	e001      	b.n	80032c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e005      	b.n	80032d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b32      	cmp	r3, #50	; 0x32
 80032c8:	d101      	bne.n	80032ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032d8:	b084      	sub	sp, #16
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80032e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	e009      	b.n	800330c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	3340      	adds	r3, #64	; 0x40
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	2200      	movs	r2, #0
 8003304:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	3301      	adds	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b0e      	cmp	r3, #14
 8003310:	d9f2      	bls.n	80032f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11c      	bne.n	8003352 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003326:	f043 0302 	orr.w	r3, r3, #2
 800332a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
 8003350:	e00b      	b.n	800336a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003370:	461a      	mov	r2, r3
 8003372:	2300      	movs	r3, #0
 8003374:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337c:	4619      	mov	r1, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003384:	461a      	mov	r2, r3
 8003386:	680b      	ldr	r3, [r1, #0]
 8003388:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	2b01      	cmp	r3, #1
 800338e:	d10c      	bne.n	80033aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003396:	2100      	movs	r1, #0
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f945 	bl	8003628 <USB_SetDevSpeed>
 800339e:	e008      	b.n	80033b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80033a0:	2101      	movs	r1, #1
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f940 	bl	8003628 <USB_SetDevSpeed>
 80033a8:	e003      	b.n	80033b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80033aa:	2103      	movs	r1, #3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f93b 	bl	8003628 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80033b2:	2110      	movs	r1, #16
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f8f3 	bl	80035a0 <USB_FlushTxFifo>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f90f 	bl	80035e8 <USB_FlushRxFifo>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033da:	461a      	mov	r2, r3
 80033dc:	2300      	movs	r3, #0
 80033de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e6:	461a      	mov	r2, r3
 80033e8:	2300      	movs	r3, #0
 80033ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f2:	461a      	mov	r2, r3
 80033f4:	2300      	movs	r3, #0
 80033f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e043      	b.n	8003486 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003414:	d118      	bne.n	8003448 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003428:	461a      	mov	r2, r3
 800342a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	e013      	b.n	800345a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343e:	461a      	mov	r2, r3
 8003440:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e008      	b.n	800345a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003454:	461a      	mov	r2, r3
 8003456:	2300      	movs	r3, #0
 8003458:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003466:	461a      	mov	r2, r3
 8003468:	2300      	movs	r3, #0
 800346a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	461a      	mov	r2, r3
 800347a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800347e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	3301      	adds	r3, #1
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	429a      	cmp	r2, r3
 800348c:	d3b7      	bcc.n	80033fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	e043      	b.n	800351c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034aa:	d118      	bne.n	80034de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034be:	461a      	mov	r2, r3
 80034c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e013      	b.n	80034f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d4:	461a      	mov	r2, r3
 80034d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	e008      	b.n	80034f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ea:	461a      	mov	r2, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fc:	461a      	mov	r2, r3
 80034fe:	2300      	movs	r3, #0
 8003500:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350e:	461a      	mov	r2, r3
 8003510:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003514:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	3301      	adds	r3, #1
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	429a      	cmp	r2, r3
 8003522:	d3b7      	bcc.n	8003494 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003536:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003544:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f043 0210 	orr.w	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <USB_DevInit+0x2c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f043 0208 	orr.w	r2, r3, #8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d107      	bne.n	800358c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800358c:	7dfb      	ldrb	r3, [r7, #23]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003598:	b004      	add	sp, #16
 800359a:	4770      	bx	lr
 800359c:	803c3800 	.word	0x803c3800

080035a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	019b      	lsls	r3, r3, #6
 80035b2:	f043 0220 	orr.w	r2, r3, #32
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3301      	adds	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <USB_FlushTxFifo+0x44>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e006      	b.n	80035d8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d0f1      	beq.n	80035ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	00030d40 	.word	0x00030d40

080035e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2210      	movs	r2, #16
 80035f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3301      	adds	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	4a08      	ldr	r2, [pc, #32]	; (8003624 <USB_FlushRxFifo+0x3c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e006      	b.n	8003618 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b10      	cmp	r3, #16
 8003614:	d0f1      	beq.n	80035fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	00030d40 	.word	0x00030d40

08003628 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	68f9      	ldr	r1, [r7, #12]
 8003644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800365a:	b480      	push	{r7}
 800365c:	b087      	sub	sp, #28
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0306 	and.w	r3, r3, #6
 8003672:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]
 800367e:	e00a      	b.n	8003696 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d002      	beq.n	800368c <USB_GetDevSpeed+0x32>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b06      	cmp	r3, #6
 800368a:	d102      	bne.n	8003692 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800368c:	2302      	movs	r3, #2
 800368e:	75fb      	strb	r3, [r7, #23]
 8003690:	e001      	b.n	8003696 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003692:	230f      	movs	r3, #15
 8003694:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003696:	7dfb      	ldrb	r3, [r7, #23]
}
 8003698:	4618      	mov	r0, r3
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d13a      	bne.n	8003736 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	68f9      	ldr	r1, [r7, #12]
 80036da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036de:	4313      	orrs	r3, r2
 80036e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d155      	bne.n	80037a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	78db      	ldrb	r3, [r3, #3]
 8003712:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003714:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	059b      	lsls	r3, r3, #22
 800371a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800371c:	4313      	orrs	r3, r2
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	0151      	lsls	r1, r2, #5
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	440a      	add	r2, r1
 8003726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800372a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	e036      	b.n	80037a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003754:	4313      	orrs	r3, r2
 8003756:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d11a      	bne.n	80037a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	78db      	ldrb	r3, [r3, #3]
 8003788:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800378a:	430b      	orrs	r3, r1
 800378c:	4313      	orrs	r3, r2
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	0151      	lsls	r1, r2, #5
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	440a      	add	r2, r1
 8003796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800379a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	785b      	ldrb	r3, [r3, #1]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d161      	bne.n	8003894 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e6:	d11f      	bne.n	8003828 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	0151      	lsls	r1, r2, #5
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	440a      	add	r2, r1
 80037fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003802:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003806:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	0151      	lsls	r1, r2, #5
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	440a      	add	r2, r1
 800381e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003822:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003826:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	2101      	movs	r1, #1
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	b29b      	uxth	r3, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003848:	4013      	ands	r3, r2
 800384a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	b29b      	uxth	r3, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800386c:	4013      	ands	r3, r2
 800386e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	0159      	lsls	r1, r3, #5
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	440b      	add	r3, r1
 8003886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388a:	4619      	mov	r1, r3
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <USB_DeactivateEndpoint+0x1b0>)
 800388e:	4013      	ands	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
 8003892:	e060      	b.n	8003956 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038aa:	d11f      	bne.n	80038ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	0151      	lsls	r1, r2, #5
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	440a      	add	r2, r1
 80038c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	0151      	lsls	r1, r2, #5
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	440a      	add	r2, r1
 80038e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	2101      	movs	r1, #1
 80038fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003902:	041b      	lsls	r3, r3, #16
 8003904:	43db      	mvns	r3, r3
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800390c:	4013      	ands	r3, r2
 800390e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	43db      	mvns	r3, r3
 800392a:	68f9      	ldr	r1, [r7, #12]
 800392c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003930:	4013      	ands	r3, r2
 8003932:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	0159      	lsls	r1, r3, #5
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	440b      	add	r3, r1
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	4619      	mov	r1, r3
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <USB_DeactivateEndpoint+0x1b4>)
 8003952:	4013      	ands	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	ec337800 	.word	0xec337800
 8003968:	eff37800 	.word	0xeff37800

0800396c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	4613      	mov	r3, r2
 8003978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	785b      	ldrb	r3, [r3, #1]
 8003988:	2b01      	cmp	r3, #1
 800398a:	f040 815c 	bne.w	8003c46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d132      	bne.n	80039fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	0151      	lsls	r1, r2, #5
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	440a      	add	r2, r1
 80039d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f4:	0cdb      	lsrs	r3, r3, #19
 80039f6:	04db      	lsls	r3, r3, #19
 80039f8:	6113      	str	r3, [r2, #16]
 80039fa:	e074      	b.n	8003ae6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a16:	0cdb      	lsrs	r3, r3, #19
 8003a18:	04db      	lsls	r3, r3, #19
 8003a1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6959      	ldr	r1, [r3, #20]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	440b      	add	r3, r1
 8003a58:	1e59      	subs	r1, r3, #1
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003a64:	4b9d      	ldr	r3, [pc, #628]	; (8003cdc <USB_EPStartXfer+0x370>)
 8003a66:	400b      	ands	r3, r1
 8003a68:	69b9      	ldr	r1, [r7, #24]
 8003a6a:	0148      	lsls	r0, r1, #5
 8003a6c:	69f9      	ldr	r1, [r7, #28]
 8003a6e:	4401      	add	r1, r0
 8003a70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a74:	4313      	orrs	r3, r2
 8003a76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8e:	69b9      	ldr	r1, [r7, #24]
 8003a90:	0148      	lsls	r0, r1, #5
 8003a92:	69f9      	ldr	r1, [r7, #28]
 8003a94:	4401      	add	r1, r0
 8003a96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	78db      	ldrb	r3, [r3, #3]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d11f      	bne.n	8003ae6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	0151      	lsls	r1, r2, #5
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	440a      	add	r2, r1
 8003abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ac4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	0151      	lsls	r1, r2, #5
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	440a      	add	r2, r1
 8003adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ae4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d14b      	bne.n	8003b84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	78db      	ldrb	r3, [r3, #3]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d128      	bne.n	8003b62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d110      	bne.n	8003b42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	e00f      	b.n	8003b62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	0151      	lsls	r1, r2, #5
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	440a      	add	r2, r1
 8003b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e12f      	b.n	8003de4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ba2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	78db      	ldrb	r3, [r3, #3]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d015      	beq.n	8003bd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8117 	beq.w	8003de4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	69f9      	ldr	r1, [r7, #28]
 8003bce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	634b      	str	r3, [r1, #52]	; 0x34
 8003bd6:	e105      	b.n	8003de4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d110      	bne.n	8003c0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	e00f      	b.n	8003c2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	0151      	lsls	r1, r2, #5
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	440a      	add	r2, r1
 8003c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	68d9      	ldr	r1, [r3, #12]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	b298      	uxth	r0, r3
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fa2b 	bl	800409a <USB_WritePacket>
 8003c44:	e0ce      	b.n	8003de4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	0151      	lsls	r1, r2, #5
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	440a      	add	r2, r1
 8003c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c60:	0cdb      	lsrs	r3, r3, #19
 8003c62:	04db      	lsls	r3, r3, #19
 8003c64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	0151      	lsls	r1, r2, #5
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d126      	bne.n	8003ce0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca8:	69b9      	ldr	r1, [r7, #24]
 8003caa:	0148      	lsls	r0, r1, #5
 8003cac:	69f9      	ldr	r1, [r7, #28]
 8003cae:	4401      	add	r1, r0
 8003cb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	0151      	lsls	r1, r2, #5
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	440a      	add	r2, r1
 8003cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cd6:	6113      	str	r3, [r2, #16]
 8003cd8:	e036      	b.n	8003d48 <USB_EPStartXfer+0x3dc>
 8003cda:	bf00      	nop
 8003cdc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4413      	add	r3, r2
 8003cea:	1e5a      	subs	r2, r3, #1
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	8afb      	ldrh	r3, [r7, #22]
 8003d06:	04d9      	lsls	r1, r3, #19
 8003d08:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <USB_EPStartXfer+0x484>)
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	69b9      	ldr	r1, [r7, #24]
 8003d0e:	0148      	lsls	r0, r1, #5
 8003d10:	69f9      	ldr	r1, [r7, #28]
 8003d12:	4401      	add	r1, r0
 8003d14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	8af9      	ldrh	r1, [r7, #22]
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d38:	69b9      	ldr	r1, [r7, #24]
 8003d3a:	0148      	lsls	r0, r1, #5
 8003d3c:	69f9      	ldr	r1, [r7, #28]
 8003d3e:	4401      	add	r1, r0
 8003d40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d44:	4313      	orrs	r3, r2
 8003d46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10d      	bne.n	8003d6a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	68d9      	ldr	r1, [r3, #12]
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d66:	460a      	mov	r2, r1
 8003d68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	78db      	ldrb	r3, [r3, #3]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d128      	bne.n	8003dc4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d110      	bne.n	8003da4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	0151      	lsls	r1, r2, #5
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	440a      	add	r2, r1
 8003d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00f      	b.n	8003dc4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	1ff80000 	.word	0x1ff80000

08003df4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 80cd 	bne.w	8003fb0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d132      	bne.n	8003e84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	0151      	lsls	r1, r2, #5
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	440a      	add	r2, r1
 8003e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7c:	0cdb      	lsrs	r3, r3, #19
 8003e7e:	04db      	lsls	r3, r3, #19
 8003e80:	6113      	str	r3, [r2, #16]
 8003e82:	e04e      	b.n	8003f22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	0151      	lsls	r1, r2, #5
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	440a      	add	r2, r1
 8003e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9e:	0cdb      	lsrs	r3, r3, #19
 8003ea0:	04db      	lsls	r3, r3, #19
 8003ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	0151      	lsls	r1, r2, #5
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ebe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ec2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ec6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d903      	bls.n	8003edc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003efa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f12:	6939      	ldr	r1, [r7, #16]
 8003f14:	0148      	lsls	r0, r1, #5
 8003f16:	6979      	ldr	r1, [r7, #20]
 8003f18:	4401      	add	r1, r0
 8003f1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d11e      	bne.n	8003f66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	e092      	b.n	800408c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d07e      	beq.n	800408c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003faa:	4313      	orrs	r3, r2
 8003fac:	634b      	str	r3, [r1, #52]	; 0x34
 8003fae:	e06d      	b.n	800408c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fca:	0cdb      	lsrs	r3, r3, #19
 8003fcc:	04db      	lsls	r3, r3, #19
 8003fce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ff2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004022:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403a:	6939      	ldr	r1, [r7, #16]
 800403c:	0148      	lsls	r0, r1, #5
 800403e:	6979      	ldr	r1, [r7, #20]
 8004040:	4401      	add	r1, r0
 8004042:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004046:	4313      	orrs	r3, r2
 8004048:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d10d      	bne.n	800406c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d009      	beq.n	800406c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	68d9      	ldr	r1, [r3, #12]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004068:	460a      	mov	r2, r1
 800406a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	0151      	lsls	r1, r2, #5
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	440a      	add	r2, r1
 8004082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004086:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800408a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800409a:	b480      	push	{r7}
 800409c:	b089      	sub	sp, #36	; 0x24
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	4611      	mov	r1, r2
 80040a6:	461a      	mov	r2, r3
 80040a8:	460b      	mov	r3, r1
 80040aa:	71fb      	strb	r3, [r7, #7]
 80040ac:	4613      	mov	r3, r2
 80040ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80040b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d123      	bne.n	8004108 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80040c0:	88bb      	ldrh	r3, [r7, #4]
 80040c2:	3303      	adds	r3, #3
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e018      	b.n	8004100 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	031a      	lsls	r2, r3, #12
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040da:	461a      	mov	r2, r3
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3301      	adds	r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	3301      	adds	r3, #1
 80040f8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	3301      	adds	r3, #1
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	429a      	cmp	r2, r3
 8004106:	d3e2      	bcc.n	80040ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004116:	b480      	push	{r7}
 8004118:	b08b      	sub	sp, #44	; 0x2c
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	4613      	mov	r3, r2
 8004122:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	b29b      	uxth	r3, r3
 8004132:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800413c:	2300      	movs	r3, #0
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	e014      	b.n	800416c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	601a      	str	r2, [r3, #0]
    pDest++;
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	3301      	adds	r3, #1
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	3301      	adds	r3, #1
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	3301      	adds	r3, #1
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	3301      	adds	r3, #1
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	3301      	adds	r3, #1
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	6a3a      	ldr	r2, [r7, #32]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	429a      	cmp	r2, r3
 8004172:	d3e6      	bcc.n	8004142 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004174:	8bfb      	ldrh	r3, [r7, #30]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01e      	beq.n	80041b8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004184:	461a      	mov	r2, r3
 8004186:	f107 0310 	add.w	r3, r7, #16
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	fa22 f303 	lsr.w	r3, r2, r3
 800419a:	b2da      	uxtb	r2, r3
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	701a      	strb	r2, [r3, #0]
      i++;
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	3301      	adds	r3, #1
 80041a4:	623b      	str	r3, [r7, #32]
      pDest++;
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	3301      	adds	r3, #1
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80041ac:	8bfb      	ldrh	r3, [r7, #30]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80041b2:	8bfb      	ldrh	r3, [r7, #30]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ea      	bne.n	800418e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	372c      	adds	r7, #44	; 0x2c
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	785b      	ldrb	r3, [r3, #1]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d12c      	bne.n	800423c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	db12      	blt.n	800421a <USB_EPSetStall+0x54>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00f      	beq.n	800421a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	440a      	add	r2, r1
 8004210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004214:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004218:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	0151      	lsls	r1, r2, #5
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	440a      	add	r2, r1
 8004230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e02b      	b.n	8004294 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	db12      	blt.n	8004274 <USB_EPSetStall+0xae>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00f      	beq.n	8004274 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800426e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004272:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	440a      	add	r2, r1
 800428a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800428e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004292:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d128      	bne.n	8004310 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	78db      	ldrb	r3, [r3, #3]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d003      	beq.n	80042ee <USB_EPClearStall+0x4c>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d138      	bne.n	8004360 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e027      	b.n	8004360 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	0151      	lsls	r1, r2, #5
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	440a      	add	r2, r1
 8004326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800432a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800432e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	78db      	ldrb	r3, [r3, #3]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d003      	beq.n	8004340 <USB_EPClearStall+0x9e>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	78db      	ldrb	r3, [r3, #3]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d10f      	bne.n	8004360 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800435a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800438c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004390:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80043a2:	68f9      	ldr	r1, [r7, #12]
 80043a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043d4:	f023 0303 	bic.w	r3, r3, #3
 80043d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e8:	f023 0302 	bic.w	r3, r3, #2
 80043ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004416:	f023 0303 	bic.w	r3, r3, #3
 800441a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800442a:	f043 0302 	orr.w	r3, r3, #2
 800442e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800443e:	b480      	push	{r7}
 8004440:	b085      	sub	sp, #20
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	0c1b      	lsrs	r3, r3, #16
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	b29b      	uxth	r3, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044fa:	68bb      	ldr	r3, [r7, #8]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
 8004538:	01db      	lsls	r3, r3, #7
 800453a:	b2db      	uxtb	r3, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4013      	ands	r3, r2
 8004554:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004556:	68bb      	ldr	r3, [r7, #8]
}
 8004558:	4618      	mov	r0, r3
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0301 	and.w	r3, r3, #1
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800459e:	f023 0307 	bic.w	r3, r3, #7
 80045a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	460b      	mov	r3, r1
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	333c      	adds	r3, #60	; 0x3c
 80045de:	3304      	adds	r3, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <USB_EP0_OutStart+0xb8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d90a      	bls.n	8004602 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045fc:	d101      	bne.n	8004602 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e037      	b.n	8004672 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004608:	461a      	mov	r2, r3
 800460a:	2300      	movs	r3, #0
 800460c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004630:	f043 0318 	orr.w	r3, r3, #24
 8004634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004644:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004648:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800464a:	7afb      	ldrb	r3, [r7, #11]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10f      	bne.n	8004670 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	461a      	mov	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800466e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	4f54300a 	.word	0x4f54300a

08004684 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3301      	adds	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <USB_CoreReset+0x60>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e01a      	b.n	80046d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	daf3      	bge.n	8004690 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f043 0201 	orr.w	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4a09      	ldr	r2, [pc, #36]	; (80046e4 <USB_CoreReset+0x60>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d901      	bls.n	80046c8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e006      	b.n	80046d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d0f1      	beq.n	80046b8 <USB_CoreReset+0x34>

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	00030d40 	.word	0x00030d40

080046e8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80046f4:	2010      	movs	r0, #16
 80046f6:	f001 fef9 	bl	80064ec <USBD_static_malloc>
 80046fa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d105      	bne.n	800470e <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800470a:	2302      	movs	r3, #2
 800470c:	e01b      	b.n	8004746 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	7c1b      	ldrb	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2207      	movs	r2, #7
 8004722:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004724:	e002      	b.n	800472c <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	220a      	movs	r2, #10
 800472a:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800472c:	2308      	movs	r3, #8
 800472e:	2203      	movs	r2, #3
 8004730:	2181      	movs	r1, #129	; 0x81
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f001 fdc9 	bl	80062ca <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800475a:	2181      	movs	r1, #129	; 0x81
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f001 fdda 	bl	8006316 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800477e:	4618      	mov	r0, r3
 8004780:	f001 fec2 	bl	8006508 <USBD_static_free>
    pdev->pClassData = NULL;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047a8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d045      	beq.n	800484a <USBD_HID_Setup+0xb2>
 80047be:	2b20      	cmp	r3, #32
 80047c0:	f040 80d7 	bne.w	8004972 <USBD_HID_Setup+0x1da>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	3b02      	subs	r3, #2
 80047ca:	2b09      	cmp	r3, #9
 80047cc:	d835      	bhi.n	800483a <USBD_HID_Setup+0xa2>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <USBD_HID_Setup+0x3c>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	0800482b 	.word	0x0800482b
 80047d8:	0800480b 	.word	0x0800480b
 80047dc:	0800483b 	.word	0x0800483b
 80047e0:	0800483b 	.word	0x0800483b
 80047e4:	0800483b 	.word	0x0800483b
 80047e8:	0800483b 	.word	0x0800483b
 80047ec:	0800483b 	.word	0x0800483b
 80047f0:	0800483b 	.word	0x0800483b
 80047f4:	08004819 	.word	0x08004819
 80047f8:	080047fd 	.word	0x080047fd
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	885b      	ldrh	r3, [r3, #2]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	601a      	str	r2, [r3, #0]
      break;
 8004808:	e01e      	b.n	8004848 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f001 fa1e 	bl	8005c52 <USBD_CtlSendData>
      break;
 8004816:	e017      	b.n	8004848 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	885b      	ldrh	r3, [r3, #2]
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	b29b      	uxth	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	605a      	str	r2, [r3, #4]
      break;
 8004828:	e00e      	b.n	8004848 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3304      	adds	r3, #4
 800482e:	2201      	movs	r2, #1
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f001 fa0d 	bl	8005c52 <USBD_CtlSendData>
      break;
 8004838:	e006      	b.n	8004848 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f001 f997 	bl	8005b70 <USBD_CtlError>
      ret = USBD_FAIL;
 8004842:	2303      	movs	r3, #3
 8004844:	75fb      	strb	r3, [r7, #23]
      break;
 8004846:	bf00      	nop
    }
    break;
 8004848:	e09a      	b.n	8004980 <USBD_HID_Setup+0x1e8>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	2b0b      	cmp	r3, #11
 8004850:	f200 8086 	bhi.w	8004960 <USBD_HID_Setup+0x1c8>
 8004854:	a201      	add	r2, pc, #4	; (adr r2, 800485c <USBD_HID_Setup+0xc4>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	0800488d 	.word	0x0800488d
 8004860:	0800496f 	.word	0x0800496f
 8004864:	08004961 	.word	0x08004961
 8004868:	08004961 	.word	0x08004961
 800486c:	08004961 	.word	0x08004961
 8004870:	08004961 	.word	0x08004961
 8004874:	080048b7 	.word	0x080048b7
 8004878:	08004961 	.word	0x08004961
 800487c:	08004961 	.word	0x08004961
 8004880:	08004961 	.word	0x08004961
 8004884:	0800490f 	.word	0x0800490f
 8004888:	08004939 	.word	0x08004939
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d107      	bne.n	80048a8 <USBD_HID_Setup+0x110>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004898:	f107 030a 	add.w	r3, r7, #10
 800489c:	2202      	movs	r2, #2
 800489e:	4619      	mov	r1, r3
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f001 f9d6 	bl	8005c52 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80048a6:	e063      	b.n	8004970 <USBD_HID_Setup+0x1d8>
        USBD_CtlError(pdev, req);
 80048a8:	6839      	ldr	r1, [r7, #0]
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 f960 	bl	8005b70 <USBD_CtlError>
        ret = USBD_FAIL;
 80048b0:	2303      	movs	r3, #3
 80048b2:	75fb      	strb	r3, [r7, #23]
      break;
 80048b4:	e05c      	b.n	8004970 <USBD_HID_Setup+0x1d8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	885b      	ldrh	r3, [r3, #2]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b22      	cmp	r3, #34	; 0x22
 80048c0:	d108      	bne.n	80048d4 <USBD_HID_Setup+0x13c>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	88db      	ldrh	r3, [r3, #6]
 80048c6:	2b2d      	cmp	r3, #45	; 0x2d
 80048c8:	bf28      	it	cs
 80048ca:	232d      	movcs	r3, #45	; 0x2d
 80048cc:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 80048ce:	4b2f      	ldr	r3, [pc, #188]	; (800498c <USBD_HID_Setup+0x1f4>)
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e015      	b.n	8004900 <USBD_HID_Setup+0x168>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	885b      	ldrh	r3, [r3, #2]
 80048d8:	0a1b      	lsrs	r3, r3, #8
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b21      	cmp	r3, #33	; 0x21
 80048de:	d108      	bne.n	80048f2 <USBD_HID_Setup+0x15a>
      {
        pbuf = USBD_HID_Desc;
 80048e0:	4b2b      	ldr	r3, [pc, #172]	; (8004990 <USBD_HID_Setup+0x1f8>)
 80048e2:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	88db      	ldrh	r3, [r3, #6]
 80048e8:	2b09      	cmp	r3, #9
 80048ea:	bf28      	it	cs
 80048ec:	2309      	movcs	r3, #9
 80048ee:	82bb      	strh	r3, [r7, #20]
 80048f0:	e006      	b.n	8004900 <USBD_HID_Setup+0x168>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 f93b 	bl	8005b70 <USBD_CtlError>
        ret = USBD_FAIL;
 80048fa:	2303      	movs	r3, #3
 80048fc:	75fb      	strb	r3, [r7, #23]
        break;
 80048fe:	e037      	b.n	8004970 <USBD_HID_Setup+0x1d8>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004900:	8abb      	ldrh	r3, [r7, #20]
 8004902:	461a      	mov	r2, r3
 8004904:	6939      	ldr	r1, [r7, #16]
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f001 f9a3 	bl	8005c52 <USBD_CtlSendData>
      break;
 800490c:	e030      	b.n	8004970 <USBD_HID_Setup+0x1d8>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b03      	cmp	r3, #3
 8004918:	d107      	bne.n	800492a <USBD_HID_Setup+0x192>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3308      	adds	r3, #8
 800491e:	2201      	movs	r2, #1
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f001 f995 	bl	8005c52 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004928:	e022      	b.n	8004970 <USBD_HID_Setup+0x1d8>
        USBD_CtlError(pdev, req);
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f001 f91f 	bl	8005b70 <USBD_CtlError>
        ret = USBD_FAIL;
 8004932:	2303      	movs	r3, #3
 8004934:	75fb      	strb	r3, [r7, #23]
      break;
 8004936:	e01b      	b.n	8004970 <USBD_HID_Setup+0x1d8>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b03      	cmp	r3, #3
 8004942:	d106      	bne.n	8004952 <USBD_HID_Setup+0x1ba>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	885b      	ldrh	r3, [r3, #2]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004950:	e00e      	b.n	8004970 <USBD_HID_Setup+0x1d8>
        USBD_CtlError(pdev, req);
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f001 f90b 	bl	8005b70 <USBD_CtlError>
        ret = USBD_FAIL;
 800495a:	2303      	movs	r3, #3
 800495c:	75fb      	strb	r3, [r7, #23]
      break;
 800495e:	e007      	b.n	8004970 <USBD_HID_Setup+0x1d8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 f904 	bl	8005b70 <USBD_CtlError>
      ret = USBD_FAIL;
 8004968:	2303      	movs	r3, #3
 800496a:	75fb      	strb	r3, [r7, #23]
      break;
 800496c:	e000      	b.n	8004970 <USBD_HID_Setup+0x1d8>
      break;
 800496e:	bf00      	nop
    }
    break;
 8004970:	e006      	b.n	8004980 <USBD_HID_Setup+0x1e8>

  default:
    USBD_CtlError(pdev, req);
 8004972:	6839      	ldr	r1, [r7, #0]
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f001 f8fb 	bl	8005b70 <USBD_CtlError>
    ret = USBD_FAIL;
 800497a:	2303      	movs	r3, #3
 800497c:	75fb      	strb	r3, [r7, #23]
    break;
 800497e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004980:	7dfb      	ldrb	r3, [r7, #23]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	200000dc 	.word	0x200000dc
 8004990:	200000c4 	.word	0x200000c4

08004994 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049a8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d10c      	bne.n	80049d0 <USBD_HID_SendReport+0x3c>
  {
    if (hhid->state == HID_IDLE)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	7b1b      	ldrb	r3, [r3, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <USBD_HID_SendReport+0x3c>
    {
      hhid->state = HID_BUSY;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2201      	movs	r2, #1
 80049c2:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	2181      	movs	r1, #129	; 0x81
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f001 fd4b 	bl	8006466 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2222      	movs	r2, #34	; 0x22
 80049e8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80049ea:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	20000058 	.word	0x20000058

080049fc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2222      	movs	r2, #34	; 0x22
 8004a08:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004a0a:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	2000007c 	.word	0x2000007c

08004a1c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2222      	movs	r2, #34	; 0x22
 8004a28:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004a2a:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	200000a0 	.word	0x200000a0

08004a3c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a4e:	2200      	movs	r2, #0
 8004a50:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	220a      	movs	r2, #10
 8004a6c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004a6e:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	200000d0 	.word	0x200000d0

08004a80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e01f      	b.n	8004ad8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	79fa      	ldrb	r2, [r7, #7]
 8004aca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f001 fb95 	bl	80061fc <USBD_LL_Init>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e016      	b.n	8004b26 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	f107 020e 	add.w	r2, r7, #14
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4798      	blx	r3
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f001 fbac 	bl	8006294 <USBD_LL_Start>
 8004b3c:	4603      	mov	r3, r0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	78fa      	ldrb	r2, [r7, #3]
 8004b80:	4611      	mov	r1, r2
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	4798      	blx	r3
  }

  return USBD_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 ff90 	bl	8005afc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004bea:	461a      	mov	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d01a      	beq.n	8004c36 <USBD_LL_SetupStage+0x72>
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d822      	bhi.n	8004c4a <USBD_LL_SetupStage+0x86>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <USBD_LL_SetupStage+0x4a>
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d00a      	beq.n	8004c22 <USBD_LL_SetupStage+0x5e>
 8004c0c:	e01d      	b.n	8004c4a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa62 	bl	80050e0 <USBD_StdDevReq>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c20:	e020      	b.n	8004c64 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fac6 	bl	80051bc <USBD_StdItfReq>
 8004c30:	4603      	mov	r3, r0
 8004c32:	73fb      	strb	r3, [r7, #15]
      break;
 8004c34:	e016      	b.n	8004c64 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fb05 	bl	800524e <USBD_StdEPReq>
 8004c44:	4603      	mov	r3, r0
 8004c46:	73fb      	strb	r3, [r7, #15]
      break;
 8004c48:	e00c      	b.n	8004c64 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	4619      	mov	r1, r3
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 fb7b 	bl	8006354 <USBD_LL_StallEP>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	73fb      	strb	r3, [r7, #15]
      break;
 8004c62:	bf00      	nop
  }

  return ret;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b086      	sub	sp, #24
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	460b      	mov	r3, r1
 8004c78:	607a      	str	r2, [r7, #4]
 8004c7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004c7c:	7afb      	ldrb	r3, [r7, #11]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d138      	bne.n	8004cf4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004c88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d14a      	bne.n	8004d2a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d913      	bls.n	8004cc8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	1ad2      	subs	r2, r2, r3
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bf28      	it	cs
 8004cba:	4613      	movcs	r3, r2
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fff2 	bl	8005caa <USBD_CtlContinueRx>
 8004cc6:	e030      	b.n	8004d2a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d10b      	bne.n	8004cec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 ffed 	bl	8005ccc <USBD_CtlSendStatus>
 8004cf2:	e01a      	b.n	8004d2a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d114      	bne.n	8004d2a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	7afa      	ldrb	r2, [r7, #11]
 8004d16:	4611      	mov	r1, r2
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	4798      	blx	r3
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
 8004d28:	e000      	b.n	8004d2c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004d42:	7afb      	ldrb	r3, [r7, #11]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d16b      	bne.n	8004e20 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3314      	adds	r3, #20
 8004d4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d156      	bne.n	8004e06 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d914      	bls.n	8004d8e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	1ad2      	subs	r2, r2, r3
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	461a      	mov	r2, r3
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 ff84 	bl	8005c88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d80:	2300      	movs	r3, #0
 8004d82:	2200      	movs	r2, #0
 8004d84:	2100      	movs	r1, #0
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f001 fb8e 	bl	80064a8 <USBD_LL_PrepareReceive>
 8004d8c:	e03b      	b.n	8004e06 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d11c      	bne.n	8004dd4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d316      	bcc.n	8004dd4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d20f      	bcs.n	8004dd4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004db4:	2200      	movs	r2, #0
 8004db6:	2100      	movs	r1, #0
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 ff65 	bl	8005c88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2100      	movs	r1, #0
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f001 fb6b 	bl	80064a8 <USBD_LL_PrepareReceive>
 8004dd2:	e018      	b.n	8004e06 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d10b      	bne.n	8004df8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f001 faaa 	bl	8006354 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 ff76 	bl	8005cf2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d122      	bne.n	8004e56 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff fe98 	bl	8004b46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004e1e:	e01a      	b.n	8004e56 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d114      	bne.n	8004e56 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00e      	beq.n	8004e56 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	7afa      	ldrb	r2, [r7, #11]
 8004e42:	4611      	mov	r1, r2
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	4798      	blx	r3
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	e000      	b.n	8004e58 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e02f      	b.n	8004ef4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00f      	beq.n	8004ebe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6852      	ldr	r2, [r2, #4]
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	4611      	mov	r1, r2
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ebe:	2340      	movs	r3, #64	; 0x40
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f001 fa00 	bl	80062ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2240      	movs	r2, #64	; 0x40
 8004ed6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	2200      	movs	r2, #0
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 f9f2 	bl	80062ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2240      	movs	r2, #64	; 0x40
 8004ef0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2204      	movs	r2, #4
 8004f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d106      	bne.n	8004f6a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e012      	b.n	8004fb4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d10b      	bne.n	8004fb2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e014      	b.n	8005000 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d10d      	bne.n	8004ffe <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800501e:	2303      	movs	r3, #3
 8005020:	e014      	b.n	800504c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b03      	cmp	r3, #3
 800502c:	d10d      	bne.n	800504a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	d007      	beq.n	800504a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	4611      	mov	r1, r2
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d009      	beq.n	8005098 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6852      	ldr	r2, [r2, #4]
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	4611      	mov	r1, r2
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	4798      	blx	r3
  }

  return USBD_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b087      	sub	sp, #28
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3301      	adds	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80050c0:	8a3b      	ldrh	r3, [r7, #16]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	b21a      	sxth	r2, r3
 80050c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b21b      	sxth	r3, r3
 80050ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80050d0:	89fb      	ldrh	r3, [r7, #14]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d005      	beq.n	8005106 <USBD_StdDevReq+0x26>
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d853      	bhi.n	80051a6 <USBD_StdDevReq+0xc6>
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <USBD_StdDevReq+0x3a>
 8005102:	2b20      	cmp	r3, #32
 8005104:	d14f      	bne.n	80051a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4798      	blx	r3
 8005114:	4603      	mov	r3, r0
 8005116:	73fb      	strb	r3, [r7, #15]
      break;
 8005118:	e04a      	b.n	80051b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	785b      	ldrb	r3, [r3, #1]
 800511e:	2b09      	cmp	r3, #9
 8005120:	d83b      	bhi.n	800519a <USBD_StdDevReq+0xba>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <USBD_StdDevReq+0x48>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800517d 	.word	0x0800517d
 800512c:	08005191 	.word	0x08005191
 8005130:	0800519b 	.word	0x0800519b
 8005134:	08005187 	.word	0x08005187
 8005138:	0800519b 	.word	0x0800519b
 800513c:	0800515b 	.word	0x0800515b
 8005140:	08005151 	.word	0x08005151
 8005144:	0800519b 	.word	0x0800519b
 8005148:	08005173 	.word	0x08005173
 800514c:	08005165 	.word	0x08005165
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9de 	bl	8005514 <USBD_GetDescriptor>
          break;
 8005158:	e024      	b.n	80051a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800515a:	6839      	ldr	r1, [r7, #0]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fb43 	bl	80057e8 <USBD_SetAddress>
          break;
 8005162:	e01f      	b.n	80051a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fb82 	bl	8005870 <USBD_SetConfig>
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]
          break;
 8005170:	e018      	b.n	80051a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005172:	6839      	ldr	r1, [r7, #0]
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fc21 	bl	80059bc <USBD_GetConfig>
          break;
 800517a:	e013      	b.n	80051a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fc52 	bl	8005a28 <USBD_GetStatus>
          break;
 8005184:	e00e      	b.n	80051a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fc81 	bl	8005a90 <USBD_SetFeature>
          break;
 800518e:	e009      	b.n	80051a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fc90 	bl	8005ab8 <USBD_ClrFeature>
          break;
 8005198:	e004      	b.n	80051a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800519a:	6839      	ldr	r1, [r7, #0]
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fce7 	bl	8005b70 <USBD_CtlError>
          break;
 80051a2:	bf00      	nop
      }
      break;
 80051a4:	e004      	b.n	80051b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fce1 	bl	8005b70 <USBD_CtlError>
      break;
 80051ae:	bf00      	nop
  }

  return ret;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop

080051bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d005      	beq.n	80051e2 <USBD_StdItfReq+0x26>
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d82f      	bhi.n	800523a <USBD_StdItfReq+0x7e>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <USBD_StdItfReq+0x26>
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d12b      	bne.n	800523a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d81d      	bhi.n	800522c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	889b      	ldrh	r3, [r3, #4]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d813      	bhi.n	8005222 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	6839      	ldr	r1, [r7, #0]
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
 8005208:	4603      	mov	r3, r0
 800520a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	88db      	ldrh	r3, [r3, #6]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d110      	bne.n	8005236 <USBD_StdItfReq+0x7a>
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fd56 	bl	8005ccc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005220:	e009      	b.n	8005236 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005222:	6839      	ldr	r1, [r7, #0]
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fca3 	bl	8005b70 <USBD_CtlError>
          break;
 800522a:	e004      	b.n	8005236 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fc9e 	bl	8005b70 <USBD_CtlError>
          break;
 8005234:	e000      	b.n	8005238 <USBD_StdItfReq+0x7c>
          break;
 8005236:	bf00      	nop
      }
      break;
 8005238:	e004      	b.n	8005244 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fc97 	bl	8005b70 <USBD_CtlError>
      break;
 8005242:	bf00      	nop
  }

  return ret;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	889b      	ldrh	r3, [r3, #4]
 8005260:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	d007      	beq.n	800527e <USBD_StdEPReq+0x30>
 800526e:	2b40      	cmp	r3, #64	; 0x40
 8005270:	f200 8145 	bhi.w	80054fe <USBD_StdEPReq+0x2b0>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <USBD_StdEPReq+0x44>
 8005278:	2b20      	cmp	r3, #32
 800527a:	f040 8140 	bne.w	80054fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	4798      	blx	r3
 800528c:	4603      	mov	r3, r0
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	e13a      	b.n	8005508 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	2b03      	cmp	r3, #3
 8005298:	d007      	beq.n	80052aa <USBD_StdEPReq+0x5c>
 800529a:	2b03      	cmp	r3, #3
 800529c:	f300 8129 	bgt.w	80054f2 <USBD_StdEPReq+0x2a4>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d07f      	beq.n	80053a4 <USBD_StdEPReq+0x156>
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d03c      	beq.n	8005322 <USBD_StdEPReq+0xd4>
 80052a8:	e123      	b.n	80054f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d002      	beq.n	80052bc <USBD_StdEPReq+0x6e>
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d016      	beq.n	80052e8 <USBD_StdEPReq+0x9a>
 80052ba:	e02c      	b.n	8005316 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00d      	beq.n	80052de <USBD_StdEPReq+0x90>
 80052c2:	7bbb      	ldrb	r3, [r7, #14]
 80052c4:	2b80      	cmp	r3, #128	; 0x80
 80052c6:	d00a      	beq.n	80052de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 f841 	bl	8006354 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80052d2:	2180      	movs	r1, #128	; 0x80
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f001 f83d 	bl	8006354 <USBD_LL_StallEP>
 80052da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80052dc:	e020      	b.n	8005320 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fc45 	bl	8005b70 <USBD_CtlError>
              break;
 80052e6:	e01b      	b.n	8005320 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	885b      	ldrh	r3, [r3, #2]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10e      	bne.n	800530e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80052f0:	7bbb      	ldrb	r3, [r7, #14]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <USBD_StdEPReq+0xc0>
 80052f6:	7bbb      	ldrb	r3, [r7, #14]
 80052f8:	2b80      	cmp	r3, #128	; 0x80
 80052fa:	d008      	beq.n	800530e <USBD_StdEPReq+0xc0>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	88db      	ldrh	r3, [r3, #6]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005304:	7bbb      	ldrb	r3, [r7, #14]
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f001 f823 	bl	8006354 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fcdc 	bl	8005ccc <USBD_CtlSendStatus>

              break;
 8005314:	e004      	b.n	8005320 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fc29 	bl	8005b70 <USBD_CtlError>
              break;
 800531e:	bf00      	nop
          }
          break;
 8005320:	e0ec      	b.n	80054fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d002      	beq.n	8005334 <USBD_StdEPReq+0xe6>
 800532e:	2b03      	cmp	r3, #3
 8005330:	d016      	beq.n	8005360 <USBD_StdEPReq+0x112>
 8005332:	e030      	b.n	8005396 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005334:	7bbb      	ldrb	r3, [r7, #14]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00d      	beq.n	8005356 <USBD_StdEPReq+0x108>
 800533a:	7bbb      	ldrb	r3, [r7, #14]
 800533c:	2b80      	cmp	r3, #128	; 0x80
 800533e:	d00a      	beq.n	8005356 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 f805 	bl	8006354 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800534a:	2180      	movs	r1, #128	; 0x80
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f001 f801 	bl	8006354 <USBD_LL_StallEP>
 8005352:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005354:	e025      	b.n	80053a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005356:	6839      	ldr	r1, [r7, #0]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fc09 	bl	8005b70 <USBD_CtlError>
              break;
 800535e:	e020      	b.n	80053a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	885b      	ldrh	r3, [r3, #2]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d11b      	bne.n	80053a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	4619      	mov	r1, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f001 f80b 	bl	8006392 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fca5 	bl	8005ccc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	6839      	ldr	r1, [r7, #0]
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	4798      	blx	r3
 8005390:	4603      	mov	r3, r0
 8005392:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005394:	e004      	b.n	80053a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fbe9 	bl	8005b70 <USBD_CtlError>
              break;
 800539e:	e000      	b.n	80053a2 <USBD_StdEPReq+0x154>
              break;
 80053a0:	bf00      	nop
          }
          break;
 80053a2:	e0ab      	b.n	80054fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d002      	beq.n	80053b6 <USBD_StdEPReq+0x168>
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d032      	beq.n	800541a <USBD_StdEPReq+0x1cc>
 80053b4:	e097      	b.n	80054e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053b6:	7bbb      	ldrb	r3, [r7, #14]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <USBD_StdEPReq+0x17e>
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d004      	beq.n	80053cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fbd3 	bl	8005b70 <USBD_CtlError>
                break;
 80053ca:	e091      	b.n	80054f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	da0b      	bge.n	80053ec <USBD_StdEPReq+0x19e>
 80053d4:	7bbb      	ldrb	r3, [r7, #14]
 80053d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053da:	4613      	mov	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	3310      	adds	r3, #16
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	3304      	adds	r3, #4
 80053ea:	e00b      	b.n	8005404 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80053ec:	7bbb      	ldrb	r3, [r7, #14]
 80053ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	3304      	adds	r3, #4
 8005404:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2202      	movs	r2, #2
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fc1d 	bl	8005c52 <USBD_CtlSendData>
              break;
 8005418:	e06a      	b.n	80054f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800541a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800541e:	2b00      	cmp	r3, #0
 8005420:	da11      	bge.n	8005446 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005422:	7bbb      	ldrb	r3, [r7, #14]
 8005424:	f003 020f 	and.w	r2, r3, #15
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	3324      	adds	r3, #36	; 0x24
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d117      	bne.n	800546c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fb96 	bl	8005b70 <USBD_CtlError>
                  break;
 8005444:	e054      	b.n	80054f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005446:	7bbb      	ldrb	r3, [r7, #14]
 8005448:	f003 020f 	and.w	r2, r3, #15
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fb83 	bl	8005b70 <USBD_CtlError>
                  break;
 800546a:	e041      	b.n	80054f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800546c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005470:	2b00      	cmp	r3, #0
 8005472:	da0b      	bge.n	800548c <USBD_StdEPReq+0x23e>
 8005474:	7bbb      	ldrb	r3, [r7, #14]
 8005476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	3310      	adds	r3, #16
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	4413      	add	r3, r2
 8005488:	3304      	adds	r3, #4
 800548a:	e00b      	b.n	80054a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800548c:	7bbb      	ldrb	r3, [r7, #14]
 800548e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	3304      	adds	r3, #4
 80054a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <USBD_StdEPReq+0x264>
 80054ac:	7bbb      	ldrb	r3, [r7, #14]
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	d103      	bne.n	80054ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e00e      	b.n	80054d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80054ba:	7bbb      	ldrb	r3, [r7, #14]
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 ff86 	bl	80063d0 <USBD_LL_IsStallEP>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e002      	b.n	80054d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2202      	movs	r2, #2
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fbb7 	bl	8005c52 <USBD_CtlSendData>
              break;
 80054e4:	e004      	b.n	80054f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb41 	bl	8005b70 <USBD_CtlError>
              break;
 80054ee:	bf00      	nop
          }
          break;
 80054f0:	e004      	b.n	80054fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80054f2:	6839      	ldr	r1, [r7, #0]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fb3b 	bl	8005b70 <USBD_CtlError>
          break;
 80054fa:	bf00      	nop
      }
      break;
 80054fc:	e004      	b.n	8005508 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fb35 	bl	8005b70 <USBD_CtlError>
      break;
 8005506:	bf00      	nop
  }

  return ret;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	885b      	ldrh	r3, [r3, #2]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	2b06      	cmp	r3, #6
 8005536:	f200 8128 	bhi.w	800578a <USBD_GetDescriptor+0x276>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <USBD_GetDescriptor+0x2c>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	0800555d 	.word	0x0800555d
 8005544:	08005575 	.word	0x08005575
 8005548:	080055b5 	.word	0x080055b5
 800554c:	0800578b 	.word	0x0800578b
 8005550:	0800578b 	.word	0x0800578b
 8005554:	0800572b 	.word	0x0800572b
 8005558:	08005757 	.word	0x08005757
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	7c12      	ldrb	r2, [r2, #16]
 8005568:	f107 0108 	add.w	r1, r7, #8
 800556c:	4610      	mov	r0, r2
 800556e:	4798      	blx	r3
 8005570:	60f8      	str	r0, [r7, #12]
      break;
 8005572:	e112      	b.n	800579a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	7c1b      	ldrb	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10d      	bne.n	8005598 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f107 0208 	add.w	r2, r7, #8
 8005588:	4610      	mov	r0, r2
 800558a:	4798      	blx	r3
 800558c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005596:	e100      	b.n	800579a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	f107 0208 	add.w	r2, r7, #8
 80055a4:	4610      	mov	r0, r2
 80055a6:	4798      	blx	r3
 80055a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3301      	adds	r3, #1
 80055ae:	2202      	movs	r2, #2
 80055b0:	701a      	strb	r2, [r3, #0]
      break;
 80055b2:	e0f2      	b.n	800579a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	885b      	ldrh	r3, [r3, #2]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	f200 80ac 	bhi.w	8005718 <USBD_GetDescriptor+0x204>
 80055c0:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <USBD_GetDescriptor+0xb4>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	080055e1 	.word	0x080055e1
 80055cc:	08005615 	.word	0x08005615
 80055d0:	08005649 	.word	0x08005649
 80055d4:	0800567d 	.word	0x0800567d
 80055d8:	080056b1 	.word	0x080056b1
 80055dc:	080056e5 	.word	0x080056e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	7c12      	ldrb	r2, [r2, #16]
 80055f8:	f107 0108 	add.w	r1, r7, #8
 80055fc:	4610      	mov	r0, r2
 80055fe:	4798      	blx	r3
 8005600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005602:	e091      	b.n	8005728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fab2 	bl	8005b70 <USBD_CtlError>
            err++;
 800560c:	7afb      	ldrb	r3, [r7, #11]
 800560e:	3301      	adds	r3, #1
 8005610:	72fb      	strb	r3, [r7, #11]
          break;
 8005612:	e089      	b.n	8005728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	7c12      	ldrb	r2, [r2, #16]
 800562c:	f107 0108 	add.w	r1, r7, #8
 8005630:	4610      	mov	r0, r2
 8005632:	4798      	blx	r3
 8005634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005636:	e077      	b.n	8005728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fa98 	bl	8005b70 <USBD_CtlError>
            err++;
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	3301      	adds	r3, #1
 8005644:	72fb      	strb	r3, [r7, #11]
          break;
 8005646:	e06f      	b.n	8005728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00b      	beq.n	800566c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	7c12      	ldrb	r2, [r2, #16]
 8005660:	f107 0108 	add.w	r1, r7, #8
 8005664:	4610      	mov	r0, r2
 8005666:	4798      	blx	r3
 8005668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800566a:	e05d      	b.n	8005728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fa7e 	bl	8005b70 <USBD_CtlError>
            err++;
 8005674:	7afb      	ldrb	r3, [r7, #11]
 8005676:	3301      	adds	r3, #1
 8005678:	72fb      	strb	r3, [r7, #11]
          break;
 800567a:	e055      	b.n	8005728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	7c12      	ldrb	r2, [r2, #16]
 8005694:	f107 0108 	add.w	r1, r7, #8
 8005698:	4610      	mov	r0, r2
 800569a:	4798      	blx	r3
 800569c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800569e:	e043      	b.n	8005728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fa64 	bl	8005b70 <USBD_CtlError>
            err++;
 80056a8:	7afb      	ldrb	r3, [r7, #11]
 80056aa:	3301      	adds	r3, #1
 80056ac:	72fb      	strb	r3, [r7, #11]
          break;
 80056ae:	e03b      	b.n	8005728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00b      	beq.n	80056d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	7c12      	ldrb	r2, [r2, #16]
 80056c8:	f107 0108 	add.w	r1, r7, #8
 80056cc:	4610      	mov	r0, r2
 80056ce:	4798      	blx	r3
 80056d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056d2:	e029      	b.n	8005728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fa4a 	bl	8005b70 <USBD_CtlError>
            err++;
 80056dc:	7afb      	ldrb	r3, [r7, #11]
 80056de:	3301      	adds	r3, #1
 80056e0:	72fb      	strb	r3, [r7, #11]
          break;
 80056e2:	e021      	b.n	8005728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00b      	beq.n	8005708 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	7c12      	ldrb	r2, [r2, #16]
 80056fc:	f107 0108 	add.w	r1, r7, #8
 8005700:	4610      	mov	r0, r2
 8005702:	4798      	blx	r3
 8005704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005706:	e00f      	b.n	8005728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa30 	bl	8005b70 <USBD_CtlError>
            err++;
 8005710:	7afb      	ldrb	r3, [r7, #11]
 8005712:	3301      	adds	r3, #1
 8005714:	72fb      	strb	r3, [r7, #11]
          break;
 8005716:	e007      	b.n	8005728 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa28 	bl	8005b70 <USBD_CtlError>
          err++;
 8005720:	7afb      	ldrb	r3, [r7, #11]
 8005722:	3301      	adds	r3, #1
 8005724:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005726:	bf00      	nop
      }
      break;
 8005728:	e037      	b.n	800579a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	7c1b      	ldrb	r3, [r3, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	f107 0208 	add.w	r2, r7, #8
 800573e:	4610      	mov	r0, r2
 8005740:	4798      	blx	r3
 8005742:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005744:	e029      	b.n	800579a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fa11 	bl	8005b70 <USBD_CtlError>
        err++;
 800574e:	7afb      	ldrb	r3, [r7, #11]
 8005750:	3301      	adds	r3, #1
 8005752:	72fb      	strb	r3, [r7, #11]
      break;
 8005754:	e021      	b.n	800579a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	7c1b      	ldrb	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10d      	bne.n	800577a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	f107 0208 	add.w	r2, r7, #8
 800576a:	4610      	mov	r0, r2
 800576c:	4798      	blx	r3
 800576e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
 8005774:	2207      	movs	r2, #7
 8005776:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005778:	e00f      	b.n	800579a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f9f7 	bl	8005b70 <USBD_CtlError>
        err++;
 8005782:	7afb      	ldrb	r3, [r7, #11]
 8005784:	3301      	adds	r3, #1
 8005786:	72fb      	strb	r3, [r7, #11]
      break;
 8005788:	e007      	b.n	800579a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9ef 	bl	8005b70 <USBD_CtlError>
      err++;
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	3301      	adds	r3, #1
 8005796:	72fb      	strb	r3, [r7, #11]
      break;
 8005798:	bf00      	nop
  }

  if (err != 0U)
 800579a:	7afb      	ldrb	r3, [r7, #11]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11e      	bne.n	80057de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	88db      	ldrh	r3, [r3, #6]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d016      	beq.n	80057d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80057a8:	893b      	ldrh	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00e      	beq.n	80057cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	88da      	ldrh	r2, [r3, #6]
 80057b2:	893b      	ldrh	r3, [r7, #8]
 80057b4:	4293      	cmp	r3, r2
 80057b6:	bf28      	it	cs
 80057b8:	4613      	movcs	r3, r2
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80057be:	893b      	ldrh	r3, [r7, #8]
 80057c0:	461a      	mov	r2, r3
 80057c2:	68f9      	ldr	r1, [r7, #12]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fa44 	bl	8005c52 <USBD_CtlSendData>
 80057ca:	e009      	b.n	80057e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9ce 	bl	8005b70 <USBD_CtlError>
 80057d4:	e004      	b.n	80057e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa78 	bl	8005ccc <USBD_CtlSendStatus>
 80057dc:	e000      	b.n	80057e0 <USBD_GetDescriptor+0x2cc>
    return;
 80057de:	bf00      	nop
  }
}
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop

080057e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	889b      	ldrh	r3, [r3, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d131      	bne.n	800585e <USBD_SetAddress+0x76>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	88db      	ldrh	r3, [r3, #6]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d12d      	bne.n	800585e <USBD_SetAddress+0x76>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	885b      	ldrh	r3, [r3, #2]
 8005806:	2b7f      	cmp	r3, #127	; 0x7f
 8005808:	d829      	bhi.n	800585e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	885b      	ldrh	r3, [r3, #2]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005814:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b03      	cmp	r3, #3
 8005820:	d104      	bne.n	800582c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f9a3 	bl	8005b70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800582a:	e01d      	b.n	8005868 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	7bfa      	ldrb	r2, [r7, #15]
 8005830:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	4619      	mov	r1, r3
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fdf5 	bl	8006428 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa44 	bl	8005ccc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2202      	movs	r2, #2
 800584e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005852:	e009      	b.n	8005868 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585c:	e004      	b.n	8005868 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f985 	bl	8005b70 <USBD_CtlError>
  }
}
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	885b      	ldrh	r3, [r3, #2]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	4b4c      	ldr	r3, [pc, #304]	; (80059b8 <USBD_SetConfig+0x148>)
 8005886:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005888:	4b4b      	ldr	r3, [pc, #300]	; (80059b8 <USBD_SetConfig+0x148>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d905      	bls.n	800589c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f96c 	bl	8005b70 <USBD_CtlError>
    return USBD_FAIL;
 8005898:	2303      	movs	r3, #3
 800589a:	e088      	b.n	80059ae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d002      	beq.n	80058ae <USBD_SetConfig+0x3e>
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d025      	beq.n	80058f8 <USBD_SetConfig+0x88>
 80058ac:	e071      	b.n	8005992 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80058ae:	4b42      	ldr	r3, [pc, #264]	; (80059b8 <USBD_SetConfig+0x148>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d01c      	beq.n	80058f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80058b6:	4b40      	ldr	r3, [pc, #256]	; (80059b8 <USBD_SetConfig+0x148>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058c0:	4b3d      	ldr	r3, [pc, #244]	; (80059b8 <USBD_SetConfig+0x148>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff f948 	bl	8004b5c <USBD_SetClassConfig>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f949 	bl	8005b70 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80058de:	e065      	b.n	80059ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9f3 	bl	8005ccc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2203      	movs	r2, #3
 80058ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80058ee:	e05d      	b.n	80059ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f9eb 	bl	8005ccc <USBD_CtlSendStatus>
      break;
 80058f6:	e059      	b.n	80059ac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80058f8:	4b2f      	ldr	r3, [pc, #188]	; (80059b8 <USBD_SetConfig+0x148>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d112      	bne.n	8005926 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005908:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <USBD_SetConfig+0x148>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005912:	4b29      	ldr	r3, [pc, #164]	; (80059b8 <USBD_SetConfig+0x148>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff f93b 	bl	8004b94 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f9d4 	bl	8005ccc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005924:	e042      	b.n	80059ac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <USBD_SetConfig+0x148>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	d02a      	beq.n	800598a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff f929 	bl	8004b94 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <USBD_SetConfig+0x148>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800594c:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <USBD_SetConfig+0x148>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	4619      	mov	r1, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff f902 	bl	8004b5c <USBD_SetClassConfig>
 8005958:	4603      	mov	r3, r0
 800595a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00f      	beq.n	8005982 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f903 	bl	8005b70 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff f90e 	bl	8004b94 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005980:	e014      	b.n	80059ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f9a2 	bl	8005ccc <USBD_CtlSendStatus>
      break;
 8005988:	e010      	b.n	80059ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f99e 	bl	8005ccc <USBD_CtlSendStatus>
      break;
 8005990:	e00c      	b.n	80059ac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f8eb 	bl	8005b70 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <USBD_SetConfig+0x148>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff f8f7 	bl	8004b94 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80059a6:	2303      	movs	r3, #3
 80059a8:	73fb      	strb	r3, [r7, #15]
      break;
 80059aa:	bf00      	nop
  }

  return ret;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000178 	.word	0x20000178

080059bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	88db      	ldrh	r3, [r3, #6]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d004      	beq.n	80059d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f8cd 	bl	8005b70 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80059d6:	e023      	b.n	8005a20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	dc02      	bgt.n	80059ea <USBD_GetConfig+0x2e>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dc03      	bgt.n	80059f0 <USBD_GetConfig+0x34>
 80059e8:	e015      	b.n	8005a16 <USBD_GetConfig+0x5a>
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d00b      	beq.n	8005a06 <USBD_GetConfig+0x4a>
 80059ee:	e012      	b.n	8005a16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3308      	adds	r3, #8
 80059fa:	2201      	movs	r2, #1
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f927 	bl	8005c52 <USBD_CtlSendData>
        break;
 8005a04:	e00c      	b.n	8005a20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f91f 	bl	8005c52 <USBD_CtlSendData>
        break;
 8005a14:	e004      	b.n	8005a20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f8a9 	bl	8005b70 <USBD_CtlError>
        break;
 8005a1e:	bf00      	nop
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d81e      	bhi.n	8005a7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	88db      	ldrh	r3, [r3, #6]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d004      	beq.n	8005a52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f890 	bl	8005b70 <USBD_CtlError>
        break;
 8005a50:	e01a      	b.n	8005a88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f043 0202 	orr.w	r2, r3, #2
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	330c      	adds	r3, #12
 8005a72:	2202      	movs	r2, #2
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f8eb 	bl	8005c52 <USBD_CtlSendData>
      break;
 8005a7c:	e004      	b.n	8005a88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f875 	bl	8005b70 <USBD_CtlError>
      break;
 8005a86:	bf00      	nop
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	885b      	ldrh	r3, [r3, #2]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d106      	bne.n	8005ab0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f90e 	bl	8005ccc <USBD_CtlSendStatus>
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d80b      	bhi.n	8005ae8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	885b      	ldrh	r3, [r3, #2]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d10c      	bne.n	8005af2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f8f3 	bl	8005ccc <USBD_CtlSendStatus>
      }
      break;
 8005ae6:	e004      	b.n	8005af2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f840 	bl	8005b70 <USBD_CtlError>
      break;
 8005af0:	e000      	b.n	8005af4 <USBD_ClrFeature+0x3c>
      break;
 8005af2:	bf00      	nop
  }
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3301      	adds	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff fabb 	bl	80050a2 <SWAPBYTE>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7ff faae 	bl	80050a2 <SWAPBYTE>
 8005b46:	4603      	mov	r3, r0
 8005b48:	461a      	mov	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3301      	adds	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff faa1 	bl	80050a2 <SWAPBYTE>
 8005b60:	4603      	mov	r3, r0
 8005b62:	461a      	mov	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	80da      	strh	r2, [r3, #6]
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b7a:	2180      	movs	r1, #128	; 0x80
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fbe9 	bl	8006354 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b82:	2100      	movs	r1, #0
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fbe5 	bl	8006354 <USBD_LL_StallEP>
}
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d036      	beq.n	8005c16 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005bac:	6938      	ldr	r0, [r7, #16]
 8005bae:	f000 f836 	bl	8005c1e <USBD_GetLen>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	701a      	strb	r2, [r3, #0]
  idx++;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	2203      	movs	r2, #3
 8005bda:	701a      	strb	r2, [r3, #0]
  idx++;
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
 8005bde:	3301      	adds	r3, #1
 8005be0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005be2:	e013      	b.n	8005c0c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	4413      	add	r3, r2
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	613b      	str	r3, [r7, #16]
    idx++;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	4413      	add	r3, r2
 8005c02:	2200      	movs	r2, #0
 8005c04:	701a      	strb	r2, [r3, #0]
    idx++;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e7      	bne.n	8005be4 <USBD_GetString+0x52>
 8005c14:	e000      	b.n	8005c18 <USBD_GetString+0x86>
    return;
 8005c16:	bf00      	nop
  }
}
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005c2e:	e005      	b.n	8005c3c <USBD_GetLen+0x1e>
  {
    len++;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	3301      	adds	r3, #1
 8005c34:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1f5      	bne.n	8005c30 <USBD_GetLen+0x12>
  }

  return len;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2202      	movs	r2, #2
 8005c62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	2100      	movs	r1, #0
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fbf4 	bl	8006466 <USBD_LL_Transmit>

  return USBD_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	2100      	movs	r1, #0
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fbe3 	bl	8006466 <USBD_LL_Transmit>

  return USBD_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	2100      	movs	r1, #0
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fbf3 	bl	80064a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fbbf 	bl	8006466 <USBD_LL_Transmit>

  return USBD_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2205      	movs	r2, #5
 8005cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d02:	2300      	movs	r3, #0
 8005d04:	2200      	movs	r2, #0
 8005d06:	2100      	movs	r1, #0
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fbcd 	bl	80064a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	490e      	ldr	r1, [pc, #56]	; (8005d58 <MX_USB_DEVICE_Init+0x40>)
 8005d20:	480e      	ldr	r0, [pc, #56]	; (8005d5c <MX_USB_DEVICE_Init+0x44>)
 8005d22:	f7fe fead 	bl	8004a80 <USBD_Init>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005d2c:	f7fa fcfe 	bl	800072c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005d30:	490b      	ldr	r1, [pc, #44]	; (8005d60 <MX_USB_DEVICE_Init+0x48>)
 8005d32:	480a      	ldr	r0, [pc, #40]	; (8005d5c <MX_USB_DEVICE_Init+0x44>)
 8005d34:	f7fe fed4 	bl	8004ae0 <USBD_RegisterClass>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005d3e:	f7fa fcf5 	bl	800072c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005d42:	4806      	ldr	r0, [pc, #24]	; (8005d5c <MX_USB_DEVICE_Init+0x44>)
 8005d44:	f7fe fef3 	bl	8004b2e <USBD_Start>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005d4e:	f7fa fced 	bl	800072c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005d52:	bf00      	nop
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	2000010c 	.word	0x2000010c
 8005d5c:	200001e0 	.word	0x200001e0
 8005d60:	20000020 	.word	0x20000020

08005d64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	6039      	str	r1, [r7, #0]
 8005d6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2212      	movs	r2, #18
 8005d74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d76:	4b03      	ldr	r3, [pc, #12]	; (8005d84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	20000128 	.word	0x20000128

08005d88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	6039      	str	r1, [r7, #0]
 8005d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2204      	movs	r2, #4
 8005d98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d9a:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	2000013c 	.word	0x2000013c

08005dac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	6039      	str	r1, [r7, #0]
 8005db6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d105      	bne.n	8005dca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	4907      	ldr	r1, [pc, #28]	; (8005de0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dc2:	4808      	ldr	r0, [pc, #32]	; (8005de4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005dc4:	f7ff fee5 	bl	8005b92 <USBD_GetString>
 8005dc8:	e004      	b.n	8005dd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	4904      	ldr	r1, [pc, #16]	; (8005de0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dce:	4805      	ldr	r0, [pc, #20]	; (8005de4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005dd0:	f7ff fedf 	bl	8005b92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	200004b0 	.word	0x200004b0
 8005de4:	080065e4 	.word	0x080065e4

08005de8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	6039      	str	r1, [r7, #0]
 8005df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	4904      	ldr	r1, [pc, #16]	; (8005e08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005df8:	4804      	ldr	r0, [pc, #16]	; (8005e0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005dfa:	f7ff feca 	bl	8005b92 <USBD_GetString>
  return USBD_StrDesc;
 8005dfe:	4b02      	ldr	r3, [pc, #8]	; (8005e08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	200004b0 	.word	0x200004b0
 8005e0c:	080065fc 	.word	0x080065fc

08005e10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	6039      	str	r1, [r7, #0]
 8005e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	221a      	movs	r2, #26
 8005e20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e22:	f000 f843 	bl	8005eac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e26:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000140 	.word	0x20000140

08005e34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	6039      	str	r1, [r7, #0]
 8005e3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d105      	bne.n	8005e52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	4907      	ldr	r1, [pc, #28]	; (8005e68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e4a:	4808      	ldr	r0, [pc, #32]	; (8005e6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e4c:	f7ff fea1 	bl	8005b92 <USBD_GetString>
 8005e50:	e004      	b.n	8005e5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	4904      	ldr	r1, [pc, #16]	; (8005e68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e56:	4805      	ldr	r0, [pc, #20]	; (8005e6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e58:	f7ff fe9b 	bl	8005b92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e5c:	4b02      	ldr	r3, [pc, #8]	; (8005e68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	200004b0 	.word	0x200004b0
 8005e6c:	08006600 	.word	0x08006600

08005e70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	6039      	str	r1, [r7, #0]
 8005e7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d105      	bne.n	8005e8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	4907      	ldr	r1, [pc, #28]	; (8005ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e86:	4808      	ldr	r0, [pc, #32]	; (8005ea8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e88:	f7ff fe83 	bl	8005b92 <USBD_GetString>
 8005e8c:	e004      	b.n	8005e98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	4904      	ldr	r1, [pc, #16]	; (8005ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e92:	4805      	ldr	r0, [pc, #20]	; (8005ea8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e94:	f7ff fe7d 	bl	8005b92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e98:	4b02      	ldr	r3, [pc, #8]	; (8005ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200004b0 	.word	0x200004b0
 8005ea8:	0800660c 	.word	0x0800660c

08005eac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005eb2:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <Get_SerialNum+0x44>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005eb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ef4 <Get_SerialNum+0x48>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005ebe:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <Get_SerialNum+0x4c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d009      	beq.n	8005ee6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	4909      	ldr	r1, [pc, #36]	; (8005efc <Get_SerialNum+0x50>)
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 f814 	bl	8005f04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005edc:	2204      	movs	r2, #4
 8005ede:	4908      	ldr	r1, [pc, #32]	; (8005f00 <Get_SerialNum+0x54>)
 8005ee0:	68b8      	ldr	r0, [r7, #8]
 8005ee2:	f000 f80f 	bl	8005f04 <IntToUnicode>
  }
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	1fff7a10 	.word	0x1fff7a10
 8005ef4:	1fff7a14 	.word	0x1fff7a14
 8005ef8:	1fff7a18 	.word	0x1fff7a18
 8005efc:	20000142 	.word	0x20000142
 8005f00:	20000152 	.word	0x20000152

08005f04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f16:	2300      	movs	r3, #0
 8005f18:	75fb      	strb	r3, [r7, #23]
 8005f1a:	e027      	b.n	8005f6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	0f1b      	lsrs	r3, r3, #28
 8005f20:	2b09      	cmp	r3, #9
 8005f22:	d80b      	bhi.n	8005f3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	0f1b      	lsrs	r3, r3, #28
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	7dfb      	ldrb	r3, [r7, #23]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	4619      	mov	r1, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	440b      	add	r3, r1
 8005f34:	3230      	adds	r2, #48	; 0x30
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	e00a      	b.n	8005f52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	0f1b      	lsrs	r3, r3, #28
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	4619      	mov	r1, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	440b      	add	r3, r1
 8005f4c:	3237      	adds	r2, #55	; 0x37
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f58:	7dfb      	ldrb	r3, [r7, #23]
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	4413      	add	r3, r2
 8005f62:	2200      	movs	r2, #0
 8005f64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
 8005f6c:	7dfa      	ldrb	r2, [r7, #23]
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d3d3      	bcc.n	8005f1c <IntToUnicode+0x18>
  }
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	; 0x28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	605a      	str	r2, [r3, #4]
 8005f96:	609a      	str	r2, [r3, #8]
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fa4:	d13a      	bne.n	800601c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	4b1e      	ldr	r3, [pc, #120]	; (8006024 <HAL_PCD_MspInit+0xa0>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	4a1d      	ldr	r2, [pc, #116]	; (8006024 <HAL_PCD_MspInit+0xa0>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb6:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <HAL_PCD_MspInit+0xa0>)
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005fc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005fd4:	230a      	movs	r3, #10
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd8:	f107 0314 	add.w	r3, r7, #20
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4812      	ldr	r0, [pc, #72]	; (8006028 <HAL_PCD_MspInit+0xa4>)
 8005fe0:	f7fa fe5e 	bl	8000ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005fe4:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <HAL_PCD_MspInit+0xa0>)
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe8:	4a0e      	ldr	r2, [pc, #56]	; (8006024 <HAL_PCD_MspInit+0xa0>)
 8005fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fee:	6353      	str	r3, [r2, #52]	; 0x34
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <HAL_PCD_MspInit+0xa0>)
 8005ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff8:	4a0a      	ldr	r2, [pc, #40]	; (8006024 <HAL_PCD_MspInit+0xa0>)
 8005ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ffe:	6453      	str	r3, [r2, #68]	; 0x44
 8006000:	4b08      	ldr	r3, [pc, #32]	; (8006024 <HAL_PCD_MspInit+0xa0>)
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800600c:	2200      	movs	r2, #0
 800600e:	2100      	movs	r1, #0
 8006010:	2043      	movs	r0, #67	; 0x43
 8006012:	f7fa fe0e 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006016:	2043      	movs	r0, #67	; 0x43
 8006018:	f7fa fe27 	bl	8000c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800601c:	bf00      	nop
 800601e:	3728      	adds	r7, #40	; 0x28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40023800 	.word	0x40023800
 8006028:	40020000 	.word	0x40020000

0800602c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f7fe fdbe 	bl	8004bc4 <USBD_LL_SetupStage>
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	4619      	mov	r1, r3
 800607a:	f7fe fdf8 	bl	8004c6e <USBD_LL_DataOutStage>
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	460b      	mov	r3, r1
 8006090:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	3348      	adds	r3, #72	; 0x48
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	4619      	mov	r1, r3
 80060ae:	f7fe fe41 	bl	8004d34 <USBD_LL_DataInStage>
}
 80060b2:	bf00      	nop
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fe ff55 	bl	8004f78 <USBD_LL_SOF>
}
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80060de:	2301      	movs	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d001      	beq.n	80060ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80060ea:	f7fa fb1f 	bl	800072c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060f4:	7bfa      	ldrb	r2, [r7, #15]
 80060f6:	4611      	mov	r1, r2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe feff 	bl	8004efc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006104:	4618      	mov	r0, r3
 8006106:	f7fe feab 	bl	8004e60 <USBD_LL_Reset>
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe fefa 	bl	8004f1c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6812      	ldr	r2, [r2, #0]
 8006136:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <HAL_PCD_SuspendCallback+0x48>)
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	4a03      	ldr	r2, [pc, #12]	; (800615c <HAL_PCD_SuspendCallback+0x48>)
 800614e:	f043 0306 	orr.w	r3, r3, #6
 8006152:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	e000ed00 	.word	0xe000ed00

08006160 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe feea 	bl	8004f48 <USBD_LL_Resume>
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800618e:	78fa      	ldrb	r2, [r7, #3]
 8006190:	4611      	mov	r1, r2
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe ff38 	bl	8005008 <USBD_LL_IsoOUTIncomplete>
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	4611      	mov	r1, r2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe ff00 	bl	8004fbc <USBD_LL_IsoINIncomplete>
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe ff3e 	bl	8005054 <USBD_LL_DevConnected>
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe ff3b 	bl	800506a <USBD_LL_DevDisconnected>
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d13c      	bne.n	8006286 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800620c:	4a20      	ldr	r2, [pc, #128]	; (8006290 <USBD_LL_Init+0x94>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a1e      	ldr	r2, [pc, #120]	; (8006290 <USBD_LL_Init+0x94>)
 8006218:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800621c:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <USBD_LL_Init+0x94>)
 800621e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006222:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006224:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <USBD_LL_Init+0x94>)
 8006226:	2204      	movs	r2, #4
 8006228:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800622a:	4b19      	ldr	r3, [pc, #100]	; (8006290 <USBD_LL_Init+0x94>)
 800622c:	2202      	movs	r2, #2
 800622e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006230:	4b17      	ldr	r3, [pc, #92]	; (8006290 <USBD_LL_Init+0x94>)
 8006232:	2200      	movs	r2, #0
 8006234:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006236:	4b16      	ldr	r3, [pc, #88]	; (8006290 <USBD_LL_Init+0x94>)
 8006238:	2202      	movs	r2, #2
 800623a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800623c:	4b14      	ldr	r3, [pc, #80]	; (8006290 <USBD_LL_Init+0x94>)
 800623e:	2200      	movs	r2, #0
 8006240:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <USBD_LL_Init+0x94>)
 8006244:	2200      	movs	r2, #0
 8006246:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <USBD_LL_Init+0x94>)
 800624a:	2200      	movs	r2, #0
 800624c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800624e:	4b10      	ldr	r3, [pc, #64]	; (8006290 <USBD_LL_Init+0x94>)
 8006250:	2200      	movs	r2, #0
 8006252:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006254:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <USBD_LL_Init+0x94>)
 8006256:	2200      	movs	r2, #0
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800625a:	480d      	ldr	r0, [pc, #52]	; (8006290 <USBD_LL_Init+0x94>)
 800625c:	f7fa fed5 	bl	800100a <HAL_PCD_Init>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006266:	f7fa fa61 	bl	800072c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800626a:	2180      	movs	r1, #128	; 0x80
 800626c:	4808      	ldr	r0, [pc, #32]	; (8006290 <USBD_LL_Init+0x94>)
 800626e:	f7fc f81a 	bl	80022a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006272:	2240      	movs	r2, #64	; 0x40
 8006274:	2100      	movs	r1, #0
 8006276:	4806      	ldr	r0, [pc, #24]	; (8006290 <USBD_LL_Init+0x94>)
 8006278:	f7fb ffce 	bl	8002218 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800627c:	2280      	movs	r2, #128	; 0x80
 800627e:	2101      	movs	r1, #1
 8006280:	4803      	ldr	r0, [pc, #12]	; (8006290 <USBD_LL_Init+0x94>)
 8006282:	f7fb ffc9 	bl	8002218 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	200006b0 	.word	0x200006b0

08006294 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fa ffca 	bl	8001244 <HAL_PCD_Start>
 80062b0:	4603      	mov	r3, r0
 80062b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f930 	bl	800651c <USBD_Get_USB_Status>
 80062bc:	4603      	mov	r3, r0
 80062be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	461a      	mov	r2, r3
 80062d8:	4603      	mov	r3, r0
 80062da:	70fb      	strb	r3, [r7, #3]
 80062dc:	460b      	mov	r3, r1
 80062de:	70bb      	strb	r3, [r7, #2]
 80062e0:	4613      	mov	r3, r2
 80062e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062f2:	78bb      	ldrb	r3, [r7, #2]
 80062f4:	883a      	ldrh	r2, [r7, #0]
 80062f6:	78f9      	ldrb	r1, [r7, #3]
 80062f8:	f7fb fbae 	bl	8001a58 <HAL_PCD_EP_Open>
 80062fc:	4603      	mov	r3, r0
 80062fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 f90a 	bl	800651c <USBD_Get_USB_Status>
 8006308:	4603      	mov	r3, r0
 800630a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800630c:	7bbb      	ldrb	r3, [r7, #14]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	460b      	mov	r3, r1
 8006320:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006330:	78fa      	ldrb	r2, [r7, #3]
 8006332:	4611      	mov	r1, r2
 8006334:	4618      	mov	r0, r3
 8006336:	f7fb fbf7 	bl	8001b28 <HAL_PCD_EP_Close>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 f8eb 	bl	800651c <USBD_Get_USB_Status>
 8006346:	4603      	mov	r3, r0
 8006348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800634a:	7bbb      	ldrb	r3, [r7, #14]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	4611      	mov	r1, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f7fb fcb7 	bl	8001ce6 <HAL_PCD_EP_SetStall>
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f8cc 	bl	800651c <USBD_Get_USB_Status>
 8006384:	4603      	mov	r3, r0
 8006386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006388:	7bbb      	ldrb	r3, [r7, #14]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063ac:	78fa      	ldrb	r2, [r7, #3]
 80063ae:	4611      	mov	r1, r2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fb fcfc 	bl	8001dae <HAL_PCD_EP_ClrStall>
 80063b6:	4603      	mov	r3, r0
 80063b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 f8ad 	bl	800651c <USBD_Get_USB_Status>
 80063c2:	4603      	mov	r3, r0
 80063c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80063e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	da0b      	bge.n	8006404 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063f2:	68f9      	ldr	r1, [r7, #12]
 80063f4:	4613      	mov	r3, r2
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	333e      	adds	r3, #62	; 0x3e
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	e00b      	b.n	800641c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	4613      	mov	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	1a9b      	subs	r3, r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800641a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	4611      	mov	r1, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f7fb fae1 	bl	8001a0e <HAL_PCD_SetAddress>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	4618      	mov	r0, r3
 8006454:	f000 f862 	bl	800651c <USBD_Get_USB_Status>
 8006458:	4603      	mov	r3, r0
 800645a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800645c:	7bbb      	ldrb	r3, [r7, #14]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b086      	sub	sp, #24
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
 8006472:	460b      	mov	r3, r1
 8006474:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006484:	7af9      	ldrb	r1, [r7, #11]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	f7fb fbe2 	bl	8001c52 <HAL_PCD_EP_Transmit>
 800648e:	4603      	mov	r3, r0
 8006490:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f841 	bl	800651c <USBD_Get_USB_Status>
 800649a:	4603      	mov	r3, r0
 800649c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800649e:	7dbb      	ldrb	r3, [r7, #22]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	460b      	mov	r3, r1
 80064b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80064c6:	7af9      	ldrb	r1, [r7, #11]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	f7fb fb76 	bl	8001bbc <HAL_PCD_EP_Receive>
 80064d0:	4603      	mov	r3, r0
 80064d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f820 	bl	800651c <USBD_Get_USB_Status>
 80064dc:	4603      	mov	r3, r0
 80064de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80064e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80064f4:	4b03      	ldr	r3, [pc, #12]	; (8006504 <USBD_static_malloc+0x18>)
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	2000017c 	.word	0x2000017c

08006508 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]

}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	2b03      	cmp	r3, #3
 800652e:	d817      	bhi.n	8006560 <USBD_Get_USB_Status+0x44>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <USBD_Get_USB_Status+0x1c>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	08006549 	.word	0x08006549
 800653c:	0800654f 	.word	0x0800654f
 8006540:	08006555 	.word	0x08006555
 8006544:	0800655b 	.word	0x0800655b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	73fb      	strb	r3, [r7, #15]
    break;
 800654c:	e00b      	b.n	8006566 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800654e:	2303      	movs	r3, #3
 8006550:	73fb      	strb	r3, [r7, #15]
    break;
 8006552:	e008      	b.n	8006566 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
    break;
 8006558:	e005      	b.n	8006566 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800655a:	2303      	movs	r3, #3
 800655c:	73fb      	strb	r3, [r7, #15]
    break;
 800655e:	e002      	b.n	8006566 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006560:	2303      	movs	r3, #3
 8006562:	73fb      	strb	r3, [r7, #15]
    break;
 8006564:	bf00      	nop
  }
  return usb_status;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <__libc_init_array>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	4d0d      	ldr	r5, [pc, #52]	; (80065ac <__libc_init_array+0x38>)
 8006578:	4c0d      	ldr	r4, [pc, #52]	; (80065b0 <__libc_init_array+0x3c>)
 800657a:	1b64      	subs	r4, r4, r5
 800657c:	10a4      	asrs	r4, r4, #2
 800657e:	2600      	movs	r6, #0
 8006580:	42a6      	cmp	r6, r4
 8006582:	d109      	bne.n	8006598 <__libc_init_array+0x24>
 8006584:	4d0b      	ldr	r5, [pc, #44]	; (80065b4 <__libc_init_array+0x40>)
 8006586:	4c0c      	ldr	r4, [pc, #48]	; (80065b8 <__libc_init_array+0x44>)
 8006588:	f000 f820 	bl	80065cc <_init>
 800658c:	1b64      	subs	r4, r4, r5
 800658e:	10a4      	asrs	r4, r4, #2
 8006590:	2600      	movs	r6, #0
 8006592:	42a6      	cmp	r6, r4
 8006594:	d105      	bne.n	80065a2 <__libc_init_array+0x2e>
 8006596:	bd70      	pop	{r4, r5, r6, pc}
 8006598:	f855 3b04 	ldr.w	r3, [r5], #4
 800659c:	4798      	blx	r3
 800659e:	3601      	adds	r6, #1
 80065a0:	e7ee      	b.n	8006580 <__libc_init_array+0xc>
 80065a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a6:	4798      	blx	r3
 80065a8:	3601      	adds	r6, #1
 80065aa:	e7f2      	b.n	8006592 <__libc_init_array+0x1e>
 80065ac:	0800663c 	.word	0x0800663c
 80065b0:	0800663c 	.word	0x0800663c
 80065b4:	0800663c 	.word	0x0800663c
 80065b8:	08006640 	.word	0x08006640

080065bc <memset>:
 80065bc:	4402      	add	r2, r0
 80065be:	4603      	mov	r3, r0
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d100      	bne.n	80065c6 <memset+0xa>
 80065c4:	4770      	bx	lr
 80065c6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ca:	e7f9      	b.n	80065c0 <memset+0x4>

080065cc <_init>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr

080065d8 <_fini>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	bf00      	nop
 80065dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065de:	bc08      	pop	{r3}
 80065e0:	469e      	mov	lr, r3
 80065e2:	4770      	bx	lr
