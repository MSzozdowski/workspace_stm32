
T8_L7_L9_SDSPIREAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006904  08006904  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800690c  0800690c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac0  20000088  0800699c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  0800699c  00020b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136f7  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a80  00000000  00000000  000337af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00036230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  00036e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eac  00000000  00000000  000378f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114fe  00000000  00000000  0004f7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a22  00000000  00000000  00060ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea6c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032fc  00000000  00000000  000ea718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006728 	.word	0x08006728

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08006728 	.word	0x08006728

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b43      	ldr	r3, [pc, #268]	; (80006a0 <MX_GPIO_Init+0x128>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a42      	ldr	r2, [pc, #264]	; (80006a0 <MX_GPIO_Init+0x128>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a3b      	ldr	r2, [pc, #236]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD2_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f240 1101 	movw	r1, #257	; 0x101
 8000604:	4827      	ldr	r0, [pc, #156]	; (80006a4 <MX_GPIO_Init+0x12c>)
 8000606:	f000 feaf 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000610:	4825      	ldr	r0, [pc, #148]	; (80006a8 <MX_GPIO_Init+0x130>)
 8000612:	f000 fea9 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061c:	4823      	ldr	r0, [pc, #140]	; (80006ac <MX_GPIO_Init+0x134>)
 800061e:	f000 fea3 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000628:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	481a      	ldr	r0, [pc, #104]	; (80006a4 <MX_GPIO_Init+0x12c>)
 800063a:	f000 fd11 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD2_Pin|TFT_DC_Pin;
 800063e:	f240 1301 	movw	r3, #257	; 0x101
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4813      	ldr	r0, [pc, #76]	; (80006a4 <MX_GPIO_Init+0x12c>)
 8000658:	f000 fd02 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|TFT_CS_Pin;
 800065c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_GPIO_Init+0x130>)
 8000676:	f000 fcf3 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 800067a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <MX_GPIO_Init+0x134>)
 8000694:	f000 fce4 	bl	8001060 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	; 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020400 	.word	0x40020400
 80006ac:	40020000 	.word	0x40020000

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 fb7b 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f8e9 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f7ff ff5b 	bl	8000578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 fad9 	bl	8000c78 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80006c6:	f000 f989 	bl	80009dc <MX_SPI3_Init>
  MX_FATFS_Init();
 80006ca:	f002 f8e7 	bl	800289c <MX_FATFS_Init>
  MX_SPI1_Init();
 80006ce:	f000 f94f 	bl	8000970 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  FatFsResult = f_mount(&SdFatFs, "",1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	495f      	ldr	r1, [pc, #380]	; (8000854 <main+0x1a4>)
 80006d6:	4860      	ldr	r0, [pc, #384]	; (8000858 <main+0x1a8>)
 80006d8:	f004 fb72 	bl	8004dc0 <f_mount>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b5e      	ldr	r3, [pc, #376]	; (800085c <main+0x1ac>)
 80006e2:	701a      	strb	r2, [r3, #0]
  if(FatFsResult != FR_OK)
 80006e4:	4b5d      	ldr	r3, [pc, #372]	; (800085c <main+0x1ac>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d011      	beq.n	8000710 <main+0x60>
  {
  	  bytes = sprintf(data, "FatFS mount error.\n\r");
 80006ec:	495c      	ldr	r1, [pc, #368]	; (8000860 <main+0x1b0>)
 80006ee:	485d      	ldr	r0, [pc, #372]	; (8000864 <main+0x1b4>)
 80006f0:	f005 fbec 	bl	8005ecc <siprintf>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b5b      	ldr	r3, [pc, #364]	; (8000868 <main+0x1b8>)
 80006fa:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 80006fc:	4b5a      	ldr	r3, [pc, #360]	; (8000868 <main+0x1b8>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b29a      	uxth	r2, r3
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	4957      	ldr	r1, [pc, #348]	; (8000864 <main+0x1b4>)
 8000708:	4858      	ldr	r0, [pc, #352]	; (800086c <main+0x1bc>)
 800070a:	f001 fdfe 	bl	800230a <HAL_UART_Transmit>
 800070e:	e0a0      	b.n	8000852 <main+0x1a2>
  }
  else
  {
	  bytes = sprintf(data, "FatFS mounted.\n\r");
 8000710:	4957      	ldr	r1, [pc, #348]	; (8000870 <main+0x1c0>)
 8000712:	4854      	ldr	r0, [pc, #336]	; (8000864 <main+0x1b4>)
 8000714:	f005 fbda 	bl	8005ecc <siprintf>
 8000718:	4603      	mov	r3, r0
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b52      	ldr	r3, [pc, #328]	; (8000868 <main+0x1b8>)
 800071e:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8000720:	4b51      	ldr	r3, [pc, #324]	; (8000868 <main+0x1b8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b29a      	uxth	r2, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	494e      	ldr	r1, [pc, #312]	; (8000864 <main+0x1b4>)
 800072c:	484f      	ldr	r0, [pc, #316]	; (800086c <main+0x1bc>)
 800072e:	f001 fdec 	bl	800230a <HAL_UART_Transmit>
	  //
	  // Open file on SD for writing
	  //
	  FatFsResult = f_open(&SdCardFile, "test.txt", FA_WRITE|FA_CREATE_ALWAYS);
 8000732:	220a      	movs	r2, #10
 8000734:	494f      	ldr	r1, [pc, #316]	; (8000874 <main+0x1c4>)
 8000736:	4850      	ldr	r0, [pc, #320]	; (8000878 <main+0x1c8>)
 8000738:	f004 fb88 	bl	8004e4c <f_open>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	4b46      	ldr	r3, [pc, #280]	; (800085c <main+0x1ac>)
 8000742:	701a      	strb	r2, [r3, #0]
	  //
	  // File open error check
	  //
	  if(FatFsResult != FR_OK)
 8000744:	4b45      	ldr	r3, [pc, #276]	; (800085c <main+0x1ac>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d011      	beq.n	8000770 <main+0xc0>
	  {
		  bytes = sprintf(data, "No test.txt file. Can't create.\n\r");
 800074c:	494b      	ldr	r1, [pc, #300]	; (800087c <main+0x1cc>)
 800074e:	4845      	ldr	r0, [pc, #276]	; (8000864 <main+0x1b4>)
 8000750:	f005 fbbc 	bl	8005ecc <siprintf>
 8000754:	4603      	mov	r3, r0
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b43      	ldr	r3, [pc, #268]	; (8000868 <main+0x1b8>)
 800075a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 800075c:	4b42      	ldr	r3, [pc, #264]	; (8000868 <main+0x1b8>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b29a      	uxth	r2, r3
 8000762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000766:	493f      	ldr	r1, [pc, #252]	; (8000864 <main+0x1b4>)
 8000768:	4840      	ldr	r0, [pc, #256]	; (800086c <main+0x1bc>)
 800076a:	f001 fdce 	bl	800230a <HAL_UART_Transmit>
 800076e:	e070      	b.n	8000852 <main+0x1a2>
	  }
	  else
	  {
		  bytes = sprintf(data, "File opened.\n\r");
 8000770:	4943      	ldr	r1, [pc, #268]	; (8000880 <main+0x1d0>)
 8000772:	483c      	ldr	r0, [pc, #240]	; (8000864 <main+0x1b4>)
 8000774:	f005 fbaa 	bl	8005ecc <siprintf>
 8000778:	4603      	mov	r3, r0
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <main+0x1b8>)
 800077e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8000780:	4b39      	ldr	r3, [pc, #228]	; (8000868 <main+0x1b8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b29a      	uxth	r2, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	4936      	ldr	r1, [pc, #216]	; (8000864 <main+0x1b4>)
 800078c:	4837      	ldr	r0, [pc, #220]	; (800086c <main+0x1bc>)
 800078e:	f001 fdbc 	bl	800230a <HAL_UART_Transmit>
		  //
		  //	Print something to this file
		  //
		  for(uint8_t i = 0; i < 10; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
 8000796:	e008      	b.n	80007aa <main+0xfa>
		  {
			  f_printf(&SdCardFile, "Line number %d.\n", i);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	461a      	mov	r2, r3
 800079c:	4939      	ldr	r1, [pc, #228]	; (8000884 <main+0x1d4>)
 800079e:	4836      	ldr	r0, [pc, #216]	; (8000878 <main+0x1c8>)
 80007a0:	f005 f8e6 	bl	8005970 <f_printf>
		  for(uint8_t i = 0; i < 10; i++)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	3301      	adds	r3, #1
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b09      	cmp	r3, #9
 80007ae:	d9f3      	bls.n	8000798 <main+0xe8>
		  }

		  //
		  // Close file
		  //
		  FatFsResult = f_close(&SdCardFile);
 80007b0:	4831      	ldr	r0, [pc, #196]	; (8000878 <main+0x1c8>)
 80007b2:	f005 f83b 	bl	800582c <f_close>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <main+0x1ac>)
 80007bc:	701a      	strb	r2, [r3, #0]

		  bytes = sprintf(data, "File closed.\n\r");
 80007be:	4932      	ldr	r1, [pc, #200]	; (8000888 <main+0x1d8>)
 80007c0:	4828      	ldr	r0, [pc, #160]	; (8000864 <main+0x1b4>)
 80007c2:	f005 fb83 	bl	8005ecc <siprintf>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <main+0x1b8>)
 80007cc:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <main+0x1b8>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d8:	4922      	ldr	r1, [pc, #136]	; (8000864 <main+0x1b4>)
 80007da:	4824      	ldr	r0, [pc, #144]	; (800086c <main+0x1bc>)
 80007dc:	f001 fd95 	bl	800230a <HAL_UART_Transmit>

		  FatFsResult = f_open(&SdCardFile, "test.txt", FA_READ);
 80007e0:	2201      	movs	r2, #1
 80007e2:	4924      	ldr	r1, [pc, #144]	; (8000874 <main+0x1c4>)
 80007e4:	4824      	ldr	r0, [pc, #144]	; (8000878 <main+0x1c8>)
 80007e6:	f004 fb31 	bl	8004e4c <f_open>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <main+0x1ac>)
 80007f0:	701a      	strb	r2, [r3, #0]
		  if(FatFsResult != FR_OK)
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <main+0x1ac>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d011      	beq.n	800081e <main+0x16e>
		  {
		  	  bytes = sprintf(data, "No test.txt file. Can't open \n\r");
 80007fa:	4924      	ldr	r1, [pc, #144]	; (800088c <main+0x1dc>)
 80007fc:	4819      	ldr	r0, [pc, #100]	; (8000864 <main+0x1b4>)
 80007fe:	f005 fb65 	bl	8005ecc <siprintf>
 8000802:	4603      	mov	r3, r0
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <main+0x1b8>)
 8000808:	701a      	strb	r2, [r3, #0]
		  	  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <main+0x1b8>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b29a      	uxth	r2, r3
 8000810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000814:	4913      	ldr	r1, [pc, #76]	; (8000864 <main+0x1b4>)
 8000816:	4815      	ldr	r0, [pc, #84]	; (800086c <main+0x1bc>)
 8000818:	f001 fd77 	bl	800230a <HAL_UART_Transmit>
 800081c:	e019      	b.n	8000852 <main+0x1a2>
		  else
		  {
			  UINT len;
			  do
			  {
				  len = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
				  f_read(&SdCardFile, data, 10, &len);
 8000822:	463b      	mov	r3, r7
 8000824:	220a      	movs	r2, #10
 8000826:	490f      	ldr	r1, [pc, #60]	; (8000864 <main+0x1b4>)
 8000828:	4813      	ldr	r0, [pc, #76]	; (8000878 <main+0x1c8>)
 800082a:	f004 fccd 	bl	80051c8 <f_read>
				  HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b29a      	uxth	r2, r3
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	490b      	ldr	r1, [pc, #44]	; (8000864 <main+0x1b4>)
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <main+0x1bc>)
 800083a:	f001 fd66 	bl	800230a <HAL_UART_Transmit>
			  }while(len >0);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1ec      	bne.n	800081e <main+0x16e>
			  FatFsResult = f_close(&SdCardFile);
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <main+0x1c8>)
 8000846:	f004 fff1 	bl	800582c <f_close>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <main+0x1ac>)
 8000850:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000852:	e7fe      	b.n	8000852 <main+0x1a2>
 8000854:	08006740 	.word	0x08006740
 8000858:	2000031c 	.word	0x2000031c
 800085c:	200005cc 	.word	0x200005cc
 8000860:	08006744 	.word	0x08006744
 8000864:	2000054c 	.word	0x2000054c
 8000868:	20000318 	.word	0x20000318
 800086c:	20000680 	.word	0x20000680
 8000870:	0800675c 	.word	0x0800675c
 8000874:	08006770 	.word	0x08006770
 8000878:	200000e8 	.word	0x200000e8
 800087c:	0800677c 	.word	0x0800677c
 8000880:	080067a0 	.word	0x080067a0
 8000884:	080067b0 	.word	0x080067b0
 8000888:	080067c4 	.word	0x080067c4
 800088c:	080067d4 	.word	0x080067d4

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	; 0x50
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	2230      	movs	r2, #48	; 0x30
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 fb0c 	bl	8005ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <SystemClock_Config+0xcc>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	4a27      	ldr	r2, [pc, #156]	; (800095c <SystemClock_Config+0xcc>)
 80008be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c2:	6413      	str	r3, [r2, #64]	; 0x40
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <SystemClock_Config+0xcc>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <SystemClock_Config+0xd0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a21      	ldr	r2, [pc, #132]	; (8000960 <SystemClock_Config+0xd0>)
 80008da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <SystemClock_Config+0xd0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000900:	2310      	movs	r3, #16
 8000902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000904:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000908:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800090a:	2304      	movs	r3, #4
 800090c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800090e:	2304      	movs	r3, #4
 8000910:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fd40 	bl	800139c <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000922:	f000 f81f 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	230f      	movs	r3, #15
 8000928:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2302      	movs	r3, #2
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000936:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2102      	movs	r1, #2
 8000942:	4618      	mov	r0, r3
 8000944:	f000 ffa2 	bl	800188c <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800094e:	f000 f809 	bl	8000964 <Error_Handler>
  }
}
 8000952:	bf00      	nop
 8000954:	3750      	adds	r7, #80	; 0x50
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40007000 	.word	0x40007000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <MX_SPI1_Init+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_SPI1_Init+0x64>)
 800097c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_SPI1_Init+0x64>)
 800099c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009a4:	2210      	movs	r2, #16
 80009a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009bc:	220a      	movs	r2, #10
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009c2:	f001 f95f 	bl	8001c84 <HAL_SPI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009cc:	f7ff ffca 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000628 	.word	0x20000628
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_SPI3_Init+0x64>)
 80009e2:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <MX_SPI3_Init+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_SPI3_Init+0x64>)
 80009e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_SPI3_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_SPI3_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_SPI3_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_SPI3_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_SPI3_Init+0x64>)
 8000a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_SPI3_Init+0x64>)
 8000a10:	2238      	movs	r2, #56	; 0x38
 8000a12:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_SPI3_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_SPI3_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_SPI3_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_SPI3_Init+0x64>)
 8000a28:	220a      	movs	r2, #10
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_SPI3_Init+0x64>)
 8000a2e:	f001 f929 	bl	8001c84 <HAL_SPI_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000a38:	f7ff ff94 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200005d0 	.word	0x200005d0
 8000a44:	40003c00 	.word	0x40003c00

08000a48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a32      	ldr	r2, [pc, #200]	; (8000b30 <HAL_SPI_MspInit+0xe8>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12c      	bne.n	8000ac4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
 8000a6e:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a30      	ldr	r2, [pc, #192]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000a74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a82:	61bb      	str	r3, [r7, #24]
 8000a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a29      	ldr	r2, [pc, #164]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aa2:	23e0      	movs	r3, #224	; 0xe0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	481e      	ldr	r0, [pc, #120]	; (8000b38 <HAL_SPI_MspInit+0xf0>)
 8000abe:	f000 facf 	bl	8001060 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ac2:	e030      	b.n	8000b26 <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <HAL_SPI_MspInit+0xf4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12b      	bne.n	8000b26 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_SPI_MspInit+0xec>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b06:	2338      	movs	r3, #56	; 0x38
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b16:	2306      	movs	r3, #6
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <HAL_SPI_MspInit+0xf8>)
 8000b22:	f000 fa9d 	bl	8001060 <HAL_GPIO_Init>
}
 8000b26:	bf00      	nop
 8000b28:	3730      	adds	r7, #48	; 0x30
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40013000 	.word	0x40013000
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40003c00 	.word	0x40003c00
 8000b40:	40020400 	.word	0x40020400

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b82:	2007      	movs	r0, #7
 8000b84:	f000 fa38 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be0:	f000 f938 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f005 f926 	bl	8005e68 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20020000 	.word	0x20020000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	200000a4 	.word	0x200000a4
 8000c50:	20000b48 	.word	0x20000b48

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <MX_USART2_UART_Init+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	f001 fade 	bl	8002270 <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cba:	f7ff fe53 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000680 	.word	0x20000680
 8000cc8:	40004400 	.word	0x40004400

08000ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_UART_MspInit+0x84>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d12b      	bne.n	8000d46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d26:	230c      	movs	r3, #12
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d36:	2307      	movs	r3, #7
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_UART_MspInit+0x8c>)
 8000d42:	f000 f98d 	bl	8001060 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40004400 	.word	0x40004400
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d86:	f7ff ff65 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f005 f873 	bl	8005e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fc8f 	bl	80006b0 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000da0:	08006914 	.word	0x08006914
  ldr r2, =_sbss
 8000da4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000da8:	20000b48 	.word	0x20000b48

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f90d 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff feae 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f917 	bl	8001046 <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f8ed 	bl	800100e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	200006c4 	.word	0x200006c4

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200006c4 	.word	0x200006c4

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f7ff ff8e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff47 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff5c 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff8e 	bl	8000f4c <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5d 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffb0 	bl	8000fb4 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e159      	b.n	8001330 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8148 	bne.w	800132a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d130      	bne.n	8001114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80a2 	beq.w	800132a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b57      	ldr	r3, [pc, #348]	; (8001348 <HAL_GPIO_Init+0x2e8>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a56      	ldr	r2, [pc, #344]	; (8001348 <HAL_GPIO_Init+0x2e8>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b54      	ldr	r3, [pc, #336]	; (8001348 <HAL_GPIO_Init+0x2e8>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001202:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_GPIO_Init+0x2ec>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a49      	ldr	r2, [pc, #292]	; (8001350 <HAL_GPIO_Init+0x2f0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x202>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a48      	ldr	r2, [pc, #288]	; (8001354 <HAL_GPIO_Init+0x2f4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x1fe>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a47      	ldr	r2, [pc, #284]	; (8001358 <HAL_GPIO_Init+0x2f8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x1fa>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a46      	ldr	r2, [pc, #280]	; (800135c <HAL_GPIO_Init+0x2fc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x1f6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a45      	ldr	r2, [pc, #276]	; (8001360 <HAL_GPIO_Init+0x300>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x1f2>
 800124e:	2304      	movs	r3, #4
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001252:	2307      	movs	r3, #7
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x204>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x204>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4935      	ldr	r1, [pc, #212]	; (800134c <HAL_GPIO_Init+0x2ec>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001282:	4b38      	ldr	r3, [pc, #224]	; (8001364 <HAL_GPIO_Init+0x304>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a6:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <HAL_GPIO_Init+0x304>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <HAL_GPIO_Init+0x304>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d0:	4a24      	ldr	r2, [pc, #144]	; (8001364 <HAL_GPIO_Init+0x304>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_GPIO_Init+0x304>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fa:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <HAL_GPIO_Init+0x304>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_GPIO_Init+0x304>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <HAL_GPIO_Init+0x304>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f aea2 	bls.w	800107c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e264      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d075      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ba:	4ba3      	ldr	r3, [pc, #652]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d00c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c6:	4ba0      	ldr	r3, [pc, #640]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b9d      	ldr	r3, [pc, #628]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013de:	d10b      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4b99      	ldr	r3, [pc, #612]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d05b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x108>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d157      	bne.n	80014a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e23f      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x74>
 8001402:	4b91      	ldr	r3, [pc, #580]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a90      	ldr	r2, [pc, #576]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x98>
 800141a:	4b8b      	ldr	r3, [pc, #556]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a8a      	ldr	r2, [pc, #552]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b88      	ldr	r3, [pc, #544]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a87      	ldr	r2, [pc, #540]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001434:	4b84      	ldr	r3, [pc, #528]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a83      	ldr	r2, [pc, #524]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b81      	ldr	r3, [pc, #516]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a80      	ldr	r2, [pc, #512]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fd12 	bl	8000e7c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fd0e 	bl	8000e7c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e204      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b76      	ldr	r3, [pc, #472]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xc0>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fcfe 	bl	8000e7c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fcfa 	bl	8000e7c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1f0      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	4b6c      	ldr	r3, [pc, #432]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0xe8>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b2:	4b65      	ldr	r3, [pc, #404]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014be:	4b62      	ldr	r3, [pc, #392]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1c4      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b56      	ldr	r3, [pc, #344]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4952      	ldr	r1, [pc, #328]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e03a      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b4f      	ldr	r3, [pc, #316]	; (800164c <HAL_RCC_OscConfig+0x2b0>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fcb3 	bl	8000e7c <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fcaf 	bl	8000e7c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1a5      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b46      	ldr	r3, [pc, #280]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4940      	ldr	r1, [pc, #256]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <HAL_RCC_OscConfig+0x2b0>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fc92 	bl	8000e7c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fc8e 	bl	8000e7c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e184      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d030      	beq.n	80015e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <HAL_RCC_OscConfig+0x2b4>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fc72 	bl	8000e7c <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fc6e 	bl	8000e7c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e164      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x200>
 80015ba:	e015      	b.n	80015e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_RCC_OscConfig+0x2b4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fc5b 	bl	8000e7c <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff fc57 	bl	8000e7c <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e14d      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80015de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a0 	beq.w	8001736 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10f      	bne.n	8001626 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001622:	2301      	movs	r3, #1
 8001624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_OscConfig+0x2b8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d121      	bne.n	8001676 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_RCC_OscConfig+0x2b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_RCC_OscConfig+0x2b8>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163e:	f7ff fc1d 	bl	8000e7c <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	e011      	b.n	800166a <HAL_RCC_OscConfig+0x2ce>
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	42470000 	.word	0x42470000
 8001650:	42470e80 	.word	0x42470e80
 8001654:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001658:	f7ff fc10 	bl	8000e7c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e106      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	4b85      	ldr	r3, [pc, #532]	; (8001880 <HAL_RCC_OscConfig+0x4e4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d106      	bne.n	800168c <HAL_RCC_OscConfig+0x2f0>
 800167e:	4b81      	ldr	r3, [pc, #516]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	4a80      	ldr	r2, [pc, #512]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	; 0x70
 800168a:	e01c      	b.n	80016c6 <HAL_RCC_OscConfig+0x32a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x312>
 8001694:	4b7b      	ldr	r3, [pc, #492]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	4a7a      	ldr	r2, [pc, #488]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6713      	str	r3, [r2, #112]	; 0x70
 80016a0:	4b78      	ldr	r3, [pc, #480]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a4:	4a77      	ldr	r2, [pc, #476]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6713      	str	r3, [r2, #112]	; 0x70
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0x32a>
 80016ae:	4b75      	ldr	r3, [pc, #468]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a74      	ldr	r2, [pc, #464]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	4b72      	ldr	r3, [pc, #456]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	4a71      	ldr	r2, [pc, #452]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d015      	beq.n	80016fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ce:	f7ff fbd5 	bl	8000e7c <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff fbd1 	bl	8000e7c <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0c5      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ee      	beq.n	80016d6 <HAL_RCC_OscConfig+0x33a>
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fbbf 	bl	8000e7c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff fbbb 	bl	8000e7c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e0af      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ee      	bne.n	8001702 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d105      	bne.n	8001736 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172a:	4b56      	ldr	r3, [pc, #344]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a55      	ldr	r2, [pc, #340]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 8001730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 809b 	beq.w	8001876 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001740:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d05c      	beq.n	8001806 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d141      	bne.n	80017d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b4c      	ldr	r3, [pc, #304]	; (8001888 <HAL_RCC_OscConfig+0x4ec>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fb8f 	bl	8000e7c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fb8b 	bl	8000e7c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e081      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001774:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69da      	ldr	r2, [r3, #28]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	019b      	lsls	r3, r3, #6
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	3b01      	subs	r3, #1
 800179a:	041b      	lsls	r3, r3, #16
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	061b      	lsls	r3, r3, #24
 80017a4:	4937      	ldr	r1, [pc, #220]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_RCC_OscConfig+0x4ec>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb64 	bl	8000e7c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fb60 	bl	8000e7c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e056      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x41c>
 80017d6:	e04e      	b.n	8001876 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_RCC_OscConfig+0x4ec>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fb4d 	bl	8000e7c <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff fb49 	bl	8000e7c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e03f      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x44a>
 8001804:	e037      	b.n	8001876 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e032      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_RCC_OscConfig+0x4e8>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d028      	beq.n	8001872 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d121      	bne.n	8001872 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d11a      	bne.n	8001872 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001842:	4013      	ands	r3, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001848:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800184a:	4293      	cmp	r3, r2
 800184c:	d111      	bne.n	8001872 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	3b01      	subs	r3, #1
 800185c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d107      	bne.n	8001872 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40007000 	.word	0x40007000
 8001884:	40023800 	.word	0x40023800
 8001888:	42470060 	.word	0x42470060

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0cc      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b68      	ldr	r3, [pc, #416]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d90c      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	494d      	ldr	r1, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d044      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d119      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d003      	beq.n	800194a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	2b03      	cmp	r3, #3
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e067      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4934      	ldr	r1, [pc, #208]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff fa7e 	bl	8000e7c <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff fa7a 	bl	8000e7c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e04f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d20c      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e032      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4916      	ldr	r1, [pc, #88]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f821 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490a      	ldr	r1, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f9de 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	08006838 	.word	0x08006838
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a70:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d00d      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	f200 80bd 	bhi.w	8001bfc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x34>
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a8a:	e0b7      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a8e:	60bb      	str	r3, [r7, #8]
       break;
 8001a90:	e0b7      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a92:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a94:	60bb      	str	r3, [r7, #8]
      break;
 8001a96:	e0b4      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a98:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aa2:	4b5b      	ldr	r3, [pc, #364]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d04d      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aae:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	099b      	lsrs	r3, r3, #6
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	ea02 0800 	and.w	r8, r2, r0
 8001ac6:	ea03 0901 	and.w	r9, r3, r1
 8001aca:	4640      	mov	r0, r8
 8001acc:	4649      	mov	r1, r9
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	014b      	lsls	r3, r1, #5
 8001ad8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001adc:	0142      	lsls	r2, r0, #5
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	ebb0 0008 	subs.w	r0, r0, r8
 8001ae6:	eb61 0109 	sbc.w	r1, r1, r9
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	018b      	lsls	r3, r1, #6
 8001af4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001af8:	0182      	lsls	r2, r0, #6
 8001afa:	1a12      	subs	r2, r2, r0
 8001afc:	eb63 0301 	sbc.w	r3, r3, r1
 8001b00:	f04f 0000 	mov.w	r0, #0
 8001b04:	f04f 0100 	mov.w	r1, #0
 8001b08:	00d9      	lsls	r1, r3, #3
 8001b0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b0e:	00d0      	lsls	r0, r2, #3
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	eb12 0208 	adds.w	r2, r2, r8
 8001b18:	eb43 0309 	adc.w	r3, r3, r9
 8001b1c:	f04f 0000 	mov.w	r0, #0
 8001b20:	f04f 0100 	mov.w	r1, #0
 8001b24:	0259      	lsls	r1, r3, #9
 8001b26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b2a:	0250      	lsls	r0, r2, #9
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	461a      	mov	r2, r3
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	f7fe fba0 	bl	8000280 <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4613      	mov	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e04a      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	461a      	mov	r2, r3
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	ea02 0400 	and.w	r4, r2, r0
 8001b62:	ea03 0501 	and.w	r5, r3, r1
 8001b66:	4620      	mov	r0, r4
 8001b68:	4629      	mov	r1, r5
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	014b      	lsls	r3, r1, #5
 8001b74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b78:	0142      	lsls	r2, r0, #5
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	1b00      	subs	r0, r0, r4
 8001b80:	eb61 0105 	sbc.w	r1, r1, r5
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	018b      	lsls	r3, r1, #6
 8001b8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b92:	0182      	lsls	r2, r0, #6
 8001b94:	1a12      	subs	r2, r2, r0
 8001b96:	eb63 0301 	sbc.w	r3, r3, r1
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	00d9      	lsls	r1, r3, #3
 8001ba4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ba8:	00d0      	lsls	r0, r2, #3
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	1912      	adds	r2, r2, r4
 8001bb0:	eb45 0303 	adc.w	r3, r5, r3
 8001bb4:	f04f 0000 	mov.w	r0, #0
 8001bb8:	f04f 0100 	mov.w	r1, #0
 8001bbc:	0299      	lsls	r1, r3, #10
 8001bbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bc2:	0290      	lsls	r0, r2, #10
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	f7fe fb54 	bl	8000280 <__aeabi_uldivmod>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4613      	mov	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	60bb      	str	r3, [r7, #8]
      break;
 8001bfa:	e002      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bfe:	60bb      	str	r3, [r7, #8]
      break;
 8001c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c02:	68bb      	ldr	r3, [r7, #8]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	00f42400 	.word	0x00f42400
 8001c18:	007a1200 	.word	0x007a1200

08001c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000000 	.word	0x20000000

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c38:	f7ff fff0 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0a9b      	lsrs	r3, r3, #10
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08006848 	.word	0x08006848

08001c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c60:	f7ff ffdc 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0b5b      	lsrs	r3, r3, #13
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4903      	ldr	r1, [pc, #12]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	08006848 	.word	0x08006848

08001c84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e07b      	b.n	8001d8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d108      	bne.n	8001cb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ca6:	d009      	beq.n	8001cbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
 8001cae:	e005      	b.n	8001cbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe feb6 	bl	8000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d40:	ea42 0103 	orr.w	r1, r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	f003 0104 	and.w	r1, r3, #4
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f003 0210 	and.w	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b08c      	sub	sp, #48	; 0x30
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_SPI_TransmitReceive+0x26>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e18a      	b.n	80020d2 <HAL_SPI_TransmitReceive+0x33c>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dc4:	f7ff f85a 	bl	8000e7c <HAL_GetTick>
 8001dc8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001dde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d00f      	beq.n	8001e06 <HAL_SPI_TransmitReceive+0x70>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dec:	d107      	bne.n	8001dfe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <HAL_SPI_TransmitReceive+0x68>
 8001df6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e04:	e15b      	b.n	80020be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_SPI_TransmitReceive+0x82>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_SPI_TransmitReceive+0x82>
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d103      	bne.n	8001e20 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e1e:	e14e      	b.n	80020be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d003      	beq.n	8001e34 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2205      	movs	r2, #5
 8001e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	887a      	ldrh	r2, [r7, #2]
 8001e4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	887a      	ldrh	r2, [r7, #2]
 8001e56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d007      	beq.n	8001e88 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e90:	d178      	bne.n	8001f84 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_SPI_TransmitReceive+0x10a>
 8001e9a:	8b7b      	ldrh	r3, [r7, #26]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d166      	bne.n	8001f6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	1c9a      	adds	r2, r3, #2
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ec4:	e053      	b.n	8001f6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d11b      	bne.n	8001f0c <HAL_SPI_TransmitReceive+0x176>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d016      	beq.n	8001f0c <HAL_SPI_TransmitReceive+0x176>
 8001ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d113      	bne.n	8001f0c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	881a      	ldrh	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	1c9a      	adds	r2, r3, #2
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d119      	bne.n	8001f4e <HAL_SPI_TransmitReceive+0x1b8>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d014      	beq.n	8001f4e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	b292      	uxth	r2, r2
 8001f30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	1c9a      	adds	r2, r3, #2
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f4e:	f7fe ff95 	bl	8000e7c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d807      	bhi.n	8001f6e <HAL_SPI_TransmitReceive+0x1d8>
 8001f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d003      	beq.n	8001f6e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f6c:	e0a7      	b.n	80020be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1a6      	bne.n	8001ec6 <HAL_SPI_TransmitReceive+0x130>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1a1      	bne.n	8001ec6 <HAL_SPI_TransmitReceive+0x130>
 8001f82:	e07c      	b.n	800207e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_SPI_TransmitReceive+0x1fc>
 8001f8c:	8b7b      	ldrh	r3, [r7, #26]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d16b      	bne.n	800206a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	330c      	adds	r3, #12
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fb8:	e057      	b.n	800206a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d11c      	bne.n	8002002 <HAL_SPI_TransmitReceive+0x26c>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d017      	beq.n	8002002 <HAL_SPI_TransmitReceive+0x26c>
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d114      	bne.n	8002002 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	330c      	adds	r3, #12
 8001fe2:	7812      	ldrb	r2, [r2, #0]
 8001fe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d119      	bne.n	8002044 <HAL_SPI_TransmitReceive+0x2ae>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d014      	beq.n	8002044 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002040:	2301      	movs	r3, #1
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002044:	f7fe ff1a 	bl	8000e7c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002050:	429a      	cmp	r2, r3
 8002052:	d803      	bhi.n	800205c <HAL_SPI_TransmitReceive+0x2c6>
 8002054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205a:	d102      	bne.n	8002062 <HAL_SPI_TransmitReceive+0x2cc>
 800205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002068:	e029      	b.n	80020be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1a2      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x224>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d19d      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f8b2 	bl	80021ec <SPI_EndRxTxTransaction>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800209a:	e010      	b.n	80020be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	e000      	b.n	80020be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80020bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020ec:	f7fe fec6 	bl	8000e7c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020fc:	f7fe febe 	bl	8000e7c <HAL_GetTick>
 8002100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	015b      	lsls	r3, r3, #5
 8002108:	0d1b      	lsrs	r3, r3, #20
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002112:	e054      	b.n	80021be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211a:	d050      	beq.n	80021be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800211c:	f7fe feae 	bl	8000e7c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	429a      	cmp	r2, r3
 800212a:	d902      	bls.n	8002132 <SPI_WaitFlagStateUntilTimeout+0x56>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d13d      	bne.n	80021ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800214a:	d111      	bne.n	8002170 <SPI_WaitFlagStateUntilTimeout+0x94>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002154:	d004      	beq.n	8002160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215e:	d107      	bne.n	8002170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800216e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002178:	d10f      	bne.n	800219a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e017      	b.n	80021de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4013      	ands	r3, r2
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	bf0c      	ite	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	2300      	movne	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d19b      	bne.n	8002114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000000 	.word	0x20000000

080021ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <SPI_EndRxTxTransaction+0x7c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1b      	ldr	r2, [pc, #108]	; (800226c <SPI_EndRxTxTransaction+0x80>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0d5b      	lsrs	r3, r3, #21
 8002204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002216:	d112      	bne.n	800223e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f7ff ff5a 	bl	80020dc <SPI_WaitFlagStateUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	f043 0220 	orr.w	r2, r3, #32
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e00f      	b.n	800225e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3b01      	subs	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d0f2      	beq.n	800223e <SPI_EndRxTxTransaction+0x52>
 8002258:	e000      	b.n	800225c <SPI_EndRxTxTransaction+0x70>
        break;
 800225a:	bf00      	nop
  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000000 	.word	0x20000000
 800226c:	165e9f81 	.word	0x165e9f81

08002270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e03f      	b.n	8002302 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fd18 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	; 0x24
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f929 	bl	800250c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b08a      	sub	sp, #40	; 0x28
 800230e:	af02      	add	r7, sp, #8
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	d17c      	bne.n	8002424 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_UART_Transmit+0x2c>
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e075      	b.n	8002426 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_UART_Transmit+0x3e>
 8002344:	2302      	movs	r3, #2
 8002346:	e06e      	b.n	8002426 <HAL_UART_Transmit+0x11c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2221      	movs	r2, #33	; 0x21
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800235e:	f7fe fd8d 	bl	8000e7c <HAL_GetTick>
 8002362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002378:	d108      	bne.n	800238c <HAL_UART_Transmit+0x82>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d104      	bne.n	800238c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	e003      	b.n	8002394 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800239c:	e02a      	b.n	80023f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f840 	bl	800242e <UART_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e036      	b.n	8002426 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10b      	bne.n	80023d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	3302      	adds	r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e007      	b.n	80023e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1cf      	bne.n	800239e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2200      	movs	r2, #0
 8002406:	2140      	movs	r1, #64	; 0x40
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f810 	bl	800242e <UART_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e006      	b.n	8002426 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	e000      	b.n	8002426 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	3720      	adds	r7, #32
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b090      	sub	sp, #64	; 0x40
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	4613      	mov	r3, r2
 800243c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243e:	e050      	b.n	80024e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002446:	d04c      	beq.n	80024e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <UART_WaitOnFlagUntilTimeout+0x30>
 800244e:	f7fe fd15 	bl	8000e7c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800245a:	429a      	cmp	r2, r3
 800245c:	d241      	bcs.n	80024e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002468:	e853 3f00 	ldrex	r3, [r3]
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	330c      	adds	r3, #12
 800247c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800247e:	637a      	str	r2, [r7, #52]	; 0x34
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002486:	e841 2300 	strex	r3, r2, [r1]
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1e5      	bne.n	800245e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3314      	adds	r3, #20
 8002498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	e853 3f00 	ldrex	r3, [r3]
 80024a0:	613b      	str	r3, [r7, #16]
   return(result);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3314      	adds	r3, #20
 80024b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b2:	623a      	str	r2, [r7, #32]
 80024b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b6:	69f9      	ldr	r1, [r7, #28]
 80024b8:	6a3a      	ldr	r2, [r7, #32]
 80024ba:	e841 2300 	strex	r3, r2, [r1]
 80024be:	61bb      	str	r3, [r7, #24]
   return(result);
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1e5      	bne.n	8002492 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e00f      	b.n	8002502 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d09f      	beq.n	8002440 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3740      	adds	r7, #64	; 0x40
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002510:	b09f      	sub	sp, #124	; 0x7c
 8002512:	af00      	add	r7, sp, #0
 8002514:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002522:	68d9      	ldr	r1, [r3, #12]
 8002524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	ea40 0301 	orr.w	r3, r0, r1
 800252c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800252e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	431a      	orrs	r2, r3
 8002538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	431a      	orrs	r2, r3
 800253e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4313      	orrs	r3, r2
 8002544:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002550:	f021 010c 	bic.w	r1, r1, #12
 8002554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800255a:	430b      	orrs	r3, r1
 800255c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800255e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256a:	6999      	ldr	r1, [r3, #24]
 800256c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	ea40 0301 	orr.w	r3, r0, r1
 8002574:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4bc5      	ldr	r3, [pc, #788]	; (8002890 <UART_SetConfig+0x384>)
 800257c:	429a      	cmp	r2, r3
 800257e:	d004      	beq.n	800258a <UART_SetConfig+0x7e>
 8002580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4bc3      	ldr	r3, [pc, #780]	; (8002894 <UART_SetConfig+0x388>)
 8002586:	429a      	cmp	r2, r3
 8002588:	d103      	bne.n	8002592 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800258a:	f7ff fb67 	bl	8001c5c <HAL_RCC_GetPCLK2Freq>
 800258e:	6778      	str	r0, [r7, #116]	; 0x74
 8002590:	e002      	b.n	8002598 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002592:	f7ff fb4f 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8002596:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a0:	f040 80b6 	bne.w	8002710 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a6:	461c      	mov	r4, r3
 80025a8:	f04f 0500 	mov.w	r5, #0
 80025ac:	4622      	mov	r2, r4
 80025ae:	462b      	mov	r3, r5
 80025b0:	1891      	adds	r1, r2, r2
 80025b2:	6439      	str	r1, [r7, #64]	; 0x40
 80025b4:	415b      	adcs	r3, r3
 80025b6:	647b      	str	r3, [r7, #68]	; 0x44
 80025b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025bc:	1912      	adds	r2, r2, r4
 80025be:	eb45 0303 	adc.w	r3, r5, r3
 80025c2:	f04f 0000 	mov.w	r0, #0
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	00d9      	lsls	r1, r3, #3
 80025cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025d0:	00d0      	lsls	r0, r2, #3
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	1911      	adds	r1, r2, r4
 80025d8:	6639      	str	r1, [r7, #96]	; 0x60
 80025da:	416b      	adcs	r3, r5
 80025dc:	667b      	str	r3, [r7, #100]	; 0x64
 80025de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	1891      	adds	r1, r2, r2
 80025ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80025ec:	415b      	adcs	r3, r3
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025f8:	f7fd fe42 	bl	8000280 <__aeabi_uldivmod>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4ba5      	ldr	r3, [pc, #660]	; (8002898 <UART_SetConfig+0x38c>)
 8002602:	fba3 2302 	umull	r2, r3, r3, r2
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	011e      	lsls	r6, r3, #4
 800260a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260c:	461c      	mov	r4, r3
 800260e:	f04f 0500 	mov.w	r5, #0
 8002612:	4622      	mov	r2, r4
 8002614:	462b      	mov	r3, r5
 8002616:	1891      	adds	r1, r2, r2
 8002618:	6339      	str	r1, [r7, #48]	; 0x30
 800261a:	415b      	adcs	r3, r3
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
 800261e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002622:	1912      	adds	r2, r2, r4
 8002624:	eb45 0303 	adc.w	r3, r5, r3
 8002628:	f04f 0000 	mov.w	r0, #0
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	00d9      	lsls	r1, r3, #3
 8002632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002636:	00d0      	lsls	r0, r2, #3
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	1911      	adds	r1, r2, r4
 800263e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002640:	416b      	adcs	r3, r5
 8002642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	461a      	mov	r2, r3
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	1891      	adds	r1, r2, r2
 8002650:	62b9      	str	r1, [r7, #40]	; 0x28
 8002652:	415b      	adcs	r3, r3
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800265a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800265e:	f7fd fe0f 	bl	8000280 <__aeabi_uldivmod>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4b8c      	ldr	r3, [pc, #560]	; (8002898 <UART_SetConfig+0x38c>)
 8002668:	fba3 1302 	umull	r1, r3, r3, r2
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	2164      	movs	r1, #100	; 0x64
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	3332      	adds	r3, #50	; 0x32
 800267a:	4a87      	ldr	r2, [pc, #540]	; (8002898 <UART_SetConfig+0x38c>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002688:	441e      	add	r6, r3
 800268a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268c:	4618      	mov	r0, r3
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	1894      	adds	r4, r2, r2
 8002698:	623c      	str	r4, [r7, #32]
 800269a:	415b      	adcs	r3, r3
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026a2:	1812      	adds	r2, r2, r0
 80026a4:	eb41 0303 	adc.w	r3, r1, r3
 80026a8:	f04f 0400 	mov.w	r4, #0
 80026ac:	f04f 0500 	mov.w	r5, #0
 80026b0:	00dd      	lsls	r5, r3, #3
 80026b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026b6:	00d4      	lsls	r4, r2, #3
 80026b8:	4622      	mov	r2, r4
 80026ba:	462b      	mov	r3, r5
 80026bc:	1814      	adds	r4, r2, r0
 80026be:	653c      	str	r4, [r7, #80]	; 0x50
 80026c0:	414b      	adcs	r3, r1
 80026c2:	657b      	str	r3, [r7, #84]	; 0x54
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	461a      	mov	r2, r3
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	1891      	adds	r1, r2, r2
 80026d0:	61b9      	str	r1, [r7, #24]
 80026d2:	415b      	adcs	r3, r3
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80026de:	f7fd fdcf 	bl	8000280 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <UART_SetConfig+0x38c>)
 80026e8:	fba3 1302 	umull	r1, r3, r3, r2
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	2164      	movs	r1, #100	; 0x64
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	3332      	adds	r3, #50	; 0x32
 80026fa:	4a67      	ldr	r2, [pc, #412]	; (8002898 <UART_SetConfig+0x38c>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	f003 0207 	and.w	r2, r3, #7
 8002706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4432      	add	r2, r6
 800270c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800270e:	e0b9      	b.n	8002884 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002712:	461c      	mov	r4, r3
 8002714:	f04f 0500 	mov.w	r5, #0
 8002718:	4622      	mov	r2, r4
 800271a:	462b      	mov	r3, r5
 800271c:	1891      	adds	r1, r2, r2
 800271e:	6139      	str	r1, [r7, #16]
 8002720:	415b      	adcs	r3, r3
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002728:	1912      	adds	r2, r2, r4
 800272a:	eb45 0303 	adc.w	r3, r5, r3
 800272e:	f04f 0000 	mov.w	r0, #0
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	00d9      	lsls	r1, r3, #3
 8002738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800273c:	00d0      	lsls	r0, r2, #3
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	eb12 0804 	adds.w	r8, r2, r4
 8002746:	eb43 0905 	adc.w	r9, r3, r5
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	008b      	lsls	r3, r1, #2
 800275e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002762:	0082      	lsls	r2, r0, #2
 8002764:	4640      	mov	r0, r8
 8002766:	4649      	mov	r1, r9
 8002768:	f7fd fd8a 	bl	8000280 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4b49      	ldr	r3, [pc, #292]	; (8002898 <UART_SetConfig+0x38c>)
 8002772:	fba3 2302 	umull	r2, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	011e      	lsls	r6, r3, #4
 800277a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277c:	4618      	mov	r0, r3
 800277e:	f04f 0100 	mov.w	r1, #0
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	1894      	adds	r4, r2, r2
 8002788:	60bc      	str	r4, [r7, #8]
 800278a:	415b      	adcs	r3, r3
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002792:	1812      	adds	r2, r2, r0
 8002794:	eb41 0303 	adc.w	r3, r1, r3
 8002798:	f04f 0400 	mov.w	r4, #0
 800279c:	f04f 0500 	mov.w	r5, #0
 80027a0:	00dd      	lsls	r5, r3, #3
 80027a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027a6:	00d4      	lsls	r4, r2, #3
 80027a8:	4622      	mov	r2, r4
 80027aa:	462b      	mov	r3, r5
 80027ac:	1814      	adds	r4, r2, r0
 80027ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80027b0:	414b      	adcs	r3, r1
 80027b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	008b      	lsls	r3, r1, #2
 80027c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027cc:	0082      	lsls	r2, r0, #2
 80027ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80027d2:	f7fd fd55 	bl	8000280 <__aeabi_uldivmod>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <UART_SetConfig+0x38c>)
 80027dc:	fba3 1302 	umull	r1, r3, r3, r2
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	2164      	movs	r1, #100	; 0x64
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	3332      	adds	r3, #50	; 0x32
 80027ee:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <UART_SetConfig+0x38c>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fa:	441e      	add	r6, r3
 80027fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fe:	4618      	mov	r0, r3
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	1894      	adds	r4, r2, r2
 800280a:	603c      	str	r4, [r7, #0]
 800280c:	415b      	adcs	r3, r3
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002814:	1812      	adds	r2, r2, r0
 8002816:	eb41 0303 	adc.w	r3, r1, r3
 800281a:	f04f 0400 	mov.w	r4, #0
 800281e:	f04f 0500 	mov.w	r5, #0
 8002822:	00dd      	lsls	r5, r3, #3
 8002824:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002828:	00d4      	lsls	r4, r2, #3
 800282a:	4622      	mov	r2, r4
 800282c:	462b      	mov	r3, r5
 800282e:	eb12 0a00 	adds.w	sl, r2, r0
 8002832:	eb43 0b01 	adc.w	fp, r3, r1
 8002836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	008b      	lsls	r3, r1, #2
 800284a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800284e:	0082      	lsls	r2, r0, #2
 8002850:	4650      	mov	r0, sl
 8002852:	4659      	mov	r1, fp
 8002854:	f7fd fd14 	bl	8000280 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <UART_SetConfig+0x38c>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2164      	movs	r1, #100	; 0x64
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	3332      	adds	r3, #50	; 0x32
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <UART_SetConfig+0x38c>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4432      	add	r2, r6
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	377c      	adds	r7, #124	; 0x7c
 8002888:	46bd      	mov	sp, r7
 800288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288e:	bf00      	nop
 8002890:	40011000 	.word	0x40011000
 8002894:	40011400 	.word	0x40011400
 8002898:	51eb851f 	.word	0x51eb851f

0800289c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80028a0:	4904      	ldr	r1, [pc, #16]	; (80028b4 <MX_FATFS_Init+0x18>)
 80028a2:	4805      	ldr	r0, [pc, #20]	; (80028b8 <MX_FATFS_Init+0x1c>)
 80028a4:	f003 fad0 	bl	8005e48 <FATFS_LinkDriver>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <MX_FATFS_Init+0x20>)
 80028ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200006c8 	.word	0x200006c8
 80028b8:	2000000c 	.word	0x2000000c
 80028bc:	200006cc 	.word	0x200006cc

080028c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80028c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f9dd 	bl	8002c9c <USER_SPI_initialize>
 80028e2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fabb 	bl	8002e74 <USER_SPI_status>
 80028fe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	4603      	mov	r3, r0
 8002916:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8002918:	7bf8      	ldrb	r0, [r7, #15]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	f000 fabe 	bl	8002ea0 <USER_SPI_read>
 8002924:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4603      	mov	r3, r0
 800293c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800293e:	7bf8      	ldrb	r0, [r7, #15]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	f000 fb11 	bl	8002f6c <USER_SPI_write>
 800294a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	603a      	str	r2, [r7, #0]
 800295e:	71fb      	strb	r3, [r7, #7]
 8002960:	460b      	mov	r3, r1
 8002962:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8002964:	79b9      	ldrb	r1, [r7, #6]
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fb7a 	bl	8003064 <USER_SPI_ioctl>
 8002970:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002984:	f7fe fa7a 	bl	8000e7c <HAL_GetTick>
 8002988:	4603      	mov	r3, r0
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <SPI_Timer_On+0x20>)
 800298c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <SPI_Timer_On+0x24>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000b30 	.word	0x20000b30
 80029a0:	20000b34 	.word	0x20000b34

080029a4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80029a8:	f7fe fa68 	bl	8000e7c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <SPI_Timer_Status+0x24>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1ad2      	subs	r2, r2, r3
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <SPI_Timer_Status+0x28>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	bf34      	ite	cc
 80029bc:	2301      	movcc	r3, #1
 80029be:	2300      	movcs	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000b30 	.word	0x20000b30
 80029cc:	20000b34 	.word	0x20000b34

080029d0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 80029da:	f107 020f 	add.w	r2, r7, #15
 80029de:	1df9      	adds	r1, r7, #7
 80029e0:	2332      	movs	r3, #50	; 0x32
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2301      	movs	r3, #1
 80029e6:	4804      	ldr	r0, [pc, #16]	; (80029f8 <xchg_spi+0x28>)
 80029e8:	f7ff f9d5 	bl	8001d96 <HAL_SPI_TransmitReceive>
    return rxDat;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200005d0 	.word	0x200005d0

080029fc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e00a      	b.n	8002a22 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	18d4      	adds	r4, r2, r3
 8002a12:	20ff      	movs	r0, #255	; 0xff
 8002a14:	f7ff ffdc 	bl	80029d0 <xchg_spi>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d3f0      	bcc.n	8002a0c <rcvr_spi_multi+0x10>
	}
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd90      	pop	{r4, r7, pc}

08002a34 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e009      	b.n	8002a58 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4413      	add	r3, r2
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ffbf 	bl	80029d0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3301      	adds	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d3f1      	bcc.n	8002a44 <xmit_spi_multi+0x10>
	}
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002a72:	f7fe fa03 	bl	8000e7c <HAL_GetTick>
 8002a76:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002a7c:	20ff      	movs	r0, #255	; 0xff
 8002a7e:	f7ff ffa7 	bl	80029d0 <xchg_spi>
 8002a82:	4603      	mov	r3, r0
 8002a84:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2bff      	cmp	r3, #255	; 0xff
 8002a8a:	d007      	beq.n	8002a9c <wait_ready+0x32>
 8002a8c:	f7fe f9f6 	bl	8000e7c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d8ef      	bhi.n	8002a7c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2bff      	cmp	r3, #255	; 0xff
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aba:	4804      	ldr	r0, [pc, #16]	; (8002acc <despiselect+0x1c>)
 8002abc:	f7fe fc54 	bl	8001368 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002ac0:	20ff      	movs	r0, #255	; 0xff
 8002ac2:	f7ff ff85 	bl	80029d0 <xchg_spi>

}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40020400 	.word	0x40020400

08002ad0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ada:	480a      	ldr	r0, [pc, #40]	; (8002b04 <spiselect+0x34>)
 8002adc:	f7fe fc44 	bl	8001368 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002ae0:	20ff      	movs	r0, #255	; 0xff
 8002ae2:	f7ff ff75 	bl	80029d0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002ae6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002aea:	f7ff ffbe 	bl	8002a6a <wait_ready>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <spiselect+0x28>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e002      	b.n	8002afe <spiselect+0x2e>

	despiselect();
 8002af8:	f7ff ffda 	bl	8002ab0 <despiselect>
	return 0;	/* Timeout */
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40020400 	.word	0x40020400

08002b08 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002b12:	20c8      	movs	r0, #200	; 0xc8
 8002b14:	f7ff ff32 	bl	800297c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002b18:	20ff      	movs	r0, #255	; 0xff
 8002b1a:	f7ff ff59 	bl	80029d0 <xchg_spi>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2bff      	cmp	r3, #255	; 0xff
 8002b26:	d104      	bne.n	8002b32 <rcvr_datablock+0x2a>
 8002b28:	f7ff ff3c 	bl	80029a4 <SPI_Timer_Status>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f2      	bne.n	8002b18 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	2bfe      	cmp	r3, #254	; 0xfe
 8002b36:	d001      	beq.n	8002b3c <rcvr_datablock+0x34>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e00a      	b.n	8002b52 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff5c 	bl	80029fc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002b44:	20ff      	movs	r0, #255	; 0xff
 8002b46:	f7ff ff43 	bl	80029d0 <xchg_spi>
 8002b4a:	20ff      	movs	r0, #255	; 0xff
 8002b4c:	f7ff ff40 	bl	80029d0 <xchg_spi>

	return 1;						/* Function succeeded */
 8002b50:	2301      	movs	r3, #1
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002b66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b6a:	f7ff ff7e 	bl	8002a6a <wait_ready>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <xmit_datablock+0x1e>
 8002b74:	2300      	movs	r3, #0
 8002b76:	e01e      	b.n	8002bb6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ff28 	bl	80029d0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	2bfd      	cmp	r3, #253	; 0xfd
 8002b84:	d016      	beq.n	8002bb4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff52 	bl	8002a34 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002b90:	20ff      	movs	r0, #255	; 0xff
 8002b92:	f7ff ff1d 	bl	80029d0 <xchg_spi>
 8002b96:	20ff      	movs	r0, #255	; 0xff
 8002b98:	f7ff ff1a 	bl	80029d0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002b9c:	20ff      	movs	r0, #255	; 0xff
 8002b9e:	f7ff ff17 	bl	80029d0 <xchg_spi>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d001      	beq.n	8002bb4 <xmit_datablock+0x5a>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <xmit_datablock+0x5c>
	}
	return 1;
 8002bb4:	2301      	movs	r3, #1
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	6039      	str	r1, [r7, #0]
 8002bc8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da0e      	bge.n	8002bf0 <send_cmd+0x32>
		cmd &= 0x7F;
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2037      	movs	r0, #55	; 0x37
 8002bde:	f7ff ffee 	bl	8002bbe <send_cmd>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002be6:	7bbb      	ldrb	r3, [r7, #14]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d901      	bls.n	8002bf0 <send_cmd+0x32>
 8002bec:	7bbb      	ldrb	r3, [r7, #14]
 8002bee:	e051      	b.n	8002c94 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	2b0c      	cmp	r3, #12
 8002bf4:	d008      	beq.n	8002c08 <send_cmd+0x4a>
		despiselect();
 8002bf6:	f7ff ff5b 	bl	8002ab0 <despiselect>
		if (!spiselect()) return 0xFF;
 8002bfa:	f7ff ff69 	bl	8002ad0 <spiselect>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <send_cmd+0x4a>
 8002c04:	23ff      	movs	r3, #255	; 0xff
 8002c06:	e045      	b.n	8002c94 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fedd 	bl	80029d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	0e1b      	lsrs	r3, r3, #24
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fed7 	bl	80029d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fed1 	bl	80029d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fecb 	bl	80029d0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fec6 	bl	80029d0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <send_cmd+0x94>
 8002c4e:	2395      	movs	r3, #149	; 0x95
 8002c50:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d101      	bne.n	8002c5c <send_cmd+0x9e>
 8002c58:	2387      	movs	r3, #135	; 0x87
 8002c5a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff feb6 	bl	80029d0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	d102      	bne.n	8002c70 <send_cmd+0xb2>
 8002c6a:	20ff      	movs	r0, #255	; 0xff
 8002c6c:	f7ff feb0 	bl	80029d0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002c70:	230a      	movs	r3, #10
 8002c72:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002c74:	20ff      	movs	r0, #255	; 0xff
 8002c76:	f7ff feab 	bl	80029d0 <xchg_spi>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002c7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	da05      	bge.n	8002c92 <send_cmd+0xd4>
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002c92:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <USER_SPI_initialize+0x14>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0d6      	b.n	8002e5e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002cb0:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <USER_SPI_initialize+0x1cc>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <USER_SPI_initialize+0x2a>
 8002cbe:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <USER_SPI_initialize+0x1cc>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	e0cb      	b.n	8002e5e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002cc6:	4b69      	ldr	r3, [pc, #420]	; (8002e6c <USER_SPI_initialize+0x1d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002cd0:	4b66      	ldr	r3, [pc, #408]	; (8002e6c <USER_SPI_initialize+0x1d0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002cd8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002cda:	230a      	movs	r3, #10
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e005      	b.n	8002cec <USER_SPI_initialize+0x50>
 8002ce0:	20ff      	movs	r0, #255	; 0xff
 8002ce2:	f7ff fe75 	bl	80029d0 <xchg_spi>
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f6      	bne.n	8002ce0 <USER_SPI_initialize+0x44>

	ty = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff ff60 	bl	8002bbe <send_cmd>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	f040 808b 	bne.w	8002e1c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d0a:	f7ff fe37 	bl	800297c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002d0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002d12:	2008      	movs	r0, #8
 8002d14:	f7ff ff53 	bl	8002bbe <send_cmd>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d151      	bne.n	8002dc2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e00d      	b.n	8002d40 <USER_SPI_initialize+0xa4>
 8002d24:	7bfc      	ldrb	r4, [r7, #15]
 8002d26:	20ff      	movs	r0, #255	; 0xff
 8002d28:	f7ff fe52 	bl	80029d0 <xchg_spi>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	4423      	add	r3, r4
 8002d36:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d9ee      	bls.n	8002d24 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002d46:	7abb      	ldrb	r3, [r7, #10]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d167      	bne.n	8002e1c <USER_SPI_initialize+0x180>
 8002d4c:	7afb      	ldrb	r3, [r7, #11]
 8002d4e:	2baa      	cmp	r3, #170	; 0xaa
 8002d50:	d164      	bne.n	8002e1c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002d52:	bf00      	nop
 8002d54:	f7ff fe26 	bl	80029a4 <SPI_Timer_Status>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <USER_SPI_initialize+0xd2>
 8002d5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d62:	20a9      	movs	r0, #169	; 0xa9
 8002d64:	f7ff ff2b 	bl	8002bbe <send_cmd>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f2      	bne.n	8002d54 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002d6e:	f7ff fe19 	bl	80029a4 <SPI_Timer_Status>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d051      	beq.n	8002e1c <USER_SPI_initialize+0x180>
 8002d78:	2100      	movs	r1, #0
 8002d7a:	203a      	movs	r0, #58	; 0x3a
 8002d7c:	f7ff ff1f 	bl	8002bbe <send_cmd>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d14a      	bne.n	8002e1c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
 8002d8a:	e00d      	b.n	8002da8 <USER_SPI_initialize+0x10c>
 8002d8c:	7bfc      	ldrb	r4, [r7, #15]
 8002d8e:	20ff      	movs	r0, #255	; 0xff
 8002d90:	f7ff fe1e 	bl	80029d0 <xchg_spi>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	f107 0310 	add.w	r3, r7, #16
 8002d9c:	4423      	add	r3, r4
 8002d9e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	3301      	adds	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d9ee      	bls.n	8002d8c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002dae:	7a3b      	ldrb	r3, [r7, #8]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <USER_SPI_initialize+0x120>
 8002db8:	230c      	movs	r3, #12
 8002dba:	e000      	b.n	8002dbe <USER_SPI_initialize+0x122>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	737b      	strb	r3, [r7, #13]
 8002dc0:	e02c      	b.n	8002e1c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	20a9      	movs	r0, #169	; 0xa9
 8002dc6:	f7ff fefa 	bl	8002bbe <send_cmd>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d804      	bhi.n	8002dda <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	737b      	strb	r3, [r7, #13]
 8002dd4:	23a9      	movs	r3, #169	; 0xa9
 8002dd6:	73bb      	strb	r3, [r7, #14]
 8002dd8:	e003      	b.n	8002de2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002dda:	2301      	movs	r3, #1
 8002ddc:	737b      	strb	r3, [r7, #13]
 8002dde:	2301      	movs	r3, #1
 8002de0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002de2:	bf00      	nop
 8002de4:	f7ff fdde 	bl	80029a4 <SPI_Timer_Status>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <USER_SPI_initialize+0x162>
 8002dee:	7bbb      	ldrb	r3, [r7, #14]
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fee3 	bl	8002bbe <send_cmd>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f2      	bne.n	8002de4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002dfe:	f7ff fdd1 	bl	80029a4 <SPI_Timer_Status>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <USER_SPI_initialize+0x17c>
 8002e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e0c:	2010      	movs	r0, #16
 8002e0e:	f7ff fed6 	bl	8002bbe <send_cmd>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <USER_SPI_initialize+0x180>
				ty = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <USER_SPI_initialize+0x1d4>)
 8002e1e:	7b7b      	ldrb	r3, [r7, #13]
 8002e20:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002e22:	f7ff fe45 	bl	8002ab0 <despiselect>

	if (ty) {			/* OK */
 8002e26:	7b7b      	ldrb	r3, [r7, #13]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d012      	beq.n	8002e52 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <USER_SPI_initialize+0x1d0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <USER_SPI_initialize+0x1d0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0210 	orr.w	r2, r2, #16
 8002e3e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <USER_SPI_initialize+0x1cc>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <USER_SPI_initialize+0x1cc>)
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e002      	b.n	8002e58 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <USER_SPI_initialize+0x1cc>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <USER_SPI_initialize+0x1cc>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b2db      	uxtb	r3, r3
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd90      	pop	{r4, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000020 	.word	0x20000020
 8002e6c:	200005d0 	.word	0x200005d0
 8002e70:	200000a8 	.word	0x200000a8

08002e74 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <USER_SPI_status+0x14>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e002      	b.n	8002e8e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <USER_SPI_status+0x28>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000020 	.word	0x20000020

08002ea0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4603      	mov	r3, r0
 8002eae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <USER_SPI_read+0x1c>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <USER_SPI_read+0x20>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	e04d      	b.n	8002f5c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <USER_SPI_read+0xc4>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <USER_SPI_read+0x32>
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e044      	b.n	8002f5c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002ed2:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <USER_SPI_read+0xc8>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <USER_SPI_read+0x44>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	025b      	lsls	r3, r3, #9
 8002ee2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d111      	bne.n	8002f0e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	2011      	movs	r0, #17
 8002eee:	f7ff fe66 	bl	8002bbe <send_cmd>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d129      	bne.n	8002f4c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002efc:	68b8      	ldr	r0, [r7, #8]
 8002efe:	f7ff fe03 	bl	8002b08 <rcvr_datablock>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d021      	beq.n	8002f4c <USER_SPI_read+0xac>
			count = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	e01e      	b.n	8002f4c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	2012      	movs	r0, #18
 8002f12:	f7ff fe54 	bl	8002bbe <send_cmd>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d117      	bne.n	8002f4c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f20:	68b8      	ldr	r0, [r7, #8]
 8002f22:	f7ff fdf1 	bl	8002b08 <rcvr_datablock>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <USER_SPI_read+0xa2>
				buff += 512;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f32:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ed      	bne.n	8002f1c <USER_SPI_read+0x7c>
 8002f40:	e000      	b.n	8002f44 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002f42:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002f44:	2100      	movs	r1, #0
 8002f46:	200c      	movs	r0, #12
 8002f48:	f7ff fe39 	bl	8002bbe <send_cmd>
		}
	}
	despiselect();
 8002f4c:	f7ff fdb0 	bl	8002ab0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bf14      	ite	ne
 8002f56:	2301      	movne	r3, #1
 8002f58:	2300      	moveq	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000020 	.word	0x20000020
 8002f68:	200000a8 	.word	0x200000a8

08002f6c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4603      	mov	r3, r0
 8002f7a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <USER_SPI_write+0x1c>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <USER_SPI_write+0x20>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	e063      	b.n	8003054 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002f8c:	4b33      	ldr	r3, [pc, #204]	; (800305c <USER_SPI_write+0xf0>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <USER_SPI_write+0x32>
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e05a      	b.n	8003054 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	; (800305c <USER_SPI_write+0xf0>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <USER_SPI_write+0x44>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e051      	b.n	8003054 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <USER_SPI_write+0xf4>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <USER_SPI_write+0x56>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d110      	bne.n	8002fea <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	2018      	movs	r0, #24
 8002fcc:	f7ff fdf7 	bl	8002bbe <send_cmd>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d136      	bne.n	8003044 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002fd6:	21fe      	movs	r1, #254	; 0xfe
 8002fd8:	68b8      	ldr	r0, [r7, #8]
 8002fda:	f7ff fdbe 	bl	8002b5a <xmit_datablock>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d02f      	beq.n	8003044 <USER_SPI_write+0xd8>
			count = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	e02c      	b.n	8003044 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <USER_SPI_write+0xf4>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	f003 0306 	and.w	r3, r3, #6
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <USER_SPI_write+0x92>
 8002ff6:	6839      	ldr	r1, [r7, #0]
 8002ff8:	2097      	movs	r0, #151	; 0x97
 8002ffa:	f7ff fde0 	bl	8002bbe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	2019      	movs	r0, #25
 8003002:	f7ff fddc 	bl	8002bbe <send_cmd>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11b      	bne.n	8003044 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800300c:	21fc      	movs	r1, #252	; 0xfc
 800300e:	68b8      	ldr	r0, [r7, #8]
 8003010:	f7ff fda3 	bl	8002b5a <xmit_datablock>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <USER_SPI_write+0xc4>
				buff += 512;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003020:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	3b01      	subs	r3, #1
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ee      	bne.n	800300c <USER_SPI_write+0xa0>
 800302e:	e000      	b.n	8003032 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003030:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003032:	21fd      	movs	r1, #253	; 0xfd
 8003034:	2000      	movs	r0, #0
 8003036:	f7ff fd90 	bl	8002b5a <xmit_datablock>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <USER_SPI_write+0xd8>
 8003040:	2301      	movs	r3, #1
 8003042:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003044:	f7ff fd34 	bl	8002ab0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf14      	ite	ne
 800304e:	2301      	movne	r3, #1
 8003050:	2300      	moveq	r3, #0
 8003052:	b2db      	uxtb	r3, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000020 	.word	0x20000020
 8003060:	200000a8 	.word	0x200000a8

08003064 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08c      	sub	sp, #48	; 0x30
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	603a      	str	r2, [r7, #0]
 800306e:	71fb      	strb	r3, [r7, #7]
 8003070:	460b      	mov	r3, r1
 8003072:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <USER_SPI_ioctl+0x1a>
 800307a:	2304      	movs	r3, #4
 800307c:	e15a      	b.n	8003334 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800307e:	4baf      	ldr	r3, [pc, #700]	; (800333c <USER_SPI_ioctl+0x2d8>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <USER_SPI_ioctl+0x2c>
 800308c:	2303      	movs	r3, #3
 800308e:	e151      	b.n	8003334 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003096:	79bb      	ldrb	r3, [r7, #6]
 8003098:	2b04      	cmp	r3, #4
 800309a:	f200 8136 	bhi.w	800330a <USER_SPI_ioctl+0x2a6>
 800309e:	a201      	add	r2, pc, #4	; (adr r2, 80030a4 <USER_SPI_ioctl+0x40>)
 80030a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a4:	080030b9 	.word	0x080030b9
 80030a8:	080030cd 	.word	0x080030cd
 80030ac:	0800330b 	.word	0x0800330b
 80030b0:	08003179 	.word	0x08003179
 80030b4:	0800326f 	.word	0x0800326f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80030b8:	f7ff fd0a 	bl	8002ad0 <spiselect>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8127 	beq.w	8003312 <USER_SPI_ioctl+0x2ae>
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80030ca:	e122      	b.n	8003312 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80030cc:	2100      	movs	r1, #0
 80030ce:	2009      	movs	r0, #9
 80030d0:	f7ff fd75 	bl	8002bbe <send_cmd>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 811d 	bne.w	8003316 <USER_SPI_ioctl+0x2b2>
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	2110      	movs	r1, #16
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fd10 	bl	8002b08 <rcvr_datablock>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8113 	beq.w	8003316 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80030f0:	7b3b      	ldrb	r3, [r7, #12]
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d111      	bne.n	800311e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80030fa:	7d7b      	ldrb	r3, [r7, #21]
 80030fc:	461a      	mov	r2, r3
 80030fe:	7d3b      	ldrb	r3, [r7, #20]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	4413      	add	r3, r2
 8003104:	461a      	mov	r2, r3
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800310e:	4413      	add	r3, r2
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	029a      	lsls	r2, r3, #10
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	e028      	b.n	8003170 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800311e:	7c7b      	ldrb	r3, [r7, #17]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	b2da      	uxtb	r2, r3
 8003126:	7dbb      	ldrb	r3, [r7, #22]
 8003128:	09db      	lsrs	r3, r3, #7
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4413      	add	r3, r2
 800312e:	b2da      	uxtb	r2, r3
 8003130:	7d7b      	ldrb	r3, [r7, #21]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f003 0306 	and.w	r3, r3, #6
 800313a:	b2db      	uxtb	r3, r3
 800313c:	4413      	add	r3, r2
 800313e:	b2db      	uxtb	r3, r3
 8003140:	3302      	adds	r3, #2
 8003142:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003146:	7d3b      	ldrb	r3, [r7, #20]
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	7cbb      	ldrb	r3, [r7, #18]
 8003156:	029b      	lsls	r3, r3, #10
 8003158:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800315c:	4413      	add	r3, r2
 800315e:	3301      	adds	r3, #1
 8003160:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003162:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003166:	3b09      	subs	r3, #9
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	409a      	lsls	r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003176:	e0ce      	b.n	8003316 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003178:	4b71      	ldr	r3, [pc, #452]	; (8003340 <USER_SPI_ioctl+0x2dc>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d031      	beq.n	80031e8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003184:	2100      	movs	r1, #0
 8003186:	208d      	movs	r0, #141	; 0x8d
 8003188:	f7ff fd19 	bl	8002bbe <send_cmd>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 80c3 	bne.w	800331a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003194:	20ff      	movs	r0, #255	; 0xff
 8003196:	f7ff fc1b 	bl	80029d0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800319a:	f107 030c 	add.w	r3, r7, #12
 800319e:	2110      	movs	r1, #16
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fcb1 	bl	8002b08 <rcvr_datablock>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80b6 	beq.w	800331a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80031ae:	2330      	movs	r3, #48	; 0x30
 80031b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80031b4:	e007      	b.n	80031c6 <USER_SPI_ioctl+0x162>
 80031b6:	20ff      	movs	r0, #255	; 0xff
 80031b8:	f7ff fc0a 	bl	80029d0 <xchg_spi>
 80031bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031c0:	3b01      	subs	r3, #1
 80031c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80031c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f3      	bne.n	80031b6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80031ce:	7dbb      	ldrb	r3, [r7, #22]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	2310      	movs	r3, #16
 80031d8:	fa03 f202 	lsl.w	r2, r3, r2
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80031e6:	e098      	b.n	800331a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80031e8:	2100      	movs	r1, #0
 80031ea:	2009      	movs	r0, #9
 80031ec:	f7ff fce7 	bl	8002bbe <send_cmd>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f040 8091 	bne.w	800331a <USER_SPI_ioctl+0x2b6>
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	2110      	movs	r1, #16
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fc82 	bl	8002b08 <rcvr_datablock>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8087 	beq.w	800331a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800320c:	4b4c      	ldr	r3, [pc, #304]	; (8003340 <USER_SPI_ioctl+0x2dc>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003218:	7dbb      	ldrb	r3, [r7, #22]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003220:	7dfa      	ldrb	r2, [r7, #23]
 8003222:	09d2      	lsrs	r2, r2, #7
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	4413      	add	r3, r2
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	7e7b      	ldrb	r3, [r7, #25]
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	461a      	mov	r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e013      	b.n	8003266 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800323e:	7dbb      	ldrb	r3, [r7, #22]
 8003240:	109b      	asrs	r3, r3, #2
 8003242:	b29b      	uxth	r3, r3
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	3301      	adds	r3, #1
 800324a:	7dfa      	ldrb	r2, [r7, #23]
 800324c:	00d2      	lsls	r2, r2, #3
 800324e:	f002 0218 	and.w	r2, r2, #24
 8003252:	7df9      	ldrb	r1, [r7, #23]
 8003254:	0949      	lsrs	r1, r1, #5
 8003256:	b2c9      	uxtb	r1, r1
 8003258:	440a      	add	r2, r1
 800325a:	3201      	adds	r2, #1
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	461a      	mov	r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800326c:	e055      	b.n	800331a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800326e:	4b34      	ldr	r3, [pc, #208]	; (8003340 <USER_SPI_ioctl+0x2dc>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	f003 0306 	and.w	r3, r3, #6
 8003276:	2b00      	cmp	r3, #0
 8003278:	d051      	beq.n	800331e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800327a:	f107 020c 	add.w	r2, r7, #12
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	210b      	movs	r1, #11
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff feee 	bl	8003064 <USER_SPI_ioctl>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d149      	bne.n	8003322 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800328e:	7b3b      	ldrb	r3, [r7, #12]
 8003290:	099b      	lsrs	r3, r3, #6
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <USER_SPI_ioctl+0x23e>
 8003298:	7dbb      	ldrb	r3, [r7, #22]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d041      	beq.n	8003326 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	623b      	str	r3, [r7, #32]
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80032b2:	4b23      	ldr	r3, [pc, #140]	; (8003340 <USER_SPI_ioctl+0x2dc>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	025b      	lsls	r3, r3, #9
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	025b      	lsls	r3, r3, #9
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80032ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032cc:	2020      	movs	r0, #32
 80032ce:	f7ff fc76 	bl	8002bbe <send_cmd>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d128      	bne.n	800332a <USER_SPI_ioctl+0x2c6>
 80032d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032da:	2021      	movs	r0, #33	; 0x21
 80032dc:	f7ff fc6f 	bl	8002bbe <send_cmd>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d121      	bne.n	800332a <USER_SPI_ioctl+0x2c6>
 80032e6:	2100      	movs	r1, #0
 80032e8:	2026      	movs	r0, #38	; 0x26
 80032ea:	f7ff fc68 	bl	8002bbe <send_cmd>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d11a      	bne.n	800332a <USER_SPI_ioctl+0x2c6>
 80032f4:	f247 5030 	movw	r0, #30000	; 0x7530
 80032f8:	f7ff fbb7 	bl	8002a6a <wait_ready>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d013      	beq.n	800332a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003302:	2300      	movs	r3, #0
 8003304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003308:	e00f      	b.n	800332a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800330a:	2304      	movs	r3, #4
 800330c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003310:	e00c      	b.n	800332c <USER_SPI_ioctl+0x2c8>
		break;
 8003312:	bf00      	nop
 8003314:	e00a      	b.n	800332c <USER_SPI_ioctl+0x2c8>
		break;
 8003316:	bf00      	nop
 8003318:	e008      	b.n	800332c <USER_SPI_ioctl+0x2c8>
		break;
 800331a:	bf00      	nop
 800331c:	e006      	b.n	800332c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800331e:	bf00      	nop
 8003320:	e004      	b.n	800332c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003322:	bf00      	nop
 8003324:	e002      	b.n	800332c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <USER_SPI_ioctl+0x2c8>
		break;
 800332a:	bf00      	nop
	}

	despiselect();
 800332c:	f7ff fbc0 	bl	8002ab0 <despiselect>

	return res;
 8003330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003334:	4618      	mov	r0, r3
 8003336:	3730      	adds	r7, #48	; 0x30
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000020 	.word	0x20000020
 8003340:	200000a8 	.word	0x200000a8

08003344 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <disk_status+0x30>)
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	79fa      	ldrb	r2, [r7, #7]
 800335c:	4905      	ldr	r1, [pc, #20]	; (8003374 <disk_status+0x30>)
 800335e:	440a      	add	r2, r1
 8003360:	7a12      	ldrb	r2, [r2, #8]
 8003362:	4610      	mov	r0, r2
 8003364:	4798      	blx	r3
 8003366:	4603      	mov	r3, r0
 8003368:	73fb      	strb	r3, [r7, #15]
  return stat;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200000d4 	.word	0x200000d4

08003378 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <disk_initialize+0x48>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <disk_initialize+0x48>)
 8003394:	2101      	movs	r1, #1
 8003396:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <disk_initialize+0x48>)
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	79fa      	ldrb	r2, [r7, #7]
 80033a6:	4906      	ldr	r1, [pc, #24]	; (80033c0 <disk_initialize+0x48>)
 80033a8:	440a      	add	r2, r1
 80033aa:	7a12      	ldrb	r2, [r2, #8]
 80033ac:	4610      	mov	r0, r2
 80033ae:	4798      	blx	r3
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200000d4 	.word	0x200000d4

080033c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	4603      	mov	r3, r0
 80033d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <disk_read+0x3c>)
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	689c      	ldr	r4, [r3, #8]
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	4a07      	ldr	r2, [pc, #28]	; (8003400 <disk_read+0x3c>)
 80033e4:	4413      	add	r3, r2
 80033e6:	7a18      	ldrb	r0, [r3, #8]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	47a0      	blx	r4
 80033f0:	4603      	mov	r3, r0
 80033f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd90      	pop	{r4, r7, pc}
 80033fe:	bf00      	nop
 8003400:	200000d4 	.word	0x200000d4

08003404 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <disk_write+0x3c>)
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	68dc      	ldr	r4, [r3, #12]
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	4a07      	ldr	r2, [pc, #28]	; (8003440 <disk_write+0x3c>)
 8003424:	4413      	add	r3, r2
 8003426:	7a18      	ldrb	r0, [r3, #8]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	47a0      	blx	r4
 8003430:	4603      	mov	r3, r0
 8003432:	75fb      	strb	r3, [r7, #23]
  return res;
 8003434:	7dfb      	ldrb	r3, [r7, #23]
}
 8003436:	4618      	mov	r0, r3
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	bf00      	nop
 8003440:	200000d4 	.word	0x200000d4

08003444 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	603a      	str	r2, [r7, #0]
 800344e:	71fb      	strb	r3, [r7, #7]
 8003450:	460b      	mov	r3, r1
 8003452:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	4a09      	ldr	r2, [pc, #36]	; (800347c <disk_ioctl+0x38>)
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	79fa      	ldrb	r2, [r7, #7]
 8003462:	4906      	ldr	r1, [pc, #24]	; (800347c <disk_ioctl+0x38>)
 8003464:	440a      	add	r2, r1
 8003466:	7a10      	ldrb	r0, [r2, #8]
 8003468:	79b9      	ldrb	r1, [r7, #6]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	4798      	blx	r3
 800346e:	4603      	mov	r3, r0
 8003470:	73fb      	strb	r3, [r7, #15]
  return res;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200000d4 	.word	0x200000d4

08003480 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3301      	adds	r3, #1
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003490:	89fb      	ldrh	r3, [r7, #14]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	b21a      	sxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b21b      	sxth	r3, r3
 800349c:	4313      	orrs	r3, r2
 800349e:	b21b      	sxth	r3, r3
 80034a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80034a2:	89fb      	ldrh	r3, [r7, #14]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3303      	adds	r3, #3
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	3202      	adds	r2, #2
 80034c8:	7812      	ldrb	r2, [r2, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	3201      	adds	r2, #1
 80034d6:	7812      	ldrb	r2, [r2, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80034e8:	68fb      	ldr	r3, [r7, #12]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	887a      	ldrh	r2, [r7, #2]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	701a      	strb	r2, [r3, #0]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	1c53      	adds	r3, r2, #1
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	1c59      	adds	r1, r3, #1
 80035a8:	6179      	str	r1, [r7, #20]
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f1      	bne.n	800359e <mem_cpy+0x1a>
	}
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80035c6:	b480      	push	{r7}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	617a      	str	r2, [r7, #20]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f3      	bne.n	80035d6 <mem_set+0x10>
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	61fa      	str	r2, [r7, #28]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	4619      	mov	r1, r3
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	61ba      	str	r2, [r7, #24]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	1acb      	subs	r3, r1, r3
 8003628:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3b01      	subs	r3, #1
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <mem_cmp+0x40>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0eb      	beq.n	8003614 <mem_cmp+0x18>

	return r;
 800363c:	697b      	ldr	r3, [r7, #20]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003654:	e002      	b.n	800365c <chk_chr+0x12>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3301      	adds	r3, #1
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <chk_chr+0x26>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	4293      	cmp	r3, r2
 800366e:	d1f2      	bne.n	8003656 <chk_chr+0xc>
	return *str;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	781b      	ldrb	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e029      	b.n	80036e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003694:	4a27      	ldr	r2, [pc, #156]	; (8003734 <chk_lock+0xb4>)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	4413      	add	r3, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01d      	beq.n	80036de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036a2:	4a24      	ldr	r2, [pc, #144]	; (8003734 <chk_lock+0xb4>)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	4413      	add	r3, r2
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d116      	bne.n	80036e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80036b4:	4a1f      	ldr	r2, [pc, #124]	; (8003734 <chk_lock+0xb4>)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d10c      	bne.n	80036e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80036c8:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <chk_lock+0xb4>)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	4413      	add	r3, r2
 80036d0:	3308      	adds	r3, #8
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80036d8:	429a      	cmp	r2, r3
 80036da:	d102      	bne.n	80036e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80036dc:	e007      	b.n	80036ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80036de:	2301      	movs	r3, #1
 80036e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3301      	adds	r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d9d2      	bls.n	8003694 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d109      	bne.n	8003708 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <chk_lock+0x80>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d101      	bne.n	8003704 <chk_lock+0x84>
 8003700:	2300      	movs	r3, #0
 8003702:	e010      	b.n	8003726 <chk_lock+0xa6>
 8003704:	2312      	movs	r3, #18
 8003706:	e00e      	b.n	8003726 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d108      	bne.n	8003720 <chk_lock+0xa0>
 800370e:	4a09      	ldr	r2, [pc, #36]	; (8003734 <chk_lock+0xb4>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	4413      	add	r3, r2
 8003716:	330c      	adds	r3, #12
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371e:	d101      	bne.n	8003724 <chk_lock+0xa4>
 8003720:	2310      	movs	r3, #16
 8003722:	e000      	b.n	8003726 <chk_lock+0xa6>
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	200000b4 	.word	0x200000b4

08003738 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	e002      	b.n	800374a <enq_lock+0x12>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3301      	adds	r3, #1
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d806      	bhi.n	800375e <enq_lock+0x26>
 8003750:	4a09      	ldr	r2, [pc, #36]	; (8003778 <enq_lock+0x40>)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	4413      	add	r3, r2
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f2      	bne.n	8003744 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b02      	cmp	r3, #2
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2db      	uxtb	r3, r3
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	200000b4 	.word	0x200000b4

0800377c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	e01f      	b.n	80037cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800378c:	4a41      	ldr	r2, [pc, #260]	; (8003894 <inc_lock+0x118>)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	4413      	add	r3, r2
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d113      	bne.n	80037c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800379e:	4a3d      	ldr	r2, [pc, #244]	; (8003894 <inc_lock+0x118>)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4413      	add	r3, r2
 80037a6:	3304      	adds	r3, #4
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d109      	bne.n	80037c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80037b2:	4a38      	ldr	r2, [pc, #224]	; (8003894 <inc_lock+0x118>)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	4413      	add	r3, r2
 80037ba:	3308      	adds	r3, #8
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d006      	beq.n	80037d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3301      	adds	r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d9dc      	bls.n	800378c <inc_lock+0x10>
 80037d2:	e000      	b.n	80037d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80037d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d132      	bne.n	8003842 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e002      	b.n	80037e8 <inc_lock+0x6c>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3301      	adds	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d806      	bhi.n	80037fc <inc_lock+0x80>
 80037ee:	4a29      	ldr	r2, [pc, #164]	; (8003894 <inc_lock+0x118>)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	4413      	add	r3, r2
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f2      	bne.n	80037e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d101      	bne.n	8003806 <inc_lock+0x8a>
 8003802:	2300      	movs	r3, #0
 8003804:	e040      	b.n	8003888 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4922      	ldr	r1, [pc, #136]	; (8003894 <inc_lock+0x118>)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	440b      	add	r3, r1
 8003812:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	491e      	ldr	r1, [pc, #120]	; (8003894 <inc_lock+0x118>)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	440b      	add	r3, r1
 8003820:	3304      	adds	r3, #4
 8003822:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	491a      	ldr	r1, [pc, #104]	; (8003894 <inc_lock+0x118>)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	440b      	add	r3, r1
 8003830:	3308      	adds	r3, #8
 8003832:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003834:	4a17      	ldr	r2, [pc, #92]	; (8003894 <inc_lock+0x118>)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	4413      	add	r3, r2
 800383c:	330c      	adds	r3, #12
 800383e:	2200      	movs	r2, #0
 8003840:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <inc_lock+0xe0>
 8003848:	4a12      	ldr	r2, [pc, #72]	; (8003894 <inc_lock+0x118>)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	4413      	add	r3, r2
 8003850:	330c      	adds	r3, #12
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <inc_lock+0xe0>
 8003858:	2300      	movs	r3, #0
 800385a:	e015      	b.n	8003888 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <inc_lock+0xf8>
 8003862:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <inc_lock+0x118>)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	4413      	add	r3, r2
 800386a:	330c      	adds	r3, #12
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	3301      	adds	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	e001      	b.n	8003878 <inc_lock+0xfc>
 8003874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003878:	4906      	ldr	r1, [pc, #24]	; (8003894 <inc_lock+0x118>)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	440b      	add	r3, r1
 8003880:	330c      	adds	r3, #12
 8003882:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3301      	adds	r3, #1
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	200000b4 	.word	0x200000b4

08003898 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d825      	bhi.n	80038f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80038ac:	4a17      	ldr	r2, [pc, #92]	; (800390c <dec_lock+0x74>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	4413      	add	r3, r2
 80038b4:	330c      	adds	r3, #12
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80038ba:	89fb      	ldrh	r3, [r7, #14]
 80038bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c0:	d101      	bne.n	80038c6 <dec_lock+0x2e>
 80038c2:	2300      	movs	r3, #0
 80038c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80038c6:	89fb      	ldrh	r3, [r7, #14]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <dec_lock+0x3a>
 80038cc:	89fb      	ldrh	r3, [r7, #14]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80038d2:	4a0e      	ldr	r2, [pc, #56]	; (800390c <dec_lock+0x74>)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	4413      	add	r3, r2
 80038da:	330c      	adds	r3, #12
 80038dc:	89fa      	ldrh	r2, [r7, #14]
 80038de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80038e0:	89fb      	ldrh	r3, [r7, #14]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <dec_lock+0x5a>
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <dec_lock+0x74>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	4413      	add	r3, r2
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	737b      	strb	r3, [r7, #13]
 80038f6:	e001      	b.n	80038fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80038f8:	2302      	movs	r3, #2
 80038fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80038fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	200000b4 	.word	0x200000b4

08003910 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e010      	b.n	8003940 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800391e:	4a0d      	ldr	r2, [pc, #52]	; (8003954 <clear_lock+0x44>)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	4413      	add	r3, r2
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d105      	bne.n	800393a <clear_lock+0x2a>
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <clear_lock+0x44>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	4413      	add	r3, r2
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d9eb      	bls.n	800391e <clear_lock+0xe>
	}
}
 8003946:	bf00      	nop
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	200000b4 	.word	0x200000b4

08003958 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	78db      	ldrb	r3, [r3, #3]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d034      	beq.n	80039d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	7858      	ldrb	r0, [r3, #1]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800397c:	2301      	movs	r3, #1
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	f7ff fd40 	bl	8003404 <disk_write>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <sync_window+0x38>
			res = FR_DISK_ERR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
 800398e:	e022      	b.n	80039d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	1ad2      	subs	r2, r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d217      	bcs.n	80039d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	789b      	ldrb	r3, [r3, #2]
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	e010      	b.n	80039d0 <sync_window+0x78>
					wsect += fs->fsize;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4413      	add	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7858      	ldrb	r0, [r3, #1]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80039c2:	2301      	movs	r3, #1
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	f7ff fd1d 	bl	8003404 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d8eb      	bhi.n	80039ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d01b      	beq.n	8003a30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ffad 	bl	8003958 <sync_window>
 80039fe:	4603      	mov	r3, r0
 8003a00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d113      	bne.n	8003a30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7858      	ldrb	r0, [r3, #1]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003a12:	2301      	movs	r3, #1
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	f7ff fcd5 	bl	80033c4 <disk_read>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
 8003a24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ff87 	bl	8003958 <sync_window>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d158      	bne.n	8003b06 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d148      	bne.n	8003aee <sync_fs+0xb2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	791b      	ldrb	r3, [r3, #4]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d144      	bne.n	8003aee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3330      	adds	r3, #48	; 0x30
 8003a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fda9 	bl	80035c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3330      	adds	r3, #48	; 0x30
 8003a78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003a7c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fd38 	bl	80034f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3330      	adds	r3, #48	; 0x30
 8003a8a:	4921      	ldr	r1, [pc, #132]	; (8003b10 <sync_fs+0xd4>)
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fd4d 	bl	800352c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3330      	adds	r3, #48	; 0x30
 8003a96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003a9a:	491e      	ldr	r1, [pc, #120]	; (8003b14 <sync_fs+0xd8>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fd45 	bl	800352c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3330      	adds	r3, #48	; 0x30
 8003aa6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f7ff fd3b 	bl	800352c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3330      	adds	r3, #48	; 0x30
 8003aba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f7ff fd31 	bl	800352c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7858      	ldrb	r0, [r3, #1]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f7ff fc8e 	bl	8003404 <disk_write>
			fs->fsi_flag = 0;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	785b      	ldrb	r3, [r3, #1]
 8003af2:	2200      	movs	r2, #0
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fca4 	bl	8003444 <disk_ioctl>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <sync_fs+0xca>
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	41615252 	.word	0x41615252
 8003b14:	61417272 	.word	0x61417272

08003b18 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	3b02      	subs	r3, #2
 8003b26:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	3b02      	subs	r3, #2
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d301      	bcc.n	8003b38 <clust2sect+0x20>
 8003b34:	2300      	movs	r3, #0
 8003b36:	e008      	b.n	8003b4a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	895b      	ldrh	r3, [r3, #10]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	fb03 f202 	mul.w	r2, r3, r2
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	4413      	add	r3, r2
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d904      	bls.n	8003b76 <get_fat+0x20>
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <get_fat+0x26>
		val = 1;	/* Internal error */
 8003b76:	2301      	movs	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e08f      	b.n	8003c9c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b80:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d062      	beq.n	8003c50 <get_fat+0xfa>
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	dc7c      	bgt.n	8003c88 <get_fat+0x132>
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d002      	beq.n	8003b98 <get_fat+0x42>
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d042      	beq.n	8003c1c <get_fat+0xc6>
 8003b96:	e077      	b.n	8003c88 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	6a1a      	ldr	r2, [r3, #32]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	0a5b      	lsrs	r3, r3, #9
 8003bae:	4413      	add	r3, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6938      	ldr	r0, [r7, #16]
 8003bb4:	f7ff ff14 	bl	80039e0 <move_window>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d167      	bne.n	8003c8e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	60fa      	str	r2, [r7, #12]
 8003bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6a1a      	ldr	r2, [r3, #32]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	0a5b      	lsrs	r3, r3, #9
 8003bda:	4413      	add	r3, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6938      	ldr	r0, [r7, #16]
 8003be0:	f7ff fefe 	bl	80039e0 <move_window>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d153      	bne.n	8003c92 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <get_fat+0xbc>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	e002      	b.n	8003c18 <get_fat+0xc2>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	617b      	str	r3, [r7, #20]
			break;
 8003c1a:	e03f      	b.n	8003c9c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	4413      	add	r3, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	6938      	ldr	r0, [r7, #16]
 8003c2a:	f7ff fed9 	bl	80039e0 <move_window>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d130      	bne.n	8003c96 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003c42:	4413      	add	r3, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fc1b 	bl	8003480 <ld_word>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	617b      	str	r3, [r7, #20]
			break;
 8003c4e:	e025      	b.n	8003c9c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	6a1a      	ldr	r2, [r3, #32]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	09db      	lsrs	r3, r3, #7
 8003c58:	4413      	add	r3, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6938      	ldr	r0, [r7, #16]
 8003c5e:	f7ff febf 	bl	80039e0 <move_window>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d118      	bne.n	8003c9a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003c76:	4413      	add	r3, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fc19 	bl	80034b0 <ld_dword>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c84:	617b      	str	r3, [r7, #20]
			break;
 8003c86:	e009      	b.n	8003c9c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003c88:	2301      	movs	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e006      	b.n	8003c9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c8e:	bf00      	nop
 8003c90:	e004      	b.n	8003c9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003c9a:	bf00      	nop
		}
	}

	return val;
 8003c9c:	697b      	ldr	r3, [r7, #20]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003ca6:	b590      	push	{r4, r7, lr}
 8003ca8:	b089      	sub	sp, #36	; 0x24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f240 80d2 	bls.w	8003e62 <put_fat+0x1bc>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	f080 80cc 	bcs.w	8003e62 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	f000 8096 	beq.w	8003e00 <put_fat+0x15a>
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	f300 80cd 	bgt.w	8003e74 <put_fat+0x1ce>
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d002      	beq.n	8003ce4 <put_fat+0x3e>
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d06e      	beq.n	8003dc0 <put_fat+0x11a>
 8003ce2:	e0c7      	b.n	8003e74 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4413      	add	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	0a5b      	lsrs	r3, r3, #9
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7ff fe6e 	bl	80039e0 <move_window>
 8003d04:	4603      	mov	r3, r0
 8003d06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f040 80ab 	bne.w	8003e66 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	1c59      	adds	r1, r3, #1
 8003d1a:	61b9      	str	r1, [r7, #24]
 8003d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d20:	4413      	add	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00d      	beq.n	8003d4a <put_fat+0xa4>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	b25b      	sxtb	r3, r3
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	b25a      	sxtb	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	b25b      	sxtb	r3, r3
 8003d42:	4313      	orrs	r3, r2
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	e001      	b.n	8003d4e <put_fat+0xa8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a1a      	ldr	r2, [r3, #32]
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	0a5b      	lsrs	r3, r3, #9
 8003d60:	4413      	add	r3, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff fe3b 	bl	80039e0 <move_window>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d6e:	7ffb      	ldrb	r3, [r7, #31]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d17a      	bne.n	8003e6a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d80:	4413      	add	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <put_fat+0xf0>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	e00e      	b.n	8003db4 <put_fat+0x10e>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	b25b      	sxtb	r3, r3
 8003d9c:	f023 030f 	bic.w	r3, r3, #15
 8003da0:	b25a      	sxtb	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	b25b      	sxtb	r3, r3
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	b25b      	sxtb	r3, r3
 8003dae:	4313      	orrs	r3, r2
 8003db0:	b25b      	sxtb	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	70da      	strb	r2, [r3, #3]
			break;
 8003dbe:	e059      	b.n	8003e74 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a1a      	ldr	r2, [r3, #32]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	4413      	add	r3, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff fe07 	bl	80039e0 <move_window>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d148      	bne.n	8003e6e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003dea:	4413      	add	r3, r2
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	b292      	uxth	r2, r2
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fb7f 	bl	80034f6 <st_word>
			fs->wflag = 1;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	70da      	strb	r2, [r3, #3]
			break;
 8003dfe:	e039      	b.n	8003e74 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	09db      	lsrs	r3, r3, #7
 8003e08:	4413      	add	r3, r2
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fde7 	bl	80039e0 <move_window>
 8003e12:	4603      	mov	r3, r0
 8003e14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e16:	7ffb      	ldrb	r3, [r7, #31]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d12a      	bne.n	8003e72 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003e30:	4413      	add	r3, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fb3c 	bl	80034b0 <ld_dword>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e3e:	4323      	orrs	r3, r4
 8003e40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003e50:	4413      	add	r3, r2
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fb69 	bl	800352c <st_dword>
			fs->wflag = 1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	70da      	strb	r2, [r3, #3]
			break;
 8003e60:	e008      	b.n	8003e74 <put_fat+0x1ce>
		}
	}
 8003e62:	bf00      	nop
 8003e64:	e006      	b.n	8003e74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e66:	bf00      	nop
 8003e68:	e004      	b.n	8003e74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e72:	bf00      	nop
	return res;
 8003e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3724      	adds	r7, #36	; 0x24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd90      	pop	{r4, r7, pc}

08003e7e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b088      	sub	sp, #32
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d904      	bls.n	8003ea4 <remove_chain+0x26>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d301      	bcc.n	8003ea8 <remove_chain+0x2a>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e04b      	b.n	8003f40 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00c      	beq.n	8003ec8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003eae:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	69b8      	ldr	r0, [r7, #24]
 8003eb6:	f7ff fef6 	bl	8003ca6 <put_fat>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003ebe:	7ffb      	ldrb	r3, [r7, #31]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <remove_chain+0x4a>
 8003ec4:	7ffb      	ldrb	r3, [r7, #31]
 8003ec6:	e03b      	b.n	8003f40 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff fe43 	bl	8003b56 <get_fat>
 8003ed0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d031      	beq.n	8003f3c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <remove_chain+0x64>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e02e      	b.n	8003f40 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d101      	bne.n	8003eee <remove_chain+0x70>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e028      	b.n	8003f40 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003eee:	2200      	movs	r2, #0
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	69b8      	ldr	r0, [r7, #24]
 8003ef4:	f7ff fed7 	bl	8003ca6 <put_fat>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003efc:	7ffb      	ldrb	r3, [r7, #31]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <remove_chain+0x88>
 8003f02:	7ffb      	ldrb	r3, [r7, #31]
 8003f04:	e01c      	b.n	8003f40 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	3b02      	subs	r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d20b      	bcs.n	8003f2c <remove_chain+0xae>
			fs->free_clst++;
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	791b      	ldrb	r3, [r3, #4]
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d3c6      	bcc.n	8003ec8 <remove_chain+0x4a>
 8003f3a:	e000      	b.n	8003f3e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003f3c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10d      	bne.n	8003f7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <create_chain+0x2c>
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d31b      	bcc.n	8003fac <create_chain+0x64>
 8003f74:	2301      	movs	r3, #1
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	e018      	b.n	8003fac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003f7a:	6839      	ldr	r1, [r7, #0]
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fdea 	bl	8003b56 <get_fat>
 8003f82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d801      	bhi.n	8003f8e <create_chain+0x46>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e070      	b.n	8004070 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d101      	bne.n	8003f9a <create_chain+0x52>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	e06a      	b.n	8004070 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d201      	bcs.n	8003fa8 <create_chain+0x60>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	e063      	b.n	8004070 <create_chain+0x128>
		scl = clst;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d307      	bcc.n	8003fd0 <create_chain+0x88>
				ncl = 2;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d901      	bls.n	8003fd0 <create_chain+0x88>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e04f      	b.n	8004070 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003fd0:	69f9      	ldr	r1, [r7, #28]
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fdbf 	bl	8003b56 <get_fat>
 8003fd8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00e      	beq.n	8003ffe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d003      	beq.n	8003fee <create_chain+0xa6>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d101      	bne.n	8003ff2 <create_chain+0xaa>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	e03e      	b.n	8004070 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d1da      	bne.n	8003fb0 <create_chain+0x68>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e038      	b.n	8004070 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003ffe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004000:	f04f 32ff 	mov.w	r2, #4294967295
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	6938      	ldr	r0, [r7, #16]
 8004008:	f7ff fe4d 	bl	8003ca6 <put_fat>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <create_chain+0xe2>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	6839      	ldr	r1, [r7, #0]
 8004020:	6938      	ldr	r0, [r7, #16]
 8004022:	f7ff fe40 	bl	8003ca6 <put_fat>
 8004026:	4603      	mov	r3, r0
 8004028:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d116      	bne.n	800405e <create_chain+0x116>
		fs->last_clst = ncl;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	3b02      	subs	r3, #2
 8004040:	429a      	cmp	r2, r3
 8004042:	d804      	bhi.n	800404e <create_chain+0x106>
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	791b      	ldrb	r3, [r3, #4]
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	b2da      	uxtb	r2, r3
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	711a      	strb	r2, [r3, #4]
 800405c:	e007      	b.n	800406e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d102      	bne.n	800406a <create_chain+0x122>
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
 8004068:	e000      	b.n	800406c <create_chain+0x124>
 800406a:	2301      	movs	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800406e:	69fb      	ldr	r3, [r7, #28]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	3304      	adds	r3, #4
 800408e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	0a5b      	lsrs	r3, r3, #9
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	8952      	ldrh	r2, [r2, #10]
 8004098:	fbb3 f3f2 	udiv	r3, r3, r2
 800409c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1d1a      	adds	r2, r3, #4
 80040a2:	613a      	str	r2, [r7, #16]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <clmt_clust+0x3a>
 80040ae:	2300      	movs	r3, #0
 80040b0:	e010      	b.n	80040d4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d307      	bcc.n	80040ca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	3304      	adds	r3, #4
 80040c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040c8:	e7e9      	b.n	800409e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80040ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	4413      	add	r3, r2
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040f6:	d204      	bcs.n	8004102 <dir_sdi+0x22>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004102:	2302      	movs	r3, #2
 8004104:	e063      	b.n	80041ce <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <dir_sdi+0x46>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d902      	bls.n	8004126 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10c      	bne.n	8004146 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	8912      	ldrh	r2, [r2, #8]
 8004134:	4293      	cmp	r3, r2
 8004136:	d301      	bcc.n	800413c <dir_sdi+0x5c>
 8004138:	2302      	movs	r3, #2
 800413a:	e048      	b.n	80041ce <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	61da      	str	r2, [r3, #28]
 8004144:	e029      	b.n	800419a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	895b      	ldrh	r3, [r3, #10]
 800414a:	025b      	lsls	r3, r3, #9
 800414c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800414e:	e019      	b.n	8004184 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6979      	ldr	r1, [r7, #20]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fcfe 	bl	8003b56 <get_fat>
 800415a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d101      	bne.n	8004168 <dir_sdi+0x88>
 8004164:	2301      	movs	r3, #1
 8004166:	e032      	b.n	80041ce <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d904      	bls.n	8004178 <dir_sdi+0x98>
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	429a      	cmp	r2, r3
 8004176:	d301      	bcc.n	800417c <dir_sdi+0x9c>
 8004178:	2302      	movs	r3, #2
 800417a:	e028      	b.n	80041ce <dir_sdi+0xee>
			ofs -= csz;
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	429a      	cmp	r2, r3
 800418a:	d2e1      	bcs.n	8004150 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800418c:	6979      	ldr	r1, [r7, #20]
 800418e:	6938      	ldr	r0, [r7, #16]
 8004190:	f7ff fcc2 	bl	8003b18 <clust2sect>
 8004194:	4602      	mov	r2, r0
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <dir_sdi+0xcc>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e010      	b.n	80041ce <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	0a5b      	lsrs	r3, r3, #9
 80041b4:	441a      	add	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c6:	441a      	add	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	3320      	adds	r3, #32
 80041ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <dir_next+0x28>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041fc:	d301      	bcc.n	8004202 <dir_next+0x2c>
 80041fe:	2304      	movs	r3, #4
 8004200:	e0aa      	b.n	8004358 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 8098 	bne.w	800433e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	8912      	ldrh	r2, [r2, #8]
 8004228:	4293      	cmp	r3, r2
 800422a:	f0c0 8088 	bcc.w	800433e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	61da      	str	r2, [r3, #28]
 8004234:	2304      	movs	r3, #4
 8004236:	e08f      	b.n	8004358 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	0a5b      	lsrs	r3, r3, #9
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	8952      	ldrh	r2, [r2, #10]
 8004240:	3a01      	subs	r2, #1
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d17a      	bne.n	800433e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	4619      	mov	r1, r3
 8004250:	4610      	mov	r0, r2
 8004252:	f7ff fc80 	bl	8003b56 <get_fat>
 8004256:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d801      	bhi.n	8004262 <dir_next+0x8c>
 800425e:	2302      	movs	r3, #2
 8004260:	e07a      	b.n	8004358 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d101      	bne.n	800426e <dir_next+0x98>
 800426a:	2301      	movs	r3, #1
 800426c:	e074      	b.n	8004358 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	d358      	bcc.n	800432a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	61da      	str	r2, [r3, #28]
 8004284:	2304      	movs	r3, #4
 8004286:	e067      	b.n	8004358 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f7ff fe59 	bl	8003f48 <create_chain>
 8004296:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <dir_next+0xcc>
 800429e:	2307      	movs	r3, #7
 80042a0:	e05a      	b.n	8004358 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <dir_next+0xd6>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e055      	b.n	8004358 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d101      	bne.n	80042b8 <dir_next+0xe2>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e04f      	b.n	8004358 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff fb4d 	bl	8003958 <sync_window>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <dir_next+0xf2>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e047      	b.n	8004358 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3330      	adds	r3, #48	; 0x30
 80042cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff f977 	bl	80035c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	6979      	ldr	r1, [r7, #20]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff fc1a 	bl	8003b18 <clust2sect>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80042ea:	e012      	b.n	8004312 <dir_next+0x13c>
						fs->wflag = 1;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff fb30 	bl	8003958 <sync_window>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <dir_next+0x12c>
 80042fe:	2301      	movs	r3, #1
 8004300:	e02a      	b.n	8004358 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3301      	adds	r3, #1
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	895b      	ldrh	r3, [r3, #10]
 8004316:	461a      	mov	r2, r3
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4293      	cmp	r3, r2
 800431c:	d3e6      	bcc.n	80042ec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad2      	subs	r2, r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004330:	6979      	ldr	r1, [r7, #20]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff fbf0 	bl	8003b18 <clust2sect>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004370:	2100      	movs	r1, #0
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff feb4 	bl	80040e0 <dir_sdi>
 8004378:	4603      	mov	r3, r0
 800437a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d12b      	bne.n	80043da <dir_alloc+0x7a>
		n = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4619      	mov	r1, r3
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff fb27 	bl	80039e0 <move_window>
 8004392:	4603      	mov	r3, r0
 8004394:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d11d      	bne.n	80043d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2be5      	cmp	r3, #229	; 0xe5
 80043a4:	d004      	beq.n	80043b0 <dir_alloc+0x50>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d107      	bne.n	80043c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	3301      	adds	r3, #1
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d102      	bne.n	80043c4 <dir_alloc+0x64>
 80043be:	e00c      	b.n	80043da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80043c4:	2101      	movs	r1, #1
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ff05 	bl	80041d6 <dir_next>
 80043cc:	4603      	mov	r3, r0
 80043ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0d7      	beq.n	8004386 <dir_alloc+0x26>
 80043d6:	e000      	b.n	80043da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80043d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d101      	bne.n	80043e4 <dir_alloc+0x84>
 80043e0:	2307      	movs	r3, #7
 80043e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	331a      	adds	r3, #26
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff f83f 	bl	8003480 <ld_word>
 8004402:	4603      	mov	r3, r0
 8004404:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b03      	cmp	r3, #3
 800440c:	d109      	bne.n	8004422 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff f834 	bl	8003480 <ld_word>
 8004418:	4603      	mov	r3, r0
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004422:	68fb      	ldr	r3, [r7, #12]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	331a      	adds	r3, #26
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	b292      	uxth	r2, r2
 8004440:	4611      	mov	r1, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff f857 	bl	80034f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d109      	bne.n	8004464 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f103 0214 	add.w	r2, r3, #20
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	b29b      	uxth	r3, r3
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7ff f849 	bl	80034f6 <st_word>
	}
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800447a:	2100      	movs	r1, #0
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff fe2f 	bl	80040e0 <dir_sdi>
 8004482:	4603      	mov	r3, r0
 8004484:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <dir_find+0x24>
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	e03e      	b.n	800450e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	4619      	mov	r1, r3
 8004496:	6938      	ldr	r0, [r7, #16]
 8004498:	f7ff faa2 	bl	80039e0 <move_window>
 800449c:	4603      	mov	r3, r0
 800449e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d12f      	bne.n	8004506 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <dir_find+0x4e>
 80044b4:	2304      	movs	r3, #4
 80044b6:	75fb      	strb	r3, [r7, #23]
 80044b8:	e028      	b.n	800450c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	330b      	adds	r3, #11
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	330b      	adds	r3, #11
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <dir_find+0x86>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a18      	ldr	r0, [r3, #32]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3324      	adds	r3, #36	; 0x24
 80044e4:	220b      	movs	r2, #11
 80044e6:	4619      	mov	r1, r3
 80044e8:	f7ff f888 	bl	80035fc <mem_cmp>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80044f2:	2100      	movs	r1, #0
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fe6e 	bl	80041d6 <dir_next>
 80044fa:	4603      	mov	r3, r0
 80044fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0c5      	beq.n	8004490 <dir_find+0x24>
 8004504:	e002      	b.n	800450c <dir_find+0xa0>
		if (res != FR_OK) break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800450a:	bf00      	nop

	return res;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004524:	2101      	movs	r1, #1
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ff1a 	bl	8004360 <dir_alloc>
 800452c:	4603      	mov	r3, r0
 800452e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d11c      	bne.n	8004570 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	4619      	mov	r1, r3
 800453c:	68b8      	ldr	r0, [r7, #8]
 800453e:	f7ff fa4f 	bl	80039e0 <move_window>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d111      	bne.n	8004570 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	2220      	movs	r2, #32
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff f836 	bl	80035c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a18      	ldr	r0, [r3, #32]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3324      	adds	r3, #36	; 0x24
 8004562:	220b      	movs	r2, #11
 8004564:	4619      	mov	r1, r3
 8004566:	f7ff f80d 	bl	8003584 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2201      	movs	r2, #1
 800456e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3324      	adds	r3, #36	; 0x24
 8004590:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004592:	220b      	movs	r2, #11
 8004594:	2120      	movs	r1, #32
 8004596:	68b8      	ldr	r0, [r7, #8]
 8004598:	f7ff f815 	bl	80035c6 <mem_set>
	si = i = 0; ni = 8;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	2308      	movs	r3, #8
 80045a6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	61fa      	str	r2, [r7, #28]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80045b6:	7efb      	ldrb	r3, [r7, #27]
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d94e      	bls.n	800465a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80045bc:	7efb      	ldrb	r3, [r7, #27]
 80045be:	2b2f      	cmp	r3, #47	; 0x2f
 80045c0:	d006      	beq.n	80045d0 <create_name+0x54>
 80045c2:	7efb      	ldrb	r3, [r7, #27]
 80045c4:	2b5c      	cmp	r3, #92	; 0x5c
 80045c6:	d110      	bne.n	80045ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80045c8:	e002      	b.n	80045d0 <create_name+0x54>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3301      	adds	r3, #1
 80045ce:	61fb      	str	r3, [r7, #28]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b2f      	cmp	r3, #47	; 0x2f
 80045da:	d0f6      	beq.n	80045ca <create_name+0x4e>
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b5c      	cmp	r3, #92	; 0x5c
 80045e6:	d0f0      	beq.n	80045ca <create_name+0x4e>
			break;
 80045e8:	e038      	b.n	800465c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80045ea:	7efb      	ldrb	r3, [r7, #27]
 80045ec:	2b2e      	cmp	r3, #46	; 0x2e
 80045ee:	d003      	beq.n	80045f8 <create_name+0x7c>
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d30c      	bcc.n	8004612 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b0b      	cmp	r3, #11
 80045fc:	d002      	beq.n	8004604 <create_name+0x88>
 80045fe:	7efb      	ldrb	r3, [r7, #27]
 8004600:	2b2e      	cmp	r3, #46	; 0x2e
 8004602:	d001      	beq.n	8004608 <create_name+0x8c>
 8004604:	2306      	movs	r3, #6
 8004606:	e044      	b.n	8004692 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004608:	2308      	movs	r3, #8
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	230b      	movs	r3, #11
 800460e:	617b      	str	r3, [r7, #20]
			continue;
 8004610:	e022      	b.n	8004658 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004612:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004616:	2b00      	cmp	r3, #0
 8004618:	da04      	bge.n	8004624 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800461a:	7efb      	ldrb	r3, [r7, #27]
 800461c:	3b80      	subs	r3, #128	; 0x80
 800461e:	4a1f      	ldr	r2, [pc, #124]	; (800469c <create_name+0x120>)
 8004620:	5cd3      	ldrb	r3, [r2, r3]
 8004622:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004624:	7efb      	ldrb	r3, [r7, #27]
 8004626:	4619      	mov	r1, r3
 8004628:	481d      	ldr	r0, [pc, #116]	; (80046a0 <create_name+0x124>)
 800462a:	f7ff f80e 	bl	800364a <chk_chr>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <create_name+0xbc>
 8004634:	2306      	movs	r3, #6
 8004636:	e02c      	b.n	8004692 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004638:	7efb      	ldrb	r3, [r7, #27]
 800463a:	2b60      	cmp	r3, #96	; 0x60
 800463c:	d905      	bls.n	800464a <create_name+0xce>
 800463e:	7efb      	ldrb	r3, [r7, #27]
 8004640:	2b7a      	cmp	r3, #122	; 0x7a
 8004642:	d802      	bhi.n	800464a <create_name+0xce>
 8004644:	7efb      	ldrb	r3, [r7, #27]
 8004646:	3b20      	subs	r3, #32
 8004648:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	613a      	str	r2, [r7, #16]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	4413      	add	r3, r2
 8004654:	7efa      	ldrb	r2, [r7, #27]
 8004656:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004658:	e7a6      	b.n	80045a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800465a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	441a      	add	r2, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <create_name+0xf4>
 800466c:	2306      	movs	r3, #6
 800466e:	e010      	b.n	8004692 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2be5      	cmp	r3, #229	; 0xe5
 8004676:	d102      	bne.n	800467e <create_name+0x102>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2205      	movs	r2, #5
 800467c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800467e:	7efb      	ldrb	r3, [r7, #27]
 8004680:	2b20      	cmp	r3, #32
 8004682:	d801      	bhi.n	8004688 <create_name+0x10c>
 8004684:	2204      	movs	r2, #4
 8004686:	e000      	b.n	800468a <create_name+0x10e>
 8004688:	2200      	movs	r2, #0
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	330b      	adds	r3, #11
 800468e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004690:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	08006850 	.word	0x08006850
 80046a0:	080067f4 	.word	0x080067f4

080046a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80046b8:	e002      	b.n	80046c0 <follow_path+0x1c>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	3301      	adds	r3, #1
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b2f      	cmp	r3, #47	; 0x2f
 80046c6:	d0f8      	beq.n	80046ba <follow_path+0x16>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b5c      	cmp	r3, #92	; 0x5c
 80046ce:	d0f4      	beq.n	80046ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2200      	movs	r2, #0
 80046d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b1f      	cmp	r3, #31
 80046dc:	d80a      	bhi.n	80046f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80046e6:	2100      	movs	r1, #0
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff fcf9 	bl	80040e0 <dir_sdi>
 80046ee:	4603      	mov	r3, r0
 80046f0:	75fb      	strb	r3, [r7, #23]
 80046f2:	e043      	b.n	800477c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80046f4:	463b      	mov	r3, r7
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff ff3f 	bl	800457c <create_name>
 80046fe:	4603      	mov	r3, r0
 8004700:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d134      	bne.n	8004772 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff feaf 	bl	800446c <dir_find>
 800470e:	4603      	mov	r3, r0
 8004710:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004718:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	2b04      	cmp	r3, #4
 8004724:	d127      	bne.n	8004776 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004726:	7afb      	ldrb	r3, [r7, #11]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d122      	bne.n	8004776 <follow_path+0xd2>
 8004730:	2305      	movs	r3, #5
 8004732:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004734:	e01f      	b.n	8004776 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004736:	7afb      	ldrb	r3, [r7, #11]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11c      	bne.n	800477a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	799b      	ldrb	r3, [r3, #6]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800474c:	2305      	movs	r3, #5
 800474e:	75fb      	strb	r3, [r7, #23]
 8004750:	e014      	b.n	800477c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004760:	4413      	add	r3, r2
 8004762:	4619      	mov	r1, r3
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fe42 	bl	80043ee <ld_clust>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004770:	e7c0      	b.n	80046f4 <follow_path+0x50>
			if (res != FR_OK) break;
 8004772:	bf00      	nop
 8004774:	e002      	b.n	800477c <follow_path+0xd8>
				break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800477a:	bf00      	nop
			}
		}
	}

	return res;
 800477c:	7dfb      	ldrb	r3, [r7, #23]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004786:	b480      	push	{r7}
 8004788:	b087      	sub	sp, #28
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800478e:	f04f 33ff 	mov.w	r3, #4294967295
 8004792:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d031      	beq.n	8004800 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e002      	b.n	80047aa <get_ldnumber+0x24>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3301      	adds	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d903      	bls.n	80047ba <get_ldnumber+0x34>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b3a      	cmp	r3, #58	; 0x3a
 80047b8:	d1f4      	bne.n	80047a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b3a      	cmp	r3, #58	; 0x3a
 80047c0:	d11c      	bne.n	80047fc <get_ldnumber+0x76>
			tp = *path;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	60fa      	str	r2, [r7, #12]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	3b30      	subs	r3, #48	; 0x30
 80047d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b09      	cmp	r3, #9
 80047d8:	d80e      	bhi.n	80047f8 <get_ldnumber+0x72>
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d10a      	bne.n	80047f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <get_ldnumber+0x72>
					vol = (int)i;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3301      	adds	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	e002      	b.n	8004802 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004800:	693b      	ldr	r3, [r7, #16]
}
 8004802:	4618      	mov	r0, r3
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	70da      	strb	r2, [r3, #3]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f04f 32ff 	mov.w	r2, #4294967295
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff f8d8 	bl	80039e0 <move_window>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <check_fs+0x2a>
 8004836:	2304      	movs	r3, #4
 8004838:	e038      	b.n	80048ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3330      	adds	r3, #48	; 0x30
 800483e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe fe1c 	bl	8003480 <ld_word>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <check_fs+0x48>
 8004854:	2303      	movs	r3, #3
 8004856:	e029      	b.n	80048ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800485e:	2be9      	cmp	r3, #233	; 0xe9
 8004860:	d009      	beq.n	8004876 <check_fs+0x66>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004868:	2beb      	cmp	r3, #235	; 0xeb
 800486a:	d11e      	bne.n	80048aa <check_fs+0x9a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004872:	2b90      	cmp	r3, #144	; 0x90
 8004874:	d119      	bne.n	80048aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3330      	adds	r3, #48	; 0x30
 800487a:	3336      	adds	r3, #54	; 0x36
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fe17 	bl	80034b0 <ld_dword>
 8004882:	4603      	mov	r3, r0
 8004884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004888:	4a0a      	ldr	r2, [pc, #40]	; (80048b4 <check_fs+0xa4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d101      	bne.n	8004892 <check_fs+0x82>
 800488e:	2300      	movs	r3, #0
 8004890:	e00c      	b.n	80048ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3330      	adds	r3, #48	; 0x30
 8004896:	3352      	adds	r3, #82	; 0x52
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe fe09 	bl	80034b0 <ld_dword>
 800489e:	4603      	mov	r3, r0
 80048a0:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <check_fs+0xa8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <check_fs+0x9a>
 80048a6:	2300      	movs	r3, #0
 80048a8:	e000      	b.n	80048ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80048aa:	2302      	movs	r3, #2
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	00544146 	.word	0x00544146
 80048b8:	33544146 	.word	0x33544146

080048bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b096      	sub	sp, #88	; 0x58
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff ff58 	bl	8004786 <get_ldnumber>
 80048d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da01      	bge.n	80048e2 <find_volume+0x26>
 80048de:	230b      	movs	r3, #11
 80048e0:	e22e      	b.n	8004d40 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80048e2:	4aa8      	ldr	r2, [pc, #672]	; (8004b84 <find_volume+0x2c8>)
 80048e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <find_volume+0x3a>
 80048f2:	230c      	movs	r3, #12
 80048f4:	e224      	b.n	8004d40 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01a      	beq.n	8004942 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe fd17 	bl	8003344 <disk_status>
 8004916:	4603      	mov	r3, r0
 8004918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800491c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10c      	bne.n	8004942 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <find_volume+0x82>
 800492e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800493a:	230a      	movs	r3, #10
 800493c:	e200      	b.n	8004d40 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800493e:	2300      	movs	r3, #0
 8004940:	e1fe      	b.n	8004d40 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494a:	b2da      	uxtb	r2, r3
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe fd0f 	bl	8003378 <disk_initialize>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800496c:	2303      	movs	r3, #3
 800496e:	e1e7      	b.n	8004d40 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <find_volume+0xca>
 8004976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004982:	230a      	movs	r3, #10
 8004984:	e1dc      	b.n	8004d40 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800498a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800498c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800498e:	f7ff ff3f 	bl	8004810 <check_fs>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800499c:	2b02      	cmp	r3, #2
 800499e:	d14b      	bne.n	8004a38 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80049a0:	2300      	movs	r3, #0
 80049a2:	643b      	str	r3, [r7, #64]	; 0x40
 80049a4:	e01f      	b.n	80049e6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80049a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80049ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80049b4:	4413      	add	r3, r2
 80049b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	3304      	adds	r3, #4
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d006      	beq.n	80049d0 <find_volume+0x114>
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	3308      	adds	r3, #8
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fd72 	bl	80034b0 <ld_dword>
 80049cc:	4602      	mov	r2, r0
 80049ce:	e000      	b.n	80049d2 <find_volume+0x116>
 80049d0:	2200      	movs	r2, #0
 80049d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80049da:	440b      	add	r3, r1
 80049dc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80049e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e2:	3301      	adds	r3, #1
 80049e4:	643b      	str	r3, [r7, #64]	; 0x40
 80049e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d9dc      	bls.n	80049a6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80049ec:	2300      	movs	r3, #0
 80049ee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80049f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <find_volume+0x140>
 80049f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f8:	3b01      	subs	r3, #1
 80049fa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80049fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004a04:	4413      	add	r3, r2
 8004a06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004a0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <find_volume+0x162>
 8004a12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a16:	f7ff fefb 	bl	8004810 <check_fs>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	e000      	b.n	8004a20 <find_volume+0x164>
 8004a1e:	2303      	movs	r3, #3
 8004a20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d905      	bls.n	8004a38 <find_volume+0x17c>
 8004a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2e:	3301      	adds	r3, #1
 8004a30:	643b      	str	r3, [r7, #64]	; 0x40
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d9e1      	bls.n	80049fc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004a38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d101      	bne.n	8004a44 <find_volume+0x188>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e17d      	b.n	8004d40 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004a44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d901      	bls.n	8004a50 <find_volume+0x194>
 8004a4c:	230d      	movs	r3, #13
 8004a4e:	e177      	b.n	8004d40 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	3330      	adds	r3, #48	; 0x30
 8004a54:	330b      	adds	r3, #11
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fd12 	bl	8003480 <ld_word>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a62:	d001      	beq.n	8004a68 <find_volume+0x1ac>
 8004a64:	230d      	movs	r3, #13
 8004a66:	e16b      	b.n	8004d40 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	3330      	adds	r3, #48	; 0x30
 8004a6c:	3316      	adds	r3, #22
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe fd06 	bl	8003480 <ld_word>
 8004a74:	4603      	mov	r3, r0
 8004a76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <find_volume+0x1d0>
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	3330      	adds	r3, #48	; 0x30
 8004a82:	3324      	adds	r3, #36	; 0x24
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fd13 	bl	80034b0 <ld_dword>
 8004a8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a90:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	789b      	ldrb	r3, [r3, #2]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d005      	beq.n	8004ab0 <find_volume+0x1f4>
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d001      	beq.n	8004ab0 <find_volume+0x1f4>
 8004aac:	230d      	movs	r3, #13
 8004aae:	e147      	b.n	8004d40 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab2:	789b      	ldrb	r3, [r3, #2]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	895b      	ldrh	r3, [r3, #10]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <find_volume+0x228>
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad4:	895b      	ldrh	r3, [r3, #10]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	895b      	ldrh	r3, [r3, #10]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <find_volume+0x22c>
 8004ae4:	230d      	movs	r3, #13
 8004ae6:	e12b      	b.n	8004d40 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	3330      	adds	r3, #48	; 0x30
 8004aec:	3311      	adds	r3, #17
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe fcc6 	bl	8003480 <ld_word>
 8004af4:	4603      	mov	r3, r0
 8004af6:	461a      	mov	r2, r3
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	891b      	ldrh	r3, [r3, #8]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <find_volume+0x252>
 8004b0a:	230d      	movs	r3, #13
 8004b0c:	e118      	b.n	8004d40 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	3330      	adds	r3, #48	; 0x30
 8004b12:	3313      	adds	r3, #19
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fcb3 	bl	8003480 <ld_word>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <find_volume+0x276>
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	3330      	adds	r3, #48	; 0x30
 8004b28:	3320      	adds	r3, #32
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fcc0 	bl	80034b0 <ld_dword>
 8004b30:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	3330      	adds	r3, #48	; 0x30
 8004b36:	330e      	adds	r3, #14
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe fca1 	bl	8003480 <ld_word>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004b42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <find_volume+0x290>
 8004b48:	230d      	movs	r3, #13
 8004b4a:	e0f9      	b.n	8004d40 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004b4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b50:	4413      	add	r3, r2
 8004b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b54:	8912      	ldrh	r2, [r2, #8]
 8004b56:	0912      	lsrs	r2, r2, #4
 8004b58:	b292      	uxth	r2, r2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d201      	bcs.n	8004b6a <find_volume+0x2ae>
 8004b66:	230d      	movs	r3, #13
 8004b68:	e0ea      	b.n	8004d40 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b72:	8952      	ldrh	r2, [r2, #10]
 8004b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d103      	bne.n	8004b88 <find_volume+0x2cc>
 8004b80:	230d      	movs	r3, #13
 8004b82:	e0dd      	b.n	8004d40 <find_volume+0x484>
 8004b84:	200000ac 	.word	0x200000ac
		fmt = FS_FAT32;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d802      	bhi.n	8004b9e <find_volume+0x2e2>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d802      	bhi.n	8004bae <find_volume+0x2f2>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	1c9a      	adds	r2, r3, #2
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bba:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004bbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc0:	441a      	add	r2, r3
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004bc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	441a      	add	r2, r3
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d11e      	bne.n	8004c16 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	3330      	adds	r3, #48	; 0x30
 8004bdc:	332a      	adds	r3, #42	; 0x2a
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe fc4e 	bl	8003480 <ld_word>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <find_volume+0x332>
 8004bea:	230d      	movs	r3, #13
 8004bec:	e0a8      	b.n	8004d40 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf0:	891b      	ldrh	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <find_volume+0x33e>
 8004bf6:	230d      	movs	r3, #13
 8004bf8:	e0a2      	b.n	8004d40 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	3330      	adds	r3, #48	; 0x30
 8004bfe:	332c      	adds	r3, #44	; 0x2c
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fe fc55 	bl	80034b0 <ld_dword>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	647b      	str	r3, [r7, #68]	; 0x44
 8004c14:	e01f      	b.n	8004c56 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	891b      	ldrh	r3, [r3, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <find_volume+0x366>
 8004c1e:	230d      	movs	r3, #13
 8004c20:	e08e      	b.n	8004d40 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	6a1a      	ldr	r2, [r3, #32]
 8004c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c28:	441a      	add	r2, r3
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004c2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d103      	bne.n	8004c3e <find_volume+0x382>
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	e00a      	b.n	8004c54 <find_volume+0x398>
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	4613      	mov	r3, r2
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	4413      	add	r3, r2
 8004c48:	085a      	lsrs	r2, r3, #1
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004c54:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c60:	0a5b      	lsrs	r3, r3, #9
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d201      	bcs.n	8004c6a <find_volume+0x3ae>
 8004c66:	230d      	movs	r3, #13
 8004c68:	e06a      	b.n	8004d40 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c70:	611a      	str	r2, [r3, #16]
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	2280      	movs	r2, #128	; 0x80
 8004c7e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004c80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d149      	bne.n	8004d1c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	3330      	adds	r3, #48	; 0x30
 8004c8c:	3330      	adds	r3, #48	; 0x30
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe fbf6 	bl	8003480 <ld_word>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d140      	bne.n	8004d1c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ca2:	f7fe fe9d 	bl	80039e0 <move_window>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d137      	bne.n	8004d1c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	2200      	movs	r2, #0
 8004cb0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	3330      	adds	r3, #48	; 0x30
 8004cb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fbe0 	bl	8003480 <ld_word>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d127      	bne.n	8004d1c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	3330      	adds	r3, #48	; 0x30
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe fbed 	bl	80034b0 <ld_dword>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <find_volume+0x48c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d11e      	bne.n	8004d1c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	3330      	adds	r3, #48	; 0x30
 8004ce2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fbe2 	bl	80034b0 <ld_dword>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <find_volume+0x490>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d113      	bne.n	8004d1c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	3330      	adds	r3, #48	; 0x30
 8004cf8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fbd7 	bl	80034b0 <ld_dword>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	3330      	adds	r3, #48	; 0x30
 8004d0c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe fbcd 	bl	80034b0 <ld_dword>
 8004d16:	4602      	mov	r2, r0
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d22:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <find_volume+0x494>)
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <find_volume+0x494>)
 8004d2e:	801a      	strh	r2, [r3, #0]
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <find_volume+0x494>)
 8004d32:	881a      	ldrh	r2, [r3, #0]
 8004d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d36:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004d38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d3a:	f7fe fde9 	bl	8003910 <clear_lock>
#endif
	return FR_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3758      	adds	r7, #88	; 0x58
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	41615252 	.word	0x41615252
 8004d4c:	61417272 	.word	0x61417272
 8004d50:	200000b0 	.word	0x200000b0

08004d54 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004d5e:	2309      	movs	r3, #9
 8004d60:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01c      	beq.n	8004da2 <validate+0x4e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d018      	beq.n	8004da2 <validate+0x4e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d013      	beq.n	8004da2 <validate+0x4e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	889a      	ldrh	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	88db      	ldrh	r3, [r3, #6]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d10c      	bne.n	8004da2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	785b      	ldrb	r3, [r3, #1]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe fad8 	bl	8003344 <disk_status>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <validate+0x4e>
			res = FR_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <validate+0x5a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	e000      	b.n	8004db0 <validate+0x5c>
 8004dae:	2300      	movs	r3, #0
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	6013      	str	r3, [r2, #0]
	return res;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004dd2:	f107 0310 	add.w	r3, r7, #16
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fcd5 	bl	8004786 <get_ldnumber>
 8004ddc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da01      	bge.n	8004de8 <f_mount+0x28>
 8004de4:	230b      	movs	r3, #11
 8004de6:	e02b      	b.n	8004e40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004de8:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <f_mount+0x88>)
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004df8:	69b8      	ldr	r0, [r7, #24]
 8004dfa:	f7fe fd89 	bl	8003910 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	490d      	ldr	r1, [pc, #52]	; (8004e48 <f_mount+0x88>)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <f_mount+0x66>
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d001      	beq.n	8004e2a <f_mount+0x6a>
 8004e26:	2300      	movs	r3, #0
 8004e28:	e00a      	b.n	8004e40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004e2a:	f107 010c 	add.w	r1, r7, #12
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	2200      	movs	r2, #0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fd41 	bl	80048bc <find_volume>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3720      	adds	r7, #32
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	200000ac 	.word	0x200000ac

08004e4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b098      	sub	sp, #96	; 0x60
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <f_open+0x18>
 8004e60:	2309      	movs	r3, #9
 8004e62:	e1ad      	b.n	80051c0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004e6c:	79fa      	ldrb	r2, [r7, #7]
 8004e6e:	f107 0110 	add.w	r1, r7, #16
 8004e72:	f107 0308 	add.w	r3, r7, #8
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fd20 	bl	80048bc <find_volume>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004e82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f040 8191 	bne.w	80051ae <f_open+0x362>
		dj.obj.fs = fs;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	4611      	mov	r1, r2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff fc03 	bl	80046a4 <follow_path>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d11a      	bne.n	8004ee2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004eac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	da03      	bge.n	8004ebe <f_open+0x72>
				res = FR_INVALID_NAME;
 8004eb6:	2306      	movs	r3, #6
 8004eb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004ebc:	e011      	b.n	8004ee2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf14      	ite	ne
 8004ec8:	2301      	movne	r3, #1
 8004eca:	2300      	moveq	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fbd2 	bl	8003680 <chk_lock>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	f003 031c 	and.w	r3, r3, #28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d07f      	beq.n	8004fec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004eec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d017      	beq.n	8004f24 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d10e      	bne.n	8004f1a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004efc:	f7fe fc1c 	bl	8003738 <enq_lock>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d006      	beq.n	8004f14 <f_open+0xc8>
 8004f06:	f107 0314 	add.w	r3, r7, #20
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff fb03 	bl	8004516 <dir_register>
 8004f10:	4603      	mov	r3, r0
 8004f12:	e000      	b.n	8004f16 <f_open+0xca>
 8004f14:	2312      	movs	r3, #18
 8004f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	f043 0308 	orr.w	r3, r3, #8
 8004f20:	71fb      	strb	r3, [r7, #7]
 8004f22:	e010      	b.n	8004f46 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004f24:	7ebb      	ldrb	r3, [r7, #26]
 8004f26:	f003 0311 	and.w	r3, r3, #17
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <f_open+0xea>
					res = FR_DENIED;
 8004f2e:	2307      	movs	r3, #7
 8004f30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004f34:	e007      	b.n	8004f46 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <f_open+0xfa>
 8004f40:	2308      	movs	r3, #8
 8004f42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004f46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d168      	bne.n	8005020 <f_open+0x1d4>
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d063      	beq.n	8005020 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004f58:	f7fd fcb2 	bl	80028c0 <get_fattime>
 8004f5c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f60:	330e      	adds	r3, #14
 8004f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe fae1 	bl	800352c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	3316      	adds	r3, #22
 8004f6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe fadb 	bl	800352c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	330b      	adds	r3, #11
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fa32 	bl	80043ee <ld_clust>
 8004f8a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f90:	2200      	movs	r2, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fa4a 	bl	800442c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9a:	331c      	adds	r3, #28
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fe fac4 	bl	800352c <st_dword>
					fs->wflag = 1;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d037      	beq.n	8005020 <f_open+0x1d4>
						dw = fs->winsect;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004fb6:	f107 0314 	add.w	r3, r7, #20
 8004fba:	2200      	movs	r2, #0
 8004fbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe ff5d 	bl	8003e7e <remove_chain>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d126      	bne.n	8005020 <f_open+0x1d4>
							res = move_window(fs, dw);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe fd02 	bl	80039e0 <move_window>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fe6:	3a01      	subs	r2, #1
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	e019      	b.n	8005020 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004fec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d115      	bne.n	8005020 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004ff4:	7ebb      	ldrb	r3, [r7, #26]
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <f_open+0x1ba>
					res = FR_NO_FILE;
 8004ffe:	2304      	movs	r3, #4
 8005000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005004:	e00c      	b.n	8005020 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <f_open+0x1d4>
 8005010:	7ebb      	ldrb	r3, [r7, #26]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <f_open+0x1d4>
						res = FR_DENIED;
 800501a:	2307      	movs	r3, #7
 800501c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005024:	2b00      	cmp	r3, #0
 8005026:	d128      	bne.n	800507a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005038:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	bf14      	ite	ne
 8005052:	2301      	movne	r3, #1
 8005054:	2300      	moveq	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	f107 0314 	add.w	r3, r7, #20
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f7fe fb8b 	bl	800377c <inc_lock>
 8005066:	4602      	mov	r2, r0
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <f_open+0x22e>
 8005074:	2302      	movs	r3, #2
 8005076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800507a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 8095 	bne.w	80051ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff f9af 	bl	80043ee <ld_clust>
 8005090:	4602      	mov	r2, r0
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	331c      	adds	r3, #28
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe fa08 	bl	80034b0 <ld_dword>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	88da      	ldrh	r2, [r3, #6]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	79fa      	ldrb	r2, [r7, #7]
 80050be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3330      	adds	r3, #48	; 0x30
 80050d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe fa72 	bl	80035c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d060      	beq.n	80051ae <f_open+0x362>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d05c      	beq.n	80051ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	895b      	ldrh	r3, [r3, #10]
 8005100:	025b      	lsls	r3, r3, #9
 8005102:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	657b      	str	r3, [r7, #84]	; 0x54
 8005110:	e016      	b.n	8005140 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fd1d 	bl	8003b56 <get_fat>
 800511c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800511e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005120:	2b01      	cmp	r3, #1
 8005122:	d802      	bhi.n	800512a <f_open+0x2de>
 8005124:	2302      	movs	r3, #2
 8005126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800512a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d102      	bne.n	8005138 <f_open+0x2ec>
 8005132:	2301      	movs	r3, #1
 8005134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005138:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800513a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	657b      	str	r3, [r7, #84]	; 0x54
 8005140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005144:	2b00      	cmp	r3, #0
 8005146:	d103      	bne.n	8005150 <f_open+0x304>
 8005148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800514a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514c:	429a      	cmp	r2, r3
 800514e:	d8e0      	bhi.n	8005112 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005154:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005156:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800515a:	2b00      	cmp	r3, #0
 800515c:	d127      	bne.n	80051ae <f_open+0x362>
 800515e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005164:	2b00      	cmp	r3, #0
 8005166:	d022      	beq.n	80051ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800516c:	4618      	mov	r0, r3
 800516e:	f7fe fcd3 	bl	8003b18 <clust2sect>
 8005172:	6478      	str	r0, [r7, #68]	; 0x44
 8005174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <f_open+0x336>
						res = FR_INT_ERR;
 800517a:	2302      	movs	r3, #2
 800517c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005180:	e015      	b.n	80051ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005184:	0a5a      	lsrs	r2, r3, #9
 8005186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005188:	441a      	add	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	7858      	ldrb	r0, [r3, #1]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	2301      	movs	r3, #1
 800519e:	f7fe f911 	bl	80033c4 <disk_read>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <f_open+0x362>
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80051ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <f_open+0x370>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80051bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3760      	adds	r7, #96	; 0x60
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f107 0214 	add.w	r2, r7, #20
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fdb3 	bl	8004d54 <validate>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80051f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d107      	bne.n	800520c <f_read+0x44>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	7d5b      	ldrb	r3, [r3, #21]
 8005200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005204:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <f_read+0x4a>
 800520c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005210:	e115      	b.n	800543e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	7d1b      	ldrb	r3, [r3, #20]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <f_read+0x5a>
 800521e:	2307      	movs	r3, #7
 8005220:	e10d      	b.n	800543e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	429a      	cmp	r2, r3
 8005234:	f240 80fe 	bls.w	8005434 <f_read+0x26c>
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800523c:	e0fa      	b.n	8005434 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	2b00      	cmp	r3, #0
 8005248:	f040 80c6 	bne.w	80053d8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	0a5b      	lsrs	r3, r3, #9
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	8952      	ldrh	r2, [r2, #10]
 8005256:	3a01      	subs	r2, #1
 8005258:	4013      	ands	r3, r2
 800525a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d12f      	bne.n	80052c2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
 8005270:	e013      	b.n	800529a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	4619      	mov	r1, r3
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7fe fef9 	bl	8004078 <clmt_clust>
 8005286:	6338      	str	r0, [r7, #48]	; 0x30
 8005288:	e007      	b.n	800529a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f7fe fc5f 	bl	8003b56 <get_fat>
 8005298:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	2b01      	cmp	r3, #1
 800529e:	d804      	bhi.n	80052aa <f_read+0xe2>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2202      	movs	r2, #2
 80052a4:	755a      	strb	r2, [r3, #21]
 80052a6:	2302      	movs	r3, #2
 80052a8:	e0c9      	b.n	800543e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d104      	bne.n	80052bc <f_read+0xf4>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	755a      	strb	r2, [r3, #21]
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0c0      	b.n	800543e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f7fe fc24 	bl	8003b18 <clust2sect>
 80052d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <f_read+0x11a>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2202      	movs	r2, #2
 80052dc:	755a      	strb	r2, [r3, #21]
 80052de:	2302      	movs	r3, #2
 80052e0:	e0ad      	b.n	800543e <f_read+0x276>
			sect += csect;
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0a5b      	lsrs	r3, r3, #9
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d039      	beq.n	800536a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	4413      	add	r3, r2
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	8952      	ldrh	r2, [r2, #10]
 8005300:	4293      	cmp	r3, r2
 8005302:	d905      	bls.n	8005310 <f_read+0x148>
					cc = fs->csize - csect;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	895b      	ldrh	r3, [r3, #10]
 8005308:	461a      	mov	r2, r3
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	7858      	ldrb	r0, [r3, #1]
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800531a:	f7fe f853 	bl	80033c4 <disk_read>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <f_read+0x166>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	755a      	strb	r2, [r3, #21]
 800532a:	2301      	movs	r3, #1
 800532c:	e087      	b.n	800543e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	7d1b      	ldrb	r3, [r3, #20]
 8005332:	b25b      	sxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	da14      	bge.n	8005362 <f_read+0x19a>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005342:	429a      	cmp	r2, r3
 8005344:	d90d      	bls.n	8005362 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1a      	ldr	r2, [r3, #32]
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	025b      	lsls	r3, r3, #9
 8005350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005352:	18d0      	adds	r0, r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3330      	adds	r3, #48	; 0x30
 8005358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535c:	4619      	mov	r1, r3
 800535e:	f7fe f911 	bl	8003584 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	025b      	lsls	r3, r3, #9
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005368:	e050      	b.n	800540c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	429a      	cmp	r2, r3
 8005372:	d02e      	beq.n	80053d2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	7d1b      	ldrb	r3, [r3, #20]
 8005378:	b25b      	sxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	da18      	bge.n	80053b0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	7858      	ldrb	r0, [r3, #1]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1a      	ldr	r2, [r3, #32]
 800538c:	2301      	movs	r3, #1
 800538e:	f7fe f839 	bl	8003404 <disk_write>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <f_read+0x1da>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	755a      	strb	r2, [r3, #21]
 800539e:	2301      	movs	r3, #1
 80053a0:	e04d      	b.n	800543e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	7d1b      	ldrb	r3, [r3, #20]
 80053a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	7858      	ldrb	r0, [r3, #1]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80053ba:	2301      	movs	r3, #1
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	f7fe f801 	bl	80033c4 <disk_read>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <f_read+0x20a>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	755a      	strb	r2, [r3, #21]
 80053ce:	2301      	movs	r3, #1
 80053d0:	e035      	b.n	800543e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80053e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d901      	bls.n	80053f2 <f_read+0x22a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005400:	4413      	add	r3, r2
 8005402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005404:	4619      	mov	r1, r3
 8005406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005408:	f7fe f8bc 	bl	8003584 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800540c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	4413      	add	r3, r2
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	441a      	add	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	619a      	str	r2, [r3, #24]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	441a      	add	r2, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f47f af01 	bne.w	800523e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3738      	adds	r7, #56	; 0x38
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b08c      	sub	sp, #48	; 0x30
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f107 0210 	add.w	r2, r7, #16
 8005464:	4611      	mov	r1, r2
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff fc74 	bl	8004d54 <validate>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005476:	2b00      	cmp	r3, #0
 8005478:	d107      	bne.n	800548a <f_write+0x44>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	7d5b      	ldrb	r3, [r3, #21]
 800547e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <f_write+0x4a>
 800548a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800548e:	e14b      	b.n	8005728 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	7d1b      	ldrb	r3, [r3, #20]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <f_write+0x5a>
 800549c:	2307      	movs	r3, #7
 800549e:	e143      	b.n	8005728 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	441a      	add	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	f080 812d 	bcs.w	800570c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	43db      	mvns	r3, r3
 80054b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80054ba:	e127      	b.n	800570c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 80e3 	bne.w	8005690 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	0a5b      	lsrs	r3, r3, #9
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	8952      	ldrh	r2, [r2, #10]
 80054d4:	3a01      	subs	r2, #1
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d143      	bne.n	8005568 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10c      	bne.n	8005502 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11a      	bne.n	800552a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fe fd25 	bl	8003f48 <create_chain>
 80054fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8005500:	e013      	b.n	800552a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	4619      	mov	r1, r3
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7fe fdb1 	bl	8004078 <clmt_clust>
 8005516:	62b8      	str	r0, [r7, #40]	; 0x28
 8005518:	e007      	b.n	800552a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f7fe fd10 	bl	8003f48 <create_chain>
 8005528:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80f2 	beq.w	8005716 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	2b01      	cmp	r3, #1
 8005536:	d104      	bne.n	8005542 <f_write+0xfc>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2202      	movs	r2, #2
 800553c:	755a      	strb	r2, [r3, #21]
 800553e:	2302      	movs	r3, #2
 8005540:	e0f2      	b.n	8005728 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d104      	bne.n	8005554 <f_write+0x10e>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	755a      	strb	r2, [r3, #21]
 8005550:	2301      	movs	r3, #1
 8005552:	e0e9      	b.n	8005728 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005558:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <f_write+0x122>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005566:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	7d1b      	ldrb	r3, [r3, #20]
 800556c:	b25b      	sxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	da18      	bge.n	80055a4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	7858      	ldrb	r0, [r3, #1]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	2301      	movs	r3, #1
 8005582:	f7fd ff3f 	bl	8003404 <disk_write>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <f_write+0x150>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	755a      	strb	r2, [r3, #21]
 8005592:	2301      	movs	r3, #1
 8005594:	e0c8      	b.n	8005728 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	7d1b      	ldrb	r3, [r3, #20]
 800559a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	4619      	mov	r1, r3
 80055ac:	4610      	mov	r0, r2
 80055ae:	f7fe fab3 	bl	8003b18 <clust2sect>
 80055b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <f_write+0x17e>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2202      	movs	r2, #2
 80055be:	755a      	strb	r2, [r3, #21]
 80055c0:	2302      	movs	r3, #2
 80055c2:	e0b1      	b.n	8005728 <f_write+0x2e2>
			sect += csect;
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	4413      	add	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	0a5b      	lsrs	r3, r3, #9
 80055d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d03c      	beq.n	8005652 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	4413      	add	r3, r2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	8952      	ldrh	r2, [r2, #10]
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d905      	bls.n	80055f2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	895b      	ldrh	r3, [r3, #10]
 80055ea:	461a      	mov	r2, r3
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	7858      	ldrb	r0, [r3, #1]
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	69f9      	ldr	r1, [r7, #28]
 80055fc:	f7fd ff02 	bl	8003404 <disk_write>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <f_write+0x1ca>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	755a      	strb	r2, [r3, #21]
 800560c:	2301      	movs	r3, #1
 800560e:	e08b      	b.n	8005728 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1a      	ldr	r2, [r3, #32]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	6a3a      	ldr	r2, [r7, #32]
 800561a:	429a      	cmp	r2, r3
 800561c:	d915      	bls.n	800564a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	025b      	lsls	r3, r3, #9
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	4413      	add	r3, r2
 8005632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005636:	4619      	mov	r1, r3
 8005638:	f7fd ffa4 	bl	8003584 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	7d1b      	ldrb	r3, [r3, #20]
 8005640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005644:	b2da      	uxtb	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	025b      	lsls	r3, r3, #9
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005650:	e03f      	b.n	80056d2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	429a      	cmp	r2, r3
 800565a:	d016      	beq.n	800568a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	699a      	ldr	r2, [r3, #24]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005664:	429a      	cmp	r2, r3
 8005666:	d210      	bcs.n	800568a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	7858      	ldrb	r0, [r3, #1]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005672:	2301      	movs	r3, #1
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	f7fd fea5 	bl	80033c4 <disk_read>
 800567a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	755a      	strb	r2, [r3, #21]
 8005686:	2301      	movs	r3, #1
 8005688:	e04e      	b.n	8005728 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005698:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800569e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d901      	bls.n	80056aa <f_write+0x264>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b8:	4413      	add	r3, r2
 80056ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056bc:	69f9      	ldr	r1, [r7, #28]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fd ff60 	bl	8003584 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	7d1b      	ldrb	r3, [r3, #20]
 80056c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	4413      	add	r3, r2
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	619a      	str	r2, [r3, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	bf38      	it	cc
 80056f2:	461a      	movcc	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	441a      	add	r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f47f aed4 	bne.w	80054bc <f_write+0x76>
 8005714:	e000      	b.n	8005718 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005716:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	7d1b      	ldrb	r3, [r3, #20]
 800571c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005720:	b2da      	uxtb	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3730      	adds	r7, #48	; 0x30
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f107 0208 	add.w	r2, r7, #8
 800573e:	4611      	mov	r1, r2
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fb07 	bl	8004d54 <validate>
 8005746:	4603      	mov	r3, r0
 8005748:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d168      	bne.n	8005822 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	7d1b      	ldrb	r3, [r3, #20]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d062      	beq.n	8005822 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	7d1b      	ldrb	r3, [r3, #20]
 8005760:	b25b      	sxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	da15      	bge.n	8005792 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	7858      	ldrb	r0, [r3, #1]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1a      	ldr	r2, [r3, #32]
 8005774:	2301      	movs	r3, #1
 8005776:	f7fd fe45 	bl	8003404 <disk_write>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <f_sync+0x54>
 8005780:	2301      	movs	r3, #1
 8005782:	e04f      	b.n	8005824 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	7d1b      	ldrb	r3, [r3, #20]
 8005788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800578c:	b2da      	uxtb	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005792:	f7fd f895 	bl	80028c0 <get_fattime>
 8005796:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f7fe f91d 	bl	80039e0 <move_window>
 80057a6:	4603      	mov	r3, r0
 80057a8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d138      	bne.n	8005822 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	330b      	adds	r3, #11
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	330b      	adds	r3, #11
 80057c0:	f042 0220 	orr.w	r2, r2, #32
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	461a      	mov	r2, r3
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	f7fe fe2a 	bl	800442c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f103 021c 	add.w	r2, r3, #28
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f7fd fea1 	bl	800352c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3316      	adds	r3, #22
 80057ee:	6939      	ldr	r1, [r7, #16]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fd fe9b 	bl	800352c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3312      	adds	r3, #18
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fd fe7a 	bl	80034f6 <st_word>
					fs->wflag = 1;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2201      	movs	r2, #1
 8005806:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe f916 	bl	8003a3c <sync_fs>
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	7d1b      	ldrb	r3, [r3, #20]
 8005818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581c:	b2da      	uxtb	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005822:	7dfb      	ldrb	r3, [r7, #23]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff ff7b 	bl	8005730 <f_sync>
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d118      	bne.n	8005876 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f107 0208 	add.w	r2, r7, #8
 800584a:	4611      	mov	r1, r2
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff fa81 	bl	8004d54 <validate>
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10c      	bne.n	8005876 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	4618      	mov	r0, r3
 8005862:	f7fe f819 	bl	8003898 <dec_lock>
 8005866:	4603      	mov	r3, r0
 8005868:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	2b0a      	cmp	r3, #10
 8005890:	d103      	bne.n	800589a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005892:	210d      	movs	r1, #13
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fff3 	bl	8005880 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	db25      	blt.n	80058f2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	60fa      	str	r2, [r7, #12]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	4413      	add	r3, r2
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b3c      	cmp	r3, #60	; 0x3c
 80058b8:	dd12      	ble.n	80058e0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f103 010c 	add.w	r1, r3, #12
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	f107 0308 	add.w	r3, r7, #8
 80058ca:	f7ff fdbc 	bl	8005446 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d101      	bne.n	80058da <putc_bfd+0x5a>
 80058d6:	2300      	movs	r3, #0
 80058d8:	e001      	b.n	80058de <putc_bfd+0x5e>
 80058da:	f04f 33ff 	mov.w	r3, #4294967295
 80058de:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]
 80058f0:	e000      	b.n	80058f4 <putc_bfd+0x74>
	if (i < 0) return;
 80058f2:	bf00      	nop
}
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	db16      	blt.n	8005938 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f103 010c 	add.w	r1, r3, #12
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	461a      	mov	r2, r3
 800591a:	f107 030c 	add.w	r3, r7, #12
 800591e:	f7ff fd92 	bl	8005446 <f_write>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d107      	bne.n	8005938 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4293      	cmp	r3, r2
 8005930:	d102      	bne.n	8005938 <putc_flush+0x3e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	e001      	b.n	800593c <putc_flush+0x42>
	return EOF;
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	609a      	str	r2, [r3, #8]
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8005970:	b40e      	push	{r1, r2, r3}
 8005972:	b580      	push	{r7, lr}
 8005974:	b0a7      	sub	sp, #156	; 0x9c
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800597a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff ffdf 	bl	8005944 <putc_init>

	va_start(arp, fmt);
 8005986:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800598a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800598c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800599c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 81f4 	beq.w	8005d8e <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 80059a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80059aa:	2b25      	cmp	r3, #37	; 0x25
 80059ac:	d008      	beq.n	80059c0 <f_printf+0x50>
			putc_bfd(&pb, c);
 80059ae:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80059b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059b6:	4611      	mov	r1, r2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff ff61 	bl	8005880 <putc_bfd>
			continue;
 80059be:	e1e5      	b.n	8005d8c <f_printf+0x41c>
		}
		w = f = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80059c6:	2300      	movs	r3, #0
 80059c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80059cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80059dc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80059e0:	2b30      	cmp	r3, #48	; 0x30
 80059e2:	d10b      	bne.n	80059fc <f_printf+0x8c>
			f = 1; c = *fmt++;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80059ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80059fa:	e024      	b.n	8005a46 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80059fc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005a00:	2b2d      	cmp	r3, #45	; 0x2d
 8005a02:	d120      	bne.n	8005a46 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8005a04:	2302      	movs	r3, #2
 8005a06:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8005a1a:	e014      	b.n	8005a46 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8005a1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005a2e:	4413      	add	r3, r2
 8005a30:	3b30      	subs	r3, #48	; 0x30
 8005a32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8005a36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8005a46:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005a4a:	2b2f      	cmp	r3, #47	; 0x2f
 8005a4c:	d903      	bls.n	8005a56 <f_printf+0xe6>
 8005a4e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005a52:	2b39      	cmp	r3, #57	; 0x39
 8005a54:	d9e2      	bls.n	8005a1c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8005a56:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005a5a:	2b6c      	cmp	r3, #108	; 0x6c
 8005a5c:	d003      	beq.n	8005a66 <f_printf+0xf6>
 8005a5e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005a62:	2b4c      	cmp	r3, #76	; 0x4c
 8005a64:	d10d      	bne.n	8005a82 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8005a66:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005a6a:	f043 0304 	orr.w	r3, r3, #4
 8005a6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8005a82:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8183 	beq.w	8005d92 <f_printf+0x422>
		d = c;
 8005a8c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005a90:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8005a94:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005a98:	2b60      	cmp	r3, #96	; 0x60
 8005a9a:	d908      	bls.n	8005aae <f_printf+0x13e>
 8005a9c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005aa0:	2b7a      	cmp	r3, #122	; 0x7a
 8005aa2:	d804      	bhi.n	8005aae <f_printf+0x13e>
 8005aa4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005aa8:	3b20      	subs	r3, #32
 8005aaa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8005aae:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005ab2:	3b42      	subs	r3, #66	; 0x42
 8005ab4:	2b16      	cmp	r3, #22
 8005ab6:	f200 8098 	bhi.w	8005bea <f_printf+0x27a>
 8005aba:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <f_printf+0x150>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005bcb 	.word	0x08005bcb
 8005ac4:	08005bb3 	.word	0x08005bb3
 8005ac8:	08005bdb 	.word	0x08005bdb
 8005acc:	08005beb 	.word	0x08005beb
 8005ad0:	08005beb 	.word	0x08005beb
 8005ad4:	08005beb 	.word	0x08005beb
 8005ad8:	08005beb 	.word	0x08005beb
 8005adc:	08005beb 	.word	0x08005beb
 8005ae0:	08005beb 	.word	0x08005beb
 8005ae4:	08005beb 	.word	0x08005beb
 8005ae8:	08005beb 	.word	0x08005beb
 8005aec:	08005beb 	.word	0x08005beb
 8005af0:	08005beb 	.word	0x08005beb
 8005af4:	08005bd3 	.word	0x08005bd3
 8005af8:	08005beb 	.word	0x08005beb
 8005afc:	08005beb 	.word	0x08005beb
 8005b00:	08005beb 	.word	0x08005beb
 8005b04:	08005b1d 	.word	0x08005b1d
 8005b08:	08005beb 	.word	0x08005beb
 8005b0c:	08005bdb 	.word	0x08005bdb
 8005b10:	08005beb 	.word	0x08005beb
 8005b14:	08005beb 	.word	0x08005beb
 8005b18:	08005be3 	.word	0x08005be3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8005b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b1e:	1d1a      	adds	r2, r3, #4
 8005b20:	67ba      	str	r2, [r7, #120]	; 0x78
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b2c:	e004      	b.n	8005b38 <f_printf+0x1c8>
 8005b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b32:	3301      	adds	r3, #1
 8005b34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b3e:	4413      	add	r3, r2
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f3      	bne.n	8005b2e <f_printf+0x1be>
			if (!(f & 2)) {
 8005b46:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d11a      	bne.n	8005b88 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8005b52:	e005      	b.n	8005b60 <f_printf+0x1f0>
 8005b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b58:	2120      	movs	r1, #32
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff fe90 	bl	8005880 <putc_bfd>
 8005b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d8f0      	bhi.n	8005b54 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8005b72:	e009      	b.n	8005b88 <f_printf+0x218>
 8005b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b7a:	781a      	ldrb	r2, [r3, #0]
 8005b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b80:	4611      	mov	r1, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff fe7c 	bl	8005880 <putc_bfd>
 8005b88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f1      	bne.n	8005b74 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8005b90:	e005      	b.n	8005b9e <f_printf+0x22e>
 8005b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b96:	2120      	movs	r1, #32
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff fe71 	bl	8005880 <putc_bfd>
 8005b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ba8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d8f0      	bhi.n	8005b92 <f_printf+0x222>
			continue;
 8005bb0:	e0ec      	b.n	8005d8c <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8005bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb4:	1d1a      	adds	r2, r3, #4
 8005bb6:	67ba      	str	r2, [r7, #120]	; 0x78
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fe5c 	bl	8005880 <putc_bfd>
 8005bc8:	e0e0      	b.n	8005d8c <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8005bd0:	e014      	b.n	8005bfc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8005bd8:	e010      	b.n	8005bfc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8005bda:	230a      	movs	r3, #10
 8005bdc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8005be0:	e00c      	b.n	8005bfc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8005be2:	2310      	movs	r3, #16
 8005be4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8005be8:	e008      	b.n	8005bfc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8005bea:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8005bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fe43 	bl	8005880 <putc_bfd>
 8005bfa:	e0c7      	b.n	8005d8c <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005bfc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <f_printf+0x2a2>
 8005c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	67ba      	str	r2, [r7, #120]	; 0x78
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	e00c      	b.n	8005c2c <f_printf+0x2bc>
 8005c12:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005c16:	2b44      	cmp	r3, #68	; 0x44
 8005c18:	d104      	bne.n	8005c24 <f_printf+0x2b4>
 8005c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c1c:	1d1a      	adds	r2, r3, #4
 8005c1e:	67ba      	str	r2, [r7, #120]	; 0x78
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	e003      	b.n	8005c2c <f_printf+0x2bc>
 8005c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	67ba      	str	r2, [r7, #120]	; 0x78
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8005c30:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005c34:	2b44      	cmp	r3, #68	; 0x44
 8005c36:	d10e      	bne.n	8005c56 <f_printf+0x2e6>
 8005c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	da0a      	bge.n	8005c56 <f_printf+0x2e6>
			v = 0 - v;
 8005c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c44:	425b      	negs	r3, r3
 8005c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8005c4a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005c4e:	f043 0308 	orr.w	r3, r3, #8
 8005c52:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8005c5c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8005c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c64:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c68:	fb02 f201 	mul.w	r2, r2, r1
 8005c6c:	1a9b      	subs	r3, r3, r2
 8005c6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8005c72:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8005c76:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8005c82:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005c86:	2b09      	cmp	r3, #9
 8005c88:	d90b      	bls.n	8005ca2 <f_printf+0x332>
 8005c8a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005c8e:	2b78      	cmp	r3, #120	; 0x78
 8005c90:	d101      	bne.n	8005c96 <f_printf+0x326>
 8005c92:	2227      	movs	r2, #39	; 0x27
 8005c94:	e000      	b.n	8005c98 <f_printf+0x328>
 8005c96:	2207      	movs	r2, #7
 8005c98:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8005ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005cac:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8005cb0:	3230      	adds	r2, #48	; 0x30
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8005cb8:	440b      	add	r3, r1
 8005cba:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8005cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <f_printf+0x35e>
 8005cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cca:	2b1f      	cmp	r3, #31
 8005ccc:	d9c6      	bls.n	8005c5c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8005cce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <f_printf+0x380>
 8005cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005ce4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8005ce8:	4413      	add	r3, r2
 8005cea:	222d      	movs	r2, #45	; 0x2d
 8005cec:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8005cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005cf8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <f_printf+0x398>
 8005d04:	2330      	movs	r3, #48	; 0x30
 8005d06:	e000      	b.n	8005d0a <f_printf+0x39a>
 8005d08:	2320      	movs	r3, #32
 8005d0a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005d0e:	e007      	b.n	8005d20 <f_printf+0x3b0>
 8005d10:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8005d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d18:	4611      	mov	r1, r2
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fdb0 	bl	8005880 <putc_bfd>
 8005d20:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d108      	bne.n	8005d3e <f_printf+0x3ce>
 8005d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d36:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d8e8      	bhi.n	8005d10 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8005d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d42:	3b01      	subs	r3, #1
 8005d44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d48:	f107 020c 	add.w	r2, r7, #12
 8005d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d50:	4413      	add	r3, r2
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fd90 	bl	8005880 <putc_bfd>
		} while (i);
 8005d60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1ea      	bne.n	8005d3e <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8005d68:	e007      	b.n	8005d7a <f_printf+0x40a>
 8005d6a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8005d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fd83 	bl	8005880 <putc_bfd>
 8005d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d84:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d8ee      	bhi.n	8005d6a <f_printf+0x3fa>
		c = *fmt++;
 8005d8c:	e5fe      	b.n	800598c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <f_printf+0x424>
		if (!c) break;
 8005d92:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8005d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fdae 	bl	80058fa <putc_flush>
 8005d9e:	4603      	mov	r3, r0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	379c      	adds	r7, #156	; 0x9c
 8005da4:	46bd      	mov	sp, r7
 8005da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005daa:	b003      	add	sp, #12
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop

08005db0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005dc6:	4b1f      	ldr	r3, [pc, #124]	; (8005e44 <FATFS_LinkDriverEx+0x94>)
 8005dc8:	7a5b      	ldrb	r3, [r3, #9]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d131      	bne.n	8005e34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005dd0:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <FATFS_LinkDriverEx+0x94>)
 8005dd2:	7a5b      	ldrb	r3, [r3, #9]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	4b1a      	ldr	r3, [pc, #104]	; (8005e44 <FATFS_LinkDriverEx+0x94>)
 8005dda:	2100      	movs	r1, #0
 8005ddc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005dde:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <FATFS_LinkDriverEx+0x94>)
 8005de0:	7a5b      	ldrb	r3, [r3, #9]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <FATFS_LinkDriverEx+0x94>)
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005dee:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <FATFS_LinkDriverEx+0x94>)
 8005df0:	7a5b      	ldrb	r3, [r3, #9]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <FATFS_LinkDriverEx+0x94>)
 8005df8:	4413      	add	r3, r2
 8005dfa:	79fa      	ldrb	r2, [r7, #7]
 8005dfc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005dfe:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <FATFS_LinkDriverEx+0x94>)
 8005e00:	7a5b      	ldrb	r3, [r3, #9]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	b2d1      	uxtb	r1, r2
 8005e08:	4a0e      	ldr	r2, [pc, #56]	; (8005e44 <FATFS_LinkDriverEx+0x94>)
 8005e0a:	7251      	strb	r1, [r2, #9]
 8005e0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005e0e:	7dbb      	ldrb	r3, [r7, #22]
 8005e10:	3330      	adds	r3, #48	; 0x30
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	223a      	movs	r2, #58	; 0x3a
 8005e1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	3302      	adds	r3, #2
 8005e24:	222f      	movs	r2, #47	; 0x2f
 8005e26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	3303      	adds	r3, #3
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	200000d4 	.word	0x200000d4

08005e48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005e52:	2200      	movs	r2, #0
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff ffaa 	bl	8005db0 <FATFS_LinkDriverEx>
 8005e5c:	4603      	mov	r3, r0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <__errno>:
 8005e68:	4b01      	ldr	r3, [pc, #4]	; (8005e70 <__errno+0x8>)
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000024 	.word	0x20000024

08005e74 <__libc_init_array>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	4d0d      	ldr	r5, [pc, #52]	; (8005eac <__libc_init_array+0x38>)
 8005e78:	4c0d      	ldr	r4, [pc, #52]	; (8005eb0 <__libc_init_array+0x3c>)
 8005e7a:	1b64      	subs	r4, r4, r5
 8005e7c:	10a4      	asrs	r4, r4, #2
 8005e7e:	2600      	movs	r6, #0
 8005e80:	42a6      	cmp	r6, r4
 8005e82:	d109      	bne.n	8005e98 <__libc_init_array+0x24>
 8005e84:	4d0b      	ldr	r5, [pc, #44]	; (8005eb4 <__libc_init_array+0x40>)
 8005e86:	4c0c      	ldr	r4, [pc, #48]	; (8005eb8 <__libc_init_array+0x44>)
 8005e88:	f000 fc4e 	bl	8006728 <_init>
 8005e8c:	1b64      	subs	r4, r4, r5
 8005e8e:	10a4      	asrs	r4, r4, #2
 8005e90:	2600      	movs	r6, #0
 8005e92:	42a6      	cmp	r6, r4
 8005e94:	d105      	bne.n	8005ea2 <__libc_init_array+0x2e>
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9c:	4798      	blx	r3
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7ee      	b.n	8005e80 <__libc_init_array+0xc>
 8005ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea6:	4798      	blx	r3
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	e7f2      	b.n	8005e92 <__libc_init_array+0x1e>
 8005eac:	0800690c 	.word	0x0800690c
 8005eb0:	0800690c 	.word	0x0800690c
 8005eb4:	0800690c 	.word	0x0800690c
 8005eb8:	08006910 	.word	0x08006910

08005ebc <memset>:
 8005ebc:	4402      	add	r2, r0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d100      	bne.n	8005ec6 <memset+0xa>
 8005ec4:	4770      	bx	lr
 8005ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eca:	e7f9      	b.n	8005ec0 <memset+0x4>

08005ecc <siprintf>:
 8005ecc:	b40e      	push	{r1, r2, r3}
 8005ece:	b500      	push	{lr}
 8005ed0:	b09c      	sub	sp, #112	; 0x70
 8005ed2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ed4:	9002      	str	r0, [sp, #8]
 8005ed6:	9006      	str	r0, [sp, #24]
 8005ed8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005edc:	4809      	ldr	r0, [pc, #36]	; (8005f04 <siprintf+0x38>)
 8005ede:	9107      	str	r1, [sp, #28]
 8005ee0:	9104      	str	r1, [sp, #16]
 8005ee2:	4909      	ldr	r1, [pc, #36]	; (8005f08 <siprintf+0x3c>)
 8005ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ee8:	9105      	str	r1, [sp, #20]
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	a902      	add	r1, sp, #8
 8005ef0:	f000 f868 	bl	8005fc4 <_svfiprintf_r>
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	b01c      	add	sp, #112	; 0x70
 8005efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f00:	b003      	add	sp, #12
 8005f02:	4770      	bx	lr
 8005f04:	20000024 	.word	0x20000024
 8005f08:	ffff0208 	.word	0xffff0208

08005f0c <__ssputs_r>:
 8005f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f10:	688e      	ldr	r6, [r1, #8]
 8005f12:	429e      	cmp	r6, r3
 8005f14:	4682      	mov	sl, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	4690      	mov	r8, r2
 8005f1a:	461f      	mov	r7, r3
 8005f1c:	d838      	bhi.n	8005f90 <__ssputs_r+0x84>
 8005f1e:	898a      	ldrh	r2, [r1, #12]
 8005f20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f24:	d032      	beq.n	8005f8c <__ssputs_r+0x80>
 8005f26:	6825      	ldr	r5, [r4, #0]
 8005f28:	6909      	ldr	r1, [r1, #16]
 8005f2a:	eba5 0901 	sub.w	r9, r5, r1
 8005f2e:	6965      	ldr	r5, [r4, #20]
 8005f30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f38:	3301      	adds	r3, #1
 8005f3a:	444b      	add	r3, r9
 8005f3c:	106d      	asrs	r5, r5, #1
 8005f3e:	429d      	cmp	r5, r3
 8005f40:	bf38      	it	cc
 8005f42:	461d      	movcc	r5, r3
 8005f44:	0553      	lsls	r3, r2, #21
 8005f46:	d531      	bpl.n	8005fac <__ssputs_r+0xa0>
 8005f48:	4629      	mov	r1, r5
 8005f4a:	f000 fb47 	bl	80065dc <_malloc_r>
 8005f4e:	4606      	mov	r6, r0
 8005f50:	b950      	cbnz	r0, 8005f68 <__ssputs_r+0x5c>
 8005f52:	230c      	movs	r3, #12
 8005f54:	f8ca 3000 	str.w	r3, [sl]
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295
 8005f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f68:	6921      	ldr	r1, [r4, #16]
 8005f6a:	464a      	mov	r2, r9
 8005f6c:	f000 fabe 	bl	80064ec <memcpy>
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	6126      	str	r6, [r4, #16]
 8005f7e:	6165      	str	r5, [r4, #20]
 8005f80:	444e      	add	r6, r9
 8005f82:	eba5 0509 	sub.w	r5, r5, r9
 8005f86:	6026      	str	r6, [r4, #0]
 8005f88:	60a5      	str	r5, [r4, #8]
 8005f8a:	463e      	mov	r6, r7
 8005f8c:	42be      	cmp	r6, r7
 8005f8e:	d900      	bls.n	8005f92 <__ssputs_r+0x86>
 8005f90:	463e      	mov	r6, r7
 8005f92:	4632      	mov	r2, r6
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	4641      	mov	r1, r8
 8005f98:	f000 fab6 	bl	8006508 <memmove>
 8005f9c:	68a3      	ldr	r3, [r4, #8]
 8005f9e:	6822      	ldr	r2, [r4, #0]
 8005fa0:	1b9b      	subs	r3, r3, r6
 8005fa2:	4432      	add	r2, r6
 8005fa4:	60a3      	str	r3, [r4, #8]
 8005fa6:	6022      	str	r2, [r4, #0]
 8005fa8:	2000      	movs	r0, #0
 8005faa:	e7db      	b.n	8005f64 <__ssputs_r+0x58>
 8005fac:	462a      	mov	r2, r5
 8005fae:	f000 fb6f 	bl	8006690 <_realloc_r>
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d1e1      	bne.n	8005f7c <__ssputs_r+0x70>
 8005fb8:	6921      	ldr	r1, [r4, #16]
 8005fba:	4650      	mov	r0, sl
 8005fbc:	f000 fabe 	bl	800653c <_free_r>
 8005fc0:	e7c7      	b.n	8005f52 <__ssputs_r+0x46>
	...

08005fc4 <_svfiprintf_r>:
 8005fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc8:	4698      	mov	r8, r3
 8005fca:	898b      	ldrh	r3, [r1, #12]
 8005fcc:	061b      	lsls	r3, r3, #24
 8005fce:	b09d      	sub	sp, #116	; 0x74
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	460d      	mov	r5, r1
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	d50e      	bpl.n	8005ff6 <_svfiprintf_r+0x32>
 8005fd8:	690b      	ldr	r3, [r1, #16]
 8005fda:	b963      	cbnz	r3, 8005ff6 <_svfiprintf_r+0x32>
 8005fdc:	2140      	movs	r1, #64	; 0x40
 8005fde:	f000 fafd 	bl	80065dc <_malloc_r>
 8005fe2:	6028      	str	r0, [r5, #0]
 8005fe4:	6128      	str	r0, [r5, #16]
 8005fe6:	b920      	cbnz	r0, 8005ff2 <_svfiprintf_r+0x2e>
 8005fe8:	230c      	movs	r3, #12
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff0:	e0d1      	b.n	8006196 <_svfiprintf_r+0x1d2>
 8005ff2:	2340      	movs	r3, #64	; 0x40
 8005ff4:	616b      	str	r3, [r5, #20]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffa:	2320      	movs	r3, #32
 8005ffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006000:	f8cd 800c 	str.w	r8, [sp, #12]
 8006004:	2330      	movs	r3, #48	; 0x30
 8006006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061b0 <_svfiprintf_r+0x1ec>
 800600a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800600e:	f04f 0901 	mov.w	r9, #1
 8006012:	4623      	mov	r3, r4
 8006014:	469a      	mov	sl, r3
 8006016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800601a:	b10a      	cbz	r2, 8006020 <_svfiprintf_r+0x5c>
 800601c:	2a25      	cmp	r2, #37	; 0x25
 800601e:	d1f9      	bne.n	8006014 <_svfiprintf_r+0x50>
 8006020:	ebba 0b04 	subs.w	fp, sl, r4
 8006024:	d00b      	beq.n	800603e <_svfiprintf_r+0x7a>
 8006026:	465b      	mov	r3, fp
 8006028:	4622      	mov	r2, r4
 800602a:	4629      	mov	r1, r5
 800602c:	4638      	mov	r0, r7
 800602e:	f7ff ff6d 	bl	8005f0c <__ssputs_r>
 8006032:	3001      	adds	r0, #1
 8006034:	f000 80aa 	beq.w	800618c <_svfiprintf_r+0x1c8>
 8006038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800603a:	445a      	add	r2, fp
 800603c:	9209      	str	r2, [sp, #36]	; 0x24
 800603e:	f89a 3000 	ldrb.w	r3, [sl]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 80a2 	beq.w	800618c <_svfiprintf_r+0x1c8>
 8006048:	2300      	movs	r3, #0
 800604a:	f04f 32ff 	mov.w	r2, #4294967295
 800604e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006052:	f10a 0a01 	add.w	sl, sl, #1
 8006056:	9304      	str	r3, [sp, #16]
 8006058:	9307      	str	r3, [sp, #28]
 800605a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800605e:	931a      	str	r3, [sp, #104]	; 0x68
 8006060:	4654      	mov	r4, sl
 8006062:	2205      	movs	r2, #5
 8006064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006068:	4851      	ldr	r0, [pc, #324]	; (80061b0 <_svfiprintf_r+0x1ec>)
 800606a:	f7fa f8b9 	bl	80001e0 <memchr>
 800606e:	9a04      	ldr	r2, [sp, #16]
 8006070:	b9d8      	cbnz	r0, 80060aa <_svfiprintf_r+0xe6>
 8006072:	06d0      	lsls	r0, r2, #27
 8006074:	bf44      	itt	mi
 8006076:	2320      	movmi	r3, #32
 8006078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800607c:	0711      	lsls	r1, r2, #28
 800607e:	bf44      	itt	mi
 8006080:	232b      	movmi	r3, #43	; 0x2b
 8006082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006086:	f89a 3000 	ldrb.w	r3, [sl]
 800608a:	2b2a      	cmp	r3, #42	; 0x2a
 800608c:	d015      	beq.n	80060ba <_svfiprintf_r+0xf6>
 800608e:	9a07      	ldr	r2, [sp, #28]
 8006090:	4654      	mov	r4, sl
 8006092:	2000      	movs	r0, #0
 8006094:	f04f 0c0a 	mov.w	ip, #10
 8006098:	4621      	mov	r1, r4
 800609a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800609e:	3b30      	subs	r3, #48	; 0x30
 80060a0:	2b09      	cmp	r3, #9
 80060a2:	d94e      	bls.n	8006142 <_svfiprintf_r+0x17e>
 80060a4:	b1b0      	cbz	r0, 80060d4 <_svfiprintf_r+0x110>
 80060a6:	9207      	str	r2, [sp, #28]
 80060a8:	e014      	b.n	80060d4 <_svfiprintf_r+0x110>
 80060aa:	eba0 0308 	sub.w	r3, r0, r8
 80060ae:	fa09 f303 	lsl.w	r3, r9, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	46a2      	mov	sl, r4
 80060b8:	e7d2      	b.n	8006060 <_svfiprintf_r+0x9c>
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	1d19      	adds	r1, r3, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	9103      	str	r1, [sp, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bfbb      	ittet	lt
 80060c6:	425b      	neglt	r3, r3
 80060c8:	f042 0202 	orrlt.w	r2, r2, #2
 80060cc:	9307      	strge	r3, [sp, #28]
 80060ce:	9307      	strlt	r3, [sp, #28]
 80060d0:	bfb8      	it	lt
 80060d2:	9204      	strlt	r2, [sp, #16]
 80060d4:	7823      	ldrb	r3, [r4, #0]
 80060d6:	2b2e      	cmp	r3, #46	; 0x2e
 80060d8:	d10c      	bne.n	80060f4 <_svfiprintf_r+0x130>
 80060da:	7863      	ldrb	r3, [r4, #1]
 80060dc:	2b2a      	cmp	r3, #42	; 0x2a
 80060de:	d135      	bne.n	800614c <_svfiprintf_r+0x188>
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	1d1a      	adds	r2, r3, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	9203      	str	r2, [sp, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bfb8      	it	lt
 80060ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80060f0:	3402      	adds	r4, #2
 80060f2:	9305      	str	r3, [sp, #20]
 80060f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061c0 <_svfiprintf_r+0x1fc>
 80060f8:	7821      	ldrb	r1, [r4, #0]
 80060fa:	2203      	movs	r2, #3
 80060fc:	4650      	mov	r0, sl
 80060fe:	f7fa f86f 	bl	80001e0 <memchr>
 8006102:	b140      	cbz	r0, 8006116 <_svfiprintf_r+0x152>
 8006104:	2340      	movs	r3, #64	; 0x40
 8006106:	eba0 000a 	sub.w	r0, r0, sl
 800610a:	fa03 f000 	lsl.w	r0, r3, r0
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	4303      	orrs	r3, r0
 8006112:	3401      	adds	r4, #1
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611a:	4826      	ldr	r0, [pc, #152]	; (80061b4 <_svfiprintf_r+0x1f0>)
 800611c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006120:	2206      	movs	r2, #6
 8006122:	f7fa f85d 	bl	80001e0 <memchr>
 8006126:	2800      	cmp	r0, #0
 8006128:	d038      	beq.n	800619c <_svfiprintf_r+0x1d8>
 800612a:	4b23      	ldr	r3, [pc, #140]	; (80061b8 <_svfiprintf_r+0x1f4>)
 800612c:	bb1b      	cbnz	r3, 8006176 <_svfiprintf_r+0x1b2>
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	3307      	adds	r3, #7
 8006132:	f023 0307 	bic.w	r3, r3, #7
 8006136:	3308      	adds	r3, #8
 8006138:	9303      	str	r3, [sp, #12]
 800613a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613c:	4433      	add	r3, r6
 800613e:	9309      	str	r3, [sp, #36]	; 0x24
 8006140:	e767      	b.n	8006012 <_svfiprintf_r+0x4e>
 8006142:	fb0c 3202 	mla	r2, ip, r2, r3
 8006146:	460c      	mov	r4, r1
 8006148:	2001      	movs	r0, #1
 800614a:	e7a5      	b.n	8006098 <_svfiprintf_r+0xd4>
 800614c:	2300      	movs	r3, #0
 800614e:	3401      	adds	r4, #1
 8006150:	9305      	str	r3, [sp, #20]
 8006152:	4619      	mov	r1, r3
 8006154:	f04f 0c0a 	mov.w	ip, #10
 8006158:	4620      	mov	r0, r4
 800615a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800615e:	3a30      	subs	r2, #48	; 0x30
 8006160:	2a09      	cmp	r2, #9
 8006162:	d903      	bls.n	800616c <_svfiprintf_r+0x1a8>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0c5      	beq.n	80060f4 <_svfiprintf_r+0x130>
 8006168:	9105      	str	r1, [sp, #20]
 800616a:	e7c3      	b.n	80060f4 <_svfiprintf_r+0x130>
 800616c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006170:	4604      	mov	r4, r0
 8006172:	2301      	movs	r3, #1
 8006174:	e7f0      	b.n	8006158 <_svfiprintf_r+0x194>
 8006176:	ab03      	add	r3, sp, #12
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	462a      	mov	r2, r5
 800617c:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <_svfiprintf_r+0x1f8>)
 800617e:	a904      	add	r1, sp, #16
 8006180:	4638      	mov	r0, r7
 8006182:	f3af 8000 	nop.w
 8006186:	1c42      	adds	r2, r0, #1
 8006188:	4606      	mov	r6, r0
 800618a:	d1d6      	bne.n	800613a <_svfiprintf_r+0x176>
 800618c:	89ab      	ldrh	r3, [r5, #12]
 800618e:	065b      	lsls	r3, r3, #25
 8006190:	f53f af2c 	bmi.w	8005fec <_svfiprintf_r+0x28>
 8006194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006196:	b01d      	add	sp, #116	; 0x74
 8006198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619c:	ab03      	add	r3, sp, #12
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	462a      	mov	r2, r5
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <_svfiprintf_r+0x1f8>)
 80061a4:	a904      	add	r1, sp, #16
 80061a6:	4638      	mov	r0, r7
 80061a8:	f000 f87a 	bl	80062a0 <_printf_i>
 80061ac:	e7eb      	b.n	8006186 <_svfiprintf_r+0x1c2>
 80061ae:	bf00      	nop
 80061b0:	080068d0 	.word	0x080068d0
 80061b4:	080068da 	.word	0x080068da
 80061b8:	00000000 	.word	0x00000000
 80061bc:	08005f0d 	.word	0x08005f0d
 80061c0:	080068d6 	.word	0x080068d6

080061c4 <_printf_common>:
 80061c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	4616      	mov	r6, r2
 80061ca:	4699      	mov	r9, r3
 80061cc:	688a      	ldr	r2, [r1, #8]
 80061ce:	690b      	ldr	r3, [r1, #16]
 80061d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bfb8      	it	lt
 80061d8:	4613      	movlt	r3, r2
 80061da:	6033      	str	r3, [r6, #0]
 80061dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061e0:	4607      	mov	r7, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	b10a      	cbz	r2, 80061ea <_printf_common+0x26>
 80061e6:	3301      	adds	r3, #1
 80061e8:	6033      	str	r3, [r6, #0]
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	0699      	lsls	r1, r3, #26
 80061ee:	bf42      	ittt	mi
 80061f0:	6833      	ldrmi	r3, [r6, #0]
 80061f2:	3302      	addmi	r3, #2
 80061f4:	6033      	strmi	r3, [r6, #0]
 80061f6:	6825      	ldr	r5, [r4, #0]
 80061f8:	f015 0506 	ands.w	r5, r5, #6
 80061fc:	d106      	bne.n	800620c <_printf_common+0x48>
 80061fe:	f104 0a19 	add.w	sl, r4, #25
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	6832      	ldr	r2, [r6, #0]
 8006206:	1a9b      	subs	r3, r3, r2
 8006208:	42ab      	cmp	r3, r5
 800620a:	dc26      	bgt.n	800625a <_printf_common+0x96>
 800620c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006210:	1e13      	subs	r3, r2, #0
 8006212:	6822      	ldr	r2, [r4, #0]
 8006214:	bf18      	it	ne
 8006216:	2301      	movne	r3, #1
 8006218:	0692      	lsls	r2, r2, #26
 800621a:	d42b      	bmi.n	8006274 <_printf_common+0xb0>
 800621c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006220:	4649      	mov	r1, r9
 8006222:	4638      	mov	r0, r7
 8006224:	47c0      	blx	r8
 8006226:	3001      	adds	r0, #1
 8006228:	d01e      	beq.n	8006268 <_printf_common+0xa4>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	68e5      	ldr	r5, [r4, #12]
 800622e:	6832      	ldr	r2, [r6, #0]
 8006230:	f003 0306 	and.w	r3, r3, #6
 8006234:	2b04      	cmp	r3, #4
 8006236:	bf08      	it	eq
 8006238:	1aad      	subeq	r5, r5, r2
 800623a:	68a3      	ldr	r3, [r4, #8]
 800623c:	6922      	ldr	r2, [r4, #16]
 800623e:	bf0c      	ite	eq
 8006240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006244:	2500      	movne	r5, #0
 8006246:	4293      	cmp	r3, r2
 8006248:	bfc4      	itt	gt
 800624a:	1a9b      	subgt	r3, r3, r2
 800624c:	18ed      	addgt	r5, r5, r3
 800624e:	2600      	movs	r6, #0
 8006250:	341a      	adds	r4, #26
 8006252:	42b5      	cmp	r5, r6
 8006254:	d11a      	bne.n	800628c <_printf_common+0xc8>
 8006256:	2000      	movs	r0, #0
 8006258:	e008      	b.n	800626c <_printf_common+0xa8>
 800625a:	2301      	movs	r3, #1
 800625c:	4652      	mov	r2, sl
 800625e:	4649      	mov	r1, r9
 8006260:	4638      	mov	r0, r7
 8006262:	47c0      	blx	r8
 8006264:	3001      	adds	r0, #1
 8006266:	d103      	bne.n	8006270 <_printf_common+0xac>
 8006268:	f04f 30ff 	mov.w	r0, #4294967295
 800626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006270:	3501      	adds	r5, #1
 8006272:	e7c6      	b.n	8006202 <_printf_common+0x3e>
 8006274:	18e1      	adds	r1, r4, r3
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	2030      	movs	r0, #48	; 0x30
 800627a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800627e:	4422      	add	r2, r4
 8006280:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006288:	3302      	adds	r3, #2
 800628a:	e7c7      	b.n	800621c <_printf_common+0x58>
 800628c:	2301      	movs	r3, #1
 800628e:	4622      	mov	r2, r4
 8006290:	4649      	mov	r1, r9
 8006292:	4638      	mov	r0, r7
 8006294:	47c0      	blx	r8
 8006296:	3001      	adds	r0, #1
 8006298:	d0e6      	beq.n	8006268 <_printf_common+0xa4>
 800629a:	3601      	adds	r6, #1
 800629c:	e7d9      	b.n	8006252 <_printf_common+0x8e>
	...

080062a0 <_printf_i>:
 80062a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a4:	460c      	mov	r4, r1
 80062a6:	4691      	mov	r9, r2
 80062a8:	7e27      	ldrb	r7, [r4, #24]
 80062aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062ac:	2f78      	cmp	r7, #120	; 0x78
 80062ae:	4680      	mov	r8, r0
 80062b0:	469a      	mov	sl, r3
 80062b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062b6:	d807      	bhi.n	80062c8 <_printf_i+0x28>
 80062b8:	2f62      	cmp	r7, #98	; 0x62
 80062ba:	d80a      	bhi.n	80062d2 <_printf_i+0x32>
 80062bc:	2f00      	cmp	r7, #0
 80062be:	f000 80d8 	beq.w	8006472 <_printf_i+0x1d2>
 80062c2:	2f58      	cmp	r7, #88	; 0x58
 80062c4:	f000 80a3 	beq.w	800640e <_printf_i+0x16e>
 80062c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062d0:	e03a      	b.n	8006348 <_printf_i+0xa8>
 80062d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062d6:	2b15      	cmp	r3, #21
 80062d8:	d8f6      	bhi.n	80062c8 <_printf_i+0x28>
 80062da:	a001      	add	r0, pc, #4	; (adr r0, 80062e0 <_printf_i+0x40>)
 80062dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80062e0:	08006339 	.word	0x08006339
 80062e4:	0800634d 	.word	0x0800634d
 80062e8:	080062c9 	.word	0x080062c9
 80062ec:	080062c9 	.word	0x080062c9
 80062f0:	080062c9 	.word	0x080062c9
 80062f4:	080062c9 	.word	0x080062c9
 80062f8:	0800634d 	.word	0x0800634d
 80062fc:	080062c9 	.word	0x080062c9
 8006300:	080062c9 	.word	0x080062c9
 8006304:	080062c9 	.word	0x080062c9
 8006308:	080062c9 	.word	0x080062c9
 800630c:	08006459 	.word	0x08006459
 8006310:	0800637d 	.word	0x0800637d
 8006314:	0800643b 	.word	0x0800643b
 8006318:	080062c9 	.word	0x080062c9
 800631c:	080062c9 	.word	0x080062c9
 8006320:	0800647b 	.word	0x0800647b
 8006324:	080062c9 	.word	0x080062c9
 8006328:	0800637d 	.word	0x0800637d
 800632c:	080062c9 	.word	0x080062c9
 8006330:	080062c9 	.word	0x080062c9
 8006334:	08006443 	.word	0x08006443
 8006338:	680b      	ldr	r3, [r1, #0]
 800633a:	1d1a      	adds	r2, r3, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	600a      	str	r2, [r1, #0]
 8006340:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006348:	2301      	movs	r3, #1
 800634a:	e0a3      	b.n	8006494 <_printf_i+0x1f4>
 800634c:	6825      	ldr	r5, [r4, #0]
 800634e:	6808      	ldr	r0, [r1, #0]
 8006350:	062e      	lsls	r6, r5, #24
 8006352:	f100 0304 	add.w	r3, r0, #4
 8006356:	d50a      	bpl.n	800636e <_printf_i+0xce>
 8006358:	6805      	ldr	r5, [r0, #0]
 800635a:	600b      	str	r3, [r1, #0]
 800635c:	2d00      	cmp	r5, #0
 800635e:	da03      	bge.n	8006368 <_printf_i+0xc8>
 8006360:	232d      	movs	r3, #45	; 0x2d
 8006362:	426d      	negs	r5, r5
 8006364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006368:	485e      	ldr	r0, [pc, #376]	; (80064e4 <_printf_i+0x244>)
 800636a:	230a      	movs	r3, #10
 800636c:	e019      	b.n	80063a2 <_printf_i+0x102>
 800636e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006372:	6805      	ldr	r5, [r0, #0]
 8006374:	600b      	str	r3, [r1, #0]
 8006376:	bf18      	it	ne
 8006378:	b22d      	sxthne	r5, r5
 800637a:	e7ef      	b.n	800635c <_printf_i+0xbc>
 800637c:	680b      	ldr	r3, [r1, #0]
 800637e:	6825      	ldr	r5, [r4, #0]
 8006380:	1d18      	adds	r0, r3, #4
 8006382:	6008      	str	r0, [r1, #0]
 8006384:	0628      	lsls	r0, r5, #24
 8006386:	d501      	bpl.n	800638c <_printf_i+0xec>
 8006388:	681d      	ldr	r5, [r3, #0]
 800638a:	e002      	b.n	8006392 <_printf_i+0xf2>
 800638c:	0669      	lsls	r1, r5, #25
 800638e:	d5fb      	bpl.n	8006388 <_printf_i+0xe8>
 8006390:	881d      	ldrh	r5, [r3, #0]
 8006392:	4854      	ldr	r0, [pc, #336]	; (80064e4 <_printf_i+0x244>)
 8006394:	2f6f      	cmp	r7, #111	; 0x6f
 8006396:	bf0c      	ite	eq
 8006398:	2308      	moveq	r3, #8
 800639a:	230a      	movne	r3, #10
 800639c:	2100      	movs	r1, #0
 800639e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063a2:	6866      	ldr	r6, [r4, #4]
 80063a4:	60a6      	str	r6, [r4, #8]
 80063a6:	2e00      	cmp	r6, #0
 80063a8:	bfa2      	ittt	ge
 80063aa:	6821      	ldrge	r1, [r4, #0]
 80063ac:	f021 0104 	bicge.w	r1, r1, #4
 80063b0:	6021      	strge	r1, [r4, #0]
 80063b2:	b90d      	cbnz	r5, 80063b8 <_printf_i+0x118>
 80063b4:	2e00      	cmp	r6, #0
 80063b6:	d04d      	beq.n	8006454 <_printf_i+0x1b4>
 80063b8:	4616      	mov	r6, r2
 80063ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80063be:	fb03 5711 	mls	r7, r3, r1, r5
 80063c2:	5dc7      	ldrb	r7, [r0, r7]
 80063c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063c8:	462f      	mov	r7, r5
 80063ca:	42bb      	cmp	r3, r7
 80063cc:	460d      	mov	r5, r1
 80063ce:	d9f4      	bls.n	80063ba <_printf_i+0x11a>
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d10b      	bne.n	80063ec <_printf_i+0x14c>
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	07df      	lsls	r7, r3, #31
 80063d8:	d508      	bpl.n	80063ec <_printf_i+0x14c>
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	6861      	ldr	r1, [r4, #4]
 80063de:	4299      	cmp	r1, r3
 80063e0:	bfde      	ittt	le
 80063e2:	2330      	movle	r3, #48	; 0x30
 80063e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063ec:	1b92      	subs	r2, r2, r6
 80063ee:	6122      	str	r2, [r4, #16]
 80063f0:	f8cd a000 	str.w	sl, [sp]
 80063f4:	464b      	mov	r3, r9
 80063f6:	aa03      	add	r2, sp, #12
 80063f8:	4621      	mov	r1, r4
 80063fa:	4640      	mov	r0, r8
 80063fc:	f7ff fee2 	bl	80061c4 <_printf_common>
 8006400:	3001      	adds	r0, #1
 8006402:	d14c      	bne.n	800649e <_printf_i+0x1fe>
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	b004      	add	sp, #16
 800640a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640e:	4835      	ldr	r0, [pc, #212]	; (80064e4 <_printf_i+0x244>)
 8006410:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	680e      	ldr	r6, [r1, #0]
 8006418:	061f      	lsls	r7, r3, #24
 800641a:	f856 5b04 	ldr.w	r5, [r6], #4
 800641e:	600e      	str	r6, [r1, #0]
 8006420:	d514      	bpl.n	800644c <_printf_i+0x1ac>
 8006422:	07d9      	lsls	r1, r3, #31
 8006424:	bf44      	itt	mi
 8006426:	f043 0320 	orrmi.w	r3, r3, #32
 800642a:	6023      	strmi	r3, [r4, #0]
 800642c:	b91d      	cbnz	r5, 8006436 <_printf_i+0x196>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	f023 0320 	bic.w	r3, r3, #32
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	2310      	movs	r3, #16
 8006438:	e7b0      	b.n	800639c <_printf_i+0xfc>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	f043 0320 	orr.w	r3, r3, #32
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	2378      	movs	r3, #120	; 0x78
 8006444:	4828      	ldr	r0, [pc, #160]	; (80064e8 <_printf_i+0x248>)
 8006446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800644a:	e7e3      	b.n	8006414 <_printf_i+0x174>
 800644c:	065e      	lsls	r6, r3, #25
 800644e:	bf48      	it	mi
 8006450:	b2ad      	uxthmi	r5, r5
 8006452:	e7e6      	b.n	8006422 <_printf_i+0x182>
 8006454:	4616      	mov	r6, r2
 8006456:	e7bb      	b.n	80063d0 <_printf_i+0x130>
 8006458:	680b      	ldr	r3, [r1, #0]
 800645a:	6826      	ldr	r6, [r4, #0]
 800645c:	6960      	ldr	r0, [r4, #20]
 800645e:	1d1d      	adds	r5, r3, #4
 8006460:	600d      	str	r5, [r1, #0]
 8006462:	0635      	lsls	r5, r6, #24
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	d501      	bpl.n	800646c <_printf_i+0x1cc>
 8006468:	6018      	str	r0, [r3, #0]
 800646a:	e002      	b.n	8006472 <_printf_i+0x1d2>
 800646c:	0671      	lsls	r1, r6, #25
 800646e:	d5fb      	bpl.n	8006468 <_printf_i+0x1c8>
 8006470:	8018      	strh	r0, [r3, #0]
 8006472:	2300      	movs	r3, #0
 8006474:	6123      	str	r3, [r4, #16]
 8006476:	4616      	mov	r6, r2
 8006478:	e7ba      	b.n	80063f0 <_printf_i+0x150>
 800647a:	680b      	ldr	r3, [r1, #0]
 800647c:	1d1a      	adds	r2, r3, #4
 800647e:	600a      	str	r2, [r1, #0]
 8006480:	681e      	ldr	r6, [r3, #0]
 8006482:	6862      	ldr	r2, [r4, #4]
 8006484:	2100      	movs	r1, #0
 8006486:	4630      	mov	r0, r6
 8006488:	f7f9 feaa 	bl	80001e0 <memchr>
 800648c:	b108      	cbz	r0, 8006492 <_printf_i+0x1f2>
 800648e:	1b80      	subs	r0, r0, r6
 8006490:	6060      	str	r0, [r4, #4]
 8006492:	6863      	ldr	r3, [r4, #4]
 8006494:	6123      	str	r3, [r4, #16]
 8006496:	2300      	movs	r3, #0
 8006498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800649c:	e7a8      	b.n	80063f0 <_printf_i+0x150>
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	4632      	mov	r2, r6
 80064a2:	4649      	mov	r1, r9
 80064a4:	4640      	mov	r0, r8
 80064a6:	47d0      	blx	sl
 80064a8:	3001      	adds	r0, #1
 80064aa:	d0ab      	beq.n	8006404 <_printf_i+0x164>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	079b      	lsls	r3, r3, #30
 80064b0:	d413      	bmi.n	80064da <_printf_i+0x23a>
 80064b2:	68e0      	ldr	r0, [r4, #12]
 80064b4:	9b03      	ldr	r3, [sp, #12]
 80064b6:	4298      	cmp	r0, r3
 80064b8:	bfb8      	it	lt
 80064ba:	4618      	movlt	r0, r3
 80064bc:	e7a4      	b.n	8006408 <_printf_i+0x168>
 80064be:	2301      	movs	r3, #1
 80064c0:	4632      	mov	r2, r6
 80064c2:	4649      	mov	r1, r9
 80064c4:	4640      	mov	r0, r8
 80064c6:	47d0      	blx	sl
 80064c8:	3001      	adds	r0, #1
 80064ca:	d09b      	beq.n	8006404 <_printf_i+0x164>
 80064cc:	3501      	adds	r5, #1
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	9903      	ldr	r1, [sp, #12]
 80064d2:	1a5b      	subs	r3, r3, r1
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	dcf2      	bgt.n	80064be <_printf_i+0x21e>
 80064d8:	e7eb      	b.n	80064b2 <_printf_i+0x212>
 80064da:	2500      	movs	r5, #0
 80064dc:	f104 0619 	add.w	r6, r4, #25
 80064e0:	e7f5      	b.n	80064ce <_printf_i+0x22e>
 80064e2:	bf00      	nop
 80064e4:	080068e1 	.word	0x080068e1
 80064e8:	080068f2 	.word	0x080068f2

080064ec <memcpy>:
 80064ec:	440a      	add	r2, r1
 80064ee:	4291      	cmp	r1, r2
 80064f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064f4:	d100      	bne.n	80064f8 <memcpy+0xc>
 80064f6:	4770      	bx	lr
 80064f8:	b510      	push	{r4, lr}
 80064fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006502:	4291      	cmp	r1, r2
 8006504:	d1f9      	bne.n	80064fa <memcpy+0xe>
 8006506:	bd10      	pop	{r4, pc}

08006508 <memmove>:
 8006508:	4288      	cmp	r0, r1
 800650a:	b510      	push	{r4, lr}
 800650c:	eb01 0402 	add.w	r4, r1, r2
 8006510:	d902      	bls.n	8006518 <memmove+0x10>
 8006512:	4284      	cmp	r4, r0
 8006514:	4623      	mov	r3, r4
 8006516:	d807      	bhi.n	8006528 <memmove+0x20>
 8006518:	1e43      	subs	r3, r0, #1
 800651a:	42a1      	cmp	r1, r4
 800651c:	d008      	beq.n	8006530 <memmove+0x28>
 800651e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006526:	e7f8      	b.n	800651a <memmove+0x12>
 8006528:	4402      	add	r2, r0
 800652a:	4601      	mov	r1, r0
 800652c:	428a      	cmp	r2, r1
 800652e:	d100      	bne.n	8006532 <memmove+0x2a>
 8006530:	bd10      	pop	{r4, pc}
 8006532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800653a:	e7f7      	b.n	800652c <memmove+0x24>

0800653c <_free_r>:
 800653c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800653e:	2900      	cmp	r1, #0
 8006540:	d048      	beq.n	80065d4 <_free_r+0x98>
 8006542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006546:	9001      	str	r0, [sp, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f1a1 0404 	sub.w	r4, r1, #4
 800654e:	bfb8      	it	lt
 8006550:	18e4      	addlt	r4, r4, r3
 8006552:	f000 f8d3 	bl	80066fc <__malloc_lock>
 8006556:	4a20      	ldr	r2, [pc, #128]	; (80065d8 <_free_r+0x9c>)
 8006558:	9801      	ldr	r0, [sp, #4]
 800655a:	6813      	ldr	r3, [r2, #0]
 800655c:	4615      	mov	r5, r2
 800655e:	b933      	cbnz	r3, 800656e <_free_r+0x32>
 8006560:	6063      	str	r3, [r4, #4]
 8006562:	6014      	str	r4, [r2, #0]
 8006564:	b003      	add	sp, #12
 8006566:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800656a:	f000 b8cd 	b.w	8006708 <__malloc_unlock>
 800656e:	42a3      	cmp	r3, r4
 8006570:	d90b      	bls.n	800658a <_free_r+0x4e>
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	1862      	adds	r2, r4, r1
 8006576:	4293      	cmp	r3, r2
 8006578:	bf04      	itt	eq
 800657a:	681a      	ldreq	r2, [r3, #0]
 800657c:	685b      	ldreq	r3, [r3, #4]
 800657e:	6063      	str	r3, [r4, #4]
 8006580:	bf04      	itt	eq
 8006582:	1852      	addeq	r2, r2, r1
 8006584:	6022      	streq	r2, [r4, #0]
 8006586:	602c      	str	r4, [r5, #0]
 8006588:	e7ec      	b.n	8006564 <_free_r+0x28>
 800658a:	461a      	mov	r2, r3
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	b10b      	cbz	r3, 8006594 <_free_r+0x58>
 8006590:	42a3      	cmp	r3, r4
 8006592:	d9fa      	bls.n	800658a <_free_r+0x4e>
 8006594:	6811      	ldr	r1, [r2, #0]
 8006596:	1855      	adds	r5, r2, r1
 8006598:	42a5      	cmp	r5, r4
 800659a:	d10b      	bne.n	80065b4 <_free_r+0x78>
 800659c:	6824      	ldr	r4, [r4, #0]
 800659e:	4421      	add	r1, r4
 80065a0:	1854      	adds	r4, r2, r1
 80065a2:	42a3      	cmp	r3, r4
 80065a4:	6011      	str	r1, [r2, #0]
 80065a6:	d1dd      	bne.n	8006564 <_free_r+0x28>
 80065a8:	681c      	ldr	r4, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	6053      	str	r3, [r2, #4]
 80065ae:	4421      	add	r1, r4
 80065b0:	6011      	str	r1, [r2, #0]
 80065b2:	e7d7      	b.n	8006564 <_free_r+0x28>
 80065b4:	d902      	bls.n	80065bc <_free_r+0x80>
 80065b6:	230c      	movs	r3, #12
 80065b8:	6003      	str	r3, [r0, #0]
 80065ba:	e7d3      	b.n	8006564 <_free_r+0x28>
 80065bc:	6825      	ldr	r5, [r4, #0]
 80065be:	1961      	adds	r1, r4, r5
 80065c0:	428b      	cmp	r3, r1
 80065c2:	bf04      	itt	eq
 80065c4:	6819      	ldreq	r1, [r3, #0]
 80065c6:	685b      	ldreq	r3, [r3, #4]
 80065c8:	6063      	str	r3, [r4, #4]
 80065ca:	bf04      	itt	eq
 80065cc:	1949      	addeq	r1, r1, r5
 80065ce:	6021      	streq	r1, [r4, #0]
 80065d0:	6054      	str	r4, [r2, #4]
 80065d2:	e7c7      	b.n	8006564 <_free_r+0x28>
 80065d4:	b003      	add	sp, #12
 80065d6:	bd30      	pop	{r4, r5, pc}
 80065d8:	200000e0 	.word	0x200000e0

080065dc <_malloc_r>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	1ccd      	adds	r5, r1, #3
 80065e0:	f025 0503 	bic.w	r5, r5, #3
 80065e4:	3508      	adds	r5, #8
 80065e6:	2d0c      	cmp	r5, #12
 80065e8:	bf38      	it	cc
 80065ea:	250c      	movcc	r5, #12
 80065ec:	2d00      	cmp	r5, #0
 80065ee:	4606      	mov	r6, r0
 80065f0:	db01      	blt.n	80065f6 <_malloc_r+0x1a>
 80065f2:	42a9      	cmp	r1, r5
 80065f4:	d903      	bls.n	80065fe <_malloc_r+0x22>
 80065f6:	230c      	movs	r3, #12
 80065f8:	6033      	str	r3, [r6, #0]
 80065fa:	2000      	movs	r0, #0
 80065fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065fe:	f000 f87d 	bl	80066fc <__malloc_lock>
 8006602:	4921      	ldr	r1, [pc, #132]	; (8006688 <_malloc_r+0xac>)
 8006604:	680a      	ldr	r2, [r1, #0]
 8006606:	4614      	mov	r4, r2
 8006608:	b99c      	cbnz	r4, 8006632 <_malloc_r+0x56>
 800660a:	4f20      	ldr	r7, [pc, #128]	; (800668c <_malloc_r+0xb0>)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	b923      	cbnz	r3, 800661a <_malloc_r+0x3e>
 8006610:	4621      	mov	r1, r4
 8006612:	4630      	mov	r0, r6
 8006614:	f000 f862 	bl	80066dc <_sbrk_r>
 8006618:	6038      	str	r0, [r7, #0]
 800661a:	4629      	mov	r1, r5
 800661c:	4630      	mov	r0, r6
 800661e:	f000 f85d 	bl	80066dc <_sbrk_r>
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	d123      	bne.n	800666e <_malloc_r+0x92>
 8006626:	230c      	movs	r3, #12
 8006628:	6033      	str	r3, [r6, #0]
 800662a:	4630      	mov	r0, r6
 800662c:	f000 f86c 	bl	8006708 <__malloc_unlock>
 8006630:	e7e3      	b.n	80065fa <_malloc_r+0x1e>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	1b5b      	subs	r3, r3, r5
 8006636:	d417      	bmi.n	8006668 <_malloc_r+0x8c>
 8006638:	2b0b      	cmp	r3, #11
 800663a:	d903      	bls.n	8006644 <_malloc_r+0x68>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	441c      	add	r4, r3
 8006640:	6025      	str	r5, [r4, #0]
 8006642:	e004      	b.n	800664e <_malloc_r+0x72>
 8006644:	6863      	ldr	r3, [r4, #4]
 8006646:	42a2      	cmp	r2, r4
 8006648:	bf0c      	ite	eq
 800664a:	600b      	streq	r3, [r1, #0]
 800664c:	6053      	strne	r3, [r2, #4]
 800664e:	4630      	mov	r0, r6
 8006650:	f000 f85a 	bl	8006708 <__malloc_unlock>
 8006654:	f104 000b 	add.w	r0, r4, #11
 8006658:	1d23      	adds	r3, r4, #4
 800665a:	f020 0007 	bic.w	r0, r0, #7
 800665e:	1ac2      	subs	r2, r0, r3
 8006660:	d0cc      	beq.n	80065fc <_malloc_r+0x20>
 8006662:	1a1b      	subs	r3, r3, r0
 8006664:	50a3      	str	r3, [r4, r2]
 8006666:	e7c9      	b.n	80065fc <_malloc_r+0x20>
 8006668:	4622      	mov	r2, r4
 800666a:	6864      	ldr	r4, [r4, #4]
 800666c:	e7cc      	b.n	8006608 <_malloc_r+0x2c>
 800666e:	1cc4      	adds	r4, r0, #3
 8006670:	f024 0403 	bic.w	r4, r4, #3
 8006674:	42a0      	cmp	r0, r4
 8006676:	d0e3      	beq.n	8006640 <_malloc_r+0x64>
 8006678:	1a21      	subs	r1, r4, r0
 800667a:	4630      	mov	r0, r6
 800667c:	f000 f82e 	bl	80066dc <_sbrk_r>
 8006680:	3001      	adds	r0, #1
 8006682:	d1dd      	bne.n	8006640 <_malloc_r+0x64>
 8006684:	e7cf      	b.n	8006626 <_malloc_r+0x4a>
 8006686:	bf00      	nop
 8006688:	200000e0 	.word	0x200000e0
 800668c:	200000e4 	.word	0x200000e4

08006690 <_realloc_r>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	4607      	mov	r7, r0
 8006694:	4614      	mov	r4, r2
 8006696:	460e      	mov	r6, r1
 8006698:	b921      	cbnz	r1, 80066a4 <_realloc_r+0x14>
 800669a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800669e:	4611      	mov	r1, r2
 80066a0:	f7ff bf9c 	b.w	80065dc <_malloc_r>
 80066a4:	b922      	cbnz	r2, 80066b0 <_realloc_r+0x20>
 80066a6:	f7ff ff49 	bl	800653c <_free_r>
 80066aa:	4625      	mov	r5, r4
 80066ac:	4628      	mov	r0, r5
 80066ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b0:	f000 f830 	bl	8006714 <_malloc_usable_size_r>
 80066b4:	42a0      	cmp	r0, r4
 80066b6:	d20f      	bcs.n	80066d8 <_realloc_r+0x48>
 80066b8:	4621      	mov	r1, r4
 80066ba:	4638      	mov	r0, r7
 80066bc:	f7ff ff8e 	bl	80065dc <_malloc_r>
 80066c0:	4605      	mov	r5, r0
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d0f2      	beq.n	80066ac <_realloc_r+0x1c>
 80066c6:	4631      	mov	r1, r6
 80066c8:	4622      	mov	r2, r4
 80066ca:	f7ff ff0f 	bl	80064ec <memcpy>
 80066ce:	4631      	mov	r1, r6
 80066d0:	4638      	mov	r0, r7
 80066d2:	f7ff ff33 	bl	800653c <_free_r>
 80066d6:	e7e9      	b.n	80066ac <_realloc_r+0x1c>
 80066d8:	4635      	mov	r5, r6
 80066da:	e7e7      	b.n	80066ac <_realloc_r+0x1c>

080066dc <_sbrk_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d06      	ldr	r5, [pc, #24]	; (80066f8 <_sbrk_r+0x1c>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4604      	mov	r4, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	f7fa fa7e 	bl	8000be8 <_sbrk>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_sbrk_r+0x1a>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_sbrk_r+0x1a>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	20000b38 	.word	0x20000b38

080066fc <__malloc_lock>:
 80066fc:	4801      	ldr	r0, [pc, #4]	; (8006704 <__malloc_lock+0x8>)
 80066fe:	f000 b811 	b.w	8006724 <__retarget_lock_acquire_recursive>
 8006702:	bf00      	nop
 8006704:	20000b40 	.word	0x20000b40

08006708 <__malloc_unlock>:
 8006708:	4801      	ldr	r0, [pc, #4]	; (8006710 <__malloc_unlock+0x8>)
 800670a:	f000 b80c 	b.w	8006726 <__retarget_lock_release_recursive>
 800670e:	bf00      	nop
 8006710:	20000b40 	.word	0x20000b40

08006714 <_malloc_usable_size_r>:
 8006714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006718:	1f18      	subs	r0, r3, #4
 800671a:	2b00      	cmp	r3, #0
 800671c:	bfbc      	itt	lt
 800671e:	580b      	ldrlt	r3, [r1, r0]
 8006720:	18c0      	addlt	r0, r0, r3
 8006722:	4770      	bx	lr

08006724 <__retarget_lock_acquire_recursive>:
 8006724:	4770      	bx	lr

08006726 <__retarget_lock_release_recursive>:
 8006726:	4770      	bx	lr

08006728 <_init>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr

08006734 <_fini>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	bf00      	nop
 8006738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673a:	bc08      	pop	{r3}
 800673c:	469e      	mov	lr, r3
 800673e:	4770      	bx	lr
