
T9_L9_USBDeviceMSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd8  08007fd8  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fe0  08007fe0  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010bb8  20000164  0800814c  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20010d1c  0800814c  00020d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e5d  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a40  00000000  00000000  00039ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0003da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  0003e8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ba4  00000000  00000000  0003f598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001499d  00000000  00000000  0005913c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a2ac  00000000  00000000  0006dad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7d85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003940  00000000  00000000  000f7dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000164 	.word	0x20000164
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007f40 	.word	0x08007f40

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000168 	.word	0x20000168
 80001d4:	08007f40 	.word	0x08007f40

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <MX_GPIO_Init+0xd0>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <MX_GPIO_Init+0xd0>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <MX_GPIO_Init+0xd0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a25      	ldr	r2, [pc, #148]	; (80005a0 <MX_GPIO_Init+0xd0>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	4812      	ldr	r0, [pc, #72]	; (80005a4 <MX_GPIO_Init+0xd4>)
 800055c:	f000 fcd8 	bl	8000f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000566:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <MX_GPIO_Init+0xd8>)
 8000578:	f000 fb46 	bl	8000c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800057c:	2320      	movs	r3, #32
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000594:	f000 fb38 	bl	8000c08 <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020000 	.word	0x40020000
 80005a8:	40020800 	.word	0x40020800

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 f982 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f808 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f7ff ff8a 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f8e0 	bl	8000780 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005c0:	f006 ffa2 	bl	8007508 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <main+0x18>
	...

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f007 fcaa 	bl	8007f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <SystemClock_Config+0xc8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <SystemClock_Config+0xc8>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <SystemClock_Config+0xc8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a20      	ldr	r2, [pc, #128]	; (8000694 <SystemClock_Config+0xcc>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <SystemClock_Config+0xcc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000628:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800063c:	2348      	movs	r3, #72	; 0x48
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000644:	2303      	movs	r3, #3
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fe29 	bl	80022a4 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000658:	f000 f81e 	bl	8000698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2102      	movs	r1, #2
 8000678:	4618      	mov	r0, r3
 800067a:	f002 f88b 	bl	8002794 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000684:	f000 f808 	bl	8000698 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	; 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	; 0x40
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006e2:	2007      	movs	r0, #7
 80006e4:	f000 fa4e 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f90c 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <OTG_FS_IRQHandler+0x10>)
 800074e:	f000 fd48 	bl	80011e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20010914 	.word	0x20010914

0800075c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART2_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b8:	f002 f9e8 	bl	8002b8c <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f7ff ff69 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200003fc 	.word	0x200003fc
 80007d0:	40004400 	.word	0x40004400

080007d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <HAL_UART_MspInit+0x84>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d12b      	bne.n	800084e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <HAL_UART_MspInit+0x88>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <HAL_UART_MspInit+0x88>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_UART_MspInit+0x88>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <HAL_UART_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <HAL_UART_MspInit+0x88>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_UART_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082e:	230c      	movs	r3, #12
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083e:	2307      	movs	r3, #7
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <HAL_UART_MspInit+0x8c>)
 800084a:	f000 f9dd 	bl	8000c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	; 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40004400 	.word	0x40004400
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800089c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000880:	4c0b      	ldr	r4, [pc, #44]	; (80008b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800088e:	f7ff ff65 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000892:	f007 fb1b 	bl	8007ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000896:	f7ff fe89 	bl	80005ac <main>
  bx  lr    
 800089a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800089c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80008a8:	08007fe8 	.word	0x08007fe8
  ldr r2, =_sbss
 80008ac:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80008b0:	20010d1c 	.word	0x20010d1c

080008b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_Init+0x40>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <HAL_Init+0x40>)
 80008c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_Init+0x40>)
 80008ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_Init+0x40>)
 80008da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f94f 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f808 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff feda 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023c00 	.word	0x40023c00

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x54>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f967 	bl	8000bee <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f000 f92f 	bl	8000b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <HAL_InitTick+0x5c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	20000440 	.word	0x20000440

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000440 	.word	0x20000440

0800099c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a4:	f7ff ffee 	bl	8000984 <HAL_GetTick>
 80009a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b4:	d005      	beq.n	80009c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_Delay+0x44>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009c2:	bf00      	nop
 80009c4:	f7ff ffde 	bl	8000984 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d8f7      	bhi.n	80009c4 <HAL_Delay+0x28>
  {
  }
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0b      	blt.n	8000a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 021f 	and.w	r2, r3, #31
 8000a60:	4907      	ldr	r1, [pc, #28]	; (8000a80 <__NVIC_EnableIRQ+0x38>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	2001      	movs	r0, #1
 8000a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f7ff ff8e 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff29 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff3e 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ff8e 	bl	8000ad8 <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff5d 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff31 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffa2 	bl	8000b40 <SysTick_Config>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	e159      	b.n	8000ed8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c24:	2201      	movs	r2, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	f040 8148 	bne.w	8000ed2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d005      	beq.n	8000c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d130      	bne.n	8000cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c90:	2201      	movs	r2, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	f003 0201 	and.w	r2, r3, #1
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d017      	beq.n	8000cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d123      	bne.n	8000d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	69b9      	ldr	r1, [r7, #24]
 8000d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0203 	and.w	r2, r3, #3
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 80a2 	beq.w	8000ed2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b57      	ldr	r3, [pc, #348]	; (8000ef0 <HAL_GPIO_Init+0x2e8>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a56      	ldr	r2, [pc, #344]	; (8000ef0 <HAL_GPIO_Init+0x2e8>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b54      	ldr	r3, [pc, #336]	; (8000ef0 <HAL_GPIO_Init+0x2e8>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000daa:	4a52      	ldr	r2, [pc, #328]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3302      	adds	r3, #2
 8000db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a49      	ldr	r2, [pc, #292]	; (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d019      	beq.n	8000e0a <HAL_GPIO_Init+0x202>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a48      	ldr	r2, [pc, #288]	; (8000efc <HAL_GPIO_Init+0x2f4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0x1fe>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a47      	ldr	r2, [pc, #284]	; (8000f00 <HAL_GPIO_Init+0x2f8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00d      	beq.n	8000e02 <HAL_GPIO_Init+0x1fa>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a46      	ldr	r2, [pc, #280]	; (8000f04 <HAL_GPIO_Init+0x2fc>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x1f6>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a45      	ldr	r2, [pc, #276]	; (8000f08 <HAL_GPIO_Init+0x300>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_GPIO_Init+0x1f2>
 8000df6:	2304      	movs	r3, #4
 8000df8:	e008      	b.n	8000e0c <HAL_GPIO_Init+0x204>
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x204>
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e004      	b.n	8000e0c <HAL_GPIO_Init+0x204>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e002      	b.n	8000e0c <HAL_GPIO_Init+0x204>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <HAL_GPIO_Init+0x204>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	69fa      	ldr	r2, [r7, #28]
 8000e0e:	f002 0203 	and.w	r2, r2, #3
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	4093      	lsls	r3, r2
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e1c:	4935      	ldr	r1, [pc, #212]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2a:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <HAL_GPIO_Init+0x304>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e4e:	4a2f      	ldr	r2, [pc, #188]	; (8000f0c <HAL_GPIO_Init+0x304>)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <HAL_GPIO_Init+0x304>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e78:	4a24      	ldr	r2, [pc, #144]	; (8000f0c <HAL_GPIO_Init+0x304>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <HAL_GPIO_Init+0x304>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea2:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_GPIO_Init+0x304>)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_GPIO_Init+0x304>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_GPIO_Init+0x304>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	f67f aea2 	bls.w	8000c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40013800 	.word	0x40013800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40013c00 	.word	0x40013c00

08000f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f20:	787b      	ldrb	r3, [r7, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f2c:	e003      	b.n	8000f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	041a      	lsls	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	619a      	str	r2, [r3, #24]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f44:	b08f      	sub	sp, #60	; 0x3c
 8000f46:	af0a      	add	r7, sp, #40	; 0x28
 8000f48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e10f      	b.n	8001174 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d106      	bne.n	8000f74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f006 fc82 	bl	8007878 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2203      	movs	r2, #3
 8000f78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 f925 	bl	80031e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	687e      	ldr	r6, [r7, #4]
 8000fa0:	466d      	mov	r5, sp
 8000fa2:	f106 0410 	add.w	r4, r6, #16
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb6:	1d33      	adds	r3, r6, #4
 8000fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f001 fffc 	bl	8002fb8 <USB_CoreInit>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e0d0      	b.n	8001174 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 f913 	bl	8003204 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e04a      	b.n	800107a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	1a9b      	subs	r3, r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	333d      	adds	r3, #61	; 0x3d
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	333c      	adds	r3, #60	; 0x3c
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	b298      	uxth	r0, r3
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	1a9b      	subs	r3, r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	3342      	adds	r3, #66	; 0x42
 8001020:	4602      	mov	r2, r0
 8001022:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	1a9b      	subs	r3, r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	333f      	adds	r3, #63	; 0x3f
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	3344      	adds	r3, #68	; 0x44
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	3348      	adds	r3, #72	; 0x48
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	1a9b      	subs	r3, r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	3350      	adds	r3, #80	; 0x50
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	3301      	adds	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3af      	bcc.n	8000fe4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e044      	b.n	8001114 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	3301      	adds	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	d3b5      	bcc.n	800108a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	687e      	ldr	r6, [r7, #4]
 8001126:	466d      	mov	r5, sp
 8001128:	f106 0410 	add.w	r4, r6, #16
 800112c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001138:	e885 0003 	stmia.w	r5, {r0, r1}
 800113c:	1d33      	adds	r3, r6, #4
 800113e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f002 f8ab 	bl	800329c <USB_DevInit>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2202      	movs	r2, #2
 8001150:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e00d      	b.n	8001174 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f003 f927 	bl	80043c0 <USB_DevDisconnect>

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800117c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_PCD_Start+0x1c>
 8001194:	2302      	movs	r3, #2
 8001196:	e020      	b.n	80011da <HAL_PCD_Start+0x5e>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d109      	bne.n	80011bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d005      	beq.n	80011bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fffd 	bl	80031c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 f8d7 	bl	800437e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b08d      	sub	sp, #52	; 0x34
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 f995 	bl	8004528 <USB_GetMode>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	f040 839d 	bne.w	8001940 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f8f9 	bl	8004402 <USB_ReadInterrupts>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8393 	beq.w	800193e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f003 f8f0 	bl	8004402 <USB_ReadInterrupts>
 8001222:	4603      	mov	r3, r0
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b02      	cmp	r3, #2
 800122a:	d107      	bne.n	800123c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f002 0202 	and.w	r2, r2, #2
 800123a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f003 f8de 	bl	8004402 <USB_ReadInterrupts>
 8001246:	4603      	mov	r3, r0
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b10      	cmp	r3, #16
 800124e:	d161      	bne.n	8001314 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0210 	bic.w	r2, r2, #16
 800125e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	f003 020f 	and.w	r2, r3, #15
 800126c:	4613      	mov	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	3304      	adds	r3, #4
 800127e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	0c5b      	lsrs	r3, r3, #17
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	2b02      	cmp	r3, #2
 800128a:	d124      	bne.n	80012d6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d035      	beq.n	8001304 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	6a38      	ldr	r0, [r7, #32]
 80012ac:	f002 ff15 	bl	80040da <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012bc:	441a      	add	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ce:	441a      	add	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	619a      	str	r2, [r3, #24]
 80012d4:	e016      	b.n	8001304 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	0c5b      	lsrs	r3, r3, #17
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d110      	bne.n	8001304 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012e8:	2208      	movs	r2, #8
 80012ea:	4619      	mov	r1, r3
 80012ec:	6a38      	ldr	r0, [r7, #32]
 80012ee:	f002 fef4 	bl	80040da <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fe:	441a      	add	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0210 	orr.w	r2, r2, #16
 8001312:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f003 f872 	bl	8004402 <USB_ReadInterrupts>
 800131e:	4603      	mov	r3, r0
 8001320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001324:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001328:	d16e      	bne.n	8001408 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f003 f878 	bl	8004428 <USB_ReadDevAllOutEpInterrupt>
 8001338:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800133a:	e062      	b.n	8001402 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d057      	beq.n	80013f6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f003 f89d 	bl	8004490 <USB_ReadDevOutEPInterrupt>
 8001356:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00c      	beq.n	800137c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	015a      	lsls	r2, r3, #5
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136e:	461a      	mov	r2, r3
 8001370:	2301      	movs	r3, #1
 8001372:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fdde 	bl	8001f38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00c      	beq.n	80013a0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	4413      	add	r3, r2
 800138e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001392:	461a      	mov	r2, r3
 8001394:	2308      	movs	r3, #8
 8001396:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fed8 	bl	8002150 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	015a      	lsls	r2, r3, #5
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	4413      	add	r3, r2
 80013b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013b6:	461a      	mov	r2, r3
 80013b8:	2310      	movs	r3, #16
 80013ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	015a      	lsls	r2, r3, #5
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	4413      	add	r3, r2
 80013ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d2:	461a      	mov	r2, r3
 80013d4:	2320      	movs	r3, #32
 80013d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	015a      	lsls	r2, r3, #5
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ee:	461a      	mov	r2, r3
 80013f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	3301      	adds	r3, #1
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fe:	085b      	lsrs	r3, r3, #1
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	2b00      	cmp	r3, #0
 8001406:	d199      	bne.n	800133c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f002 fff8 	bl	8004402 <USB_ReadInterrupts>
 8001412:	4603      	mov	r3, r0
 8001414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001418:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800141c:	f040 80c0 	bne.w	80015a0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f003 f819 	bl	800445c <USB_ReadDevAllInEpInterrupt>
 800142a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001430:	e0b2      	b.n	8001598 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a7 	beq.w	800158c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f003 f83f 	bl	80044cc <USB_ReadDevInEPInterrupt>
 800144e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d057      	beq.n	800150a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	2201      	movs	r2, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800146e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43db      	mvns	r3, r3
 8001474:	69f9      	ldr	r1, [r7, #28]
 8001476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800147a:	4013      	ands	r3, r2
 800147c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	015a      	lsls	r2, r3, #5
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	4413      	add	r3, r2
 8001486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800148a:	461a      	mov	r2, r3
 800148c:	2301      	movs	r3, #1
 800148e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d132      	bne.n	80014fe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149c:	4613      	mov	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	3348      	adds	r3, #72	; 0x48
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4403      	add	r3, r0
 80014b8:	3344      	adds	r3, #68	; 0x44
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4419      	add	r1, r3
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4403      	add	r3, r0
 80014cc:	3348      	adds	r3, #72	; 0x48
 80014ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d113      	bne.n	80014fe <HAL_PCD_IRQHandler+0x31c>
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3350      	adds	r3, #80	; 0x50
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d108      	bne.n	80014fe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014f6:	461a      	mov	r2, r3
 80014f8:	2101      	movs	r1, #1
 80014fa:	f003 f847 	bl	800458c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4619      	mov	r1, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f006 fa38 	bl	800797a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4413      	add	r3, r2
 800151c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001520:	461a      	mov	r2, r3
 8001522:	2308      	movs	r3, #8
 8001524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	4413      	add	r3, r2
 8001538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800153c:	461a      	mov	r2, r3
 800153e:	2310      	movs	r3, #16
 8001540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001558:	461a      	mov	r2, r3
 800155a:	2340      	movs	r3, #64	; 0x40
 800155c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001574:	461a      	mov	r2, r3
 8001576:	2302      	movs	r3, #2
 8001578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fc48 	bl	8001e1c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	3301      	adds	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	2b00      	cmp	r3, #0
 800159c:	f47f af49 	bne.w	8001432 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 ff2c 	bl	8004402 <USB_ReadInterrupts>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015b4:	d122      	bne.n	80015fc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d108      	bne.n	80015e6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015dc:	2100      	movs	r1, #0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 fe54 	bl	800228c <HAL_PCDEx_LPM_Callback>
 80015e4:	e002      	b.n	80015ec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f006 fa34 	bl	8007a54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f002 fefe 	bl	8004402 <USB_ReadInterrupts>
 8001606:	4603      	mov	r3, r0
 8001608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001610:	d112      	bne.n	8001638 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b01      	cmp	r3, #1
 8001620:	d102      	bne.n	8001628 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f006 f9f0 	bl	8007a08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001636:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f002 fee0 	bl	8004402 <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164c:	f040 80c7 	bne.w	80017de <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2110      	movs	r1, #16
 800166a:	4618      	mov	r0, r3
 800166c:	f001 ff7a 	bl	8003564 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001674:	e056      	b.n	8001724 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001678:	015a      	lsls	r2, r3, #5
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	4413      	add	r3, r2
 800167e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001682:	461a      	mov	r2, r3
 8001684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001688:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169a:	0151      	lsls	r1, r2, #5
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	440a      	add	r2, r1
 80016a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ac:	015a      	lsls	r2, r3, #5
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ba:	0151      	lsls	r1, r2, #5
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	440a      	add	r2, r1
 80016c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	015a      	lsls	r2, r3, #5
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d6:	461a      	mov	r2, r3
 80016d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e0:	015a      	lsls	r2, r3, #5
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ee:	0151      	lsls	r1, r2, #5
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	440a      	add	r2, r1
 80016f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170e:	0151      	lsls	r1, r2, #5
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	440a      	add	r2, r1
 8001714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001718:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800171c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001720:	3301      	adds	r3, #1
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172a:	429a      	cmp	r2, r3
 800172c:	d3a3      	bcc.n	8001676 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800173c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001740:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	2b00      	cmp	r3, #0
 8001748:	d016      	beq.n	8001778 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800175a:	f043 030b 	orr.w	r3, r3, #11
 800175e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001770:	f043 030b 	orr.w	r3, r3, #11
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	e015      	b.n	80017a4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800178a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800178e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179e:	f043 030b 	orr.w	r3, r3, #11
 80017a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017c8:	461a      	mov	r2, r3
 80017ca:	f002 fedf 	bl	800458c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fe0d 	bl	8004402 <USB_ReadInterrupts>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f2:	d124      	bne.n	800183e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fea3 	bl	8004544 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f001 ff0b 	bl	800361e <USB_GetDevSpeed>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681c      	ldr	r4, [r3, #0]
 8001814:	f001 f986 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8001818:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	4620      	mov	r0, r4
 8001824:	f001 fc2a 	bl	800307c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f006 f8ce 	bl	80079ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800183c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fddd 	bl	8004402 <USB_ReadInterrupts>
 8001848:	4603      	mov	r3, r0
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b08      	cmp	r3, #8
 8001850:	d10a      	bne.n	8001868 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f006 f8ab 	bl	80079ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f002 0208 	and.w	r2, r2, #8
 8001866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fdc8 	bl	8004402 <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800187c:	d10f      	bne.n	800189e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4619      	mov	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f006 f903 	bl	8007a94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800189c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fdad 	bl	8004402 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018b2:	d10f      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f006 f8d6 	bl	8007a70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 fd92 	bl	8004402 <USB_ReadInterrupts>
 80018de:	4603      	mov	r3, r0
 80018e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e8:	d10a      	bne.n	8001900 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f006 f8e4 	bl	8007ab8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80018fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fd7c 	bl	8004402 <USB_ReadInterrupts>
 800190a:	4603      	mov	r3, r0
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b04      	cmp	r3, #4
 8001912:	d115      	bne.n	8001940 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f006 f8d4 	bl	8007ad4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6859      	ldr	r1, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	e000      	b.n	8001940 <HAL_PCD_IRQHandler+0x75e>
      return;
 800193e:	bf00      	nop
    }
  }
}
 8001940:	3734      	adds	r7, #52	; 0x34
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}

08001946 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_PCD_SetAddress+0x1a>
 800195c:	2302      	movs	r3, #2
 800195e:	e013      	b.n	8001988 <HAL_PCD_SetAddress+0x42>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f002 fcda 	bl	8004332 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4603      	mov	r3, r0
 80019a0:	70fb      	strb	r3, [r7, #3]
 80019a2:	460b      	mov	r3, r1
 80019a4:	803b      	strh	r3, [r7, #0]
 80019a6:	4613      	mov	r3, r2
 80019a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da0f      	bge.n	80019d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	f003 020f 	and.w	r2, r3, #15
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	3338      	adds	r3, #56	; 0x38
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	3304      	adds	r3, #4
 80019cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	705a      	strb	r2, [r3, #1]
 80019d4:	e00f      	b.n	80019f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	f003 020f 	and.w	r2, r3, #15
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	3304      	adds	r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a02:	883a      	ldrh	r2, [r7, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	78ba      	ldrb	r2, [r7, #2]
 8001a0c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d102      	bne.n	8001a2c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_PCD_EP_Open+0xaa>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e00e      	b.n	8001a58 <HAL_PCD_EP_Open+0xc8>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 fe0d 	bl	8003668 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a56:	7afb      	ldrb	r3, [r7, #11]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da0f      	bge.n	8001a94 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	f003 020f 	and.w	r2, r3, #15
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	3338      	adds	r3, #56	; 0x38
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	3304      	adds	r3, #4
 8001a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	705a      	strb	r2, [r3, #1]
 8001a92:	e00f      	b.n	8001ab4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f003 020f 	and.w	r2, r3, #15
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3304      	adds	r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_PCD_EP_Close+0x6e>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e00e      	b.n	8001aec <HAL_PCD_EP_Close+0x8c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 fe4b 	bl	8003778 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	460b      	mov	r3, r1
 8001b02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b04:	7afb      	ldrb	r3, [r7, #11]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4413      	add	r3, r2
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2200      	movs	r2, #0
 8001b34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b36:	7afb      	ldrb	r3, [r7, #11]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d102      	bne.n	8001b50 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	6979      	ldr	r1, [r7, #20]
 8001b68:	f002 f926 	bl	8003db8 <USB_EP0StartXfer>
 8001b6c:	e008      	b.n	8001b80 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6979      	ldr	r1, [r7, #20]
 8001b7c:	f001 fed8 	bl	8003930 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	f003 020f 	and.w	r2, r3, #15
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bac:	681b      	ldr	r3, [r3, #0]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bca:	7afb      	ldrb	r3, [r7, #11]
 8001bcc:	f003 020f 	and.w	r2, r3, #15
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	3338      	adds	r3, #56	; 0x38
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	3304      	adds	r3, #4
 8001be0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d102      	bne.n	8001c14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c14:	7afb      	ldrb	r3, [r7, #11]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6979      	ldr	r1, [r7, #20]
 8001c2c:	f002 f8c4 	bl	8003db8 <USB_EP0StartXfer>
 8001c30:	e008      	b.n	8001c44 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6979      	ldr	r1, [r7, #20]
 8001c40:	f001 fe76 	bl	8003930 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	f003 020f 	and.w	r2, r3, #15
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d901      	bls.n	8001c6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e050      	b.n	8001d0e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da0f      	bge.n	8001c94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 020f 	and.w	r2, r3, #15
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	3338      	adds	r3, #56	; 0x38
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	3304      	adds	r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	705a      	strb	r2, [r3, #1]
 8001c92:	e00d      	b.n	8001cb0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_PCD_EP_SetStall+0x82>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e01e      	b.n	8001d0e <HAL_PCD_EP_SetStall+0xc0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 fa53 	bl	800418a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10a      	bne.n	8001d04 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	b2d9      	uxtb	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f002 fc44 	bl	800458c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	f003 020f 	and.w	r2, r3, #15
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d901      	bls.n	8001d34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e042      	b.n	8001dba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	da0f      	bge.n	8001d5c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f003 020f 	and.w	r2, r3, #15
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	3338      	adds	r3, #56	; 0x38
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	3304      	adds	r3, #4
 8001d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	705a      	strb	r2, [r3, #1]
 8001d5a:	e00f      	b.n	8001d7c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	f003 020f 	and.w	r2, r3, #15
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_PCD_EP_ClrStall+0x86>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e00e      	b.n	8001dba <HAL_PCD_EP_ClrStall+0xa4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68f9      	ldr	r1, [r7, #12]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fa5b 	bl	8004266 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_PCD_EP_Flush+0x1a>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e01b      	b.n	8001e14 <HAL_PCD_EP_Flush+0x52>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	da09      	bge.n	8001e00 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	4619      	mov	r1, r3
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f001 fbb3 	bl	8003564 <USB_FlushTxFifo>
 8001dfe:	e004      	b.n	8001e0a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 fbd1 	bl	80035ac <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3338      	adds	r3, #56	; 0x38
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d901      	bls.n	8001e54 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e06c      	b.n	8001f2e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d902      	bls.n	8001e70 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	3303      	adds	r3, #3
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e78:	e02b      	b.n	8001ed2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d902      	bls.n	8001e96 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3303      	adds	r3, #3
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68d9      	ldr	r1, [r3, #12]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6978      	ldr	r0, [r7, #20]
 8001eb6:	f002 f8d2 	bl	800405e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	441a      	add	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	441a      	add	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d809      	bhi.n	8001efc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d203      	bcs.n	8001efc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1be      	bne.n	8001e7a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d811      	bhi.n	8001f2c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	2201      	movs	r2, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	6939      	ldr	r1, [r7, #16]
 8001f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f28:	4013      	ands	r3, r2
 8001f2a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	333c      	adds	r3, #60	; 0x3c
 8001f50:	3304      	adds	r3, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f040 80a0 	bne.w	80020b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4a72      	ldr	r2, [pc, #456]	; (8002148 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f240 80dd 	bls.w	800213e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80d7 	beq.w	800213e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa2:	6093      	str	r3, [r2, #8]
 8001fa4:	e0cb      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	6093      	str	r3, [r2, #8]
 8001fc2:	e0bc      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 80b7 	bne.w	800213e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a5d      	ldr	r2, [pc, #372]	; (8002148 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d90f      	bls.n	8001ff8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff4:	6093      	str	r3, [r2, #8]
 8001ff6:	e0a2      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800200a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	0159      	lsls	r1, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	440b      	add	r3, r1
 8002014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800201e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4403      	add	r3, r0
 800202e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002032:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002046:	6819      	ldr	r1, [r3, #0]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4403      	add	r3, r0
 8002056:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4419      	add	r1, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4403      	add	r3, r0
 800206c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002070:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d114      	bne.n	80020a2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d108      	bne.n	80020a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800209a:	461a      	mov	r2, r3
 800209c:	2101      	movs	r1, #1
 800209e:	f002 fa75 	bl	800458c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f005 fc4b 	bl	8007944 <HAL_PCD_DataOutStageCallback>
 80020ae:	e046      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4a26      	ldr	r2, [pc, #152]	; (800214c <PCD_EP_OutXfrComplete_int+0x214>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d124      	bne.n	8002102 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ce:	461a      	mov	r2, r3
 80020d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d4:	6093      	str	r3, [r2, #8]
 80020d6:	e032      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ee:	461a      	mov	r2, r3
 80020f0:	2320      	movs	r3, #32
 80020f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	4619      	mov	r1, r3
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f005 fc22 	bl	8007944 <HAL_PCD_DataOutStageCallback>
 8002100:	e01d      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d114      	bne.n	8002132 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d108      	bne.n	8002132 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800212a:	461a      	mov	r2, r3
 800212c:	2100      	movs	r1, #0
 800212e:	f002 fa2d 	bl	800458c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f005 fc03 	bl	8007944 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	4f54300a 	.word	0x4f54300a
 800214c:	4f54310a 	.word	0x4f54310a

08002150 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	333c      	adds	r3, #60	; 0x3c
 8002168:	3304      	adds	r3, #4
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d90e      	bls.n	80021a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219c:	461a      	mov	r2, r3
 800219e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f005 fbbb 	bl	8007920 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d90c      	bls.n	80021cc <PCD_EP_OutSetupPacket_int+0x7c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021c4:	461a      	mov	r2, r3
 80021c6:	2101      	movs	r1, #1
 80021c8:	f002 f9e0 	bl	800458c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	4f54300a 	.word	0x4f54300a

080021dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
 80021e8:	4613      	mov	r3, r2
 80021ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021fa:	883b      	ldrh	r3, [r7, #0]
 80021fc:	0419      	lsls	r1, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	430a      	orrs	r2, r1
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
 8002208:	e028      	b.n	800225c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4413      	add	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e00d      	b.n	800223a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	3340      	adds	r3, #64	; 0x40
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4413      	add	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	3301      	adds	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	3b01      	subs	r3, #1
 8002240:	429a      	cmp	r2, r3
 8002242:	d3ec      	bcc.n	800221e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002244:	883b      	ldrh	r3, [r7, #0]
 8002246:	0418      	lsls	r0, r3, #16
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	3b01      	subs	r3, #1
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	4302      	orrs	r2, r0
 8002254:	3340      	adds	r3, #64	; 0x40
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e264      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d075      	beq.n	80023ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c2:	4ba3      	ldr	r3, [pc, #652]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d00c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4ba0      	ldr	r3, [pc, #640]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d112      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022da:	4b9d      	ldr	r3, [pc, #628]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e6:	d10b      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	4b99      	ldr	r3, [pc, #612]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d05b      	beq.n	80023ac <HAL_RCC_OscConfig+0x108>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d157      	bne.n	80023ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e23f      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x74>
 800230a:	4b91      	ldr	r3, [pc, #580]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a90      	ldr	r2, [pc, #576]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x98>
 8002322:	4b8b      	ldr	r3, [pc, #556]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a8a      	ldr	r2, [pc, #552]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a87      	ldr	r2, [pc, #540]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
 800233c:	4b84      	ldr	r3, [pc, #528]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a83      	ldr	r2, [pc, #524]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a80      	ldr	r2, [pc, #512]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fb12 	bl	8000984 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002364:	f7fe fb0e 	bl	8000984 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e204      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0xc0>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fafe 	bl	8000984 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238c:	f7fe fafa 	bl	8000984 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1f0      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0xe8>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d063      	beq.n	8002482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c6:	4b62      	ldr	r3, [pc, #392]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d11c      	bne.n	800240c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x152>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1c4      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b56      	ldr	r3, [pc, #344]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4952      	ldr	r1, [pc, #328]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	e03a      	b.n	8002482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b4f      	ldr	r3, [pc, #316]	; (8002554 <HAL_RCC_OscConfig+0x2b0>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fab3 	bl	8000984 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002422:	f7fe faaf 	bl	8000984 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1a5      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	4b46      	ldr	r3, [pc, #280]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4940      	ldr	r1, [pc, #256]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_OscConfig+0x2b0>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fa92 	bl	8000984 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fa8e 	bl	8000984 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e184      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d030      	beq.n	80024f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_RCC_OscConfig+0x2b4>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe fa72 	bl	8000984 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a4:	f7fe fa6e 	bl	8000984 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e164      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x200>
 80024c2:	e015      	b.n	80024f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_RCC_OscConfig+0x2b4>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fa5b 	bl	8000984 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d2:	f7fe fa57 	bl	8000984 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e14d      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a0 	beq.w	800263e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_OscConfig+0x2b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d121      	bne.n	800257e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_RCC_OscConfig+0x2b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_RCC_OscConfig+0x2b8>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002546:	f7fe fa1d 	bl	8000984 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	e011      	b.n	8002572 <HAL_RCC_OscConfig+0x2ce>
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	42470000 	.word	0x42470000
 8002558:	42470e80 	.word	0x42470e80
 800255c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002560:	f7fe fa10 	bl	8000984 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e106      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b85      	ldr	r3, [pc, #532]	; (8002788 <HAL_RCC_OscConfig+0x4e4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x2f0>
 8002586:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a80      	ldr	r2, [pc, #512]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	e01c      	b.n	80025ce <HAL_RCC_OscConfig+0x32a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b05      	cmp	r3, #5
 800259a:	d10c      	bne.n	80025b6 <HAL_RCC_OscConfig+0x312>
 800259c:	4b7b      	ldr	r3, [pc, #492]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a7a      	ldr	r2, [pc, #488]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	4b78      	ldr	r3, [pc, #480]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a77      	ldr	r2, [pc, #476]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	e00b      	b.n	80025ce <HAL_RCC_OscConfig+0x32a>
 80025b6:	4b75      	ldr	r3, [pc, #468]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	4a74      	ldr	r2, [pc, #464]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70
 80025c2:	4b72      	ldr	r3, [pc, #456]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a71      	ldr	r2, [pc, #452]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d015      	beq.n	8002602 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe f9d5 	bl	8000984 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe f9d1 	bl	8000984 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0c5      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ee      	beq.n	80025de <HAL_RCC_OscConfig+0x33a>
 8002600:	e014      	b.n	800262c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7fe f9bf 	bl	8000984 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe f9bb 	bl	8000984 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0af      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002620:	4b5a      	ldr	r3, [pc, #360]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ee      	bne.n	800260a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d105      	bne.n	800263e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002632:	4b56      	ldr	r3, [pc, #344]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a55      	ldr	r2, [pc, #340]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 8002638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 809b 	beq.w	800277e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d05c      	beq.n	800270e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d141      	bne.n	80026e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b4c      	ldr	r3, [pc, #304]	; (8002790 <HAL_RCC_OscConfig+0x4ec>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7fe f98f 	bl	8000984 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7fe f98b 	bl	8000984 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e081      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267c:	4b43      	ldr	r3, [pc, #268]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	019b      	lsls	r3, r3, #6
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	3b01      	subs	r3, #1
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	4937      	ldr	r1, [pc, #220]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <HAL_RCC_OscConfig+0x4ec>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe f964 	bl	8000984 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe f960 	bl	8000984 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e056      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d2:	4b2e      	ldr	r3, [pc, #184]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x41c>
 80026de:	e04e      	b.n	800277e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e0:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_RCC_OscConfig+0x4ec>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe f94d 	bl	8000984 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe f949 	bl	8000984 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e03f      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x44a>
 800270c:	e037      	b.n	800277e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e032      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d028      	beq.n	800277a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d121      	bne.n	800277a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d11a      	bne.n	800277a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002750:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002752:	4293      	cmp	r3, r2
 8002754:	d111      	bne.n	800277a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	3b01      	subs	r3, #1
 8002764:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d107      	bne.n	800277a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40007000 	.word	0x40007000
 800278c:	40023800 	.word	0x40023800
 8002790:	42470060 	.word	0x42470060

08002794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0cc      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d90c      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a58      	ldr	r2, [pc, #352]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800280a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	494d      	ldr	r1, [pc, #308]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d044      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d119      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d003      	beq.n	8002852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284e:	2b03      	cmp	r3, #3
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e06f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e067      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4934      	ldr	r1, [pc, #208]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002884:	f7fe f87e 	bl	8000984 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe f87a 	bl	8000984 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e04f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d20c      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e032      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4916      	ldr	r1, [pc, #88]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	490e      	ldr	r1, [pc, #56]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800291a:	f000 f821 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 800291e:	4602      	mov	r2, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	490a      	ldr	r1, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd ffde 	bl	80008fc <HAL_InitTick>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023c00 	.word	0x40023c00
 8002950:	40023800 	.word	0x40023800
 8002954:	08007f9c 	.word	0x08007f9c
 8002958:	20000000 	.word	0x20000000
 800295c:	20000004 	.word	0x20000004

08002960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	2300      	movs	r3, #0
 8002972:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002978:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b08      	cmp	r3, #8
 8002982:	d00d      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002984:	2b08      	cmp	r3, #8
 8002986:	f200 80bd 	bhi.w	8002b04 <HAL_RCC_GetSysClockFreq+0x1a4>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x34>
 800298e:	2b04      	cmp	r3, #4
 8002990:	d003      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0x3a>
 8002992:	e0b7      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002996:	60bb      	str	r3, [r7, #8]
       break;
 8002998:	e0b7      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800299a:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800299c:	60bb      	str	r3, [r7, #8]
      break;
 800299e:	e0b4      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a0:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029aa:	4b5b      	ldr	r3, [pc, #364]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d04d      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b6:	4b58      	ldr	r3, [pc, #352]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	099b      	lsrs	r3, r3, #6
 80029bc:	461a      	mov	r2, r3
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	ea02 0800 	and.w	r8, r2, r0
 80029ce:	ea03 0901 	and.w	r9, r3, r1
 80029d2:	4640      	mov	r0, r8
 80029d4:	4649      	mov	r1, r9
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	014b      	lsls	r3, r1, #5
 80029e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029e4:	0142      	lsls	r2, r0, #5
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	ebb0 0008 	subs.w	r0, r0, r8
 80029ee:	eb61 0109 	sbc.w	r1, r1, r9
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	018b      	lsls	r3, r1, #6
 80029fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a00:	0182      	lsls	r2, r0, #6
 8002a02:	1a12      	subs	r2, r2, r0
 8002a04:	eb63 0301 	sbc.w	r3, r3, r1
 8002a08:	f04f 0000 	mov.w	r0, #0
 8002a0c:	f04f 0100 	mov.w	r1, #0
 8002a10:	00d9      	lsls	r1, r3, #3
 8002a12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a16:	00d0      	lsls	r0, r2, #3
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	eb12 0208 	adds.w	r2, r2, r8
 8002a20:	eb43 0309 	adc.w	r3, r3, r9
 8002a24:	f04f 0000 	mov.w	r0, #0
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	0259      	lsls	r1, r3, #9
 8002a2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a32:	0250      	lsls	r0, r2, #9
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	f7fd fbc8 	bl	80001d8 <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e04a      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	099b      	lsrs	r3, r3, #6
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a62:	f04f 0100 	mov.w	r1, #0
 8002a66:	ea02 0400 	and.w	r4, r2, r0
 8002a6a:	ea03 0501 	and.w	r5, r3, r1
 8002a6e:	4620      	mov	r0, r4
 8002a70:	4629      	mov	r1, r5
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	014b      	lsls	r3, r1, #5
 8002a7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a80:	0142      	lsls	r2, r0, #5
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	1b00      	subs	r0, r0, r4
 8002a88:	eb61 0105 	sbc.w	r1, r1, r5
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	018b      	lsls	r3, r1, #6
 8002a96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a9a:	0182      	lsls	r2, r0, #6
 8002a9c:	1a12      	subs	r2, r2, r0
 8002a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	00d9      	lsls	r1, r3, #3
 8002aac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ab0:	00d0      	lsls	r0, r2, #3
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	1912      	adds	r2, r2, r4
 8002ab8:	eb45 0303 	adc.w	r3, r5, r3
 8002abc:	f04f 0000 	mov.w	r0, #0
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	0299      	lsls	r1, r3, #10
 8002ac6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aca:	0290      	lsls	r0, r2, #10
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	f7fd fb7c 	bl	80001d8 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	3301      	adds	r3, #1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	60bb      	str	r3, [r7, #8]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b06:	60bb      	str	r3, [r7, #8]
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	007a1200 	.word	0x007a1200

08002b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000000 	.word	0x20000000

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b40:	f7ff fff0 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0a9b      	lsrs	r3, r3, #10
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4903      	ldr	r1, [pc, #12]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	08007fac 	.word	0x08007fac

08002b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b68:	f7ff ffdc 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0b5b      	lsrs	r3, r3, #13
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	08007fac 	.word	0x08007fac

08002b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e03f      	b.n	8002c1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fd fe0e 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f829 	bl	8002c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c2c:	b09f      	sub	sp, #124	; 0x7c
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3e:	68d9      	ldr	r1, [r3, #12]
 8002c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	ea40 0301 	orr.w	r3, r0, r1
 8002c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c6c:	f021 010c 	bic.w	r1, r1, #12
 8002c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c76:	430b      	orrs	r3, r1
 8002c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c86:	6999      	ldr	r1, [r3, #24]
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	ea40 0301 	orr.w	r3, r0, r1
 8002c90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4bc5      	ldr	r3, [pc, #788]	; (8002fac <UART_SetConfig+0x384>)
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d004      	beq.n	8002ca6 <UART_SetConfig+0x7e>
 8002c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4bc3      	ldr	r3, [pc, #780]	; (8002fb0 <UART_SetConfig+0x388>)
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d103      	bne.n	8002cae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ca6:	f7ff ff5d 	bl	8002b64 <HAL_RCC_GetPCLK2Freq>
 8002caa:	6778      	str	r0, [r7, #116]	; 0x74
 8002cac:	e002      	b.n	8002cb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cae:	f7ff ff45 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8002cb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbc:	f040 80b6 	bne.w	8002e2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc2:	461c      	mov	r4, r3
 8002cc4:	f04f 0500 	mov.w	r5, #0
 8002cc8:	4622      	mov	r2, r4
 8002cca:	462b      	mov	r3, r5
 8002ccc:	1891      	adds	r1, r2, r2
 8002cce:	6439      	str	r1, [r7, #64]	; 0x40
 8002cd0:	415b      	adcs	r3, r3
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cd8:	1912      	adds	r2, r2, r4
 8002cda:	eb45 0303 	adc.w	r3, r5, r3
 8002cde:	f04f 0000 	mov.w	r0, #0
 8002ce2:	f04f 0100 	mov.w	r1, #0
 8002ce6:	00d9      	lsls	r1, r3, #3
 8002ce8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cec:	00d0      	lsls	r0, r2, #3
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	1911      	adds	r1, r2, r4
 8002cf4:	6639      	str	r1, [r7, #96]	; 0x60
 8002cf6:	416b      	adcs	r3, r5
 8002cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8002cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	1891      	adds	r1, r2, r2
 8002d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d08:	415b      	adcs	r3, r3
 8002d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d14:	f7fd fa60 	bl	80001d8 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4ba5      	ldr	r3, [pc, #660]	; (8002fb4 <UART_SetConfig+0x38c>)
 8002d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	011e      	lsls	r6, r3, #4
 8002d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d28:	461c      	mov	r4, r3
 8002d2a:	f04f 0500 	mov.w	r5, #0
 8002d2e:	4622      	mov	r2, r4
 8002d30:	462b      	mov	r3, r5
 8002d32:	1891      	adds	r1, r2, r2
 8002d34:	6339      	str	r1, [r7, #48]	; 0x30
 8002d36:	415b      	adcs	r3, r3
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d3e:	1912      	adds	r2, r2, r4
 8002d40:	eb45 0303 	adc.w	r3, r5, r3
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	00d9      	lsls	r1, r3, #3
 8002d4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d52:	00d0      	lsls	r0, r2, #3
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	1911      	adds	r1, r2, r4
 8002d5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d5c:	416b      	adcs	r3, r5
 8002d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	1891      	adds	r1, r2, r2
 8002d6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d6e:	415b      	adcs	r3, r3
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d7a:	f7fd fa2d 	bl	80001d8 <__aeabi_uldivmod>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4b8c      	ldr	r3, [pc, #560]	; (8002fb4 <UART_SetConfig+0x38c>)
 8002d84:	fba3 1302 	umull	r1, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	2164      	movs	r1, #100	; 0x64
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	3332      	adds	r3, #50	; 0x32
 8002d96:	4a87      	ldr	r2, [pc, #540]	; (8002fb4 <UART_SetConfig+0x38c>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002da4:	441e      	add	r6, r3
 8002da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da8:	4618      	mov	r0, r3
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	1894      	adds	r4, r2, r2
 8002db4:	623c      	str	r4, [r7, #32]
 8002db6:	415b      	adcs	r3, r3
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dbe:	1812      	adds	r2, r2, r0
 8002dc0:	eb41 0303 	adc.w	r3, r1, r3
 8002dc4:	f04f 0400 	mov.w	r4, #0
 8002dc8:	f04f 0500 	mov.w	r5, #0
 8002dcc:	00dd      	lsls	r5, r3, #3
 8002dce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dd2:	00d4      	lsls	r4, r2, #3
 8002dd4:	4622      	mov	r2, r4
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	1814      	adds	r4, r2, r0
 8002dda:	653c      	str	r4, [r7, #80]	; 0x50
 8002ddc:	414b      	adcs	r3, r1
 8002dde:	657b      	str	r3, [r7, #84]	; 0x54
 8002de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	461a      	mov	r2, r3
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	1891      	adds	r1, r2, r2
 8002dec:	61b9      	str	r1, [r7, #24]
 8002dee:	415b      	adcs	r3, r3
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002dfa:	f7fd f9ed 	bl	80001d8 <__aeabi_uldivmod>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4b6c      	ldr	r3, [pc, #432]	; (8002fb4 <UART_SetConfig+0x38c>)
 8002e04:	fba3 1302 	umull	r1, r3, r3, r2
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	2164      	movs	r1, #100	; 0x64
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	3332      	adds	r3, #50	; 0x32
 8002e16:	4a67      	ldr	r2, [pc, #412]	; (8002fb4 <UART_SetConfig+0x38c>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	f003 0207 	and.w	r2, r3, #7
 8002e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4432      	add	r2, r6
 8002e28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e2a:	e0b9      	b.n	8002fa0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2e:	461c      	mov	r4, r3
 8002e30:	f04f 0500 	mov.w	r5, #0
 8002e34:	4622      	mov	r2, r4
 8002e36:	462b      	mov	r3, r5
 8002e38:	1891      	adds	r1, r2, r2
 8002e3a:	6139      	str	r1, [r7, #16]
 8002e3c:	415b      	adcs	r3, r3
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e44:	1912      	adds	r2, r2, r4
 8002e46:	eb45 0303 	adc.w	r3, r5, r3
 8002e4a:	f04f 0000 	mov.w	r0, #0
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	00d9      	lsls	r1, r3, #3
 8002e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e58:	00d0      	lsls	r0, r2, #3
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	eb12 0804 	adds.w	r8, r2, r4
 8002e62:	eb43 0905 	adc.w	r9, r3, r5
 8002e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f04f 0100 	mov.w	r1, #0
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	008b      	lsls	r3, r1, #2
 8002e7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e7e:	0082      	lsls	r2, r0, #2
 8002e80:	4640      	mov	r0, r8
 8002e82:	4649      	mov	r1, r9
 8002e84:	f7fd f9a8 	bl	80001d8 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4b49      	ldr	r3, [pc, #292]	; (8002fb4 <UART_SetConfig+0x38c>)
 8002e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	011e      	lsls	r6, r3, #4
 8002e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	1894      	adds	r4, r2, r2
 8002ea4:	60bc      	str	r4, [r7, #8]
 8002ea6:	415b      	adcs	r3, r3
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eae:	1812      	adds	r2, r2, r0
 8002eb0:	eb41 0303 	adc.w	r3, r1, r3
 8002eb4:	f04f 0400 	mov.w	r4, #0
 8002eb8:	f04f 0500 	mov.w	r5, #0
 8002ebc:	00dd      	lsls	r5, r3, #3
 8002ebe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ec2:	00d4      	lsls	r4, r2, #3
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	462b      	mov	r3, r5
 8002ec8:	1814      	adds	r4, r2, r0
 8002eca:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ecc:	414b      	adcs	r3, r1
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	008b      	lsls	r3, r1, #2
 8002ee4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ee8:	0082      	lsls	r2, r0, #2
 8002eea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002eee:	f7fd f973 	bl	80001d8 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <UART_SetConfig+0x38c>)
 8002ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	2164      	movs	r1, #100	; 0x64
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	3332      	adds	r3, #50	; 0x32
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <UART_SetConfig+0x38c>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f16:	441e      	add	r6, r3
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f04f 0100 	mov.w	r1, #0
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	1894      	adds	r4, r2, r2
 8002f26:	603c      	str	r4, [r7, #0]
 8002f28:	415b      	adcs	r3, r3
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f30:	1812      	adds	r2, r2, r0
 8002f32:	eb41 0303 	adc.w	r3, r1, r3
 8002f36:	f04f 0400 	mov.w	r4, #0
 8002f3a:	f04f 0500 	mov.w	r5, #0
 8002f3e:	00dd      	lsls	r5, r3, #3
 8002f40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f44:	00d4      	lsls	r4, r2, #3
 8002f46:	4622      	mov	r2, r4
 8002f48:	462b      	mov	r3, r5
 8002f4a:	eb12 0a00 	adds.w	sl, r2, r0
 8002f4e:	eb43 0b01 	adc.w	fp, r3, r1
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	008b      	lsls	r3, r1, #2
 8002f66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f6a:	0082      	lsls	r2, r0, #2
 8002f6c:	4650      	mov	r0, sl
 8002f6e:	4659      	mov	r1, fp
 8002f70:	f7fd f932 	bl	80001d8 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <UART_SetConfig+0x38c>)
 8002f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2164      	movs	r1, #100	; 0x64
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	3332      	adds	r3, #50	; 0x32
 8002f8c:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <UART_SetConfig+0x38c>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4432      	add	r2, r6
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	377c      	adds	r7, #124	; 0x7c
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002faa:	bf00      	nop
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40011400 	.word	0x40011400
 8002fb4:	51eb851f 	.word	0x51eb851f

08002fb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fb8:	b084      	sub	sp, #16
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	f107 001c 	add.w	r0, r7, #28
 8002fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d122      	bne.n	8003016 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f001 fb1c 	bl	8004648 <USB_CoreReset>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	e01a      	b.n	800304c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f001 fb10 	bl	8004648 <USB_CoreReset>
 8003028:	4603      	mov	r3, r0
 800302a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800302c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
 800303e:	e005      	b.n	800304c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10b      	bne.n	800306a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f043 0206 	orr.w	r2, r3, #6
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003076:	b004      	add	sp, #16
 8003078:	4770      	bx	lr
	...

0800307c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	4613      	mov	r3, r2
 8003088:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d165      	bne.n	800315c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4a41      	ldr	r2, [pc, #260]	; (8003198 <USB_SetTurnaroundTime+0x11c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d906      	bls.n	80030a6 <USB_SetTurnaroundTime+0x2a>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4a40      	ldr	r2, [pc, #256]	; (800319c <USB_SetTurnaroundTime+0x120>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d202      	bcs.n	80030a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80030a0:	230f      	movs	r3, #15
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	e062      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4a3c      	ldr	r2, [pc, #240]	; (800319c <USB_SetTurnaroundTime+0x120>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d306      	bcc.n	80030bc <USB_SetTurnaroundTime+0x40>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <USB_SetTurnaroundTime+0x124>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d202      	bcs.n	80030bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80030b6:	230e      	movs	r3, #14
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e057      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4a38      	ldr	r2, [pc, #224]	; (80031a0 <USB_SetTurnaroundTime+0x124>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d306      	bcc.n	80030d2 <USB_SetTurnaroundTime+0x56>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4a37      	ldr	r2, [pc, #220]	; (80031a4 <USB_SetTurnaroundTime+0x128>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d202      	bcs.n	80030d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80030cc:	230d      	movs	r3, #13
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	e04c      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4a33      	ldr	r2, [pc, #204]	; (80031a4 <USB_SetTurnaroundTime+0x128>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d306      	bcc.n	80030e8 <USB_SetTurnaroundTime+0x6c>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4a32      	ldr	r2, [pc, #200]	; (80031a8 <USB_SetTurnaroundTime+0x12c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d802      	bhi.n	80030e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80030e2:	230c      	movs	r3, #12
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e041      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4a2f      	ldr	r2, [pc, #188]	; (80031a8 <USB_SetTurnaroundTime+0x12c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d906      	bls.n	80030fe <USB_SetTurnaroundTime+0x82>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4a2e      	ldr	r2, [pc, #184]	; (80031ac <USB_SetTurnaroundTime+0x130>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d802      	bhi.n	80030fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80030f8:	230b      	movs	r3, #11
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	e036      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <USB_SetTurnaroundTime+0x130>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d906      	bls.n	8003114 <USB_SetTurnaroundTime+0x98>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <USB_SetTurnaroundTime+0x134>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d802      	bhi.n	8003114 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800310e:	230a      	movs	r3, #10
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e02b      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4a26      	ldr	r2, [pc, #152]	; (80031b0 <USB_SetTurnaroundTime+0x134>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d906      	bls.n	800312a <USB_SetTurnaroundTime+0xae>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4a25      	ldr	r2, [pc, #148]	; (80031b4 <USB_SetTurnaroundTime+0x138>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d202      	bcs.n	800312a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003124:	2309      	movs	r3, #9
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	e020      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	4a21      	ldr	r2, [pc, #132]	; (80031b4 <USB_SetTurnaroundTime+0x138>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d306      	bcc.n	8003140 <USB_SetTurnaroundTime+0xc4>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <USB_SetTurnaroundTime+0x13c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d802      	bhi.n	8003140 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800313a:	2308      	movs	r3, #8
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	e015      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4a1d      	ldr	r2, [pc, #116]	; (80031b8 <USB_SetTurnaroundTime+0x13c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d906      	bls.n	8003156 <USB_SetTurnaroundTime+0xda>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4a1c      	ldr	r2, [pc, #112]	; (80031bc <USB_SetTurnaroundTime+0x140>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d202      	bcs.n	8003156 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003150:	2307      	movs	r3, #7
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e00a      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003156:	2306      	movs	r3, #6
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e007      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003162:	2309      	movs	r3, #9
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e001      	b.n	800316c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003168:	2309      	movs	r3, #9
 800316a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	029b      	lsls	r3, r3, #10
 8003180:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	00d8acbf 	.word	0x00d8acbf
 800319c:	00e4e1c0 	.word	0x00e4e1c0
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	01067380 	.word	0x01067380
 80031a8:	011a499f 	.word	0x011a499f
 80031ac:	01312cff 	.word	0x01312cff
 80031b0:	014ca43f 	.word	0x014ca43f
 80031b4:	016e3600 	.word	0x016e3600
 80031b8:	01a6ab1f 	.word	0x01a6ab1f
 80031bc:	01e84800 	.word	0x01e84800

080031c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f023 0201 	bic.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d115      	bne.n	8003252 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003232:	2001      	movs	r0, #1
 8003234:	f7fd fbb2 	bl	800099c <HAL_Delay>
      ms++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3301      	adds	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f001 f972 	bl	8004528 <USB_GetMode>
 8003244:	4603      	mov	r3, r0
 8003246:	2b01      	cmp	r3, #1
 8003248:	d01e      	beq.n	8003288 <USB_SetCurrentMode+0x84>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b31      	cmp	r3, #49	; 0x31
 800324e:	d9f0      	bls.n	8003232 <USB_SetCurrentMode+0x2e>
 8003250:	e01a      	b.n	8003288 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d115      	bne.n	8003284 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003264:	2001      	movs	r0, #1
 8003266:	f7fd fb99 	bl	800099c <HAL_Delay>
      ms++;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f001 f959 	bl	8004528 <USB_GetMode>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <USB_SetCurrentMode+0x84>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b31      	cmp	r3, #49	; 0x31
 8003280:	d9f0      	bls.n	8003264 <USB_SetCurrentMode+0x60>
 8003282:	e001      	b.n	8003288 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e005      	b.n	8003294 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b32      	cmp	r3, #50	; 0x32
 800328c:	d101      	bne.n	8003292 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800329c:	b084      	sub	sp, #16
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80032aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	e009      	b.n	80032d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	3340      	adds	r3, #64	; 0x40
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	2200      	movs	r2, #0
 80032c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	3301      	adds	r3, #1
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b0e      	cmp	r3, #14
 80032d4:	d9f2      	bls.n	80032bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d11c      	bne.n	8003316 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ea:	f043 0302 	orr.w	r3, r3, #2
 80032ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
 8003314:	e00b      	b.n	800332e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003334:	461a      	mov	r2, r3
 8003336:	2300      	movs	r3, #0
 8003338:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003340:	4619      	mov	r1, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003348:	461a      	mov	r2, r3
 800334a:	680b      	ldr	r3, [r1, #0]
 800334c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	2b01      	cmp	r3, #1
 8003352:	d10c      	bne.n	800336e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800335a:	2100      	movs	r1, #0
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f945 	bl	80035ec <USB_SetDevSpeed>
 8003362:	e008      	b.n	8003376 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003364:	2101      	movs	r1, #1
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f940 	bl	80035ec <USB_SetDevSpeed>
 800336c:	e003      	b.n	8003376 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800336e:	2103      	movs	r1, #3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f93b 	bl	80035ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003376:	2110      	movs	r1, #16
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f8f3 	bl	8003564 <USB_FlushTxFifo>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f90f 	bl	80035ac <USB_FlushRxFifo>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339e:	461a      	mov	r2, r3
 80033a0:	2300      	movs	r3, #0
 80033a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033aa:	461a      	mov	r2, r3
 80033ac:	2300      	movs	r3, #0
 80033ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b6:	461a      	mov	r2, r3
 80033b8:	2300      	movs	r3, #0
 80033ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e043      	b.n	800344a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d8:	d118      	bne.n	800340c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ec:	461a      	mov	r2, r3
 80033ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	e013      	b.n	800341e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003402:	461a      	mov	r2, r3
 8003404:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e008      	b.n	800341e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	461a      	mov	r2, r3
 800341a:	2300      	movs	r3, #0
 800341c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342a:	461a      	mov	r2, r3
 800342c:	2300      	movs	r3, #0
 800342e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343c:	461a      	mov	r2, r3
 800343e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003442:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	3301      	adds	r3, #1
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	429a      	cmp	r2, r3
 8003450:	d3b7      	bcc.n	80033c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	e043      	b.n	80034e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800346a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346e:	d118      	bne.n	80034a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003482:	461a      	mov	r2, r3
 8003484:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e013      	b.n	80034b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003498:	461a      	mov	r2, r3
 800349a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e008      	b.n	80034b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ae:	461a      	mov	r2, r3
 80034b0:	2300      	movs	r3, #0
 80034b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	461a      	mov	r2, r3
 80034c2:	2300      	movs	r3, #0
 80034c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	461a      	mov	r2, r3
 80034d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3301      	adds	r3, #1
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d3b7      	bcc.n	8003458 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003508:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f043 0210 	orr.w	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <USB_DevInit+0x2c4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f043 0208 	orr.w	r2, r3, #8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800353a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d107      	bne.n	8003550 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003548:	f043 0304 	orr.w	r3, r3, #4
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003550:	7dfb      	ldrb	r3, [r7, #23]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800355c:	b004      	add	sp, #16
 800355e:	4770      	bx	lr
 8003560:	803c3800 	.word	0x803c3800

08003564 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3301      	adds	r3, #1
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	4a08      	ldr	r2, [pc, #32]	; (80035a8 <USB_FlushTxFifo+0x44>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e006      	b.n	800359c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b20      	cmp	r3, #32
 8003598:	d0f1      	beq.n	800357e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	00030d40 	.word	0x00030d40

080035ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2210      	movs	r2, #16
 80035bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3301      	adds	r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <USB_FlushRxFifo+0x3c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e006      	b.n	80035dc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d0f1      	beq.n	80035be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	00030d40 	.word	0x00030d40

080035ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	68f9      	ldr	r1, [r7, #12]
 8003608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800361e:	b480      	push	{r7}
 8003620:	b087      	sub	sp, #28
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0306 	and.w	r3, r3, #6
 8003636:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]
 8003642:	e00a      	b.n	800365a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d002      	beq.n	8003650 <USB_GetDevSpeed+0x32>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b06      	cmp	r3, #6
 800364e:	d102      	bne.n	8003656 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003650:	2302      	movs	r3, #2
 8003652:	75fb      	strb	r3, [r7, #23]
 8003654:	e001      	b.n	800365a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003656:	230f      	movs	r3, #15
 8003658:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800365a:	7dfb      	ldrb	r3, [r7, #23]
}
 800365c:	4618      	mov	r0, r3
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d13a      	bne.n	80036fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	b29b      	uxth	r3, r3
 800369c:	68f9      	ldr	r1, [r7, #12]
 800369e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d155      	bne.n	8003768 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	78db      	ldrb	r3, [r3, #3]
 80036d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	059b      	lsls	r3, r3, #22
 80036de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036e0:	4313      	orrs	r3, r2
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	0151      	lsls	r1, r2, #5
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	440a      	add	r2, r1
 80036ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e036      	b.n	8003768 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003718:	4313      	orrs	r3, r2
 800371a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d11a      	bne.n	8003768 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	78db      	ldrb	r3, [r3, #3]
 800374c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800374e:	430b      	orrs	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	0151      	lsls	r1, r2, #5
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	440a      	add	r2, r1
 800375a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003766:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d161      	bne.n	8003858 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037aa:	d11f      	bne.n	80037ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	0151      	lsls	r1, r2, #5
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	440a      	add	r2, r1
 80037c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	b29b      	uxth	r3, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800380c:	4013      	ands	r3, r2
 800380e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	b29b      	uxth	r3, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003830:	4013      	ands	r3, r2
 8003832:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	0159      	lsls	r1, r3, #5
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	440b      	add	r3, r1
 800384a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384e:	4619      	mov	r1, r3
 8003850:	4b35      	ldr	r3, [pc, #212]	; (8003928 <USB_DeactivateEndpoint+0x1b0>)
 8003852:	4013      	ands	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
 8003856:	e060      	b.n	800391a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800386a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800386e:	d11f      	bne.n	80038b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	0151      	lsls	r1, r2, #5
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	440a      	add	r2, r1
 8003886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800388a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800388e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	0151      	lsls	r1, r2, #5
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	440a      	add	r2, r1
 80038a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	2101      	movs	r1, #1
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	43db      	mvns	r3, r3
 80038ca:	68f9      	ldr	r1, [r7, #12]
 80038cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038d0:	4013      	ands	r3, r2
 80038d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038da:	69da      	ldr	r2, [r3, #28]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	2101      	movs	r1, #1
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	43db      	mvns	r3, r3
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f4:	4013      	ands	r3, r2
 80038f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	0159      	lsls	r1, r3, #5
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	440b      	add	r3, r1
 800390e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003912:	4619      	mov	r1, r3
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <USB_DeactivateEndpoint+0x1b4>)
 8003916:	4013      	ands	r3, r2
 8003918:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	ec337800 	.word	0xec337800
 800392c:	eff37800 	.word	0xeff37800

08003930 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	4613      	mov	r3, r2
 800393c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	785b      	ldrb	r3, [r3, #1]
 800394c:	2b01      	cmp	r3, #1
 800394e:	f040 815c 	bne.w	8003c0a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d132      	bne.n	80039c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	0151      	lsls	r1, r2, #5
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	440a      	add	r2, r1
 8003970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003974:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003978:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800397c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	440a      	add	r2, r1
 8003994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800399c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	0151      	lsls	r1, r2, #5
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	440a      	add	r2, r1
 80039b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b8:	0cdb      	lsrs	r3, r3, #19
 80039ba:	04db      	lsls	r3, r3, #19
 80039bc:	6113      	str	r3, [r2, #16]
 80039be:	e074      	b.n	8003aaa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	0151      	lsls	r1, r2, #5
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	440a      	add	r2, r1
 80039d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039da:	0cdb      	lsrs	r3, r3, #19
 80039dc:	04db      	lsls	r3, r3, #19
 80039de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	0151      	lsls	r1, r2, #5
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	440a      	add	r2, r1
 80039f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a10:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6959      	ldr	r1, [r3, #20]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	440b      	add	r3, r1
 8003a1c:	1e59      	subs	r1, r3, #1
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a26:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003a28:	4b9d      	ldr	r3, [pc, #628]	; (8003ca0 <USB_EPStartXfer+0x370>)
 8003a2a:	400b      	ands	r3, r1
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	0148      	lsls	r0, r1, #5
 8003a30:	69f9      	ldr	r1, [r7, #28]
 8003a32:	4401      	add	r1, r0
 8003a34:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a52:	69b9      	ldr	r1, [r7, #24]
 8003a54:	0148      	lsls	r0, r1, #5
 8003a56:	69f9      	ldr	r1, [r7, #28]
 8003a58:	4401      	add	r1, r0
 8003a5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d11f      	bne.n	8003aaa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	0151      	lsls	r1, r2, #5
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	440a      	add	r2, r1
 8003a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a84:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003a88:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	0151      	lsls	r1, r2, #5
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	440a      	add	r2, r1
 8003aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aa8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d14b      	bne.n	8003b48 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d009      	beq.n	8003acc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	78db      	ldrb	r3, [r3, #3]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d128      	bne.n	8003b26 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d110      	bne.n	8003b06 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003afe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	e00f      	b.n	8003b26 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	0151      	lsls	r1, r2, #5
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	440a      	add	r2, r1
 8003b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	0151      	lsls	r1, r2, #5
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	440a      	add	r2, r1
 8003b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e12f      	b.n	8003da8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b66:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	78db      	ldrb	r3, [r3, #3]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d015      	beq.n	8003b9c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8117 	beq.w	8003da8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	69f9      	ldr	r1, [r7, #28]
 8003b92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b96:	4313      	orrs	r3, r2
 8003b98:	634b      	str	r3, [r1, #52]	; 0x34
 8003b9a:	e105      	b.n	8003da8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d110      	bne.n	8003bce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	0151      	lsls	r1, r2, #5
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	440a      	add	r2, r1
 8003bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e00f      	b.n	8003bee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	0151      	lsls	r1, r2, #5
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	440a      	add	r2, r1
 8003be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	68d9      	ldr	r1, [r3, #12]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	b298      	uxth	r0, r3
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	4603      	mov	r3, r0
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fa2b 	bl	800405e <USB_WritePacket>
 8003c08:	e0ce      	b.n	8003da8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	0151      	lsls	r1, r2, #5
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	440a      	add	r2, r1
 8003c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c24:	0cdb      	lsrs	r3, r3, #19
 8003c26:	04db      	lsls	r3, r3, #19
 8003c28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	0151      	lsls	r1, r2, #5
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	440a      	add	r2, r1
 8003c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d126      	bne.n	8003ca4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6c:	69b9      	ldr	r1, [r7, #24]
 8003c6e:	0148      	lsls	r0, r1, #5
 8003c70:	69f9      	ldr	r1, [r7, #28]
 8003c72:	4401      	add	r1, r0
 8003c74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	0151      	lsls	r1, r2, #5
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	440a      	add	r2, r1
 8003c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c9a:	6113      	str	r3, [r2, #16]
 8003c9c:	e036      	b.n	8003d0c <USB_EPStartXfer+0x3dc>
 8003c9e:	bf00      	nop
 8003ca0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4413      	add	r3, r2
 8003cae:	1e5a      	subs	r2, r3, #1
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	8afb      	ldrh	r3, [r7, #22]
 8003cca:	04d9      	lsls	r1, r3, #19
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <USB_EPStartXfer+0x484>)
 8003cce:	400b      	ands	r3, r1
 8003cd0:	69b9      	ldr	r1, [r7, #24]
 8003cd2:	0148      	lsls	r0, r1, #5
 8003cd4:	69f9      	ldr	r1, [r7, #28]
 8003cd6:	4401      	add	r1, r0
 8003cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	8af9      	ldrh	r1, [r7, #22]
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfc:	69b9      	ldr	r1, [r7, #24]
 8003cfe:	0148      	lsls	r0, r1, #5
 8003d00:	69f9      	ldr	r1, [r7, #28]
 8003d02:	4401      	add	r1, r0
 8003d04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d10d      	bne.n	8003d2e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	68d9      	ldr	r1, [r3, #12]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	460a      	mov	r2, r1
 8003d2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	78db      	ldrb	r3, [r3, #3]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d128      	bne.n	8003d88 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d110      	bne.n	8003d68 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	0151      	lsls	r1, r2, #5
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	440a      	add	r2, r1
 8003d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e00f      	b.n	8003d88 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003da6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	1ff80000 	.word	0x1ff80000

08003db8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	785b      	ldrb	r3, [r3, #1]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	f040 80cd 	bne.w	8003f74 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d132      	bne.n	8003e48 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	0151      	lsls	r1, r2, #5
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	440a      	add	r2, r1
 8003df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	0151      	lsls	r1, r2, #5
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e40:	0cdb      	lsrs	r3, r3, #19
 8003e42:	04db      	lsls	r3, r3, #19
 8003e44:	6113      	str	r3, [r2, #16]
 8003e46:	e04e      	b.n	8003ee6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e62:	0cdb      	lsrs	r3, r3, #19
 8003e64:	04db      	lsls	r3, r3, #19
 8003e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e8a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d903      	bls.n	8003ea0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed6:	6939      	ldr	r1, [r7, #16]
 8003ed8:	0148      	lsls	r0, r1, #5
 8003eda:	6979      	ldr	r1, [r7, #20]
 8003edc:	4401      	add	r1, r0
 8003ede:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d11e      	bne.n	8003f2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d009      	beq.n	8003f08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f00:	461a      	mov	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e092      	b.n	8004050 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d07e      	beq.n	8004050 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	634b      	str	r3, [r1, #52]	; 0x34
 8003f72:	e06d      	b.n	8004050 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	0151      	lsls	r1, r2, #5
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	440a      	add	r2, r1
 8003f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8e:	0cdb      	lsrs	r3, r3, #19
 8003f90:	04db      	lsls	r3, r3, #19
 8003f92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	0151      	lsls	r1, r2, #5
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	440a      	add	r2, r1
 8003faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fb6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fe6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffe:	6939      	ldr	r1, [r7, #16]
 8004000:	0148      	lsls	r0, r1, #5
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	4401      	add	r1, r0
 8004006:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800400a:	4313      	orrs	r3, r2
 800400c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10d      	bne.n	8004030 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d009      	beq.n	8004030 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	68d9      	ldr	r1, [r3, #12]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	460a      	mov	r2, r1
 800402e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800404a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800404e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800405e:	b480      	push	{r7}
 8004060:	b089      	sub	sp, #36	; 0x24
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	4611      	mov	r1, r2
 800406a:	461a      	mov	r2, r3
 800406c:	460b      	mov	r3, r1
 800406e:	71fb      	strb	r3, [r7, #7]
 8004070:	4613      	mov	r3, r2
 8004072:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800407c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004080:	2b00      	cmp	r3, #0
 8004082:	d123      	bne.n	80040cc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004084:	88bb      	ldrh	r3, [r7, #4]
 8004086:	3303      	adds	r3, #3
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	e018      	b.n	80040c4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	031a      	lsls	r2, r3, #12
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	4413      	add	r3, r2
 800409a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409e:	461a      	mov	r2, r3
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3301      	adds	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	3301      	adds	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3301      	adds	r3, #1
 80040b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3301      	adds	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	3301      	adds	r3, #1
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d3e2      	bcc.n	8004092 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3724      	adds	r7, #36	; 0x24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80040da:	b480      	push	{r7}
 80040dc:	b08b      	sub	sp, #44	; 0x2c
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	4613      	mov	r3, r2
 80040e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	089b      	lsrs	r3, r3, #2
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004100:	2300      	movs	r3, #0
 8004102:	623b      	str	r3, [r7, #32]
 8004104:	e014      	b.n	8004130 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	601a      	str	r2, [r3, #0]
    pDest++;
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	3301      	adds	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	3301      	adds	r3, #1
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	3301      	adds	r3, #1
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	3301      	adds	r3, #1
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	3301      	adds	r3, #1
 800412e:	623b      	str	r3, [r7, #32]
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	429a      	cmp	r2, r3
 8004136:	d3e6      	bcc.n	8004106 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004138:	8bfb      	ldrh	r3, [r7, #30]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01e      	beq.n	800417c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004148:	461a      	mov	r2, r3
 800414a:	f107 0310 	add.w	r3, r7, #16
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	b2da      	uxtb	r2, r3
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	701a      	strb	r2, [r3, #0]
      i++;
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	3301      	adds	r3, #1
 8004168:	623b      	str	r3, [r7, #32]
      pDest++;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	3301      	adds	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004170:	8bfb      	ldrh	r3, [r7, #30]
 8004172:	3b01      	subs	r3, #1
 8004174:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004176:	8bfb      	ldrh	r3, [r7, #30]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ea      	bne.n	8004152 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800417e:	4618      	mov	r0, r3
 8004180:	372c      	adds	r7, #44	; 0x2c
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	785b      	ldrb	r3, [r3, #1]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d12c      	bne.n	8004200 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db12      	blt.n	80041de <USB_EPSetStall+0x54>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00f      	beq.n	80041de <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	0151      	lsls	r1, r2, #5
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	440a      	add	r2, r1
 80041d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041dc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e02b      	b.n	8004258 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	db12      	blt.n	8004238 <USB_EPSetStall+0xae>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00f      	beq.n	8004238 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	440a      	add	r2, r1
 800422e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004236:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	440a      	add	r2, r1
 800424e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004256:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	785b      	ldrb	r3, [r3, #1]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d128      	bne.n	80042d4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	440a      	add	r2, r1
 8004298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	78db      	ldrb	r3, [r3, #3]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d003      	beq.n	80042b2 <USB_EPClearStall+0x4c>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	78db      	ldrb	r3, [r3, #3]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d138      	bne.n	8004324 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e027      	b.n	8004324 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	78db      	ldrb	r3, [r3, #3]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d003      	beq.n	8004304 <USB_EPClearStall+0x9e>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	78db      	ldrb	r3, [r3, #3]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d10f      	bne.n	8004324 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	0151      	lsls	r1, r2, #5
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	440a      	add	r2, r1
 800431a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004350:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004354:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004398:	f023 0303 	bic.w	r3, r3, #3
 800439c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ac:	f023 0302 	bic.w	r3, r3, #2
 80043b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ee:	f043 0302 	orr.w	r3, r3, #2
 80043f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4013      	ands	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	0c1b      	lsrs	r3, r3, #16
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	b29b      	uxth	r3, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	4013      	ands	r3, r2
 80044bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044be:	68bb      	ldr	r3, [r7, #8]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
 80044fc:	01db      	lsls	r3, r3, #7
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800451a:	68bb      	ldr	r3, [r7, #8]
}
 800451c:	4618      	mov	r0, r3
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0301 	and.w	r3, r3, #1
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800455e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004562:	f023 0307 	bic.w	r3, r3, #7
 8004566:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	460b      	mov	r3, r1
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	333c      	adds	r3, #60	; 0x3c
 80045a2:	3304      	adds	r3, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4a26      	ldr	r2, [pc, #152]	; (8004644 <USB_EP0_OutStart+0xb8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d90a      	bls.n	80045c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c0:	d101      	bne.n	80045c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e037      	b.n	8004636 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	461a      	mov	r2, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f4:	f043 0318 	orr.w	r3, r3, #24
 80045f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004608:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800460c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800460e:	7afb      	ldrb	r3, [r7, #11]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d10f      	bne.n	8004634 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	461a      	mov	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800462e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004632:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	4f54300a 	.word	0x4f54300a

08004648 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3301      	adds	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <USB_CoreReset+0x60>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e01a      	b.n	800469a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	daf3      	bge.n	8004654 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f043 0201 	orr.w	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	4a09      	ldr	r2, [pc, #36]	; (80046a8 <USB_CoreReset+0x60>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e006      	b.n	800469a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d0f1      	beq.n	800467c <USB_CoreReset+0x34>

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	00030d40 	.word	0x00030d40

080046ac <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80046b8:	f44f 701d 	mov.w	r0, #628	; 0x274
 80046bc:	f003 fbc2 	bl	8007e44 <USBD_static_malloc>
 80046c0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80046d0:	2302      	movs	r3, #2
 80046d2:	e034      	b.n	800473e <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	7c1b      	ldrb	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d115      	bne.n	8004710 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80046e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046e8:	2202      	movs	r2, #2
 80046ea:	2101      	movs	r1, #1
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f003 fa66 	bl	8007bbe <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80046fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046fe:	2202      	movs	r2, #2
 8004700:	2181      	movs	r1, #129	; 0x81
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f003 fa5b 	bl	8007bbe <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	871a      	strh	r2, [r3, #56]	; 0x38
 800470e:	e012      	b.n	8004736 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004710:	2340      	movs	r3, #64	; 0x40
 8004712:	2202      	movs	r2, #2
 8004714:	2101      	movs	r1, #1
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f003 fa51 	bl	8007bbe <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004724:	2340      	movs	r3, #64	; 0x40
 8004726:	2202      	movs	r2, #2
 8004728:	2181      	movs	r1, #129	; 0x81
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f003 fa47 	bl	8007bbe <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f999 	bl	8004a6e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	460b      	mov	r3, r1
 8004750:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004752:	2101      	movs	r1, #1
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f003 fa58 	bl	8007c0a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004762:	2181      	movs	r1, #129	; 0x81
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f003 fa50 	bl	8007c0a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00c      	beq.n	8004794 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f9d5 	bl	8004b2a <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004786:	4618      	mov	r0, r3
 8004788:	f003 fb6a 	bl	8007e60 <USBD_static_free>
    pdev->pClassData = NULL;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047b0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e0db      	b.n	800497c <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d04e      	beq.n	800486e <USBD_MSC_Setup+0xce>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	f040 80cb 	bne.w	800496c <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	2bfe      	cmp	r3, #254	; 0xfe
 80047dc:	d002      	beq.n	80047e4 <USBD_MSC_Setup+0x44>
 80047de:	2bff      	cmp	r3, #255	; 0xff
 80047e0:	d025      	beq.n	800482e <USBD_MSC_Setup+0x8e>
 80047e2:	e03c      	b.n	800485e <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	885b      	ldrh	r3, [r3, #2]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d119      	bne.n	8004820 <USBD_MSC_Setup+0x80>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	88db      	ldrh	r3, [r3, #6]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d115      	bne.n	8004820 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da10      	bge.n	8004820 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	4798      	blx	r3
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2201      	movs	r2, #1
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f002 fe13 	bl	8007442 <USBD_CtlSendData>
 800481c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800481e:	e025      	b.n	800486c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f002 fd9c 	bl	8007360 <USBD_CtlError>
            ret = USBD_FAIL;
 8004828:	2303      	movs	r3, #3
 800482a:	75fb      	strb	r3, [r7, #23]
          break;
 800482c:	e01e      	b.n	800486c <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	885b      	ldrh	r3, [r3, #2]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10c      	bne.n	8004850 <USBD_MSC_Setup+0xb0>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	88db      	ldrh	r3, [r3, #6]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d108      	bne.n	8004850 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004844:	2b00      	cmp	r3, #0
 8004846:	db03      	blt.n	8004850 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f948 	bl	8004ade <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800484e:	e00d      	b.n	800486c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f002 fd84 	bl	8007360 <USBD_CtlError>
            ret = USBD_FAIL;
 8004858:	2303      	movs	r3, #3
 800485a:	75fb      	strb	r3, [r7, #23]
          break;
 800485c:	e006      	b.n	800486c <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800485e:	6839      	ldr	r1, [r7, #0]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f002 fd7d 	bl	8007360 <USBD_CtlError>
          ret = USBD_FAIL;
 8004866:	2303      	movs	r3, #3
 8004868:	75fb      	strb	r3, [r7, #23]
          break;
 800486a:	bf00      	nop
      }
      break;
 800486c:	e085      	b.n	800497a <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	785b      	ldrb	r3, [r3, #1]
 8004872:	2b0b      	cmp	r3, #11
 8004874:	d871      	bhi.n	800495a <USBD_MSC_Setup+0x1ba>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <USBD_MSC_Setup+0xdc>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	080048ad 	.word	0x080048ad
 8004880:	08004929 	.word	0x08004929
 8004884:	0800495b 	.word	0x0800495b
 8004888:	0800495b 	.word	0x0800495b
 800488c:	0800495b 	.word	0x0800495b
 8004890:	0800495b 	.word	0x0800495b
 8004894:	0800495b 	.word	0x0800495b
 8004898:	0800495b 	.word	0x0800495b
 800489c:	0800495b 	.word	0x0800495b
 80048a0:	0800495b 	.word	0x0800495b
 80048a4:	080048d7 	.word	0x080048d7
 80048a8:	08004901 	.word	0x08004901
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d107      	bne.n	80048c8 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80048b8:	f107 030e 	add.w	r3, r7, #14
 80048bc:	2202      	movs	r2, #2
 80048be:	4619      	mov	r1, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f002 fdbe 	bl	8007442 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048c6:	e050      	b.n	800496a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80048c8:	6839      	ldr	r1, [r7, #0]
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f002 fd48 	bl	8007360 <USBD_CtlError>
            ret = USBD_FAIL;
 80048d0:	2303      	movs	r3, #3
 80048d2:	75fb      	strb	r3, [r7, #23]
          break;
 80048d4:	e049      	b.n	800496a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d107      	bne.n	80048f2 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3304      	adds	r3, #4
 80048e6:	2201      	movs	r2, #1
 80048e8:	4619      	mov	r1, r3
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f002 fda9 	bl	8007442 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048f0:	e03b      	b.n	800496a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f002 fd33 	bl	8007360 <USBD_CtlError>
            ret = USBD_FAIL;
 80048fa:	2303      	movs	r3, #3
 80048fc:	75fb      	strb	r3, [r7, #23]
          break;
 80048fe:	e034      	b.n	800496a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b03      	cmp	r3, #3
 800490a:	d106      	bne.n	800491a <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	885b      	ldrh	r3, [r3, #2]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004918:	e027      	b.n	800496a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800491a:	6839      	ldr	r1, [r7, #0]
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f002 fd1f 	bl	8007360 <USBD_CtlError>
            ret = USBD_FAIL;
 8004922:	2303      	movs	r3, #3
 8004924:	75fb      	strb	r3, [r7, #23]
          break;
 8004926:	e020      	b.n	800496a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b03      	cmp	r3, #3
 8004932:	d119      	bne.n	8004968 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	885b      	ldrh	r3, [r3, #2]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d115      	bne.n	8004968 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	889b      	ldrh	r3, [r3, #4]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f003 f97f 	bl	8007c48 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	889b      	ldrh	r3, [r3, #4]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa82 	bl	8004e5c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8004958:	e006      	b.n	8004968 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f002 fcff 	bl	8007360 <USBD_CtlError>
          ret = USBD_FAIL;
 8004962:	2303      	movs	r3, #3
 8004964:	75fb      	strb	r3, [r7, #23]
          break;
 8004966:	e000      	b.n	800496a <USBD_MSC_Setup+0x1ca>
          break;
 8004968:	bf00      	nop
      }
      break;
 800496a:	e006      	b.n	800497a <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f002 fcf6 	bl	8007360 <USBD_CtlError>
      ret = USBD_FAIL;
 8004974:	2303      	movs	r3, #3
 8004976:	75fb      	strb	r3, [r7, #23]
      break;
 8004978:	bf00      	nop
  }

  return (uint8_t)ret;
 800497a:	7dfb      	ldrb	r3, [r7, #23]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	4619      	mov	r1, r3
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f8dc 	bl	8004b52 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f902 	bl	8004bbe <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80049d2:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20000044 	.word	0x20000044

080049e4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80049f2:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	20000064 	.word	0x20000064

08004a04 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8004a12:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	20000084 	.word	0x20000084

08004a24 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	220a      	movs	r2, #10
 8004a30:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8004a32:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	200000a4 	.word	0x200000a4

08004a44 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e004      	b.n	8004a62 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a7c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d028      	beq.n	8004ad6 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f003 f8c6 	bl	8007c48 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8004abc:	2181      	movs	r1, #129	; 0x81
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f003 f8c2 	bl	8007c48 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004aca:	231f      	movs	r3, #31
 8004acc:	2101      	movs	r1, #1
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f003 f983 	bl	8007dda <USBD_LL_PrepareReceive>
 8004ad4:	e000      	b.n	8004ad8 <MSC_BOT_Init+0x6a>
    return;
 8004ad6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004aec:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d016      	beq.n	8004b22 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8004b00:	2181      	movs	r1, #129	; 0x81
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f003 f8de 	bl	8007cc4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8004b08:	2101      	movs	r1, #1
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f003 f8da 	bl	8007cc4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004b16:	231f      	movs	r3, #31
 8004b18:	2101      	movs	r1, #1
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f003 f95d 	bl	8007dda <USBD_LL_PrepareReceive>
 8004b20:	e000      	b.n	8004b24 <MSC_BOT_Reset+0x46>
    return;
 8004b22:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b38:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	721a      	strb	r2, [r3, #8]
  }
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b64:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d020      	beq.n	8004bae <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	7a1b      	ldrb	r3, [r3, #8]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d005      	beq.n	8004b80 <MSC_BOT_DataIn+0x2e>
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	db1c      	blt.n	8004bb2 <MSC_BOT_DataIn+0x60>
 8004b78:	3b03      	subs	r3, #3
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d819      	bhi.n	8004bb2 <MSC_BOT_DataIn+0x60>
 8004b7e:	e011      	b.n	8004ba4 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f992 	bl	8004eb8 <SCSI_ProcessCmd>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da0d      	bge.n	8004bb6 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f8fb 	bl	8004d98 <MSC_BOT_SendCSW>
      }
      break;
 8004ba2:	e008      	b.n	8004bb6 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8f6 	bl	8004d98 <MSC_BOT_SendCSW>
      break;
 8004bac:	e004      	b.n	8004bb8 <MSC_BOT_DataIn+0x66>
    return;
 8004bae:	bf00      	nop
 8004bb0:	e002      	b.n	8004bb8 <MSC_BOT_DataIn+0x66>

    default:
      break;
 8004bb2:	bf00      	nop
 8004bb4:	e000      	b.n	8004bb8 <MSC_BOT_DataIn+0x66>
      break;
 8004bb6:	bf00      	nop
  }
}
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bd0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01c      	beq.n	8004c12 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	7a1b      	ldrb	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <MSC_BOT_DataOut+0x28>
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d004      	beq.n	8004bee <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8004be4:	e018      	b.n	8004c18 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f81a 	bl	8004c20 <MSC_BOT_CBW_Decode>
      break;
 8004bec:	e014      	b.n	8004c18 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f95b 	bl	8004eb8 <SCSI_ProcessCmd>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da06      	bge.n	8004c16 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004c08:	2101      	movs	r1, #1
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8c4 	bl	8004d98 <MSC_BOT_SendCSW>
      break;
 8004c10:	e001      	b.n	8004c16 <MSC_BOT_DataOut+0x58>
    return;
 8004c12:	bf00      	nop
 8004c14:	e000      	b.n	8004c18 <MSC_BOT_DataOut+0x5a>
      break;
 8004c16:	bf00      	nop
  }
}
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c2e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d077      	beq.n	8004d26 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004c4e:	2101      	movs	r1, #1
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f003 f8e3 	bl	8007e1c <USBD_LL_GetRxDataSize>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b1f      	cmp	r3, #31
 8004c5a:	d114      	bne.n	8004c86 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004c62:	4a34      	ldr	r2, [pc, #208]	; (8004d34 <MSC_BOT_CBW_Decode+0x114>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d10e      	bne.n	8004c86 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d809      	bhi.n	8004c86 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d90e      	bls.n	8004ca4 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c8c:	2320      	movs	r3, #32
 8004c8e:	2205      	movs	r2, #5
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fdbc 	bl	800580e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f8ab 	bl	8004df8 <MSC_BOT_Abort>
 8004ca2:	e043      	b.n	8004d2c <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f900 	bl	8004eb8 <SCSI_ProcessCmd>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da0c      	bge.n	8004cd8 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	7a1b      	ldrb	r3, [r3, #8]
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d104      	bne.n	8004cd0 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f865 	bl	8004d98 <MSC_BOT_SendCSW>
 8004cce:	e02d      	b.n	8004d2c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f891 	bl	8004df8 <MSC_BOT_Abort>
 8004cd6:	e029      	b.n	8004d2c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	7a1b      	ldrb	r3, [r3, #8]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d024      	beq.n	8004d2a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d020      	beq.n	8004d2a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d01c      	beq.n	8004d2a <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d009      	beq.n	8004d0c <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f103 0110 	add.w	r1, r3, #16
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	461a      	mov	r2, r3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f817 	bl	8004d38 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8004d0a:	e00f      	b.n	8004d2c <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004d14:	2100      	movs	r1, #0
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f83e 	bl	8004d98 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8004d1c:	e006      	b.n	8004d2c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f86a 	bl	8004df8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8004d24:	e002      	b.n	8004d2c <MSC_BOT_CBW_Decode+0x10c>
    return;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8004d2a:	bf00      	nop
    }
  }
}
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	43425355 	.word	0x43425355

08004d38 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d4a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	4293      	cmp	r3, r2
 8004d56:	bf28      	it	cs
 8004d58:	4613      	movcs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d015      	beq.n	8004d8e <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	1ad2      	subs	r2, r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	2181      	movs	r1, #129	; 0x81
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f003 f806 	bl	8007d98 <USBD_LL_Transmit>
 8004d8c:	e000      	b.n	8004d90 <MSC_BOT_SendData+0x58>
    return;
 8004d8e:	bf00      	nop
}
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004daa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01b      	beq.n	8004dea <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a0f      	ldr	r2, [pc, #60]	; (8004df4 <MSC_BOT_SendCSW+0x5c>)
 8004db6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8004dce:	230d      	movs	r3, #13
 8004dd0:	2181      	movs	r1, #129	; 0x81
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f002 ffe0 	bl	8007d98 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004dde:	231f      	movs	r3, #31
 8004de0:	2101      	movs	r1, #1
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f002 fff9 	bl	8007dda <USBD_LL_PrepareReceive>
 8004de8:	e000      	b.n	8004dec <MSC_BOT_SendCSW+0x54>
    return;
 8004dea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	53425355 	.word	0x53425355

08004df8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e06:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d022      	beq.n	8004e54 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10c      	bne.n	8004e32 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d103      	bne.n	8004e32 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f002 ff2a 	bl	8007c86 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004e32:	2181      	movs	r1, #129	; 0x81
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f002 ff26 	bl	8007c86 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	7a5b      	ldrb	r3, [r3, #9]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d109      	bne.n	8004e56 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004e42:	2181      	movs	r1, #129	; 0x81
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f002 ff1e 	bl	8007c86 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f002 ff1a 	bl	8007c86 <USBD_LL_StallEP>
 8004e52:	e000      	b.n	8004e56 <MSC_BOT_Abort+0x5e>
    return;
 8004e54:	bf00      	nop
  }
}
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e6e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d019      	beq.n	8004eaa <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	7a5b      	ldrb	r3, [r3, #9]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d108      	bne.n	8004e90 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004e7e:	2181      	movs	r1, #129	; 0x81
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f002 ff00 	bl	8007c86 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8004e86:	2101      	movs	r1, #1
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f002 fefc 	bl	8007c86 <USBD_LL_StallEP>
 8004e8e:	e00f      	b.n	8004eb0 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8004e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da0a      	bge.n	8004eae <MSC_BOT_CplClrFeature+0x52>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	7a5b      	ldrb	r3, [r3, #9]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d006      	beq.n	8004eae <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff ff78 	bl	8004d98 <MSC_BOT_SendCSW>
 8004ea8:	e002      	b.n	8004eb0 <MSC_BOT_CplClrFeature+0x54>
    return;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8004eae:	bf00      	nop
  }
}
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ecc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8004ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed8:	e168      	b.n	80051ac <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2baa      	cmp	r3, #170	; 0xaa
 8004ee0:	f000 8144 	beq.w	800516c <SCSI_ProcessCmd+0x2b4>
 8004ee4:	2baa      	cmp	r3, #170	; 0xaa
 8004ee6:	f300 8153 	bgt.w	8005190 <SCSI_ProcessCmd+0x2d8>
 8004eea:	2ba8      	cmp	r3, #168	; 0xa8
 8004eec:	f000 812c 	beq.w	8005148 <SCSI_ProcessCmd+0x290>
 8004ef0:	2ba8      	cmp	r3, #168	; 0xa8
 8004ef2:	f300 814d 	bgt.w	8005190 <SCSI_ProcessCmd+0x2d8>
 8004ef6:	2b5a      	cmp	r3, #90	; 0x5a
 8004ef8:	f300 80c0 	bgt.w	800507c <SCSI_ProcessCmd+0x1c4>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f2c0 8147 	blt.w	8005190 <SCSI_ProcessCmd+0x2d8>
 8004f02:	2b5a      	cmp	r3, #90	; 0x5a
 8004f04:	f200 8144 	bhi.w	8005190 <SCSI_ProcessCmd+0x2d8>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <SCSI_ProcessCmd+0x58>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08005083 	.word	0x08005083
 8004f14:	08005191 	.word	0x08005191
 8004f18:	08005191 	.word	0x08005191
 8004f1c:	08005095 	.word	0x08005095
 8004f20:	08005191 	.word	0x08005191
 8004f24:	08005191 	.word	0x08005191
 8004f28:	08005191 	.word	0x08005191
 8004f2c:	08005191 	.word	0x08005191
 8004f30:	08005191 	.word	0x08005191
 8004f34:	08005191 	.word	0x08005191
 8004f38:	08005191 	.word	0x08005191
 8004f3c:	08005191 	.word	0x08005191
 8004f40:	08005191 	.word	0x08005191
 8004f44:	08005191 	.word	0x08005191
 8004f48:	08005191 	.word	0x08005191
 8004f4c:	08005191 	.word	0x08005191
 8004f50:	08005191 	.word	0x08005191
 8004f54:	08005191 	.word	0x08005191
 8004f58:	080050a7 	.word	0x080050a7
 8004f5c:	08005191 	.word	0x08005191
 8004f60:	08005191 	.word	0x08005191
 8004f64:	08005191 	.word	0x08005191
 8004f68:	08005191 	.word	0x08005191
 8004f6c:	08005191 	.word	0x08005191
 8004f70:	08005191 	.word	0x08005191
 8004f74:	08005191 	.word	0x08005191
 8004f78:	080050dd 	.word	0x080050dd
 8004f7c:	080050b9 	.word	0x080050b9
 8004f80:	08005191 	.word	0x08005191
 8004f84:	08005191 	.word	0x08005191
 8004f88:	080050cb 	.word	0x080050cb
 8004f8c:	08005191 	.word	0x08005191
 8004f90:	08005191 	.word	0x08005191
 8004f94:	08005191 	.word	0x08005191
 8004f98:	08005191 	.word	0x08005191
 8004f9c:	08005101 	.word	0x08005101
 8004fa0:	08005191 	.word	0x08005191
 8004fa4:	08005113 	.word	0x08005113
 8004fa8:	08005191 	.word	0x08005191
 8004fac:	08005191 	.word	0x08005191
 8004fb0:	08005137 	.word	0x08005137
 8004fb4:	08005191 	.word	0x08005191
 8004fb8:	0800515b 	.word	0x0800515b
 8004fbc:	08005191 	.word	0x08005191
 8004fc0:	08005191 	.word	0x08005191
 8004fc4:	08005191 	.word	0x08005191
 8004fc8:	08005191 	.word	0x08005191
 8004fcc:	0800517f 	.word	0x0800517f
 8004fd0:	08005191 	.word	0x08005191
 8004fd4:	08005191 	.word	0x08005191
 8004fd8:	08005191 	.word	0x08005191
 8004fdc:	08005191 	.word	0x08005191
 8004fe0:	08005191 	.word	0x08005191
 8004fe4:	08005191 	.word	0x08005191
 8004fe8:	08005191 	.word	0x08005191
 8004fec:	08005191 	.word	0x08005191
 8004ff0:	08005191 	.word	0x08005191
 8004ff4:	08005191 	.word	0x08005191
 8004ff8:	08005191 	.word	0x08005191
 8004ffc:	08005191 	.word	0x08005191
 8005000:	08005191 	.word	0x08005191
 8005004:	08005191 	.word	0x08005191
 8005008:	08005191 	.word	0x08005191
 800500c:	08005191 	.word	0x08005191
 8005010:	08005191 	.word	0x08005191
 8005014:	08005191 	.word	0x08005191
 8005018:	08005191 	.word	0x08005191
 800501c:	08005191 	.word	0x08005191
 8005020:	08005191 	.word	0x08005191
 8005024:	08005191 	.word	0x08005191
 8005028:	08005191 	.word	0x08005191
 800502c:	08005191 	.word	0x08005191
 8005030:	08005191 	.word	0x08005191
 8005034:	08005191 	.word	0x08005191
 8005038:	08005191 	.word	0x08005191
 800503c:	08005191 	.word	0x08005191
 8005040:	08005191 	.word	0x08005191
 8005044:	08005191 	.word	0x08005191
 8005048:	08005191 	.word	0x08005191
 800504c:	08005191 	.word	0x08005191
 8005050:	08005191 	.word	0x08005191
 8005054:	08005191 	.word	0x08005191
 8005058:	08005191 	.word	0x08005191
 800505c:	08005191 	.word	0x08005191
 8005060:	08005191 	.word	0x08005191
 8005064:	08005191 	.word	0x08005191
 8005068:	08005191 	.word	0x08005191
 800506c:	08005191 	.word	0x08005191
 8005070:	08005191 	.word	0x08005191
 8005074:	08005191 	.word	0x08005191
 8005078:	080050ef 	.word	0x080050ef
 800507c:	2b9e      	cmp	r3, #158	; 0x9e
 800507e:	d051      	beq.n	8005124 <SCSI_ProcessCmd+0x26c>
 8005080:	e086      	b.n	8005190 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8005082:	7afb      	ldrb	r3, [r7, #11]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	4619      	mov	r1, r3
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f893 	bl	80051b4 <SCSI_TestUnitReady>
 800508e:	4603      	mov	r3, r0
 8005090:	75fb      	strb	r3, [r7, #23]
      break;
 8005092:	e089      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8005094:	7afb      	ldrb	r3, [r7, #11]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4619      	mov	r1, r3
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 fb38 	bl	8005710 <SCSI_RequestSense>
 80050a0:	4603      	mov	r3, r0
 80050a2:	75fb      	strb	r3, [r7, #23]
      break;
 80050a4:	e080      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80050a6:	7afb      	ldrb	r3, [r7, #11]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4619      	mov	r1, r3
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f8d1 	bl	8005254 <SCSI_Inquiry>
 80050b2:	4603      	mov	r3, r0
 80050b4:	75fb      	strb	r3, [r7, #23]
      break;
 80050b6:	e077      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80050b8:	7afb      	ldrb	r3, [r7, #11]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4619      	mov	r1, r3
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fbec 	bl	800589c <SCSI_StartStopUnit>
 80050c4:	4603      	mov	r3, r0
 80050c6:	75fb      	strb	r3, [r7, #23]
      break;
 80050c8:	e06e      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80050ca:	7afb      	ldrb	r3, [r7, #11]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	4619      	mov	r1, r3
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fc34 	bl	800593e <SCSI_AllowPreventRemovable>
 80050d6:	4603      	mov	r3, r0
 80050d8:	75fb      	strb	r3, [r7, #23]
      break;
 80050da:	e065      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80050dc:	7afb      	ldrb	r3, [r7, #11]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4619      	mov	r1, r3
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fabc 	bl	8005660 <SCSI_ModeSense6>
 80050e8:	4603      	mov	r3, r0
 80050ea:	75fb      	strb	r3, [r7, #23]
      break;
 80050ec:	e05c      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4619      	mov	r1, r3
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fadf 	bl	80056b8 <SCSI_ModeSense10>
 80050fa:	4603      	mov	r3, r0
 80050fc:	75fb      	strb	r3, [r7, #23]
      break;
 80050fe:	e053      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005100:	7afb      	ldrb	r3, [r7, #11]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4619      	mov	r1, r3
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fa37 	bl	800557a <SCSI_ReadFormatCapacity>
 800510c:	4603      	mov	r3, r0
 800510e:	75fb      	strb	r3, [r7, #23]
      break;
 8005110:	e04a      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8005112:	7afb      	ldrb	r3, [r7, #11]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4619      	mov	r1, r3
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f90f 	bl	800533c <SCSI_ReadCapacity10>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]
      break;
 8005122:	e041      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8005124:	7afb      	ldrb	r3, [r7, #11]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	4619      	mov	r1, r3
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f97b 	bl	8005426 <SCSI_ReadCapacity16>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]
      break;
 8005134:	e038      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8005136:	7afb      	ldrb	r3, [r7, #11]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4619      	mov	r1, r3
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fc27 	bl	8005990 <SCSI_Read10>
 8005142:	4603      	mov	r3, r0
 8005144:	75fb      	strb	r3, [r7, #23]
      break;
 8005146:	e02f      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8005148:	7afb      	ldrb	r3, [r7, #11]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4619      	mov	r1, r3
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fcbe 	bl	8005ad0 <SCSI_Read12>
 8005154:	4603      	mov	r3, r0
 8005156:	75fb      	strb	r3, [r7, #23]
      break;
 8005158:	e026      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800515a:	7afb      	ldrb	r3, [r7, #11]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4619      	mov	r1, r3
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fd60 	bl	8005c26 <SCSI_Write10>
 8005166:	4603      	mov	r3, r0
 8005168:	75fb      	strb	r3, [r7, #23]
      break;
 800516a:	e01d      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800516c:	7afb      	ldrb	r3, [r7, #11]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4619      	mov	r1, r3
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fe1c 	bl	8005db0 <SCSI_Write12>
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]
      break;
 800517c:	e014      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800517e:	7afb      	ldrb	r3, [r7, #11]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 fee8 	bl	8005f5a <SCSI_Verify10>
 800518a:	4603      	mov	r3, r0
 800518c:	75fb      	strb	r3, [r7, #23]
      break;
 800518e:	e00b      	b.n	80051a8 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005190:	7af9      	ldrb	r1, [r7, #11]
 8005192:	2320      	movs	r3, #32
 8005194:	2205      	movs	r2, #5
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fb39 	bl	800580e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2202      	movs	r2, #2
 80051a0:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80051a2:	23ff      	movs	r3, #255	; 0xff
 80051a4:	75fb      	strb	r3, [r7, #23]
      break;
 80051a6:	bf00      	nop
  }

  return ret;
 80051a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	460b      	mov	r3, r1
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051c8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 80051d0:	f04f 33ff 	mov.w	r3, #4294967295
 80051d4:	e03a      	b.n	800524c <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80051e6:	2320      	movs	r3, #32
 80051e8:	2205      	movs	r2, #5
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fb0f 	bl	800580e <SCSI_SenseCode>

    return -1;
 80051f0:	f04f 33ff 	mov.w	r3, #4294967295
 80051f4:	e02a      	b.n	800524c <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d10b      	bne.n	8005218 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005200:	7af9      	ldrb	r1, [r7, #11]
 8005202:	233a      	movs	r3, #58	; 0x3a
 8005204:	2202      	movs	r2, #2
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fb01 	bl	800580e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2205      	movs	r2, #5
 8005210:	721a      	strb	r2, [r3, #8]
    return -1;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
 8005216:	e019      	b.n	800524c <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	7afa      	ldrb	r2, [r7, #11]
 8005222:	4610      	mov	r0, r2
 8005224:	4798      	blx	r3
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800522c:	7af9      	ldrb	r1, [r7, #11]
 800522e:	233a      	movs	r3, #58	; 0x3a
 8005230:	2202      	movs	r2, #2
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 faeb 	bl	800580e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2205      	movs	r2, #5
 800523c:	721a      	strb	r2, [r3, #8]

    return -1;
 800523e:	f04f 33ff 	mov.w	r3, #4294967295
 8005242:	e003      	b.n	800524c <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2200      	movs	r2, #0
 8005248:	60da      	str	r2, [r3, #12]

  return 0;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	460b      	mov	r3, r1
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005268:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <SCSI_Inquiry+0x22>
  {
    return -1;
 8005270:	f04f 33ff 	mov.w	r3, #4294967295
 8005274:	e05a      	b.n	800532c <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005286:	2320      	movs	r3, #32
 8005288:	2205      	movs	r2, #5
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 fabf 	bl	800580e <SCSI_SenseCode>
    return -1;
 8005290:	f04f 33ff 	mov.w	r3, #4294967295
 8005294:	e04a      	b.n	800532c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3301      	adds	r3, #1
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3302      	adds	r3, #2
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d105      	bne.n	80052ba <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80052ae:	2206      	movs	r2, #6
 80052b0:	4920      	ldr	r1, [pc, #128]	; (8005334 <SCSI_Inquiry+0xe0>)
 80052b2:	69b8      	ldr	r0, [r7, #24]
 80052b4:	f000 ffb4 	bl	8006220 <SCSI_UpdateBotData>
 80052b8:	e037      	b.n	800532a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3302      	adds	r3, #2
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b80      	cmp	r3, #128	; 0x80
 80052c2:	d105      	bne.n	80052d0 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80052c4:	2208      	movs	r2, #8
 80052c6:	491c      	ldr	r1, [pc, #112]	; (8005338 <SCSI_Inquiry+0xe4>)
 80052c8:	69b8      	ldr	r0, [r7, #24]
 80052ca:	f000 ffa9 	bl	8006220 <SCSI_UpdateBotData>
 80052ce:	e02c      	b.n	800532a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80052d6:	2324      	movs	r3, #36	; 0x24
 80052d8:	2205      	movs	r2, #5
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fa97 	bl	800580e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80052e0:	f04f 33ff 	mov.w	r3, #4294967295
 80052e4:	e022      	b.n	800532c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052ec:	69d9      	ldr	r1, [r3, #28]
 80052ee:	7afa      	ldrb	r2, [r7, #11]
 80052f0:	4613      	mov	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	3304      	adds	r3, #4
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	3305      	adds	r3, #5
 8005306:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	8bfa      	ldrh	r2, [r7, #30]
 8005312:	429a      	cmp	r2, r3
 8005314:	d303      	bcc.n	800531e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800531e:	8bfb      	ldrh	r3, [r7, #30]
 8005320:	461a      	mov	r2, r3
 8005322:	6979      	ldr	r1, [r7, #20]
 8005324:	69b8      	ldr	r0, [r7, #24]
 8005326:	f000 ff7b 	bl	8006220 <SCSI_UpdateBotData>
  }

  return 0;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	200000b0 	.word	0x200000b0
 8005338:	200000b8 	.word	0x200000b8

0800533c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	460b      	mov	r3, r1
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005350:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8005358:	f04f 33ff 	mov.w	r3, #4294967295
 800535c:	e05f      	b.n	800541e <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005372:	7af8      	ldrb	r0, [r7, #11]
 8005374:	4798      	blx	r3
 8005376:	4603      	mov	r3, r0
 8005378:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800537a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <SCSI_ReadCapacity10+0x50>
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005388:	2b02      	cmp	r3, #2
 800538a:	d108      	bne.n	800539e <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800538c:	7af9      	ldrb	r1, [r7, #11]
 800538e:	233a      	movs	r3, #58	; 0x3a
 8005390:	2202      	movs	r2, #2
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fa3b 	bl	800580e <SCSI_SenseCode>
    return -1;
 8005398:	f04f 33ff 	mov.w	r3, #4294967295
 800539c:	e03f      	b.n	800541e <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80053a4:	3b01      	subs	r3, #1
 80053a6:	0e1b      	lsrs	r3, r3, #24
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80053b4:	3b01      	subs	r3, #1
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80053c4:	3b01      	subs	r3, #1
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80053e4:	161b      	asrs	r3, r3, #24
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80053f2:	141b      	asrs	r3, r3, #16
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	b29b      	uxth	r3, r3
 8005404:	b2da      	uxtb	r2, r3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005410:	b2da      	uxtb	r2, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2208      	movs	r2, #8
 800541a:	60da      	str	r2, [r3, #12]

  return 0;
 800541c:	2300      	movs	r3, #0

}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b088      	sub	sp, #32
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	460b      	mov	r3, r1
 8005430:	607a      	str	r2, [r7, #4]
 8005432:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800543a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8005442:	f04f 33ff 	mov.w	r3, #4294967295
 8005446:	e094      	b.n	8005572 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800545c:	7af8      	ldrb	r0, [r7, #11]
 800545e:	4798      	blx	r3
 8005460:	4603      	mov	r3, r0
 8005462:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <SCSI_ReadCapacity16+0x50>
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005472:	2b02      	cmp	r3, #2
 8005474:	d108      	bne.n	8005488 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005476:	7af9      	ldrb	r1, [r7, #11]
 8005478:	233a      	movs	r3, #58	; 0x3a
 800547a:	2202      	movs	r2, #2
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f9c6 	bl	800580e <SCSI_SenseCode>
    return -1;
 8005482:	f04f 33ff 	mov.w	r3, #4294967295
 8005486:	e074      	b.n	8005572 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	330a      	adds	r3, #10
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	330b      	adds	r3, #11
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005498:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	330c      	adds	r3, #12
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80054a2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	320d      	adds	r2, #13
 80054a8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80054aa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80054b0:	2300      	movs	r3, #0
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e007      	b.n	80054c6 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 80054b6:	7ffb      	ldrb	r3, [r7, #31]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4413      	add	r3, r2
 80054bc:	2200      	movs	r2, #0
 80054be:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80054c0:	7ffb      	ldrb	r3, [r7, #31]
 80054c2:	3301      	adds	r3, #1
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	7ffa      	ldrb	r2, [r7, #31]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d3f2      	bcc.n	80054b6 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80054d6:	3b01      	subs	r3, #1
 80054d8:	0e1b      	lsrs	r3, r3, #24
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80054e6:	3b01      	subs	r3, #1
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80054f6:	3b01      	subs	r3, #1
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005506:	b2db      	uxtb	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005516:	161b      	asrs	r3, r3, #24
 8005518:	b2da      	uxtb	r2, r3
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005524:	141b      	asrs	r3, r3, #16
 8005526:	b2da      	uxtb	r2, r3
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005532:	0a1b      	lsrs	r3, r3, #8
 8005534:	b29b      	uxth	r3, r3
 8005536:	b2da      	uxtb	r2, r3
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005542:	b2da      	uxtb	r2, r3
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	330a      	adds	r3, #10
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	330b      	adds	r3, #11
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005558:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	330c      	adds	r3, #12
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005562:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	320d      	adds	r2, #13
 8005568:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800556a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	60da      	str	r2, [r3, #12]

  return 0;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b088      	sub	sp, #32
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	460b      	mov	r3, r1
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800558e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d102      	bne.n	800559c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8005596:	f04f 33ff 	mov.w	r3, #4294967295
 800559a:	e05c      	b.n	8005656 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f107 0214 	add.w	r2, r7, #20
 80055a8:	f107 0110 	add.w	r1, r7, #16
 80055ac:	7af8      	ldrb	r0, [r7, #11]
 80055ae:	4798      	blx	r3
 80055b0:	4603      	mov	r3, r0
 80055b2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80055b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <SCSI_ReadFormatCapacity+0x4c>
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d108      	bne.n	80055d8 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80055c6:	7af9      	ldrb	r1, [r7, #11]
 80055c8:	233a      	movs	r3, #58	; 0x3a
 80055ca:	2202      	movs	r2, #2
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f91e 	bl	800580e <SCSI_SenseCode>
    return -1;
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295
 80055d6:	e03e      	b.n	8005656 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80055d8:	2300      	movs	r3, #0
 80055da:	83fb      	strh	r3, [r7, #30]
 80055dc:	e007      	b.n	80055ee <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80055de:	8bfb      	ldrh	r3, [r7, #30]
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4413      	add	r3, r2
 80055e4:	2200      	movs	r2, #0
 80055e6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80055e8:	8bfb      	ldrh	r3, [r7, #30]
 80055ea:	3301      	adds	r3, #1
 80055ec:	83fb      	strh	r3, [r7, #30]
 80055ee:	8bfb      	ldrh	r3, [r7, #30]
 80055f0:	2b0b      	cmp	r3, #11
 80055f2:	d9f4      	bls.n	80055de <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2208      	movs	r2, #8
 80055f8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	0e1b      	lsrs	r3, r3, #24
 8005600:	b2da      	uxtb	r2, r3
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	3b01      	subs	r3, #1
 800560a:	0c1b      	lsrs	r3, r3, #16
 800560c:	b2da      	uxtb	r2, r3
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3b01      	subs	r3, #1
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	b2da      	uxtb	r2, r3
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b2da      	uxtb	r2, r3
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2202      	movs	r2, #2
 800562e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005630:	8abb      	ldrh	r3, [r7, #20]
 8005632:	141b      	asrs	r3, r3, #16
 8005634:	b2da      	uxtb	r2, r3
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800563a:	8abb      	ldrh	r3, [r7, #20]
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	b29b      	uxth	r3, r3
 8005640:	b2da      	uxtb	r2, r3
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005646:	8abb      	ldrh	r3, [r7, #20]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	220c      	movs	r2, #12
 8005652:	60da      	str	r2, [r3, #12]

  return 0;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	460b      	mov	r3, r1
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005674:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005676:	2317      	movs	r3, #23
 8005678:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8005680:	f04f 33ff 	mov.w	r3, #4294967295
 8005684:	e011      	b.n	80056aa <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3304      	adds	r3, #4
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	8afa      	ldrh	r2, [r7, #22]
 8005690:	429a      	cmp	r2, r3
 8005692:	d303      	bcc.n	800569c <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3304      	adds	r3, #4
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800569c:	8afb      	ldrh	r3, [r7, #22]
 800569e:	461a      	mov	r2, r3
 80056a0:	4904      	ldr	r1, [pc, #16]	; (80056b4 <SCSI_ModeSense6+0x54>)
 80056a2:	6938      	ldr	r0, [r7, #16]
 80056a4:	f000 fdbc 	bl	8006220 <SCSI_UpdateBotData>

  return 0;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	200000c0 	.word	0x200000c0

080056b8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	460b      	mov	r3, r1
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056cc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80056ce:	231b      	movs	r3, #27
 80056d0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <SCSI_ModeSense10+0x26>
  {
    return -1;
 80056d8:	f04f 33ff 	mov.w	r3, #4294967295
 80056dc:	e011      	b.n	8005702 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3308      	adds	r3, #8
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	8afa      	ldrh	r2, [r7, #22]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d303      	bcc.n	80056f4 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3308      	adds	r3, #8
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80056f4:	8afb      	ldrh	r3, [r7, #22]
 80056f6:	461a      	mov	r2, r3
 80056f8:	4904      	ldr	r1, [pc, #16]	; (800570c <SCSI_ModeSense10+0x54>)
 80056fa:	6938      	ldr	r0, [r7, #16]
 80056fc:	f000 fd90 	bl	8006220 <SCSI_UpdateBotData>

  return 0;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	200000d8 	.word	0x200000d8

08005710 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	460b      	mov	r3, r1
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005724:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <SCSI_RequestSense+0x22>
  {
    return -1;
 800572c:	f04f 33ff 	mov.w	r3, #4294967295
 8005730:	e069      	b.n	8005806 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005742:	2320      	movs	r3, #32
 8005744:	2205      	movs	r2, #5
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f861 	bl	800580e <SCSI_SenseCode>
    return -1;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	e059      	b.n	8005806 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]
 8005756:	e007      	b.n	8005768 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4413      	add	r3, r2
 800575e:	2200      	movs	r2, #0
 8005760:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	3301      	adds	r3, #1
 8005766:	75fb      	strb	r3, [r7, #23]
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	2b11      	cmp	r3, #17
 800576c:	d9f4      	bls.n	8005758 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2270      	movs	r2, #112	; 0x70
 8005772:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	220c      	movs	r2, #12
 8005778:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005786:	429a      	cmp	r2, r3
 8005788:	d02e      	beq.n	80057e8 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005790:	461a      	mov	r2, r3
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	3248      	adds	r2, #72	; 0x48
 8005796:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	3348      	adds	r3, #72	; 0x48
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4413      	add	r3, r2
 80057ac:	791a      	ldrb	r2, [r3, #4]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	3348      	adds	r3, #72	; 0x48
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	4413      	add	r3, r2
 80057c0:	795a      	ldrb	r2, [r3, #5]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80057cc:	3301      	adds	r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d103      	bne.n	80057e8 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2212      	movs	r2, #18
 80057ec:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3304      	adds	r3, #4
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b12      	cmp	r3, #18
 80057f6:	d805      	bhi.n	8005804 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	4608      	mov	r0, r1
 8005818:	4611      	mov	r1, r2
 800581a:	461a      	mov	r2, r3
 800581c:	4603      	mov	r3, r0
 800581e:	70fb      	strb	r3, [r7, #3]
 8005820:	460b      	mov	r3, r1
 8005822:	70bb      	strb	r3, [r7, #2]
 8005824:	4613      	mov	r3, r2
 8005826:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800582e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d02c      	beq.n	8005890 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800583c:	461a      	mov	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3248      	adds	r2, #72	; 0x48
 8005842:	78b9      	ldrb	r1, [r7, #2]
 8005844:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	3348      	adds	r3, #72	; 0x48
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4413      	add	r3, r2
 8005856:	787a      	ldrb	r2, [r7, #1]
 8005858:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	3348      	adds	r3, #72	; 0x48
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4413      	add	r3, r2
 8005868:	2200      	movs	r2, #0
 800586a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005872:	3301      	adds	r3, #1
 8005874:	b2da      	uxtb	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005882:	2b04      	cmp	r3, #4
 8005884:	d105      	bne.n	8005892 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800588e:	e000      	b.n	8005892 <SCSI_SenseCode+0x84>
    return;
 8005890:	bf00      	nop
  }
}
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	460b      	mov	r3, r1
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295
 80058bc:	e03b      	b.n	8005936 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d10f      	bne.n	80058e8 <SCSI_StartStopUnit+0x4c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d108      	bne.n	80058e8 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80058d6:	7af9      	ldrb	r1, [r7, #11]
 80058d8:	2324      	movs	r3, #36	; 0x24
 80058da:	2205      	movs	r2, #5
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff ff96 	bl	800580e <SCSI_SenseCode>

    return -1;
 80058e2:	f04f 33ff 	mov.w	r3, #4294967295
 80058e6:	e026      	b.n	8005936 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d104      	bne.n	8005900 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80058fe:	e016      	b.n	800592e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d104      	bne.n	8005918 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005916:	e00a      	b.n	800592e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3304      	adds	r3, #4
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b03      	cmp	r3, #3
 8005924:	d103      	bne.n	800592e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2200      	movs	r2, #0
 8005932:	60da      	str	r2, [r3, #12]

  return 0;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	460b      	mov	r3, r1
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005952:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800595a:	f04f 33ff 	mov.w	r3, #4294967295
 800595e:	e011      	b.n	8005984 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3304      	adds	r3, #4
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005972:	e003      	b.n	800597c <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2200      	movs	r2, #0
 8005980:	60da      	str	r2, [r3, #12]

  return 0;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	460b      	mov	r3, r1
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059a4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <SCSI_Read10+0x22>
  {
    return -1;
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
 80059b0:	e08a      	b.n	8005ac8 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	7a1b      	ldrb	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d17c      	bne.n	8005ab4 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80059c0:	b25b      	sxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	db0a      	blt.n	80059dc <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80059cc:	2320      	movs	r3, #32
 80059ce:	2205      	movs	r2, #5
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff ff1c 	bl	800580e <SCSI_SenseCode>
      return -1;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	e075      	b.n	8005ac8 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d108      	bne.n	80059f8 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80059e6:	7af9      	ldrb	r1, [r7, #11]
 80059e8:	233a      	movs	r3, #58	; 0x3a
 80059ea:	2202      	movs	r2, #2
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7ff ff0e 	bl	800580e <SCSI_SenseCode>

      return -1;
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295
 80059f6:	e067      	b.n	8005ac8 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	7afa      	ldrb	r2, [r7, #11]
 8005a02:	4610      	mov	r0, r2
 8005a04:	4798      	blx	r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005a0c:	7af9      	ldrb	r1, [r7, #11]
 8005a0e:	233a      	movs	r3, #58	; 0x3a
 8005a10:	2202      	movs	r2, #2
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff fefb 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005a18:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1c:	e054      	b.n	8005ac8 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3302      	adds	r3, #2
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3303      	adds	r3, #3
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005a2e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005a38:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	3205      	adds	r2, #5
 8005a3e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005a40:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3307      	adds	r3, #7
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	3208      	adds	r2, #8
 8005a54:	7812      	ldrb	r2, [r2, #0]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005a6a:	7af9      	ldrb	r1, [r7, #11]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 faad 	bl	8005fcc <SCSI_CheckAddressRange>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	da02      	bge.n	8005a7e <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005a78:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7c:	e024      	b.n	8005ac8 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005a8a:	6979      	ldr	r1, [r7, #20]
 8005a8c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005a90:	fb01 f303 	mul.w	r3, r1, r3
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d00a      	beq.n	8005aae <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005a9e:	2320      	movs	r3, #32
 8005aa0:	2205      	movs	r2, #5
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7ff feb3 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	e00c      	b.n	8005ac8 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aba:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005abc:	7afb      	ldrb	r3, [r7, #11]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 faab 	bl	800601c <SCSI_ProcessRead>
 8005ac6:	4603      	mov	r3, r0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ae4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <SCSI_Read12+0x22>
  {
    return -1;
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295
 8005af0:	e095      	b.n	8005c1e <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	7a1b      	ldrb	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 8087 	bne.w	8005c0a <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005b02:	b25b      	sxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	db0a      	blt.n	8005b1e <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005b0e:	2320      	movs	r3, #32
 8005b10:	2205      	movs	r2, #5
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7ff fe7b 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	e07f      	b.n	8005c1e <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d108      	bne.n	8005b3a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b28:	7af9      	ldrb	r1, [r7, #11]
 8005b2a:	233a      	movs	r3, #58	; 0x3a
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff fe6d 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005b34:	f04f 33ff 	mov.w	r3, #4294967295
 8005b38:	e071      	b.n	8005c1e <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	7afa      	ldrb	r2, [r7, #11]
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b4e:	7af9      	ldrb	r1, [r7, #11]
 8005b50:	233a      	movs	r3, #58	; 0x3a
 8005b52:	2202      	movs	r2, #2
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7ff fe5a 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5e:	e05e      	b.n	8005c1e <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3302      	adds	r3, #2
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3303      	adds	r3, #3
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005b70:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3304      	adds	r3, #4
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005b7a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	3205      	adds	r2, #5
 8005b80:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005b82:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3306      	adds	r3, #6
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3307      	adds	r3, #7
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005b9a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005ba4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	3209      	adds	r2, #9
 8005baa:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005bac:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005bc0:	7af9      	ldrb	r1, [r7, #11]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fa02 	bl	8005fcc <SCSI_CheckAddressRange>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	da02      	bge.n	8005bd4 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd2:	e024      	b.n	8005c1e <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005be0:	6979      	ldr	r1, [r7, #20]
 8005be2:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005be6:	fb01 f303 	mul.w	r3, r1, r3
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d00a      	beq.n	8005c04 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005bf4:	2320      	movs	r3, #32
 8005bf6:	2205      	movs	r2, #5
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff fe08 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005c02:	e00c      	b.n	8005c1e <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2202      	movs	r2, #2
 8005c08:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c10:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005c12:	7afb      	ldrb	r3, [r7, #11]
 8005c14:	4619      	mov	r1, r3
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 fa00 	bl	800601c <SCSI_ProcessRead>
 8005c1c:	4603      	mov	r3, r0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b086      	sub	sp, #24
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c3a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d102      	bne.n	8005c48 <SCSI_Write10+0x22>
  {
    return -1;
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	e0af      	b.n	8005da8 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	7a1b      	ldrb	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 80a5 	bne.w	8005d9c <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005c62:	2320      	movs	r3, #32
 8005c64:	2205      	movs	r2, #5
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fdd1 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c70:	e09a      	b.n	8005da8 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005c78:	b25b      	sxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da0a      	bge.n	8005c94 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005c84:	2320      	movs	r3, #32
 8005c86:	2205      	movs	r2, #5
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fdc0 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	e089      	b.n	8005da8 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	7afa      	ldrb	r2, [r7, #11]
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4798      	blx	r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005ca8:	7af9      	ldrb	r1, [r7, #11]
 8005caa:	233a      	movs	r3, #58	; 0x3a
 8005cac:	2202      	movs	r2, #2
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff fdad 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb8:	e076      	b.n	8005da8 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	7afa      	ldrb	r2, [r7, #11]
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4798      	blx	r3
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005cce:	7af9      	ldrb	r1, [r7, #11]
 8005cd0:	2327      	movs	r3, #39	; 0x27
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7ff fd9a 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295
 8005cde:	e063      	b.n	8005da8 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3303      	adds	r3, #3
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005cf0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005cfa:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	3205      	adds	r2, #5
 8005d00:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005d02:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3307      	adds	r3, #7
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	3208      	adds	r2, #8
 8005d16:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005d2c:	7af9      	ldrb	r1, [r7, #11]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f94c 	bl	8005fcc <SCSI_CheckAddressRange>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da02      	bge.n	8005d40 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3e:	e033      	b.n	8005da8 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005d4c:	fb02 f303 	mul.w	r3, r2, r3
 8005d50:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d00a      	beq.n	8005d74 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005d64:	2320      	movs	r3, #32
 8005d66:	2205      	movs	r2, #5
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff fd50 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d72:	e019      	b.n	8005da8 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7a:	bf28      	it	cs
 8005d7c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005d80:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2201      	movs	r2, #1
 8005d86:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f103 0210 	add.w	r2, r3, #16
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2101      	movs	r1, #1
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f002 f821 	bl	8007dda <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e005      	b.n	8005da8 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8005d9c:	7afb      	ldrb	r3, [r7, #11]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f9b4 	bl	800610e <SCSI_ProcessWrite>
 8005da6:	4603      	mov	r3, r0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	460b      	mov	r3, r1
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <SCSI_Write12+0x22>
  {
    return -1;
 8005dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd0:	e0bf      	b.n	8005f52 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	7a1b      	ldrb	r3, [r3, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 80b5 	bne.w	8005f46 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005dec:	2320      	movs	r3, #32
 8005dee:	2205      	movs	r2, #5
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7ff fd0c 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005df6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfa:	e0aa      	b.n	8005f52 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da0a      	bge.n	8005e1e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005e0e:	2320      	movs	r3, #32
 8005e10:	2205      	movs	r2, #5
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7ff fcfb 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005e18:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1c:	e099      	b.n	8005f52 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	7afa      	ldrb	r2, [r7, #11]
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4798      	blx	r3
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e32:	7af9      	ldrb	r1, [r7, #11]
 8005e34:	233a      	movs	r3, #58	; 0x3a
 8005e36:	2202      	movs	r2, #2
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7ff fce8 	bl	800580e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2205      	movs	r2, #5
 8005e42:	721a      	strb	r2, [r3, #8]
      return -1;
 8005e44:	f04f 33ff 	mov.w	r3, #4294967295
 8005e48:	e083      	b.n	8005f52 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	7afa      	ldrb	r2, [r7, #11]
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005e5e:	7af9      	ldrb	r1, [r7, #11]
 8005e60:	2327      	movs	r3, #39	; 0x27
 8005e62:	2202      	movs	r2, #2
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff fcd2 	bl	800580e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2205      	movs	r2, #5
 8005e6e:	721a      	strb	r2, [r3, #8]
      return -1;
 8005e70:	f04f 33ff 	mov.w	r3, #4294967295
 8005e74:	e06d      	b.n	8005f52 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3302      	adds	r3, #2
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3303      	adds	r3, #3
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e86:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005e90:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	3205      	adds	r2, #5
 8005e96:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005e98:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3306      	adds	r3, #6
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3307      	adds	r3, #7
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005eb0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005eba:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	3209      	adds	r2, #9
 8005ec0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005ec2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005ed6:	7af9      	ldrb	r1, [r7, #11]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f877 	bl	8005fcc <SCSI_CheckAddressRange>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	da02      	bge.n	8005eea <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee8:	e033      	b.n	8005f52 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d00a      	beq.n	8005f1e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005f0e:	2320      	movs	r3, #32
 8005f10:	2205      	movs	r2, #5
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff fc7b 	bl	800580e <SCSI_SenseCode>
      return -1;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1c:	e019      	b.n	8005f52 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f24:	bf28      	it	cs
 8005f26:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005f2a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f103 0210 	add.w	r2, r3, #16
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f001 ff4c 	bl	8007dda <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e005      	b.n	8005f52 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f8df 	bl	800610e <SCSI_ProcessWrite>
 8005f50:	4603      	mov	r3, r0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b086      	sub	sp, #24
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	460b      	mov	r3, r1
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f6e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <SCSI_Verify10+0x22>
  {
    return -1;
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7a:	e023      	b.n	8005fc4 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8005f8a:	7af9      	ldrb	r1, [r7, #11]
 8005f8c:	2324      	movs	r3, #36	; 0x24
 8005f8e:	2205      	movs	r2, #5
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7ff fc3c 	bl	800580e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9a:	e013      	b.n	8005fc4 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005fa8:	7af9      	ldrb	r1, [r7, #11]
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f80e 	bl	8005fcc <SCSI_CheckAddressRange>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	da02      	bge.n	8005fbc <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8005fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fba:	e003      	b.n	8005fc4 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	60da      	str	r2, [r3, #12]

  return 0;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fe2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	e011      	b.n	8006014 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d908      	bls.n	8006012 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006000:	7af9      	ldrb	r1, [r7, #11]
 8006002:	2321      	movs	r3, #33	; 0x21
 8006004:	2205      	movs	r2, #5
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff fc01 	bl	800580e <SCSI_SenseCode>
    return -1;
 800600c:	f04f 33ff 	mov.w	r3, #4294967295
 8006010:	e000      	b.n	8006014 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800602e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800603c:	fb02 f303 	mul.w	r3, r2, r3
 8006040:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <SCSI_ProcessRead+0x32>
  {
    return -1;
 8006048:	f04f 33ff 	mov.w	r3, #4294967295
 800604c:	e05b      	b.n	8006106 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006054:	bf28      	it	cs
 8006056:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800605a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006062:	691c      	ldr	r4, [r3, #16]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f103 0110 	add.w	r1, r3, #16
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006076:	4618      	mov	r0, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800607e:	b29b      	uxth	r3, r3
 8006080:	78f8      	ldrb	r0, [r7, #3]
 8006082:	47a0      	blx	r4
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	da08      	bge.n	800609c <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800608a:	78f9      	ldrb	r1, [r7, #3]
 800608c:	2311      	movs	r3, #17
 800608e:	2204      	movs	r2, #4
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff fbbc 	bl	800580e <SCSI_SenseCode>
    return -1;
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
 800609a:	e034      	b.n	8006106 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f103 0210 	add.w	r2, r3, #16
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2181      	movs	r1, #129	; 0x81
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f001 fe76 	bl	8007d98 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80060b8:	4619      	mov	r1, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80060c0:	441a      	add	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80060d4:	4619      	mov	r1, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80060dc:	1ad2      	subs	r2, r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	1ad2      	subs	r2, r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d102      	bne.n	8006104 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2203      	movs	r2, #3
 8006102:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	bd90      	pop	{r4, r7, pc}

0800610e <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800610e:	b590      	push	{r4, r7, lr}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006120:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800612e:	fb02 f303 	mul.w	r3, r2, r3
 8006132:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d102      	bne.n	8006140 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 800613a:	f04f 33ff 	mov.w	r3, #4294967295
 800613e:	e06b      	b.n	8006218 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006146:	bf28      	it	cs
 8006148:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800614c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006154:	695c      	ldr	r4, [r3, #20]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f103 0110 	add.w	r1, r3, #16
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006168:	4618      	mov	r0, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8006170:	b29b      	uxth	r3, r3
 8006172:	78f8      	ldrb	r0, [r7, #3]
 8006174:	47a0      	blx	r4
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	da08      	bge.n	800618e <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800617c:	78f9      	ldrb	r1, [r7, #3]
 800617e:	2303      	movs	r3, #3
 8006180:	2204      	movs	r2, #4
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff fb43 	bl	800580e <SCSI_SenseCode>
    return -1;
 8006188:	f04f 33ff 	mov.w	r3, #4294967295
 800618c:	e044      	b.n	8006218 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800619a:	4619      	mov	r1, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	fbb3 f3f1 	udiv	r3, r3, r1
 80061a2:	441a      	add	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80061b6:	4619      	mov	r1, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80061e0:	2100      	movs	r1, #0
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fe fdd8 	bl	8004d98 <MSC_BOT_SendCSW>
 80061e8:	e015      	b.n	8006216 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fe:	bf28      	it	cs
 8006200:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006204:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f103 0210 	add.w	r2, r3, #16
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2101      	movs	r1, #1
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 fde2 	bl	8007dda <USBD_LL_PrepareReceive>
  }

  return 0;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	bd90      	pop	{r4, r7, pc}

08006220 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	4613      	mov	r3, r2
 800622c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d102      	bne.n	800623e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8006238:	f04f 33ff 	mov.w	r3, #4294967295
 800623c:	e013      	b.n	8006266 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800623e:	8afa      	ldrh	r2, [r7, #22]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8006244:	e00b      	b.n	800625e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8006246:	8afb      	ldrh	r3, [r7, #22]
 8006248:	3b01      	subs	r3, #1
 800624a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800624c:	8afb      	ldrh	r3, [r7, #22]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	441a      	add	r2, r3
 8006252:	8afb      	ldrh	r3, [r7, #22]
 8006254:	7811      	ldrb	r1, [r2, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4413      	add	r3, r2
 800625a:	460a      	mov	r2, r1
 800625c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800625e:	8afb      	ldrh	r3, [r7, #22]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1f0      	bne.n	8006246 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b086      	sub	sp, #24
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	4613      	mov	r3, r2
 800627e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006286:	2303      	movs	r3, #3
 8006288:	e01f      	b.n	80062ca <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	79fa      	ldrb	r2, [r7, #7]
 80062bc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f001 fc16 	bl	8007af0 <USBD_LL_Init>
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e016      	b.n	8006318 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006306:	f107 020e 	add.w	r2, r7, #14
 800630a:	4610      	mov	r0, r2
 800630c:	4798      	blx	r3
 800630e:	4602      	mov	r2, r0
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fc2d 	bl	8007b88 <USBD_LL_Start>
 800632e:	4603      	mov	r3, r0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800635a:	2303      	movs	r3, #3
 800635c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	4611      	mov	r1, r2
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d007      	beq.n	80063ac <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	4611      	mov	r1, r2
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
  }

  return USBD_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 ff8f 	bl	80072ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80063dc:	461a      	mov	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d01a      	beq.n	8006428 <USBD_LL_SetupStage+0x72>
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d822      	bhi.n	800643c <USBD_LL_SetupStage+0x86>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <USBD_LL_SetupStage+0x4a>
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d00a      	beq.n	8006414 <USBD_LL_SetupStage+0x5e>
 80063fe:	e01d      	b.n	800643c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa61 	bl	80068d0 <USBD_StdDevReq>
 800640e:	4603      	mov	r3, r0
 8006410:	73fb      	strb	r3, [r7, #15]
      break;
 8006412:	e020      	b.n	8006456 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fac5 	bl	80069ac <USBD_StdItfReq>
 8006422:	4603      	mov	r3, r0
 8006424:	73fb      	strb	r3, [r7, #15]
      break;
 8006426:	e016      	b.n	8006456 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fb04 	bl	8006a3e <USBD_StdEPReq>
 8006436:	4603      	mov	r3, r0
 8006438:	73fb      	strb	r3, [r7, #15]
      break;
 800643a:	e00c      	b.n	8006456 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006442:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006446:	b2db      	uxtb	r3, r3
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fc1b 	bl	8007c86 <USBD_LL_StallEP>
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
      break;
 8006454:	bf00      	nop
  }

  return ret;
 8006456:	7bfb      	ldrb	r3, [r7, #15]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	460b      	mov	r3, r1
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800646e:	7afb      	ldrb	r3, [r7, #11]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d138      	bne.n	80064e6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800647a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006482:	2b03      	cmp	r3, #3
 8006484:	d14a      	bne.n	800651c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	429a      	cmp	r2, r3
 8006490:	d913      	bls.n	80064ba <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	1ad2      	subs	r2, r2, r3
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4293      	cmp	r3, r2
 80064aa:	bf28      	it	cs
 80064ac:	4613      	movcs	r3, r2
 80064ae:	461a      	mov	r2, r3
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fff1 	bl	800749a <USBD_CtlContinueRx>
 80064b8:	e030      	b.n	800651c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d10b      	bne.n	80064de <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 ffec 	bl	80074bc <USBD_CtlSendStatus>
 80064e4:	e01a      	b.n	800651c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d114      	bne.n	800651c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00e      	beq.n	800651c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	7afa      	ldrb	r2, [r7, #11]
 8006508:	4611      	mov	r1, r2
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	4798      	blx	r3
 800650e:	4603      	mov	r3, r0
 8006510:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	e000      	b.n	800651e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b086      	sub	sp, #24
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	460b      	mov	r3, r1
 8006530:	607a      	str	r2, [r7, #4]
 8006532:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006534:	7afb      	ldrb	r3, [r7, #11]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d16b      	bne.n	8006612 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3314      	adds	r3, #20
 800653e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006546:	2b02      	cmp	r3, #2
 8006548:	d156      	bne.n	80065f8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	429a      	cmp	r2, r3
 8006554:	d914      	bls.n	8006580 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	461a      	mov	r2, r3
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 ff83 	bl	8007478 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006572:	2300      	movs	r3, #0
 8006574:	2200      	movs	r2, #0
 8006576:	2100      	movs	r1, #0
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f001 fc2e 	bl	8007dda <USBD_LL_PrepareReceive>
 800657e:	e03b      	b.n	80065f8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	429a      	cmp	r2, r3
 800658a:	d11c      	bne.n	80065c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006594:	429a      	cmp	r2, r3
 8006596:	d316      	bcc.n	80065c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d20f      	bcs.n	80065c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065a6:	2200      	movs	r2, #0
 80065a8:	2100      	movs	r1, #0
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 ff64 	bl	8007478 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065b8:	2300      	movs	r3, #0
 80065ba:	2200      	movs	r2, #0
 80065bc:	2100      	movs	r1, #0
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f001 fc0b 	bl	8007dda <USBD_LL_PrepareReceive>
 80065c4:	e018      	b.n	80065f8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d10b      	bne.n	80065ea <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065ea:	2180      	movs	r1, #128	; 0x80
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f001 fb4a 	bl	8007c86 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 ff75 	bl	80074e2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d122      	bne.n	8006648 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f7ff fe98 	bl	8006338 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006610:	e01a      	b.n	8006648 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b03      	cmp	r3, #3
 800661c:	d114      	bne.n	8006648 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	7afa      	ldrb	r2, [r7, #11]
 8006634:	4611      	mov	r1, r2
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	4798      	blx	r3
 800663a:	4603      	mov	r3, r0
 800663c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	e000      	b.n	800664a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006682:	2303      	movs	r3, #3
 8006684:	e02f      	b.n	80066e6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00f      	beq.n	80066b0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6852      	ldr	r2, [r2, #4]
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	4611      	mov	r1, r2
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066b0:	2340      	movs	r3, #64	; 0x40
 80066b2:	2200      	movs	r2, #0
 80066b4:	2100      	movs	r1, #0
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 fa81 	bl	8007bbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2240      	movs	r2, #64	; 0x40
 80066c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	2200      	movs	r2, #0
 80066d0:	2180      	movs	r1, #128	; 0x80
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 fa73 	bl	8007bbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2240      	movs	r2, #64	; 0x40
 80066e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	78fa      	ldrb	r2, [r7, #3]
 80066fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800671c:	b2da      	uxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2204      	movs	r2, #4
 8006728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b04      	cmp	r3, #4
 800674c:	d106      	bne.n	800675c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006754:	b2da      	uxtb	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800677c:	2303      	movs	r3, #3
 800677e:	e012      	b.n	80067a6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b03      	cmp	r3, #3
 800678a:	d10b      	bne.n	80067a4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e014      	b.n	80067f2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d10d      	bne.n	80067f0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	4611      	mov	r1, r2
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006810:	2303      	movs	r3, #3
 8006812:	e014      	b.n	800683e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b03      	cmp	r3, #3
 800681e:	d10d      	bne.n	800683c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d007      	beq.n	800683c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	4611      	mov	r1, r2
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6852      	ldr	r2, [r2, #4]
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	4611      	mov	r1, r2
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
  }

  return USBD_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	3301      	adds	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068b2:	8a3b      	ldrh	r3, [r7, #16]
 80068b4:	021b      	lsls	r3, r3, #8
 80068b6:	b21a      	sxth	r2, r3
 80068b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068bc:	4313      	orrs	r3, r2
 80068be:	b21b      	sxth	r3, r3
 80068c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068c2:	89fb      	ldrh	r3, [r7, #14]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d005      	beq.n	80068f6 <USBD_StdDevReq+0x26>
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	d853      	bhi.n	8006996 <USBD_StdDevReq+0xc6>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <USBD_StdDevReq+0x3a>
 80068f2:	2b20      	cmp	r3, #32
 80068f4:	d14f      	bne.n	8006996 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	4798      	blx	r3
 8006904:	4603      	mov	r3, r0
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e04a      	b.n	80069a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	785b      	ldrb	r3, [r3, #1]
 800690e:	2b09      	cmp	r3, #9
 8006910:	d83b      	bhi.n	800698a <USBD_StdDevReq+0xba>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <USBD_StdDevReq+0x48>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	0800696d 	.word	0x0800696d
 800691c:	08006981 	.word	0x08006981
 8006920:	0800698b 	.word	0x0800698b
 8006924:	08006977 	.word	0x08006977
 8006928:	0800698b 	.word	0x0800698b
 800692c:	0800694b 	.word	0x0800694b
 8006930:	08006941 	.word	0x08006941
 8006934:	0800698b 	.word	0x0800698b
 8006938:	08006963 	.word	0x08006963
 800693c:	08006955 	.word	0x08006955
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9de 	bl	8006d04 <USBD_GetDescriptor>
          break;
 8006948:	e024      	b.n	8006994 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fb43 	bl	8006fd8 <USBD_SetAddress>
          break;
 8006952:	e01f      	b.n	8006994 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fb82 	bl	8007060 <USBD_SetConfig>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
          break;
 8006960:	e018      	b.n	8006994 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc21 	bl	80071ac <USBD_GetConfig>
          break;
 800696a:	e013      	b.n	8006994 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fc52 	bl	8007218 <USBD_GetStatus>
          break;
 8006974:	e00e      	b.n	8006994 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fc81 	bl	8007280 <USBD_SetFeature>
          break;
 800697e:	e009      	b.n	8006994 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fc90 	bl	80072a8 <USBD_ClrFeature>
          break;
 8006988:	e004      	b.n	8006994 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fce7 	bl	8007360 <USBD_CtlError>
          break;
 8006992:	bf00      	nop
      }
      break;
 8006994:	e004      	b.n	80069a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fce1 	bl	8007360 <USBD_CtlError>
      break;
 800699e:	bf00      	nop
  }

  return ret;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop

080069ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d005      	beq.n	80069d2 <USBD_StdItfReq+0x26>
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	d82f      	bhi.n	8006a2a <USBD_StdItfReq+0x7e>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <USBD_StdItfReq+0x26>
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d12b      	bne.n	8006a2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d81d      	bhi.n	8006a1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	889b      	ldrh	r3, [r3, #4]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d813      	bhi.n	8006a12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	88db      	ldrh	r3, [r3, #6]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d110      	bne.n	8006a26 <USBD_StdItfReq+0x7a>
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10d      	bne.n	8006a26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fd56 	bl	80074bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a10:	e009      	b.n	8006a26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fca3 	bl	8007360 <USBD_CtlError>
          break;
 8006a1a:	e004      	b.n	8006a26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fc9e 	bl	8007360 <USBD_CtlError>
          break;
 8006a24:	e000      	b.n	8006a28 <USBD_StdItfReq+0x7c>
          break;
 8006a26:	bf00      	nop
      }
      break;
 8006a28:	e004      	b.n	8006a34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc97 	bl	8007360 <USBD_CtlError>
      break;
 8006a32:	bf00      	nop
  }

  return ret;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	889b      	ldrh	r3, [r3, #4]
 8006a50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d007      	beq.n	8006a6e <USBD_StdEPReq+0x30>
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	f200 8145 	bhi.w	8006cee <USBD_StdEPReq+0x2b0>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00c      	beq.n	8006a82 <USBD_StdEPReq+0x44>
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	f040 8140 	bne.w	8006cee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	4798      	blx	r3
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a80:	e13a      	b.n	8006cf8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	785b      	ldrb	r3, [r3, #1]
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d007      	beq.n	8006a9a <USBD_StdEPReq+0x5c>
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	f300 8129 	bgt.w	8006ce2 <USBD_StdEPReq+0x2a4>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d07f      	beq.n	8006b94 <USBD_StdEPReq+0x156>
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d03c      	beq.n	8006b12 <USBD_StdEPReq+0xd4>
 8006a98:	e123      	b.n	8006ce2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d002      	beq.n	8006aac <USBD_StdEPReq+0x6e>
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d016      	beq.n	8006ad8 <USBD_StdEPReq+0x9a>
 8006aaa:	e02c      	b.n	8006b06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aac:	7bbb      	ldrb	r3, [r7, #14]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00d      	beq.n	8006ace <USBD_StdEPReq+0x90>
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	2b80      	cmp	r3, #128	; 0x80
 8006ab6:	d00a      	beq.n	8006ace <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 f8e2 	bl	8007c86 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ac2:	2180      	movs	r1, #128	; 0x80
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 f8de 	bl	8007c86 <USBD_LL_StallEP>
 8006aca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006acc:	e020      	b.n	8006b10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fc45 	bl	8007360 <USBD_CtlError>
              break;
 8006ad6:	e01b      	b.n	8006b10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	885b      	ldrh	r3, [r3, #2]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10e      	bne.n	8006afe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ae0:	7bbb      	ldrb	r3, [r7, #14]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00b      	beq.n	8006afe <USBD_StdEPReq+0xc0>
 8006ae6:	7bbb      	ldrb	r3, [r7, #14]
 8006ae8:	2b80      	cmp	r3, #128	; 0x80
 8006aea:	d008      	beq.n	8006afe <USBD_StdEPReq+0xc0>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	88db      	ldrh	r3, [r3, #6]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d104      	bne.n	8006afe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 f8c4 	bl	8007c86 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fcdc 	bl	80074bc <USBD_CtlSendStatus>

              break;
 8006b04:	e004      	b.n	8006b10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fc29 	bl	8007360 <USBD_CtlError>
              break;
 8006b0e:	bf00      	nop
          }
          break;
 8006b10:	e0ec      	b.n	8006cec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d002      	beq.n	8006b24 <USBD_StdEPReq+0xe6>
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d016      	beq.n	8006b50 <USBD_StdEPReq+0x112>
 8006b22:	e030      	b.n	8006b86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00d      	beq.n	8006b46 <USBD_StdEPReq+0x108>
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b80      	cmp	r3, #128	; 0x80
 8006b2e:	d00a      	beq.n	8006b46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 f8a6 	bl	8007c86 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b3a:	2180      	movs	r1, #128	; 0x80
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 f8a2 	bl	8007c86 <USBD_LL_StallEP>
 8006b42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b44:	e025      	b.n	8006b92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fc09 	bl	8007360 <USBD_CtlError>
              break;
 8006b4e:	e020      	b.n	8006b92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	885b      	ldrh	r3, [r3, #2]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d11b      	bne.n	8006b90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 f8ac 	bl	8007cc4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fca5 	bl	80074bc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006b84:	e004      	b.n	8006b90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fbe9 	bl	8007360 <USBD_CtlError>
              break;
 8006b8e:	e000      	b.n	8006b92 <USBD_StdEPReq+0x154>
              break;
 8006b90:	bf00      	nop
          }
          break;
 8006b92:	e0ab      	b.n	8006cec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d002      	beq.n	8006ba6 <USBD_StdEPReq+0x168>
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d032      	beq.n	8006c0a <USBD_StdEPReq+0x1cc>
 8006ba4:	e097      	b.n	8006cd6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <USBD_StdEPReq+0x17e>
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	2b80      	cmp	r3, #128	; 0x80
 8006bb0:	d004      	beq.n	8006bbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fbd3 	bl	8007360 <USBD_CtlError>
                break;
 8006bba:	e091      	b.n	8006ce0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	da0b      	bge.n	8006bdc <USBD_StdEPReq+0x19e>
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	3310      	adds	r3, #16
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3304      	adds	r3, #4
 8006bda:	e00b      	b.n	8006bf4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fc1d 	bl	8007442 <USBD_CtlSendData>
              break;
 8006c08:	e06a      	b.n	8006ce0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da11      	bge.n	8006c36 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	f003 020f 	and.w	r2, r3, #15
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	3324      	adds	r3, #36	; 0x24
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d117      	bne.n	8006c5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fb96 	bl	8007360 <USBD_CtlError>
                  break;
 8006c34:	e054      	b.n	8006ce0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	f003 020f 	and.w	r2, r3, #15
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fb83 	bl	8007360 <USBD_CtlError>
                  break;
 8006c5a:	e041      	b.n	8006ce0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	da0b      	bge.n	8006c7c <USBD_StdEPReq+0x23e>
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	3310      	adds	r3, #16
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	4413      	add	r3, r2
 8006c78:	3304      	adds	r3, #4
 8006c7a:	e00b      	b.n	8006c94 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	3304      	adds	r3, #4
 8006c94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <USBD_StdEPReq+0x264>
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	2b80      	cmp	r3, #128	; 0x80
 8006ca0:	d103      	bne.n	8006caa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	e00e      	b.n	8006cc8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 f827 	bl	8007d02 <USBD_LL_IsStallEP>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	e002      	b.n	8006cc8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fbb7 	bl	8007442 <USBD_CtlSendData>
              break;
 8006cd4:	e004      	b.n	8006ce0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fb41 	bl	8007360 <USBD_CtlError>
              break;
 8006cde:	bf00      	nop
          }
          break;
 8006ce0:	e004      	b.n	8006cec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fb3b 	bl	8007360 <USBD_CtlError>
          break;
 8006cea:	bf00      	nop
      }
      break;
 8006cec:	e004      	b.n	8006cf8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fb35 	bl	8007360 <USBD_CtlError>
      break;
 8006cf6:	bf00      	nop
  }

  return ret;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	885b      	ldrh	r3, [r3, #2]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	2b06      	cmp	r3, #6
 8006d26:	f200 8128 	bhi.w	8006f7a <USBD_GetDescriptor+0x276>
 8006d2a:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <USBD_GetDescriptor+0x2c>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d4d 	.word	0x08006d4d
 8006d34:	08006d65 	.word	0x08006d65
 8006d38:	08006da5 	.word	0x08006da5
 8006d3c:	08006f7b 	.word	0x08006f7b
 8006d40:	08006f7b 	.word	0x08006f7b
 8006d44:	08006f1b 	.word	0x08006f1b
 8006d48:	08006f47 	.word	0x08006f47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	7c12      	ldrb	r2, [r2, #16]
 8006d58:	f107 0108 	add.w	r1, r7, #8
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4798      	blx	r3
 8006d60:	60f8      	str	r0, [r7, #12]
      break;
 8006d62:	e112      	b.n	8006f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7c1b      	ldrb	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10d      	bne.n	8006d88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f107 0208 	add.w	r2, r7, #8
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
 8006d7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3301      	adds	r3, #1
 8006d82:	2202      	movs	r2, #2
 8006d84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d86:	e100      	b.n	8006f8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	f107 0208 	add.w	r2, r7, #8
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
 8006d98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	2202      	movs	r2, #2
 8006da0:	701a      	strb	r2, [r3, #0]
      break;
 8006da2:	e0f2      	b.n	8006f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	885b      	ldrh	r3, [r3, #2]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	f200 80ac 	bhi.w	8006f08 <USBD_GetDescriptor+0x204>
 8006db0:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <USBD_GetDescriptor+0xb4>)
 8006db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db6:	bf00      	nop
 8006db8:	08006dd1 	.word	0x08006dd1
 8006dbc:	08006e05 	.word	0x08006e05
 8006dc0:	08006e39 	.word	0x08006e39
 8006dc4:	08006e6d 	.word	0x08006e6d
 8006dc8:	08006ea1 	.word	0x08006ea1
 8006dcc:	08006ed5 	.word	0x08006ed5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	7c12      	ldrb	r2, [r2, #16]
 8006de8:	f107 0108 	add.w	r1, r7, #8
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
 8006df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df2:	e091      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fab2 	bl	8007360 <USBD_CtlError>
            err++;
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	72fb      	strb	r3, [r7, #11]
          break;
 8006e02:	e089      	b.n	8006f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	7c12      	ldrb	r2, [r2, #16]
 8006e1c:	f107 0108 	add.w	r1, r7, #8
 8006e20:	4610      	mov	r0, r2
 8006e22:	4798      	blx	r3
 8006e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e26:	e077      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa98 	bl	8007360 <USBD_CtlError>
            err++;
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	3301      	adds	r3, #1
 8006e34:	72fb      	strb	r3, [r7, #11]
          break;
 8006e36:	e06f      	b.n	8006f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	7c12      	ldrb	r2, [r2, #16]
 8006e50:	f107 0108 	add.w	r1, r7, #8
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
 8006e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5a:	e05d      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa7e 	bl	8007360 <USBD_CtlError>
            err++;
 8006e64:	7afb      	ldrb	r3, [r7, #11]
 8006e66:	3301      	adds	r3, #1
 8006e68:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6a:	e055      	b.n	8006f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	7c12      	ldrb	r2, [r2, #16]
 8006e84:	f107 0108 	add.w	r1, r7, #8
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e8e:	e043      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fa64 	bl	8007360 <USBD_CtlError>
            err++;
 8006e98:	7afb      	ldrb	r3, [r7, #11]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e9e:	e03b      	b.n	8006f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	7c12      	ldrb	r2, [r2, #16]
 8006eb8:	f107 0108 	add.w	r1, r7, #8
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4798      	blx	r3
 8006ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ec2:	e029      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa4a 	bl	8007360 <USBD_CtlError>
            err++;
 8006ecc:	7afb      	ldrb	r3, [r7, #11]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ed2:	e021      	b.n	8006f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7c12      	ldrb	r2, [r2, #16]
 8006eec:	f107 0108 	add.w	r1, r7, #8
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ef6:	e00f      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fa30 	bl	8007360 <USBD_CtlError>
            err++;
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	3301      	adds	r3, #1
 8006f04:	72fb      	strb	r3, [r7, #11]
          break;
 8006f06:	e007      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa28 	bl	8007360 <USBD_CtlError>
          err++;
 8006f10:	7afb      	ldrb	r3, [r7, #11]
 8006f12:	3301      	adds	r3, #1
 8006f14:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006f16:	bf00      	nop
      }
      break;
 8006f18:	e037      	b.n	8006f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	7c1b      	ldrb	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d109      	bne.n	8006f36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2a:	f107 0208 	add.w	r2, r7, #8
 8006f2e:	4610      	mov	r0, r2
 8006f30:	4798      	blx	r3
 8006f32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f34:	e029      	b.n	8006f8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fa11 	bl	8007360 <USBD_CtlError>
        err++;
 8006f3e:	7afb      	ldrb	r3, [r7, #11]
 8006f40:	3301      	adds	r3, #1
 8006f42:	72fb      	strb	r3, [r7, #11]
      break;
 8006f44:	e021      	b.n	8006f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	7c1b      	ldrb	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10d      	bne.n	8006f6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	f107 0208 	add.w	r2, r7, #8
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	4798      	blx	r3
 8006f5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3301      	adds	r3, #1
 8006f64:	2207      	movs	r2, #7
 8006f66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f68:	e00f      	b.n	8006f8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9f7 	bl	8007360 <USBD_CtlError>
        err++;
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	3301      	adds	r3, #1
 8006f76:	72fb      	strb	r3, [r7, #11]
      break;
 8006f78:	e007      	b.n	8006f8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f9ef 	bl	8007360 <USBD_CtlError>
      err++;
 8006f82:	7afb      	ldrb	r3, [r7, #11]
 8006f84:	3301      	adds	r3, #1
 8006f86:	72fb      	strb	r3, [r7, #11]
      break;
 8006f88:	bf00      	nop
  }

  if (err != 0U)
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d11e      	bne.n	8006fce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	88db      	ldrh	r3, [r3, #6]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d016      	beq.n	8006fc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f98:	893b      	ldrh	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00e      	beq.n	8006fbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	88da      	ldrh	r2, [r3, #6]
 8006fa2:	893b      	ldrh	r3, [r7, #8]
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	bf28      	it	cs
 8006fa8:	4613      	movcs	r3, r2
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fae:	893b      	ldrh	r3, [r7, #8]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fa44 	bl	8007442 <USBD_CtlSendData>
 8006fba:	e009      	b.n	8006fd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f9ce 	bl	8007360 <USBD_CtlError>
 8006fc4:	e004      	b.n	8006fd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa78 	bl	80074bc <USBD_CtlSendStatus>
 8006fcc:	e000      	b.n	8006fd0 <USBD_GetDescriptor+0x2cc>
    return;
 8006fce:	bf00      	nop
  }
}
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop

08006fd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	889b      	ldrh	r3, [r3, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d131      	bne.n	800704e <USBD_SetAddress+0x76>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	88db      	ldrh	r3, [r3, #6]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d12d      	bne.n	800704e <USBD_SetAddress+0x76>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	885b      	ldrh	r3, [r3, #2]
 8006ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff8:	d829      	bhi.n	800704e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	885b      	ldrh	r3, [r3, #2]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007004:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b03      	cmp	r3, #3
 8007010:	d104      	bne.n	800701c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f9a3 	bl	8007360 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701a:	e01d      	b.n	8007058 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	7bfa      	ldrb	r2, [r7, #15]
 8007020:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fe96 	bl	8007d5a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa44 	bl	80074bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2202      	movs	r2, #2
 800703e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007042:	e009      	b.n	8007058 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704c:	e004      	b.n	8007058 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f985 	bl	8007360 <USBD_CtlError>
  }
}
 8007056:	bf00      	nop
 8007058:	bf00      	nop
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	b2da      	uxtb	r2, r3
 8007074:	4b4c      	ldr	r3, [pc, #304]	; (80071a8 <USBD_SetConfig+0x148>)
 8007076:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007078:	4b4b      	ldr	r3, [pc, #300]	; (80071a8 <USBD_SetConfig+0x148>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d905      	bls.n	800708c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f96c 	bl	8007360 <USBD_CtlError>
    return USBD_FAIL;
 8007088:	2303      	movs	r3, #3
 800708a:	e088      	b.n	800719e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d002      	beq.n	800709e <USBD_SetConfig+0x3e>
 8007098:	2b03      	cmp	r3, #3
 800709a:	d025      	beq.n	80070e8 <USBD_SetConfig+0x88>
 800709c:	e071      	b.n	8007182 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800709e:	4b42      	ldr	r3, [pc, #264]	; (80071a8 <USBD_SetConfig+0x148>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01c      	beq.n	80070e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80070a6:	4b40      	ldr	r3, [pc, #256]	; (80071a8 <USBD_SetConfig+0x148>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070b0:	4b3d      	ldr	r3, [pc, #244]	; (80071a8 <USBD_SetConfig+0x148>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7ff f949 	bl	800634e <USBD_SetClassConfig>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f949 	bl	8007360 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070ce:	e065      	b.n	800719c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f9f3 	bl	80074bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2203      	movs	r2, #3
 80070da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070de:	e05d      	b.n	800719c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f9eb 	bl	80074bc <USBD_CtlSendStatus>
      break;
 80070e6:	e059      	b.n	800719c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070e8:	4b2f      	ldr	r3, [pc, #188]	; (80071a8 <USBD_SetConfig+0x148>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d112      	bne.n	8007116 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80070f8:	4b2b      	ldr	r3, [pc, #172]	; (80071a8 <USBD_SetConfig+0x148>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007102:	4b29      	ldr	r3, [pc, #164]	; (80071a8 <USBD_SetConfig+0x148>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff f93c 	bl	8006386 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9d4 	bl	80074bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007114:	e042      	b.n	800719c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007116:	4b24      	ldr	r3, [pc, #144]	; (80071a8 <USBD_SetConfig+0x148>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d02a      	beq.n	800717a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff f92a 	bl	8006386 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007132:	4b1d      	ldr	r3, [pc, #116]	; (80071a8 <USBD_SetConfig+0x148>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800713c:	4b1a      	ldr	r3, [pc, #104]	; (80071a8 <USBD_SetConfig+0x148>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff f903 	bl	800634e <USBD_SetClassConfig>
 8007148:	4603      	mov	r3, r0
 800714a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00f      	beq.n	8007172 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f903 	bl	8007360 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff f90f 	bl	8006386 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007170:	e014      	b.n	800719c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f9a2 	bl	80074bc <USBD_CtlSendStatus>
      break;
 8007178:	e010      	b.n	800719c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f99e 	bl	80074bc <USBD_CtlSendStatus>
      break;
 8007180:	e00c      	b.n	800719c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f8eb 	bl	8007360 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800718a:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <USBD_SetConfig+0x148>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff f8f8 	bl	8006386 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007196:	2303      	movs	r3, #3
 8007198:	73fb      	strb	r3, [r7, #15]
      break;
 800719a:	bf00      	nop
  }

  return ret;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000180 	.word	0x20000180

080071ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	88db      	ldrh	r3, [r3, #6]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d004      	beq.n	80071c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f8cd 	bl	8007360 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071c6:	e023      	b.n	8007210 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	dc02      	bgt.n	80071da <USBD_GetConfig+0x2e>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	dc03      	bgt.n	80071e0 <USBD_GetConfig+0x34>
 80071d8:	e015      	b.n	8007206 <USBD_GetConfig+0x5a>
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d00b      	beq.n	80071f6 <USBD_GetConfig+0x4a>
 80071de:	e012      	b.n	8007206 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3308      	adds	r3, #8
 80071ea:	2201      	movs	r2, #1
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f927 	bl	8007442 <USBD_CtlSendData>
        break;
 80071f4:	e00c      	b.n	8007210 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3304      	adds	r3, #4
 80071fa:	2201      	movs	r2, #1
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f91f 	bl	8007442 <USBD_CtlSendData>
        break;
 8007204:	e004      	b.n	8007210 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f8a9 	bl	8007360 <USBD_CtlError>
        break;
 800720e:	bf00      	nop
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007228:	b2db      	uxtb	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	2b02      	cmp	r3, #2
 800722e:	d81e      	bhi.n	800726e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	88db      	ldrh	r3, [r3, #6]
 8007234:	2b02      	cmp	r3, #2
 8007236:	d004      	beq.n	8007242 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f890 	bl	8007360 <USBD_CtlError>
        break;
 8007240:	e01a      	b.n	8007278 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f043 0202 	orr.w	r2, r3, #2
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	330c      	adds	r3, #12
 8007262:	2202      	movs	r2, #2
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f8eb 	bl	8007442 <USBD_CtlSendData>
      break;
 800726c:	e004      	b.n	8007278 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f875 	bl	8007360 <USBD_CtlError>
      break;
 8007276:	bf00      	nop
  }
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	885b      	ldrh	r3, [r3, #2]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d106      	bne.n	80072a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f90e 	bl	80074bc <USBD_CtlSendStatus>
  }
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d80b      	bhi.n	80072d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	885b      	ldrh	r3, [r3, #2]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d10c      	bne.n	80072e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f8f3 	bl	80074bc <USBD_CtlSendStatus>
      }
      break;
 80072d6:	e004      	b.n	80072e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f840 	bl	8007360 <USBD_CtlError>
      break;
 80072e0:	e000      	b.n	80072e4 <USBD_ClrFeature+0x3c>
      break;
 80072e2:	bf00      	nop
  }
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7ff fabc 	bl	8006894 <SWAPBYTE>
 800731c:	4603      	mov	r3, r0
 800731e:	461a      	mov	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3301      	adds	r3, #1
 800732e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff faaf 	bl	8006894 <SWAPBYTE>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3301      	adds	r3, #1
 8007342:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff faa2 	bl	8006894 <SWAPBYTE>
 8007350:	4603      	mov	r3, r0
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	80da      	strh	r2, [r3, #6]
}
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800736a:	2180      	movs	r1, #128	; 0x80
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fc8a 	bl	8007c86 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fc86 	bl	8007c86 <USBD_LL_StallEP>
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b086      	sub	sp, #24
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d036      	beq.n	8007406 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800739c:	6938      	ldr	r0, [r7, #16]
 800739e:	f000 f836 	bl	800740e <USBD_GetLen>
 80073a2:	4603      	mov	r3, r0
 80073a4:	3301      	adds	r3, #1
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	4413      	add	r3, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	7812      	ldrb	r2, [r2, #0]
 80073ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
 80073be:	3301      	adds	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	4413      	add	r3, r2
 80073c8:	2203      	movs	r2, #3
 80073ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	3301      	adds	r3, #1
 80073d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80073d2:	e013      	b.n	80073fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	4413      	add	r3, r2
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	3301      	adds	r3, #1
 80073e4:	613b      	str	r3, [r7, #16]
    idx++;
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	3301      	adds	r3, #1
 80073ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	4413      	add	r3, r2
 80073f2:	2200      	movs	r2, #0
 80073f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	3301      	adds	r3, #1
 80073fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e7      	bne.n	80073d4 <USBD_GetString+0x52>
 8007404:	e000      	b.n	8007408 <USBD_GetString+0x86>
    return;
 8007406:	bf00      	nop
  }
}
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800741e:	e005      	b.n	800742c <USBD_GetLen+0x1e>
  {
    len++;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	3301      	adds	r3, #1
 8007424:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	3301      	adds	r3, #1
 800742a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1f5      	bne.n	8007420 <USBD_GetLen+0x12>
  }

  return len;
 8007434:	7bfb      	ldrb	r3, [r7, #15]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2202      	movs	r2, #2
 8007452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	2100      	movs	r1, #0
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 fc95 	bl	8007d98 <USBD_LL_Transmit>

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	2100      	movs	r1, #0
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fc84 	bl	8007d98 <USBD_LL_Transmit>

  return USBD_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	2100      	movs	r1, #0
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 fc94 	bl	8007dda <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2204      	movs	r2, #4
 80074c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074cc:	2300      	movs	r3, #0
 80074ce:	2200      	movs	r2, #0
 80074d0:	2100      	movs	r1, #0
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fc60 	bl	8007d98 <USBD_LL_Transmit>

  return USBD_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2205      	movs	r2, #5
 80074ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074f2:	2300      	movs	r3, #0
 80074f4:	2200      	movs	r2, #0
 80074f6:	2100      	movs	r1, #0
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fc6e 	bl	8007dda <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800750c:	2200      	movs	r2, #0
 800750e:	4912      	ldr	r1, [pc, #72]	; (8007558 <MX_USB_DEVICE_Init+0x50>)
 8007510:	4812      	ldr	r0, [pc, #72]	; (800755c <MX_USB_DEVICE_Init+0x54>)
 8007512:	f7fe feae 	bl	8006272 <USBD_Init>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800751c:	f7f9 f8bc 	bl	8000698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007520:	490f      	ldr	r1, [pc, #60]	; (8007560 <MX_USB_DEVICE_Init+0x58>)
 8007522:	480e      	ldr	r0, [pc, #56]	; (800755c <MX_USB_DEVICE_Init+0x54>)
 8007524:	f7fe fed5 	bl	80062d2 <USBD_RegisterClass>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800752e:	f7f9 f8b3 	bl	8000698 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007532:	490c      	ldr	r1, [pc, #48]	; (8007564 <MX_USB_DEVICE_Init+0x5c>)
 8007534:	4809      	ldr	r0, [pc, #36]	; (800755c <MX_USB_DEVICE_Init+0x54>)
 8007536:	f7fd fa85 	bl	8004a44 <USBD_MSC_RegisterStorage>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007540:	f7f9 f8aa 	bl	8000698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007544:	4805      	ldr	r0, [pc, #20]	; (800755c <MX_USB_DEVICE_Init+0x54>)
 8007546:	f7fe feeb 	bl	8006320 <USBD_Start>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007550:	f7f9 f8a2 	bl	8000698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007554:	bf00      	nop
 8007556:	bd80      	pop	{r7, pc}
 8007558:	200000f4 	.word	0x200000f4
 800755c:	20000444 	.word	0x20000444
 8007560:	2000000c 	.word	0x2000000c
 8007564:	20000144 	.word	0x20000144

08007568 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	6039      	str	r1, [r7, #0]
 8007572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2212      	movs	r2, #18
 8007578:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800757a:	4b03      	ldr	r3, [pc, #12]	; (8007588 <USBD_FS_DeviceDescriptor+0x20>)
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	20000110 	.word	0x20000110

0800758c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	6039      	str	r1, [r7, #0]
 8007596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2204      	movs	r2, #4
 800759c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800759e:	4b03      	ldr	r3, [pc, #12]	; (80075ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	20000124 	.word	0x20000124

080075b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	6039      	str	r1, [r7, #0]
 80075ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075bc:	79fb      	ldrb	r3, [r7, #7]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d105      	bne.n	80075ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	4907      	ldr	r1, [pc, #28]	; (80075e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80075c6:	4808      	ldr	r0, [pc, #32]	; (80075e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80075c8:	f7ff fedb 	bl	8007382 <USBD_GetString>
 80075cc:	e004      	b.n	80075d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	4904      	ldr	r1, [pc, #16]	; (80075e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80075d2:	4805      	ldr	r0, [pc, #20]	; (80075e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80075d4:	f7ff fed5 	bl	8007382 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075d8:	4b02      	ldr	r3, [pc, #8]	; (80075e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20000714 	.word	0x20000714
 80075e8:	08007f58 	.word	0x08007f58

080075ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	6039      	str	r1, [r7, #0]
 80075f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	4904      	ldr	r1, [pc, #16]	; (800760c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075fc:	4804      	ldr	r0, [pc, #16]	; (8007610 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075fe:	f7ff fec0 	bl	8007382 <USBD_GetString>
  return USBD_StrDesc;
 8007602:	4b02      	ldr	r3, [pc, #8]	; (800760c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20000714 	.word	0x20000714
 8007610:	08007f6c 	.word	0x08007f6c

08007614 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	6039      	str	r1, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	221a      	movs	r2, #26
 8007624:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007626:	f000 f843 	bl	80076b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800762a:	4b02      	ldr	r3, [pc, #8]	; (8007634 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000128 	.word	0x20000128

08007638 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	6039      	str	r1, [r7, #0]
 8007642:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d105      	bne.n	8007656 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	4907      	ldr	r1, [pc, #28]	; (800766c <USBD_FS_ConfigStrDescriptor+0x34>)
 800764e:	4808      	ldr	r0, [pc, #32]	; (8007670 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007650:	f7ff fe97 	bl	8007382 <USBD_GetString>
 8007654:	e004      	b.n	8007660 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	4904      	ldr	r1, [pc, #16]	; (800766c <USBD_FS_ConfigStrDescriptor+0x34>)
 800765a:	4805      	ldr	r0, [pc, #20]	; (8007670 <USBD_FS_ConfigStrDescriptor+0x38>)
 800765c:	f7ff fe91 	bl	8007382 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007660:	4b02      	ldr	r3, [pc, #8]	; (800766c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000714 	.word	0x20000714
 8007670:	08007f80 	.word	0x08007f80

08007674 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d105      	bne.n	8007692 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	4907      	ldr	r1, [pc, #28]	; (80076a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800768a:	4808      	ldr	r0, [pc, #32]	; (80076ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800768c:	f7ff fe79 	bl	8007382 <USBD_GetString>
 8007690:	e004      	b.n	800769c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	4904      	ldr	r1, [pc, #16]	; (80076a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007696:	4805      	ldr	r0, [pc, #20]	; (80076ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007698:	f7ff fe73 	bl	8007382 <USBD_GetString>
  }
  return USBD_StrDesc;
 800769c:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000714 	.word	0x20000714
 80076ac:	08007f8c 	.word	0x08007f8c

080076b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076b6:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <Get_SerialNum+0x44>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076bc:	4b0e      	ldr	r3, [pc, #56]	; (80076f8 <Get_SerialNum+0x48>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076c2:	4b0e      	ldr	r3, [pc, #56]	; (80076fc <Get_SerialNum+0x4c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4413      	add	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076d6:	2208      	movs	r2, #8
 80076d8:	4909      	ldr	r1, [pc, #36]	; (8007700 <Get_SerialNum+0x50>)
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f814 	bl	8007708 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076e0:	2204      	movs	r2, #4
 80076e2:	4908      	ldr	r1, [pc, #32]	; (8007704 <Get_SerialNum+0x54>)
 80076e4:	68b8      	ldr	r0, [r7, #8]
 80076e6:	f000 f80f 	bl	8007708 <IntToUnicode>
  }
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	1fff7a10 	.word	0x1fff7a10
 80076f8:	1fff7a14 	.word	0x1fff7a14
 80076fc:	1fff7a18 	.word	0x1fff7a18
 8007700:	2000012a 	.word	0x2000012a
 8007704:	2000013a 	.word	0x2000013a

08007708 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800771a:	2300      	movs	r3, #0
 800771c:	75fb      	strb	r3, [r7, #23]
 800771e:	e027      	b.n	8007770 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	0f1b      	lsrs	r3, r3, #28
 8007724:	2b09      	cmp	r3, #9
 8007726:	d80b      	bhi.n	8007740 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	0f1b      	lsrs	r3, r3, #28
 800772c:	b2da      	uxtb	r2, r3
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	4619      	mov	r1, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	440b      	add	r3, r1
 8007738:	3230      	adds	r2, #48	; 0x30
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	701a      	strb	r2, [r3, #0]
 800773e:	e00a      	b.n	8007756 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	0f1b      	lsrs	r3, r3, #28
 8007744:	b2da      	uxtb	r2, r3
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	4619      	mov	r1, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	440b      	add	r3, r1
 8007750:	3237      	adds	r2, #55	; 0x37
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	3301      	adds	r3, #1
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	4413      	add	r3, r2
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	3301      	adds	r3, #1
 800776e:	75fb      	strb	r3, [r7, #23]
 8007770:	7dfa      	ldrb	r2, [r7, #23]
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	429a      	cmp	r2, r3
 8007776:	d3d3      	bcc.n	8007720 <IntToUnicode+0x18>
  }
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	4603      	mov	r3, r0
 800778e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8007790:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	4603      	mov	r3, r0
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2280      	movs	r2, #128	; 0x80
 80077b0:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077b8:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80077ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077d2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80077ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
 8007802:	461a      	mov	r2, r3
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]
 8007808:	4613      	mov	r3, r2
 800780a:	81bb      	strh	r3, [r7, #12]
	memcpy(buf, &UsbMscBuffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	025b      	lsls	r3, r3, #9
 8007810:	4a06      	ldr	r2, [pc, #24]	; (800782c <STORAGE_Read_FS+0x34>)
 8007812:	1899      	adds	r1, r3, r2
 8007814:	89bb      	ldrh	r3, [r7, #12]
 8007816:	025b      	lsls	r3, r3, #9
 8007818:	461a      	mov	r2, r3
 800781a:	68b8      	ldr	r0, [r7, #8]
 800781c:	f000 fb7a 	bl	8007f14 <memcpy>
  /* USER CODE BEGIN 6 */

  return (USBD_OK);
 8007820:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20000914 	.word	0x20000914

08007830 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	461a      	mov	r2, r3
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
 8007840:	4613      	mov	r3, r2
 8007842:	81bb      	strh	r3, [r7, #12]
	memcpy(&UsbMscBuffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	025b      	lsls	r3, r3, #9
 8007848:	4a06      	ldr	r2, [pc, #24]	; (8007864 <STORAGE_Write_FS+0x34>)
 800784a:	1898      	adds	r0, r3, r2
 800784c:	89bb      	ldrh	r3, [r7, #12]
 800784e:	025b      	lsls	r3, r3, #9
 8007850:	461a      	mov	r2, r3
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	f000 fb5e 	bl	8007f14 <memcpy>
  /* USER CODE BEGIN 7 */

  return (USBD_OK);
 8007858:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000914 	.word	0x20000914

08007868 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800786c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800786e:	4618      	mov	r0, r3
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007880:	f107 0314 	add.w	r3, r7, #20
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	605a      	str	r2, [r3, #4]
 800788a:	609a      	str	r2, [r3, #8]
 800788c:	60da      	str	r2, [r3, #12]
 800788e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007898:	d13a      	bne.n	8007910 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800789a:	2300      	movs	r3, #0
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	4b1e      	ldr	r3, [pc, #120]	; (8007918 <HAL_PCD_MspInit+0xa0>)
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	4a1d      	ldr	r2, [pc, #116]	; (8007918 <HAL_PCD_MspInit+0xa0>)
 80078a4:	f043 0301 	orr.w	r3, r3, #1
 80078a8:	6313      	str	r3, [r2, #48]	; 0x30
 80078aa:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <HAL_PCD_MspInit+0xa0>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	613b      	str	r3, [r7, #16]
 80078b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80078b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80078ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078bc:	2302      	movs	r3, #2
 80078be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078c4:	2303      	movs	r3, #3
 80078c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078c8:	230a      	movs	r3, #10
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078cc:	f107 0314 	add.w	r3, r7, #20
 80078d0:	4619      	mov	r1, r3
 80078d2:	4812      	ldr	r0, [pc, #72]	; (800791c <HAL_PCD_MspInit+0xa4>)
 80078d4:	f7f9 f998 	bl	8000c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078d8:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <HAL_PCD_MspInit+0xa0>)
 80078da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078dc:	4a0e      	ldr	r2, [pc, #56]	; (8007918 <HAL_PCD_MspInit+0xa0>)
 80078de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e2:	6353      	str	r3, [r2, #52]	; 0x34
 80078e4:	2300      	movs	r3, #0
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <HAL_PCD_MspInit+0xa0>)
 80078ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ec:	4a0a      	ldr	r2, [pc, #40]	; (8007918 <HAL_PCD_MspInit+0xa0>)
 80078ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078f2:	6453      	str	r3, [r2, #68]	; 0x44
 80078f4:	4b08      	ldr	r3, [pc, #32]	; (8007918 <HAL_PCD_MspInit+0xa0>)
 80078f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078fc:	60fb      	str	r3, [r7, #12]
 80078fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007900:	2200      	movs	r2, #0
 8007902:	2100      	movs	r1, #0
 8007904:	2043      	movs	r0, #67	; 0x43
 8007906:	f7f9 f948 	bl	8000b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800790a:	2043      	movs	r0, #67	; 0x43
 800790c:	f7f9 f961 	bl	8000bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007910:	bf00      	nop
 8007912:	3728      	adds	r7, #40	; 0x28
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	40023800 	.word	0x40023800
 800791c:	40020000 	.word	0x40020000

08007920 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f7fe fd3d 	bl	80063b6 <USBD_LL_SetupStage>
}
 800793c:	bf00      	nop
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	4613      	mov	r3, r2
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	4619      	mov	r1, r3
 800796e:	f7fe fd77 	bl	8006460 <USBD_LL_DataOutStage>
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800798c:	78fa      	ldrb	r2, [r7, #3]
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	3348      	adds	r3, #72	; 0x48
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	4619      	mov	r1, r3
 80079a2:	f7fe fdc0 	bl	8006526 <USBD_LL_DataInStage>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fed4 	bl	800676a <USBD_LL_SOF>
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079d2:	2301      	movs	r3, #1
 80079d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d001      	beq.n	80079e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079de:	f7f8 fe5b 	bl	8000698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079e8:	7bfa      	ldrb	r2, [r7, #15]
 80079ea:	4611      	mov	r1, r2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe fe7e 	bl	80066ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe fe2a 	bl	8006652 <USBD_LL_Reset>
}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fe79 	bl	800670e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6812      	ldr	r2, [r2, #0]
 8007a2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a2e:	f043 0301 	orr.w	r3, r3, #1
 8007a32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a3c:	4b04      	ldr	r3, [pc, #16]	; (8007a50 <HAL_PCD_SuspendCallback+0x48>)
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	4a03      	ldr	r2, [pc, #12]	; (8007a50 <HAL_PCD_SuspendCallback+0x48>)
 8007a42:	f043 0306 	orr.w	r3, r3, #6
 8007a46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	e000ed00 	.word	0xe000ed00

08007a54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fe69 	bl	800673a <USBD_LL_Resume>
}
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a82:	78fa      	ldrb	r2, [r7, #3]
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe feb7 	bl	80067fa <USBD_LL_IsoOUTIncomplete>
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fe7f 	bl	80067ae <USBD_LL_IsoINIncomplete>
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe febd 	bl	8006846 <USBD_LL_DevConnected>
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe feba 	bl	800685c <USBD_LL_DevDisconnected>
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d13c      	bne.n	8007b7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b00:	4a20      	ldr	r2, [pc, #128]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b10:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b18:	4b1a      	ldr	r3, [pc, #104]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b1a:	2204      	movs	r2, #4
 8007b1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b1e:	4b19      	ldr	r3, [pc, #100]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b20:	2202      	movs	r2, #2
 8007b22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b24:	4b17      	ldr	r3, [pc, #92]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b2a:	4b16      	ldr	r3, [pc, #88]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b30:	4b14      	ldr	r3, [pc, #80]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b36:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b3c:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b42:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b48:	4b0e      	ldr	r3, [pc, #56]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b4e:	480d      	ldr	r0, [pc, #52]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b50:	f7f9 f9f7 	bl	8000f42 <HAL_PCD_Init>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b5a:	f7f8 fd9d 	bl	8000698 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b5e:	2180      	movs	r1, #128	; 0x80
 8007b60:	4808      	ldr	r0, [pc, #32]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b62:	f7fa fb82 	bl	800226a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b66:	2240      	movs	r2, #64	; 0x40
 8007b68:	2100      	movs	r1, #0
 8007b6a:	4806      	ldr	r0, [pc, #24]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b6c:	f7fa fb36 	bl	80021dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b70:	2280      	movs	r2, #128	; 0x80
 8007b72:	2101      	movs	r1, #1
 8007b74:	4803      	ldr	r0, [pc, #12]	; (8007b84 <USBD_LL_Init+0x94>)
 8007b76:	f7fa fb31 	bl	80021dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20010914 	.word	0x20010914

08007b88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7f9 faec 	bl	800117c <HAL_PCD_Start>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 f962 	bl	8007e74 <USBD_Get_USB_Status>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	4608      	mov	r0, r1
 8007bc8:	4611      	mov	r1, r2
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4603      	mov	r3, r0
 8007bce:	70fb      	strb	r3, [r7, #3]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70bb      	strb	r3, [r7, #2]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007be6:	78bb      	ldrb	r3, [r7, #2]
 8007be8:	883a      	ldrh	r2, [r7, #0]
 8007bea:	78f9      	ldrb	r1, [r7, #3]
 8007bec:	f7f9 fed0 	bl	8001990 <HAL_PCD_EP_Open>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f93c 	bl	8007e74 <USBD_Get_USB_Status>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c24:	78fa      	ldrb	r2, [r7, #3]
 8007c26:	4611      	mov	r1, r2
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7f9 ff19 	bl	8001a60 <HAL_PCD_EP_Close>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 f91d 	bl	8007e74 <USBD_Get_USB_Status>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c62:	78fa      	ldrb	r2, [r7, #3]
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fa f8ab 	bl	8001dc2 <HAL_PCD_EP_Flush>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f8fe 	bl	8007e74 <USBD_Get_USB_Status>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ca0:	78fa      	ldrb	r2, [r7, #3]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7f9 ffd2 	bl	8001c4e <HAL_PCD_EP_SetStall>
 8007caa:	4603      	mov	r3, r0
 8007cac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 f8df 	bl	8007e74 <USBD_Get_USB_Status>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cde:	78fa      	ldrb	r2, [r7, #3]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fa f817 	bl	8001d16 <HAL_PCD_EP_ClrStall>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f8c0 	bl	8007e74 <USBD_Get_USB_Status>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d14:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da0b      	bge.n	8007d36 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d24:	68f9      	ldr	r1, [r7, #12]
 8007d26:	4613      	mov	r3, r2
 8007d28:	00db      	lsls	r3, r3, #3
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	440b      	add	r3, r1
 8007d30:	333e      	adds	r3, #62	; 0x3e
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	e00b      	b.n	8007d4e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d36:	78fb      	ldrb	r3, [r7, #3]
 8007d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d3c:	68f9      	ldr	r1, [r7, #12]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	1a9b      	subs	r3, r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d4c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	460b      	mov	r3, r1
 8007d64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d74:	78fa      	ldrb	r2, [r7, #3]
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7f9 fde4 	bl	8001946 <HAL_PCD_SetAddress>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f875 	bl	8007e74 <USBD_Get_USB_Status>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	607a      	str	r2, [r7, #4]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	460b      	mov	r3, r1
 8007da6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007db6:	7af9      	ldrb	r1, [r7, #11]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	f7f9 fefd 	bl	8001bba <HAL_PCD_EP_Transmit>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f854 	bl	8007e74 <USBD_Get_USB_Status>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b086      	sub	sp, #24
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	603b      	str	r3, [r7, #0]
 8007de6:	460b      	mov	r3, r1
 8007de8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007df8:	7af9      	ldrb	r1, [r7, #11]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	f7f9 fe79 	bl	8001af4 <HAL_PCD_EP_Receive>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 f833 	bl	8007e74 <USBD_Get_USB_Status>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e12:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e2e:	78fa      	ldrb	r2, [r7, #3]
 8007e30:	4611      	mov	r1, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7f9 fea9 	bl	8001b8a <HAL_PCD_EP_GetRxCount>
 8007e38:	4603      	mov	r3, r0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e4c:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <USBD_static_malloc+0x18>)
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	20000184 	.word	0x20000184

08007e60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d817      	bhi.n	8007eb8 <USBD_Get_USB_Status+0x44>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_Get_USB_Status+0x1c>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ea1 	.word	0x08007ea1
 8007e94:	08007ea7 	.word	0x08007ea7
 8007e98:	08007ead 	.word	0x08007ead
 8007e9c:	08007eb3 	.word	0x08007eb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ea4:	e00b      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eaa:	e008      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007eac:	2301      	movs	r3, #1
 8007eae:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb0:	e005      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb6:	e002      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	73fb      	strb	r3, [r7, #15]
    break;
 8007ebc:	bf00      	nop
  }
  return usb_status;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <__libc_init_array>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	4d0d      	ldr	r5, [pc, #52]	; (8007f04 <__libc_init_array+0x38>)
 8007ed0:	4c0d      	ldr	r4, [pc, #52]	; (8007f08 <__libc_init_array+0x3c>)
 8007ed2:	1b64      	subs	r4, r4, r5
 8007ed4:	10a4      	asrs	r4, r4, #2
 8007ed6:	2600      	movs	r6, #0
 8007ed8:	42a6      	cmp	r6, r4
 8007eda:	d109      	bne.n	8007ef0 <__libc_init_array+0x24>
 8007edc:	4d0b      	ldr	r5, [pc, #44]	; (8007f0c <__libc_init_array+0x40>)
 8007ede:	4c0c      	ldr	r4, [pc, #48]	; (8007f10 <__libc_init_array+0x44>)
 8007ee0:	f000 f82e 	bl	8007f40 <_init>
 8007ee4:	1b64      	subs	r4, r4, r5
 8007ee6:	10a4      	asrs	r4, r4, #2
 8007ee8:	2600      	movs	r6, #0
 8007eea:	42a6      	cmp	r6, r4
 8007eec:	d105      	bne.n	8007efa <__libc_init_array+0x2e>
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef4:	4798      	blx	r3
 8007ef6:	3601      	adds	r6, #1
 8007ef8:	e7ee      	b.n	8007ed8 <__libc_init_array+0xc>
 8007efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efe:	4798      	blx	r3
 8007f00:	3601      	adds	r6, #1
 8007f02:	e7f2      	b.n	8007eea <__libc_init_array+0x1e>
 8007f04:	08007fe0 	.word	0x08007fe0
 8007f08:	08007fe0 	.word	0x08007fe0
 8007f0c:	08007fe0 	.word	0x08007fe0
 8007f10:	08007fe4 	.word	0x08007fe4

08007f14 <memcpy>:
 8007f14:	440a      	add	r2, r1
 8007f16:	4291      	cmp	r1, r2
 8007f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f1c:	d100      	bne.n	8007f20 <memcpy+0xc>
 8007f1e:	4770      	bx	lr
 8007f20:	b510      	push	{r4, lr}
 8007f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f2a:	4291      	cmp	r1, r2
 8007f2c:	d1f9      	bne.n	8007f22 <memcpy+0xe>
 8007f2e:	bd10      	pop	{r4, pc}

08007f30 <memset>:
 8007f30:	4402      	add	r2, r0
 8007f32:	4603      	mov	r3, r0
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d100      	bne.n	8007f3a <memset+0xa>
 8007f38:	4770      	bx	lr
 8007f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f3e:	e7f9      	b.n	8007f34 <memset+0x4>

08007f40 <_init>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	bf00      	nop
 8007f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f46:	bc08      	pop	{r3}
 8007f48:	469e      	mov	lr, r3
 8007f4a:	4770      	bx	lr

08007f4c <_fini>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr
