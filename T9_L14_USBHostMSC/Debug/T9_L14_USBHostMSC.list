
T9_L14_USBHostMSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bddc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800bf7c  0800bf7c  0001bf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c518  0800c518  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c518  0800c518  0001c518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c520  0800c520  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c520  0800c520  0001c520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c524  0800c524  0001c524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e84  20000090  0800c5b8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20000f14  0800c5b8  00020f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002627a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b9a  00000000  00000000  0004633a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0004aed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  0004bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1bb  00000000  00000000  0004ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a41b  00000000  00000000  00067fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c53a  00000000  00000000  000823d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004584  00000000  00000000  0010e964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf64 	.word	0x0800bf64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800bf64 	.word	0x0800bf64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <MX_GPIO_Init+0xd0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a2c      	ldr	r2, [pc, #176]	; (8000648 <MX_GPIO_Init+0xd0>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b26      	ldr	r3, [pc, #152]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a25      	ldr	r2, [pc, #148]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2120      	movs	r1, #32
 8000602:	4812      	ldr	r0, [pc, #72]	; (800064c <MX_GPIO_Init+0xd4>)
 8000604:	f000 fe24 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_GPIO_Init+0xd8>)
 8000620:	f000 fc92 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000624:	2320      	movs	r3, #32
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_GPIO_Init+0xd4>)
 800063c:	f000 fc84 	bl	8000f48 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40020000 	.word	0x40020000
 8000650:	40020800 	.word	0x40020800

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 facd 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f91d 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f7ff ff89 	bl	8000578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 fa2b 	bl	8000ac0 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 800066a:	f00a fd07 	bl	800b07c <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800066e:	f004 fabb 	bl	8004be8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  uint8_t OneTime = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(Appli_state) {
 8000676:	4b78      	ldr	r3, [pc, #480]	; (8000858 <main+0x204>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b03      	cmp	r3, #3
 800067c:	f200 80e6 	bhi.w	800084c <main+0x1f8>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <main+0x34>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	0800084d 	.word	0x0800084d
 800068c:	08000699 	.word	0x08000699
 8000690:	08000705 	.word	0x08000705
 8000694:	0800083d 	.word	0x0800083d
	  case APPLICATION_IDLE:

		  break;
	  case APPLICATION_START:
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2120      	movs	r1, #32
 800069c:	486f      	ldr	r0, [pc, #444]	; (800085c <main+0x208>)
 800069e:	f000 fdd7 	bl	8001250 <HAL_GPIO_WritePin>
		  retUSBH = f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	496e      	ldr	r1, [pc, #440]	; (8000860 <main+0x20c>)
 80006a6:	486f      	ldr	r0, [pc, #444]	; (8000864 <main+0x210>)
 80006a8:	f009 fbce 	bl	8009e48 <f_mount>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b6d      	ldr	r3, [pc, #436]	; (8000868 <main+0x214>)
 80006b2:	701a      	strb	r2, [r3, #0]
		  if(retUSBH != FR_OK)
 80006b4:	4b6c      	ldr	r3, [pc, #432]	; (8000868 <main+0x214>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d011      	beq.n	80006e0 <main+0x8c>
		  {
		  	  Bytes = sprintf(Data, "FatFS mount error.\n\r");
 80006bc:	496b      	ldr	r1, [pc, #428]	; (800086c <main+0x218>)
 80006be:	486c      	ldr	r0, [pc, #432]	; (8000870 <main+0x21c>)
 80006c0:	f00b f8ea 	bl	800b898 <siprintf>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b6a      	ldr	r3, [pc, #424]	; (8000874 <main+0x220>)
 80006ca:	701a      	strb	r2, [r3, #0]
		  	  HAL_UART_Transmit(&huart2, (uint8_t*)Data, Bytes, 1000);
 80006cc:	4b69      	ldr	r3, [pc, #420]	; (8000874 <main+0x220>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	4966      	ldr	r1, [pc, #408]	; (8000870 <main+0x21c>)
 80006d8:	4867      	ldr	r0, [pc, #412]	; (8000878 <main+0x224>)
 80006da:	f003 f804 	bl	80036e6 <HAL_UART_Transmit>
		  else
		  {
			  Bytes = sprintf(Data, "FatFS mounted.\n\r");
			  HAL_UART_Transmit(&huart2, (uint8_t*)Data, Bytes, 1000);
		  }
		  break;
 80006de:	e0b8      	b.n	8000852 <main+0x1fe>
			  Bytes = sprintf(Data, "FatFS mounted.\n\r");
 80006e0:	4966      	ldr	r1, [pc, #408]	; (800087c <main+0x228>)
 80006e2:	4863      	ldr	r0, [pc, #396]	; (8000870 <main+0x21c>)
 80006e4:	f00b f8d8 	bl	800b898 <siprintf>
 80006e8:	4603      	mov	r3, r0
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b61      	ldr	r3, [pc, #388]	; (8000874 <main+0x220>)
 80006ee:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, (uint8_t*)Data, Bytes, 1000);
 80006f0:	4b60      	ldr	r3, [pc, #384]	; (8000874 <main+0x220>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	495d      	ldr	r1, [pc, #372]	; (8000870 <main+0x21c>)
 80006fc:	485e      	ldr	r0, [pc, #376]	; (8000878 <main+0x224>)
 80006fe:	f002 fff2 	bl	80036e6 <HAL_UART_Transmit>
		  break;
 8000702:	e0a6      	b.n	8000852 <main+0x1fe>
	  case APPLICATION_READY:
		  if((OneTime == 0) && (retUSBH == FR_OK))
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	f040 80a2 	bne.w	8000850 <main+0x1fc>
 800070c:	4b56      	ldr	r3, [pc, #344]	; (8000868 <main+0x214>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	f040 809d 	bne.w	8000850 <main+0x1fc>
		  {
			  //
			  // Open file on pendrive for writing
			  //
			  retUSBH = f_open(&USBHFile, "test.txt", FA_WRITE|FA_CREATE_ALWAYS);
 8000716:	220a      	movs	r2, #10
 8000718:	4959      	ldr	r1, [pc, #356]	; (8000880 <main+0x22c>)
 800071a:	485a      	ldr	r0, [pc, #360]	; (8000884 <main+0x230>)
 800071c:	f009 fbda 	bl	8009ed4 <f_open>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b50      	ldr	r3, [pc, #320]	; (8000868 <main+0x214>)
 8000726:	701a      	strb	r2, [r3, #0]
			  //
			  // File open error check
			  //
			  if(retUSBH != FR_OK)
 8000728:	4b4f      	ldr	r3, [pc, #316]	; (8000868 <main+0x214>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d011      	beq.n	8000754 <main+0x100>
			  {
				  Bytes = sprintf(Data, "No test.txt file. Can't create.\n\r");
 8000730:	4955      	ldr	r1, [pc, #340]	; (8000888 <main+0x234>)
 8000732:	484f      	ldr	r0, [pc, #316]	; (8000870 <main+0x21c>)
 8000734:	f00b f8b0 	bl	800b898 <siprintf>
 8000738:	4603      	mov	r3, r0
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b4d      	ldr	r3, [pc, #308]	; (8000874 <main+0x220>)
 800073e:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, (uint8_t*)Data, Bytes, 1000);
 8000740:	4b4c      	ldr	r3, [pc, #304]	; (8000874 <main+0x220>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b29a      	uxth	r2, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	4949      	ldr	r1, [pc, #292]	; (8000870 <main+0x21c>)
 800074c:	484a      	ldr	r0, [pc, #296]	; (8000878 <main+0x224>)
 800074e:	f002 ffca 	bl	80036e6 <HAL_UART_Transmit>
 8000752:	e070      	b.n	8000836 <main+0x1e2>
			  }
			  else
			  {
				  Bytes = sprintf(Data, "File opened.\n\r");
 8000754:	494d      	ldr	r1, [pc, #308]	; (800088c <main+0x238>)
 8000756:	4846      	ldr	r0, [pc, #280]	; (8000870 <main+0x21c>)
 8000758:	f00b f89e 	bl	800b898 <siprintf>
 800075c:	4603      	mov	r3, r0
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b44      	ldr	r3, [pc, #272]	; (8000874 <main+0x220>)
 8000762:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, (uint8_t*)Data, Bytes, 1000);
 8000764:	4b43      	ldr	r3, [pc, #268]	; (8000874 <main+0x220>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b29a      	uxth	r2, r3
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	4940      	ldr	r1, [pc, #256]	; (8000870 <main+0x21c>)
 8000770:	4841      	ldr	r0, [pc, #260]	; (8000878 <main+0x224>)
 8000772:	f002 ffb8 	bl	80036e6 <HAL_UART_Transmit>
				  //
				  //	Print something to this file
				  //
				  for(uint8_t i = 0; i < 10; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]
 800077a:	e008      	b.n	800078e <main+0x13a>
				  {
					  f_printf(&USBHFile, "Line number %d.\n", i);
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	461a      	mov	r2, r3
 8000780:	4943      	ldr	r1, [pc, #268]	; (8000890 <main+0x23c>)
 8000782:	4840      	ldr	r0, [pc, #256]	; (8000884 <main+0x230>)
 8000784:	f00a f938 	bl	800a9f8 <f_printf>
				  for(uint8_t i = 0; i < 10; i++)
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	3301      	adds	r3, #1
 800078c:	71bb      	strb	r3, [r7, #6]
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	2b09      	cmp	r3, #9
 8000792:	d9f3      	bls.n	800077c <main+0x128>
				  }

				  //
				  // Close file
				  //
				  retUSBH = f_close(&USBHFile);
 8000794:	483b      	ldr	r0, [pc, #236]	; (8000884 <main+0x230>)
 8000796:	f00a f88d 	bl	800a8b4 <f_close>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4b32      	ldr	r3, [pc, #200]	; (8000868 <main+0x214>)
 80007a0:	701a      	strb	r2, [r3, #0]

				  Bytes = sprintf(Data, "File closed.\n\r");
 80007a2:	493c      	ldr	r1, [pc, #240]	; (8000894 <main+0x240>)
 80007a4:	4832      	ldr	r0, [pc, #200]	; (8000870 <main+0x21c>)
 80007a6:	f00b f877 	bl	800b898 <siprintf>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <main+0x220>)
 80007b0:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, (uint8_t*)Data, Bytes, 1000);
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <main+0x220>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007bc:	492c      	ldr	r1, [pc, #176]	; (8000870 <main+0x21c>)
 80007be:	482e      	ldr	r0, [pc, #184]	; (8000878 <main+0x224>)
 80007c0:	f002 ff91 	bl	80036e6 <HAL_UART_Transmit>

				  retUSBH = f_open(&USBHFile, "test.txt", FA_READ);
 80007c4:	2201      	movs	r2, #1
 80007c6:	492e      	ldr	r1, [pc, #184]	; (8000880 <main+0x22c>)
 80007c8:	482e      	ldr	r0, [pc, #184]	; (8000884 <main+0x230>)
 80007ca:	f009 fb83 	bl	8009ed4 <f_open>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <main+0x214>)
 80007d4:	701a      	strb	r2, [r3, #0]
				  if(retUSBH != FR_OK)
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <main+0x214>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d011      	beq.n	8000802 <main+0x1ae>
				  {
					  Bytes = sprintf(Data, "No test.txt file. Can't open \n\r");
 80007de:	492e      	ldr	r1, [pc, #184]	; (8000898 <main+0x244>)
 80007e0:	4823      	ldr	r0, [pc, #140]	; (8000870 <main+0x21c>)
 80007e2:	f00b f859 	bl	800b898 <siprintf>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <main+0x220>)
 80007ec:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit(&huart2, (uint8_t*)Data, Bytes, 1000);
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <main+0x220>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f8:	491d      	ldr	r1, [pc, #116]	; (8000870 <main+0x21c>)
 80007fa:	481f      	ldr	r0, [pc, #124]	; (8000878 <main+0x224>)
 80007fc:	f002 ff73 	bl	80036e6 <HAL_UART_Transmit>
 8000800:	e019      	b.n	8000836 <main+0x1e2>
				  else
				  {
					  UINT len;
					  do
					  {
						  len = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
						  f_read(&USBHFile, Data, 10, &len);
 8000806:	463b      	mov	r3, r7
 8000808:	220a      	movs	r2, #10
 800080a:	4919      	ldr	r1, [pc, #100]	; (8000870 <main+0x21c>)
 800080c:	481d      	ldr	r0, [pc, #116]	; (8000884 <main+0x230>)
 800080e:	f009 fd1f 	bl	800a250 <f_read>
						  HAL_UART_Transmit(&huart2, (uint8_t*)Data, len, 1000);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	b29a      	uxth	r2, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <main+0x21c>)
 800081c:	4816      	ldr	r0, [pc, #88]	; (8000878 <main+0x224>)
 800081e:	f002 ff62 	bl	80036e6 <HAL_UART_Transmit>
					  }while(len >0);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1ec      	bne.n	8000802 <main+0x1ae>
					  retUSBH = f_close(&USBHFile);
 8000828:	4816      	ldr	r0, [pc, #88]	; (8000884 <main+0x230>)
 800082a:	f00a f843 	bl	800a8b4 <f_close>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <main+0x214>)
 8000834:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  OneTime = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 800083a:	e009      	b.n	8000850 <main+0x1fc>
	  case APPLICATION_DISCONNECT:
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <main+0x208>)
 8000842:	f000 fd05 	bl	8001250 <HAL_GPIO_WritePin>
		  OneTime = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	71fb      	strb	r3, [r7, #7]
		  break;
 800084a:	e002      	b.n	8000852 <main+0x1fe>
	  default:
		  break;
 800084c:	bf00      	nop
 800084e:	e000      	b.n	8000852 <main+0x1fe>
		  break;
 8000850:	bf00      	nop
	  }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000852:	f00a fc39 	bl	800b0c8 <MX_USB_HOST_Process>
	  switch(Appli_state) {
 8000856:	e70e      	b.n	8000676 <main+0x22>
 8000858:	200002e4 	.word	0x200002e4
 800085c:	40020000 	.word	0x40020000
 8000860:	200003bc 	.word	0x200003bc
 8000864:	200005f0 	.word	0x200005f0
 8000868:	20000824 	.word	0x20000824
 800086c:	0800bf7c 	.word	0x0800bf7c
 8000870:	200002f0 	.word	0x200002f0
 8000874:	20000370 	.word	0x20000370
 8000878:	20000374 	.word	0x20000374
 800087c:	0800bf94 	.word	0x0800bf94
 8000880:	0800bfa8 	.word	0x0800bfa8
 8000884:	200003c0 	.word	0x200003c0
 8000888:	0800bfb4 	.word	0x0800bfb4
 800088c:	0800bfd8 	.word	0x0800bfd8
 8000890:	0800bfe8 	.word	0x0800bfe8
 8000894:	0800bffc 	.word	0x0800bffc
 8000898:	0800c00c 	.word	0x0800c00c

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2230      	movs	r2, #48	; 0x30
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00a ff32 	bl	800b714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <SystemClock_Config+0xc8>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a26      	ldr	r2, [pc, #152]	; (8000964 <SystemClock_Config+0xc8>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <SystemClock_Config+0xc8>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <SystemClock_Config+0xcc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <SystemClock_Config+0xcc>)
 80008e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <SystemClock_Config+0xcc>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800090c:	2304      	movs	r3, #4
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000910:	2348      	movs	r3, #72	; 0x48
 8000912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000918:	2303      	movs	r3, #3
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fa1f 	bl	8002d64 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800092c:	f000 f81e 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2302      	movs	r3, #2
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fc81 	bl	8003254 <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000958:	f000 f808 	bl	800096c <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3750      	adds	r7, #80	; 0x50
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b6:	2007      	movs	r0, #7
 80009b8:	f000 fa84 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f942 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <OTG_FS_IRQHandler+0x10>)
 8000a22:	f000 fe99 	bl	8001758 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000c00 	.word	0x20000c00

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f00a fe10 	bl	800b684 <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <_sbrk+0x64>)
 8000a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20020000 	.word	0x20020000
 8000a90:	00001000 	.word	0x00001000
 8000a94:	200000ac 	.word	0x200000ac
 8000a98:	20000f18 	.word	0x20000f18

08000a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_USART2_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af8:	f002 fda8 	bl	800364c <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f7ff ff33 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000374 	.word	0x20000374
 8000b10:	40004400 	.word	0x40004400

08000b14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_UART_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7e:	2307      	movs	r3, #7
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_UART_MspInit+0x8c>)
 8000b8a:	f000 f9dd 	bl	8000f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000baa:	490e      	ldr	r1, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc0:	4c0b      	ldr	r4, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bce:	f7ff ff65 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f00a fd5d 	bl	800b690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fd3d 	bl	8000654 <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000be8:	0800c528 	.word	0x0800c528
  ldr r2, =_sbss
 8000bec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000bf0:	20000f14 	.word	0x20000f14

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_Init+0x40>)
 8000c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_Init+0x40>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_Init+0x40>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f94f 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f808 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fea4 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x54>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x58>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f967 	bl	8000f2e <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f000 f92f 	bl	8000eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	200003b8 	.word	0x200003b8

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200003b8 	.word	0x200003b8

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff ffee 	bl	8000cc4 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffde 	bl	8000cc4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff29 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eec:	f7ff ff3e 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff ff8e 	bl	8000e18 <NVIC_EncodePriority>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff5d 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff31 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffa2 	bl	8000e80 <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e159      	b.n	8001218 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 8148 	bne.w	8001212 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80a2 	beq.w	8001212 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b57      	ldr	r3, [pc, #348]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a56      	ldr	r2, [pc, #344]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b54      	ldr	r3, [pc, #336]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ea:	4a52      	ldr	r2, [pc, #328]	; (8001234 <HAL_GPIO_Init+0x2ec>)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a49      	ldr	r2, [pc, #292]	; (8001238 <HAL_GPIO_Init+0x2f0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x202>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a48      	ldr	r2, [pc, #288]	; (800123c <HAL_GPIO_Init+0x2f4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x1fe>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a47      	ldr	r2, [pc, #284]	; (8001240 <HAL_GPIO_Init+0x2f8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x1fa>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a46      	ldr	r2, [pc, #280]	; (8001244 <HAL_GPIO_Init+0x2fc>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x1f6>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a45      	ldr	r2, [pc, #276]	; (8001248 <HAL_GPIO_Init+0x300>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x1f2>
 8001136:	2304      	movs	r3, #4
 8001138:	e008      	b.n	800114c <HAL_GPIO_Init+0x204>
 800113a:	2307      	movs	r3, #7
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x204>
 800113e:	2303      	movs	r3, #3
 8001140:	e004      	b.n	800114c <HAL_GPIO_Init+0x204>
 8001142:	2302      	movs	r3, #2
 8001144:	e002      	b.n	800114c <HAL_GPIO_Init+0x204>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_GPIO_Init+0x204>
 800114a:	2300      	movs	r3, #0
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	f002 0203 	and.w	r2, r2, #3
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	4093      	lsls	r3, r2
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800115c:	4935      	ldr	r1, [pc, #212]	; (8001234 <HAL_GPIO_Init+0x2ec>)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116a:	4b38      	ldr	r3, [pc, #224]	; (800124c <HAL_GPIO_Init+0x304>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <HAL_GPIO_Init+0x304>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_GPIO_Init+0x304>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b8:	4a24      	ldr	r2, [pc, #144]	; (800124c <HAL_GPIO_Init+0x304>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <HAL_GPIO_Init+0x304>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <HAL_GPIO_Init+0x304>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_GPIO_Init+0x304>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800120c:	4a0f      	ldr	r2, [pc, #60]	; (800124c <HAL_GPIO_Init+0x304>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3301      	adds	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b0f      	cmp	r3, #15
 800121c:	f67f aea2 	bls.w	8000f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40013800 	.word	0x40013800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	40020800 	.word	0x40020800
 8001244:	40020c00 	.word	0x40020c00
 8001248:	40021000 	.word	0x40021000
 800124c:	40013c00 	.word	0x40013c00

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800126c:	e003      	b.n	8001276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001284:	b08f      	sub	sp, #60	; 0x3c
 8001286:	af0a      	add	r7, sp, #40	; 0x28
 8001288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e054      	b.n	800133e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f009 ff42 	bl	800b138 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2203      	movs	r2, #3
 80012b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fd42 	bl	8003d5c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	687e      	ldr	r6, [r7, #4]
 80012e0:	466d      	mov	r5, sp
 80012e2:	f106 0410 	add.w	r4, r6, #16
 80012e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80012f6:	1d33      	adds	r3, r6, #4
 80012f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f002 fcbc 	bl	8003c78 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	4618      	mov	r0, r3
 8001308:	f002 fd39 	bl	8003d7e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	687e      	ldr	r6, [r7, #4]
 8001314:	466d      	mov	r5, sp
 8001316:	f106 0410 	add.w	r4, r6, #16
 800131a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001322:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001326:	e885 0003 	stmia.w	r5, {r0, r1}
 800132a:	1d33      	adds	r3, r6, #4
 800132c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800132e:	6838      	ldr	r0, [r7, #0]
 8001330:	f002 fea0 	bl	8004074 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001346 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001346:	b590      	push	{r4, r7, lr}
 8001348:	b089      	sub	sp, #36	; 0x24
 800134a:	af04      	add	r7, sp, #16
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	4608      	mov	r0, r1
 8001350:	4611      	mov	r1, r2
 8001352:	461a      	mov	r2, r3
 8001354:	4603      	mov	r3, r0
 8001356:	70fb      	strb	r3, [r7, #3]
 8001358:	460b      	mov	r3, r1
 800135a:	70bb      	strb	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_HCD_HC_Init+0x28>
 800136a:	2302      	movs	r3, #2
 800136c:	e076      	b.n	800145c <HAL_HCD_HC_Init+0x116>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	212c      	movs	r1, #44	; 0x2c
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	4413      	add	r3, r2
 8001382:	333d      	adds	r3, #61	; 0x3d
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	212c      	movs	r1, #44	; 0x2c
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	4413      	add	r3, r2
 8001394:	3338      	adds	r3, #56	; 0x38
 8001396:	787a      	ldrb	r2, [r7, #1]
 8001398:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	212c      	movs	r1, #44	; 0x2c
 80013a0:	fb01 f303 	mul.w	r3, r1, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	3340      	adds	r3, #64	; 0x40
 80013a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	212c      	movs	r1, #44	; 0x2c
 80013b2:	fb01 f303 	mul.w	r3, r1, r3
 80013b6:	4413      	add	r3, r2
 80013b8:	3339      	adds	r3, #57	; 0x39
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	212c      	movs	r1, #44	; 0x2c
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	333f      	adds	r3, #63	; 0x3f
 80013cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80013d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	78ba      	ldrb	r2, [r7, #2]
 80013d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80013da:	b2d0      	uxtb	r0, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	212c      	movs	r1, #44	; 0x2c
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	333a      	adds	r3, #58	; 0x3a
 80013e8:	4602      	mov	r2, r0
 80013ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80013ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	da09      	bge.n	8001408 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	212c      	movs	r1, #44	; 0x2c
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	333b      	adds	r3, #59	; 0x3b
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e008      	b.n	800141a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	212c      	movs	r1, #44	; 0x2c
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	4413      	add	r3, r2
 8001414:	333b      	adds	r3, #59	; 0x3b
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	212c      	movs	r1, #44	; 0x2c
 8001420:	fb01 f303 	mul.w	r3, r1, r3
 8001424:	4413      	add	r3, r2
 8001426:	333c      	adds	r3, #60	; 0x3c
 8001428:	f897 2020 	ldrb.w	r2, [r7, #32]
 800142c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	787c      	ldrb	r4, [r7, #1]
 8001434:	78ba      	ldrb	r2, [r7, #2]
 8001436:	78f9      	ldrb	r1, [r7, #3]
 8001438:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4623      	mov	r3, r4
 800144a:	f002 ff8d 	bl	8004368 <USB_HC_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bd90      	pop	{r4, r7, pc}

08001464 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_HCD_HC_Halt+0x1e>
 800147e:	2302      	movs	r3, #2
 8001480:	e00f      	b.n	80014a2 <HAL_HCD_HC_Halt+0x3e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	78fa      	ldrb	r2, [r7, #3]
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f003 f9c9 	bl	800482a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	4608      	mov	r0, r1
 80014b6:	4611      	mov	r1, r2
 80014b8:	461a      	mov	r2, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	70fb      	strb	r3, [r7, #3]
 80014be:	460b      	mov	r3, r1
 80014c0:	70bb      	strb	r3, [r7, #2]
 80014c2:	4613      	mov	r3, r2
 80014c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	212c      	movs	r1, #44	; 0x2c
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	333b      	adds	r3, #59	; 0x3b
 80014d4:	78ba      	ldrb	r2, [r7, #2]
 80014d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	212c      	movs	r1, #44	; 0x2c
 80014de:	fb01 f303 	mul.w	r3, r1, r3
 80014e2:	4413      	add	r3, r2
 80014e4:	333f      	adds	r3, #63	; 0x3f
 80014e6:	787a      	ldrb	r2, [r7, #1]
 80014e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80014ea:	7c3b      	ldrb	r3, [r7, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d112      	bne.n	8001516 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	212c      	movs	r1, #44	; 0x2c
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	3342      	adds	r3, #66	; 0x42
 80014fe:	2203      	movs	r2, #3
 8001500:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	212c      	movs	r1, #44	; 0x2c
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4413      	add	r3, r2
 800150e:	333d      	adds	r3, #61	; 0x3d
 8001510:	7f3a      	ldrb	r2, [r7, #28]
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e008      	b.n	8001528 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	212c      	movs	r1, #44	; 0x2c
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4413      	add	r3, r2
 8001522:	3342      	adds	r3, #66	; 0x42
 8001524:	2202      	movs	r2, #2
 8001526:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b03      	cmp	r3, #3
 800152c:	f200 80c6 	bhi.w	80016bc <HAL_HCD_HC_SubmitRequest+0x210>
 8001530:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001536:	bf00      	nop
 8001538:	08001549 	.word	0x08001549
 800153c:	080016a9 	.word	0x080016a9
 8001540:	080015ad 	.word	0x080015ad
 8001544:	0800162b 	.word	0x0800162b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001548:	7c3b      	ldrb	r3, [r7, #16]
 800154a:	2b01      	cmp	r3, #1
 800154c:	f040 80b8 	bne.w	80016c0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001550:	78bb      	ldrb	r3, [r7, #2]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 80b4 	bne.w	80016c0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001558:	8b3b      	ldrh	r3, [r7, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d108      	bne.n	8001570 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	212c      	movs	r1, #44	; 0x2c
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	3355      	adds	r3, #85	; 0x55
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	212c      	movs	r1, #44	; 0x2c
 8001576:	fb01 f303 	mul.w	r3, r1, r3
 800157a:	4413      	add	r3, r2
 800157c:	3355      	adds	r3, #85	; 0x55
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	212c      	movs	r1, #44	; 0x2c
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	4413      	add	r3, r2
 8001590:	3342      	adds	r3, #66	; 0x42
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001596:	e093      	b.n	80016c0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	212c      	movs	r1, #44	; 0x2c
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	3342      	adds	r3, #66	; 0x42
 80015a6:	2202      	movs	r2, #2
 80015a8:	701a      	strb	r2, [r3, #0]
      break;
 80015aa:	e089      	b.n	80016c0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80015ac:	78bb      	ldrb	r3, [r7, #2]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d11d      	bne.n	80015ee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	212c      	movs	r1, #44	; 0x2c
 80015b8:	fb01 f303 	mul.w	r3, r1, r3
 80015bc:	4413      	add	r3, r2
 80015be:	3355      	adds	r3, #85	; 0x55
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	212c      	movs	r1, #44	; 0x2c
 80015cc:	fb01 f303 	mul.w	r3, r1, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	3342      	adds	r3, #66	; 0x42
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80015d8:	e073      	b.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	212c      	movs	r1, #44	; 0x2c
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	3342      	adds	r3, #66	; 0x42
 80015e8:	2202      	movs	r2, #2
 80015ea:	701a      	strb	r2, [r3, #0]
      break;
 80015ec:	e069      	b.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	212c      	movs	r1, #44	; 0x2c
 80015f4:	fb01 f303 	mul.w	r3, r1, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	3354      	adds	r3, #84	; 0x54
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	212c      	movs	r1, #44	; 0x2c
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	3342      	adds	r3, #66	; 0x42
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
      break;
 8001614:	e055      	b.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	212c      	movs	r1, #44	; 0x2c
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
 8001622:	3342      	adds	r3, #66	; 0x42
 8001624:	2202      	movs	r2, #2
 8001626:	701a      	strb	r2, [r3, #0]
      break;
 8001628:	e04b      	b.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800162a:	78bb      	ldrb	r3, [r7, #2]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d11d      	bne.n	800166c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	212c      	movs	r1, #44	; 0x2c
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	4413      	add	r3, r2
 800163c:	3355      	adds	r3, #85	; 0x55
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	212c      	movs	r1, #44	; 0x2c
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	3342      	adds	r3, #66	; 0x42
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001656:	e034      	b.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	212c      	movs	r1, #44	; 0x2c
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	4413      	add	r3, r2
 8001664:	3342      	adds	r3, #66	; 0x42
 8001666:	2202      	movs	r2, #2
 8001668:	701a      	strb	r2, [r3, #0]
      break;
 800166a:	e02a      	b.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	212c      	movs	r1, #44	; 0x2c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	3354      	adds	r3, #84	; 0x54
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d109      	bne.n	8001694 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	3342      	adds	r3, #66	; 0x42
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
      break;
 8001692:	e016      	b.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	212c      	movs	r1, #44	; 0x2c
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	3342      	adds	r3, #66	; 0x42
 80016a2:	2202      	movs	r2, #2
 80016a4:	701a      	strb	r2, [r3, #0]
      break;
 80016a6:	e00c      	b.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	212c      	movs	r1, #44	; 0x2c
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	3342      	adds	r3, #66	; 0x42
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
      break;
 80016ba:	e002      	b.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80016bc:	bf00      	nop
 80016be:	e000      	b.n	80016c2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80016c0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	212c      	movs	r1, #44	; 0x2c
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	3344      	adds	r3, #68	; 0x44
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	8b3a      	ldrh	r2, [r7, #24]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	202c      	movs	r0, #44	; 0x2c
 80016dc:	fb00 f303 	mul.w	r3, r0, r3
 80016e0:	440b      	add	r3, r1
 80016e2:	334c      	adds	r3, #76	; 0x4c
 80016e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	212c      	movs	r1, #44	; 0x2c
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	3360      	adds	r3, #96	; 0x60
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3350      	adds	r3, #80	; 0x50
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3339      	adds	r3, #57	; 0x39
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3361      	adds	r3, #97	; 0x61
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	222c      	movs	r2, #44	; 0x2c
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	3338      	adds	r3, #56	; 0x38
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	18d1      	adds	r1, r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	f002 ff1c 	bl	8004584 <USB_HC_StartXfer>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop

08001758 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fc3f 	bl	8003ff2 <USB_GetMode>
 8001774:	4603      	mov	r3, r0
 8001776:	2b01      	cmp	r3, #1
 8001778:	f040 80f6 	bne.w	8001968 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fc23 	bl	8003fcc <USB_ReadInterrupts>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80ec 	beq.w	8001966 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fc1a 	bl	8003fcc <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017a2:	d104      	bne.n	80017ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 fc0a 	bl	8003fcc <USB_ReadInterrupts>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017c2:	d104      	bne.n	80017ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fbfa 	bl	8003fcc <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80017e2:	d104      	bne.n	80017ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 fbea 	bl	8003fcc <USB_ReadInterrupts>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d103      	bne.n	800180a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2202      	movs	r2, #2
 8001808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fbdc 	bl	8003fcc <USB_ReadInterrupts>
 8001814:	4603      	mov	r3, r0
 8001816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800181a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800181e:	d11c      	bne.n	800185a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001828:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10f      	bne.n	800185a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800183a:	2110      	movs	r1, #16
 800183c:	6938      	ldr	r0, [r7, #16]
 800183e:	f002 faeb 	bl	8003e18 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001842:	6938      	ldr	r0, [r7, #16]
 8001844:	f002 fb0c 	bl	8003e60 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2101      	movs	r1, #1
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fcc4 	bl	80041dc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f009 fcdf 	bl	800b218 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fbb4 	bl	8003fcc <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800186a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800186e:	d102      	bne.n	8001876 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f001 fa03 	bl	8002c7c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fba6 	bl	8003fcc <USB_ReadInterrupts>
 8001880:	4603      	mov	r3, r0
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b08      	cmp	r3, #8
 8001888:	d106      	bne.n	8001898 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f009 fca8 	bl	800b1e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2208      	movs	r2, #8
 8001896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fb95 	bl	8003fcc <USB_ReadInterrupts>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d101      	bne.n	80018b0 <HAL_HCD_IRQHandler+0x158>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_HCD_IRQHandler+0x15a>
 80018b0:	2300      	movs	r3, #0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d012      	beq.n	80018dc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0210 	bic.w	r2, r2, #16
 80018c4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f001 f906 	bl	8002ad8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0210 	orr.w	r2, r2, #16
 80018da:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fb73 	bl	8003fcc <USB_ReadInterrupts>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018f0:	d13a      	bne.n	8001968 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 ff86 	bl	8004808 <USB_HC_ReadInterrupt>
 80018fc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e025      	b.n	8001950 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d018      	beq.n	800194a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	015a      	lsls	r2, r3, #5
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800192a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800192e:	d106      	bne.n	800193e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4619      	mov	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f8ab 	bl	8001a92 <HCD_HC_IN_IRQHandler>
 800193c:	e005      	b.n	800194a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4619      	mov	r1, r3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fcc6 	bl	80022d6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	429a      	cmp	r2, r3
 8001958:	d3d4      	bcc.n	8001904 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	e000      	b.n	8001968 <HAL_HCD_IRQHandler+0x210>
      return;
 8001966:	bf00      	nop
    }
  }
}
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_HCD_Start+0x16>
 8001980:	2302      	movs	r3, #2
 8001982:	e013      	b.n	80019ac <HAL_HCD_Start+0x3e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fc86 	bl	80042a4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f002 f9cc 	bl	8003d3a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_HCD_Stop+0x16>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e00d      	b.n	80019e6 <HAL_HCD_Stop+0x32>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 f880 	bl	8004adc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fc28 	bl	8004250 <USB_ResetPort>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3360      	adds	r3, #96	; 0x60
 8001a24:	781b      	ldrb	r3, [r3, #0]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3350      	adds	r3, #80	; 0x50
 8001a4c:	681b      	ldr	r3, [r3, #0]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fc6c 	bl	8004344 <USB_GetCurrentFrame>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 fc47 	bl	8004316 <USB_GetHostSpeed>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d119      	bne.n	8001af6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	0151      	lsls	r1, r2, #5
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	440a      	add	r2, r1
 8001aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	60d3      	str	r3, [r2, #12]
 8001af4:	e101      	b.n	8001cfa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b0c:	d12b      	bne.n	8001b66 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	212c      	movs	r1, #44	; 0x2c
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3361      	adds	r3, #97	; 0x61
 8001b30:	2207      	movs	r2, #7
 8001b32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	0151      	lsls	r1, r2, #5
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	440a      	add	r2, r1
 8001b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 fe63 	bl	800482a <USB_HC_Halt>
 8001b64:	e0c9      	b.n	8001cfa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	2b20      	cmp	r3, #32
 8001b7a:	d109      	bne.n	8001b90 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	6093      	str	r3, [r2, #8]
 8001b8e:	e0b4      	b.n	8001cfa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d133      	bne.n	8001c0e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	0151      	lsls	r1, r2, #5
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	440a      	add	r2, r1
 8001bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	212c      	movs	r1, #44	; 0x2c
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3361      	adds	r3, #97	; 0x61
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be4:	461a      	mov	r2, r3
 8001be6:	2310      	movs	r3, #16
 8001be8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fe0f 	bl	800482a <USB_HC_Halt>
 8001c0c:	e075      	b.n	8001cfa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c24:	d134      	bne.n	8001c90 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	0151      	lsls	r1, r2, #5
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	440a      	add	r2, r1
 8001c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	212c      	movs	r1, #44	; 0x2c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3361      	adds	r3, #97	; 0x61
 8001c54:	2208      	movs	r2, #8
 8001c56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	015a      	lsls	r2, r3, #5
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c64:	461a      	mov	r2, r3
 8001c66:	2310      	movs	r3, #16
 8001c68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c76:	461a      	mov	r2, r3
 8001c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fdce 	bl	800482a <USB_HC_Halt>
 8001c8e:	e034      	b.n	8001cfa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	2b80      	cmp	r3, #128	; 0x80
 8001ca4:	d129      	bne.n	8001cfa <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	0151      	lsls	r1, r2, #5
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	440a      	add	r2, r1
 8001cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3361      	adds	r3, #97	; 0x61
 8001cd4:	2206      	movs	r2, #6
 8001cd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 fda1 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d10:	d122      	bne.n	8001d58 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	0151      	lsls	r1, r2, #5
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	440a      	add	r2, r1
 8001d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f002 fd74 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d54:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001d56:	e2ba      	b.n	80022ce <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	f040 811b 	bne.w	8001fa6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d019      	beq.n	8001dac <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	212c      	movs	r1, #44	; 0x2c
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	3348      	adds	r3, #72	; 0x48
 8001d86:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	0159      	lsls	r1, r3, #5
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	440b      	add	r3, r1
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d9a:	1ad2      	subs	r2, r2, r3
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	202c      	movs	r0, #44	; 0x2c
 8001da2:	fb00 f303 	mul.w	r3, r0, r3
 8001da6:	440b      	add	r3, r1
 8001da8:	3350      	adds	r3, #80	; 0x50
 8001daa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	212c      	movs	r1, #44	; 0x2c
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	3361      	adds	r3, #97	; 0x61
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	212c      	movs	r1, #44	; 0x2c
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	335c      	adds	r3, #92	; 0x5c
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2301      	movs	r3, #1
 8001de0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	212c      	movs	r1, #44	; 0x2c
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	333f      	adds	r3, #63	; 0x3f
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	212c      	movs	r1, #44	; 0x2c
 8001dfc:	fb01 f303 	mul.w	r3, r1, r3
 8001e00:	4413      	add	r3, r2
 8001e02:	333f      	adds	r3, #63	; 0x3f
 8001e04:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d121      	bne.n	8001e4e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	0151      	lsls	r1, r2, #5
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	440a      	add	r2, r1
 8001e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f002 fcf8 	bl	800482a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	461a      	mov	r2, r3
 8001e48:	2310      	movs	r3, #16
 8001e4a:	6093      	str	r3, [r2, #8]
 8001e4c:	e066      	b.n	8001f1c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	333f      	adds	r3, #63	; 0x3f
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d127      	bne.n	8001eb2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	0151      	lsls	r1, r2, #5
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	440a      	add	r2, r1
 8001e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e80:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	212c      	movs	r1, #44	; 0x2c
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3360      	adds	r3, #96	; 0x60
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	b2d9      	uxtb	r1, r3
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	202c      	movs	r0, #44	; 0x2c
 8001e9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3360      	adds	r3, #96	; 0x60
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f009 f9c2 	bl	800b234 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001eb0:	e034      	b.n	8001f1c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	212c      	movs	r1, #44	; 0x2c
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	333f      	adds	r3, #63	; 0x3f
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d12a      	bne.n	8001f1c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3360      	adds	r3, #96	; 0x60
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	212c      	movs	r1, #44	; 0x2c
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3354      	adds	r3, #84	; 0x54
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f083 0301 	eor.w	r3, r3, #1
 8001eec:	b2d8      	uxtb	r0, r3
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3354      	adds	r3, #84	; 0x54
 8001efc:	4602      	mov	r2, r0
 8001efe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	b2d9      	uxtb	r1, r3
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	202c      	movs	r0, #44	; 0x2c
 8001f0a:	fb00 f303 	mul.w	r3, r0, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	3360      	adds	r3, #96	; 0x60
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f009 f98c 	bl	800b234 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d12b      	bne.n	8001f7c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	3348      	adds	r3, #72	; 0x48
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	202c      	movs	r0, #44	; 0x2c
 8001f3a:	fb00 f202 	mul.w	r2, r0, r2
 8001f3e:	440a      	add	r2, r1
 8001f40:	3240      	adds	r2, #64	; 0x40
 8001f42:	8812      	ldrh	r2, [r2, #0]
 8001f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 81be 	beq.w	80022ce <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3354      	adds	r3, #84	; 0x54
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	f083 0301 	eor.w	r3, r3, #1
 8001f66:	b2d8      	uxtb	r0, r3
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	3354      	adds	r3, #84	; 0x54
 8001f76:	4602      	mov	r2, r0
 8001f78:	701a      	strb	r2, [r3, #0]
}
 8001f7a:	e1a8      	b.n	80022ce <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	3354      	adds	r3, #84	; 0x54
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2d8      	uxtb	r0, r3
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3354      	adds	r3, #84	; 0x54
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	701a      	strb	r2, [r3, #0]
}
 8001fa4:	e193      	b.n	80022ce <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	f040 8106 	bne.w	80021ca <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	0151      	lsls	r1, r2, #5
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	440a      	add	r2, r1
 8001fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd8:	f023 0302 	bic.w	r3, r3, #2
 8001fdc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3361      	adds	r3, #97	; 0x61
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d109      	bne.n	8002006 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3360      	adds	r3, #96	; 0x60
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e0c9      	b.n	800219a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	212c      	movs	r1, #44	; 0x2c
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3361      	adds	r3, #97	; 0x61
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b05      	cmp	r3, #5
 8002018:	d109      	bne.n	800202e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	3360      	adds	r3, #96	; 0x60
 8002028:	2205      	movs	r2, #5
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e0b5      	b.n	800219a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3361      	adds	r3, #97	; 0x61
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b06      	cmp	r3, #6
 8002040:	d009      	beq.n	8002056 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3361      	adds	r3, #97	; 0x61
 8002050:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002052:	2b08      	cmp	r3, #8
 8002054:	d150      	bne.n	80020f8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	335c      	adds	r3, #92	; 0x5c
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	202c      	movs	r0, #44	; 0x2c
 800206e:	fb00 f303 	mul.w	r3, r0, r3
 8002072:	440b      	add	r3, r1
 8002074:	335c      	adds	r3, #92	; 0x5c
 8002076:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	335c      	adds	r3, #92	; 0x5c
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d912      	bls.n	80020b2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	335c      	adds	r3, #92	; 0x5c
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3360      	adds	r3, #96	; 0x60
 80020ac:	2204      	movs	r2, #4
 80020ae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020b0:	e073      	b.n	800219a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3360      	adds	r3, #96	; 0x60
 80020c0:	2202      	movs	r2, #2
 80020c2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020da:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020e2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020f6:	e050      	b.n	800219a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3361      	adds	r3, #97	; 0x61
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d122      	bne.n	8002152 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3360      	adds	r3, #96	; 0x60
 800211a:	2202      	movs	r2, #2
 800211c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002134:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800213c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e023      	b.n	800219a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3361      	adds	r3, #97	; 0x61
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b07      	cmp	r3, #7
 8002164:	d119      	bne.n	800219a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	335c      	adds	r3, #92	; 0x5c
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	202c      	movs	r0, #44	; 0x2c
 800217e:	fb00 f303 	mul.w	r3, r0, r3
 8002182:	440b      	add	r3, r1
 8002184:	335c      	adds	r3, #92	; 0x5c
 8002186:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3360      	adds	r3, #96	; 0x60
 8002196:	2204      	movs	r2, #4
 8002198:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	461a      	mov	r2, r3
 80021a8:	2302      	movs	r3, #2
 80021aa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	b2d9      	uxtb	r1, r3
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	202c      	movs	r0, #44	; 0x2c
 80021b6:	fb00 f303 	mul.w	r3, r0, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	3360      	adds	r3, #96	; 0x60
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f009 f836 	bl	800b234 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021c8:	e081      	b.n	80022ce <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d176      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	333f      	adds	r3, #63	; 0x3f
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d121      	bne.n	8002238 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	335c      	adds	r3, #92	; 0x5c
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	0151      	lsls	r1, r2, #5
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	440a      	add	r2, r1
 800221c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fafa 	bl	800482a <USB_HC_Halt>
 8002236:	e041      	b.n	80022bc <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	333f      	adds	r3, #63	; 0x3f
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	333f      	adds	r3, #63	; 0x3f
 800225a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800225c:	2b02      	cmp	r3, #2
 800225e:	d12d      	bne.n	80022bc <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	335c      	adds	r3, #92	; 0x5c
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d120      	bne.n	80022bc <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3361      	adds	r3, #97	; 0x61
 8002288:	2203      	movs	r2, #3
 800228a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	0151      	lsls	r1, r2, #5
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	440a      	add	r2, r1
 80022a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 fab7 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	461a      	mov	r2, r3
 80022ca:	2310      	movs	r3, #16
 80022cc:	6093      	str	r3, [r2, #8]
}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b088      	sub	sp, #32
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b04      	cmp	r3, #4
 8002304:	d119      	bne.n	800233a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	461a      	mov	r2, r3
 8002314:	2304      	movs	r3, #4
 8002316:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	0151      	lsls	r1, r2, #5
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	440a      	add	r2, r1
 800232e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002338:	e3ca      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b20      	cmp	r3, #32
 800234e:	d13e      	bne.n	80023ce <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	461a      	mov	r2, r3
 800235e:	2320      	movs	r3, #32
 8002360:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	333d      	adds	r3, #61	; 0x3d
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	f040 83ac 	bne.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	333d      	adds	r3, #61	; 0x3d
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	3360      	adds	r3, #96	; 0x60
 8002398:	2202      	movs	r2, #2
 800239a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	0151      	lsls	r1, r2, #5
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	440a      	add	r2, r1
 80023b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 fa2f 	bl	800482a <USB_HC_Halt>
}
 80023cc:	e380      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e4:	d122      	bne.n	800242c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	0151      	lsls	r1, r2, #5
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	440a      	add	r2, r1
 80023fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f002 fa0a 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002422:	461a      	mov	r2, r3
 8002424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002428:	6093      	str	r3, [r2, #8]
}
 800242a:	e351      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d150      	bne.n	80024e4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	335c      	adds	r3, #92	; 0x5c
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b40      	cmp	r3, #64	; 0x40
 8002468:	d111      	bne.n	800248e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	333d      	adds	r3, #61	; 0x3d
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	461a      	mov	r2, r3
 800248a:	2340      	movs	r3, #64	; 0x40
 800248c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	0151      	lsls	r1, r2, #5
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	440a      	add	r2, r1
 80024a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 f9b6 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	2301      	movs	r3, #1
 80024ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3361      	adds	r3, #97	; 0x61
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
}
 80024e2:	e2f5      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d13c      	bne.n	8002574 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	3361      	adds	r3, #97	; 0x61
 8002508:	2204      	movs	r2, #4
 800250a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	333d      	adds	r3, #61	; 0x3d
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	335c      	adds	r3, #92	; 0x5c
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	0151      	lsls	r1, r2, #5
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	440a      	add	r2, r1
 8002546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f002 f965 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	2340      	movs	r3, #64	; 0x40
 8002570:	6093      	str	r3, [r2, #8]
}
 8002572:	e2ad      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b08      	cmp	r3, #8
 8002588:	d12a      	bne.n	80025e0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	461a      	mov	r2, r3
 8002598:	2308      	movs	r3, #8
 800259a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	0151      	lsls	r1, r2, #5
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	440a      	add	r2, r1
 80025b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 f92f 	bl	800482a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3361      	adds	r3, #97	; 0x61
 80025da:	2205      	movs	r2, #5
 80025dc:	701a      	strb	r2, [r3, #0]
}
 80025de:	e277      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d150      	bne.n	8002698 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	335c      	adds	r3, #92	; 0x5c
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	3361      	adds	r3, #97	; 0x61
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	333d      	adds	r3, #61	; 0x3d
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d112      	bne.n	8002654 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	333c      	adds	r3, #60	; 0x3c
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	333d      	adds	r3, #61	; 0x3d
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	0151      	lsls	r1, r2, #5
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	440a      	add	r2, r1
 800266a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f002 f8d3 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	461a      	mov	r2, r3
 8002692:	2310      	movs	r3, #16
 8002694:	6093      	str	r3, [r2, #8]
}
 8002696:	e21b      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026aa:	2b80      	cmp	r3, #128	; 0x80
 80026ac:	d174      	bne.n	8002798 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d121      	bne.n	80026fa <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	3361      	adds	r3, #97	; 0x61
 80026c4:	2206      	movs	r2, #6
 80026c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	0151      	lsls	r1, r2, #5
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	440a      	add	r2, r1
 80026de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 f899 	bl	800482a <USB_HC_Halt>
 80026f8:	e044      	b.n	8002784 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	335c      	adds	r3, #92	; 0x5c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	202c      	movs	r0, #44	; 0x2c
 8002712:	fb00 f303 	mul.w	r3, r0, r3
 8002716:	440b      	add	r3, r1
 8002718:	335c      	adds	r3, #92	; 0x5c
 800271a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	335c      	adds	r3, #92	; 0x5c
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d920      	bls.n	8002772 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	335c      	adds	r3, #92	; 0x5c
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3360      	adds	r3, #96	; 0x60
 8002750:	2204      	movs	r2, #4
 8002752:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	b2d9      	uxtb	r1, r3
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	202c      	movs	r0, #44	; 0x2c
 800275e:	fb00 f303 	mul.w	r3, r0, r3
 8002762:	4413      	add	r3, r2
 8002764:	3360      	adds	r3, #96	; 0x60
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f008 fd62 	bl	800b234 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002770:	e008      	b.n	8002784 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	3360      	adds	r3, #96	; 0x60
 8002780:	2202      	movs	r2, #2
 8002782:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	461a      	mov	r2, r3
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	6093      	str	r3, [r2, #8]
}
 8002796:	e19b      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	d134      	bne.n	800281a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	0151      	lsls	r1, r2, #5
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	440a      	add	r2, r1
 80027c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 f825 	bl	800482a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	461a      	mov	r2, r3
 80027ee:	2310      	movs	r3, #16
 80027f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fe:	461a      	mov	r2, r3
 8002800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002804:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3361      	adds	r3, #97	; 0x61
 8002814:	2208      	movs	r2, #8
 8002816:	701a      	strb	r2, [r3, #0]
}
 8002818:	e15a      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b02      	cmp	r3, #2
 800282e:	f040 814f 	bne.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	0151      	lsls	r1, r2, #5
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	440a      	add	r2, r1
 8002848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800284c:	f023 0302 	bic.w	r3, r3, #2
 8002850:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3361      	adds	r3, #97	; 0x61
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d17d      	bne.n	8002962 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3360      	adds	r3, #96	; 0x60
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	333f      	adds	r3, #63	; 0x3f
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d00a      	beq.n	80028a2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	333f      	adds	r3, #63	; 0x3f
 800289a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800289c:	2b03      	cmp	r3, #3
 800289e:	f040 8100 	bne.w	8002aa2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d113      	bne.n	80028d2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3355      	adds	r3, #85	; 0x55
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	f083 0301 	eor.w	r3, r3, #1
 80028be:	b2d8      	uxtb	r0, r3
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	212c      	movs	r1, #44	; 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	3355      	adds	r3, #85	; 0x55
 80028ce:	4602      	mov	r2, r0
 80028d0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	f040 80e3 	bne.w	8002aa2 <HCD_HC_OUT_IRQHandler+0x7cc>
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	334c      	adds	r3, #76	; 0x4c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80d8 	beq.w	8002aa2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	334c      	adds	r3, #76	; 0x4c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	202c      	movs	r0, #44	; 0x2c
 8002908:	fb00 f202 	mul.w	r2, r0, r2
 800290c:	440a      	add	r2, r1
 800290e:	3240      	adds	r2, #64	; 0x40
 8002910:	8812      	ldrh	r2, [r2, #0]
 8002912:	4413      	add	r3, r2
 8002914:	3b01      	subs	r3, #1
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	202c      	movs	r0, #44	; 0x2c
 800291c:	fb00 f202 	mul.w	r2, r0, r2
 8002920:	440a      	add	r2, r1
 8002922:	3240      	adds	r2, #64	; 0x40
 8002924:	8812      	ldrh	r2, [r2, #0]
 8002926:	fbb3 f3f2 	udiv	r3, r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80b5 	beq.w	8002aa2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3355      	adds	r3, #85	; 0x55
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	f083 0301 	eor.w	r3, r3, #1
 800294c:	b2d8      	uxtb	r0, r3
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3355      	adds	r3, #85	; 0x55
 800295c:	4602      	mov	r2, r0
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e09f      	b.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3361      	adds	r3, #97	; 0x61
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d109      	bne.n	800298a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3360      	adds	r3, #96	; 0x60
 8002984:	2202      	movs	r2, #2
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e08b      	b.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	3361      	adds	r3, #97	; 0x61
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b04      	cmp	r3, #4
 800299c:	d109      	bne.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	3360      	adds	r3, #96	; 0x60
 80029ac:	2202      	movs	r2, #2
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e077      	b.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3361      	adds	r3, #97	; 0x61
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d109      	bne.n	80029da <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	212c      	movs	r1, #44	; 0x2c
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	3360      	adds	r3, #96	; 0x60
 80029d4:	2205      	movs	r2, #5
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e063      	b.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3361      	adds	r3, #97	; 0x61
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d009      	beq.n	8002a02 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3361      	adds	r3, #97	; 0x61
 80029fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d14f      	bne.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	202c      	movs	r0, #44	; 0x2c
 8002a1a:	fb00 f303 	mul.w	r3, r0, r3
 8002a1e:	440b      	add	r3, r1
 8002a20:	335c      	adds	r3, #92	; 0x5c
 8002a22:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	335c      	adds	r3, #92	; 0x5c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d912      	bls.n	8002a5e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	335c      	adds	r3, #92	; 0x5c
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3360      	adds	r3, #96	; 0x60
 8002a58:	2204      	movs	r2, #4
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e021      	b.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3360      	adds	r3, #96	; 0x60
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a86:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a8e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	b2d9      	uxtb	r1, r3
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	202c      	movs	r0, #44	; 0x2c
 8002abe:	fb00 f303 	mul.w	r3, r0, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3360      	adds	r3, #96	; 0x60
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f008 fbb2 	bl	800b234 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ad0:	bf00      	nop
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	0c5b      	lsrs	r3, r3, #17
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b0c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d004      	beq.n	8002b1e <HCD_RXQLVL_IRQHandler+0x46>
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	f000 80a9 	beq.w	8002c6e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b1c:	e0aa      	b.n	8002c74 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a6 	beq.w	8002c72 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3344      	adds	r3, #68	; 0x44
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 809b 	beq.w	8002c72 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3350      	adds	r3, #80	; 0x50
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	441a      	add	r2, r3
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	202c      	movs	r0, #44	; 0x2c
 8002b56:	fb00 f303 	mul.w	r3, r0, r3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	334c      	adds	r3, #76	; 0x4c
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d87a      	bhi.n	8002c5a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3344      	adds	r3, #68	; 0x44
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	b292      	uxth	r2, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f001 f9cd 	bl	8003f1c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3344      	adds	r3, #68	; 0x44
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	441a      	add	r2, r3
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	202c      	movs	r0, #44	; 0x2c
 8002b9c:	fb00 f303 	mul.w	r3, r0, r3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3344      	adds	r3, #68	; 0x44
 8002ba4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3350      	adds	r3, #80	; 0x50
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	441a      	add	r2, r3
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	202c      	movs	r0, #44	; 0x2c
 8002bc0:	fb00 f303 	mul.w	r3, r0, r3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3350      	adds	r3, #80	; 0x50
 8002bc8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	0cdb      	lsrs	r3, r3, #19
 8002bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bde:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3340      	adds	r3, #64	; 0x40
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d13c      	bne.n	8002c72 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d039      	beq.n	8002c72 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c14:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c1c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3354      	adds	r3, #84	; 0x54
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f083 0301 	eor.w	r3, r3, #1
 8002c44:	b2d8      	uxtb	r0, r3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3354      	adds	r3, #84	; 0x54
 8002c54:	4602      	mov	r2, r0
 8002c56:	701a      	strb	r2, [r3, #0]
      break;
 8002c58:	e00b      	b.n	8002c72 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3360      	adds	r3, #96	; 0x60
 8002c68:	2204      	movs	r2, #4
 8002c6a:	701a      	strb	r2, [r3, #0]
      break;
 8002c6c:	e001      	b.n	8002c72 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e000      	b.n	8002c74 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c72:	bf00      	nop
  }
}
 8002c74:	bf00      	nop
 8002c76:	3728      	adds	r7, #40	; 0x28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ca8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d10b      	bne.n	8002ccc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f008 fa9c 	bl	800b1fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d132      	bne.n	8002d3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f043 0308 	orr.w	r3, r3, #8
 8002cdc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d126      	bne.n	8002d36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d113      	bne.n	8002d18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cfa:	d106      	bne.n	8002d0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2102      	movs	r1, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 fa6a 	bl	80041dc <USB_InitFSLSPClkSel>
 8002d08:	e011      	b.n	8002d2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2101      	movs	r1, #1
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 fa63 	bl	80041dc <USB_InitFSLSPClkSel>
 8002d16:	e00a      	b.n	8002d2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d106      	bne.n	8002d2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d26:	461a      	mov	r2, r3
 8002d28:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f008 fa8e 	bl	800b250 <HAL_HCD_PortEnabled_Callback>
 8002d34:	e002      	b.n	8002d3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f008 fa98 	bl	800b26c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d103      	bne.n	8002d4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f043 0320 	orr.w	r3, r3, #32
 8002d4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6013      	str	r3, [r2, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e264      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d075      	beq.n	8002e6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d82:	4ba3      	ldr	r3, [pc, #652]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d00c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8e:	4ba0      	ldr	r3, [pc, #640]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d112      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4b9d      	ldr	r3, [pc, #628]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da6:	d10b      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	4b99      	ldr	r3, [pc, #612]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d05b      	beq.n	8002e6c <HAL_RCC_OscConfig+0x108>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d157      	bne.n	8002e6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e23f      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc8:	d106      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x74>
 8002dca:	4b91      	ldr	r3, [pc, #580]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a90      	ldr	r2, [pc, #576]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e01d      	b.n	8002e14 <HAL_RCC_OscConfig+0xb0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x98>
 8002de2:	4b8b      	ldr	r3, [pc, #556]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a8a      	ldr	r2, [pc, #552]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b88      	ldr	r3, [pc, #544]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a87      	ldr	r2, [pc, #540]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0xb0>
 8002dfc:	4b84      	ldr	r3, [pc, #528]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a83      	ldr	r2, [pc, #524]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b81      	ldr	r3, [pc, #516]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a80      	ldr	r2, [pc, #512]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fd ff52 	bl	8000cc4 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fd ff4e 	bl	8000cc4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e204      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b76      	ldr	r3, [pc, #472]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0xc0>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fd ff3e 	bl	8000cc4 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fd ff3a 	bl	8000cc4 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e1f0      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0xe8>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d063      	beq.n	8002f42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7a:	4b65      	ldr	r3, [pc, #404]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e86:	4b62      	ldr	r3, [pc, #392]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d11c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b5f      	ldr	r3, [pc, #380]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	4b5c      	ldr	r3, [pc, #368]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x152>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e1c4      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	4b56      	ldr	r3, [pc, #344]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4952      	ldr	r1, [pc, #328]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	e03a      	b.n	8002f42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d020      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed4:	4b4f      	ldr	r3, [pc, #316]	; (8003014 <HAL_RCC_OscConfig+0x2b0>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fd fef3 	bl	8000cc4 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee2:	f7fd feef 	bl	8000cc4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e1a5      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f00:	4b43      	ldr	r3, [pc, #268]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4940      	ldr	r1, [pc, #256]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
 8002f14:	e015      	b.n	8002f42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f16:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_RCC_OscConfig+0x2b0>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fd fed2 	bl	8000cc4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f24:	f7fd fece 	bl	8000cc4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e184      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d030      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f56:	4b30      	ldr	r3, [pc, #192]	; (8003018 <HAL_RCC_OscConfig+0x2b4>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7fd feb2 	bl	8000cc4 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fd feae 	bl	8000cc4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e164      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x200>
 8002f82:	e015      	b.n	8002fb0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f84:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCC_OscConfig+0x2b4>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8a:	f7fd fe9b 	bl	8000cc4 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fd fe97 	bl	8000cc4 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e14d      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80a0 	beq.w	80030fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_OscConfig+0x2b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d121      	bne.n	800303e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_RCC_OscConfig+0x2b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a07      	ldr	r2, [pc, #28]	; (800301c <HAL_RCC_OscConfig+0x2b8>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003006:	f7fd fe5d 	bl	8000cc4 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	e011      	b.n	8003032 <HAL_RCC_OscConfig+0x2ce>
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	42470000 	.word	0x42470000
 8003018:	42470e80 	.word	0x42470e80
 800301c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fd fe50 	bl	8000cc4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e106      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003032:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_RCC_OscConfig+0x4e4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x2f0>
 8003046:	4b81      	ldr	r3, [pc, #516]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a80      	ldr	r2, [pc, #512]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6713      	str	r3, [r2, #112]	; 0x70
 8003052:	e01c      	b.n	800308e <HAL_RCC_OscConfig+0x32a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d10c      	bne.n	8003076 <HAL_RCC_OscConfig+0x312>
 800305c:	4b7b      	ldr	r3, [pc, #492]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	4a7a      	ldr	r2, [pc, #488]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	6713      	str	r3, [r2, #112]	; 0x70
 8003068:	4b78      	ldr	r3, [pc, #480]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a77      	ldr	r2, [pc, #476]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	e00b      	b.n	800308e <HAL_RCC_OscConfig+0x32a>
 8003076:	4b75      	ldr	r3, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	4a74      	ldr	r2, [pc, #464]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6713      	str	r3, [r2, #112]	; 0x70
 8003082:	4b72      	ldr	r3, [pc, #456]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a71      	ldr	r2, [pc, #452]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d015      	beq.n	80030c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fd fe15 	bl	8000cc4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fd fe11 	bl	8000cc4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0c5      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	4b65      	ldr	r3, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ee      	beq.n	800309e <HAL_RCC_OscConfig+0x33a>
 80030c0:	e014      	b.n	80030ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fd fdff 	bl	8000cc4 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fd fdfb 	bl	8000cc4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0af      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	4b5a      	ldr	r3, [pc, #360]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ee      	bne.n	80030ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4b56      	ldr	r3, [pc, #344]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	4a55      	ldr	r2, [pc, #340]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 809b 	beq.w	800323e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d05c      	beq.n	80031ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d141      	bne.n	80031a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311c:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCC_OscConfig+0x4ec>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003122:	f7fd fdcf 	bl	8000cc4 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312a:	f7fd fdcb 	bl	8000cc4 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e081      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313c:	4b43      	ldr	r3, [pc, #268]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69da      	ldr	r2, [r3, #28]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	019b      	lsls	r3, r3, #6
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	3b01      	subs	r3, #1
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	061b      	lsls	r3, r3, #24
 800316c:	4937      	ldr	r1, [pc, #220]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003172:	4b37      	ldr	r3, [pc, #220]	; (8003250 <HAL_RCC_OscConfig+0x4ec>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fd fda4 	bl	8000cc4 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003180:	f7fd fda0 	bl	8000cc4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e056      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x41c>
 800319e:	e04e      	b.n	800323e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <HAL_RCC_OscConfig+0x4ec>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fd fd8d 	bl	8000cc4 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fd fd89 	bl	8000cc4 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e03f      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c0:	4b22      	ldr	r3, [pc, #136]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x44a>
 80031cc:	e037      	b.n	800323e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e032      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_RCC_OscConfig+0x4e8>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d028      	beq.n	800323a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d121      	bne.n	800323a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d11a      	bne.n	800323a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800320a:	4013      	ands	r3, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003210:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003212:	4293      	cmp	r3, r2
 8003214:	d111      	bne.n	800323a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	085b      	lsrs	r3, r3, #1
 8003222:	3b01      	subs	r3, #1
 8003224:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d107      	bne.n	800323a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d001      	beq.n	800323e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40007000 	.word	0x40007000
 800324c:	40023800 	.word	0x40023800
 8003250:	42470060 	.word	0x42470060

08003254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0cc      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b68      	ldr	r3, [pc, #416]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d90c      	bls.n	8003290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b8      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b50      	ldr	r3, [pc, #320]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	494d      	ldr	r1, [pc, #308]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d044      	beq.n	8003374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d119      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e07f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d003      	beq.n	8003312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	2b03      	cmp	r3, #3
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e067      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4934      	ldr	r1, [pc, #208]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003344:	f7fd fcbe 	bl	8000cc4 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fd fcba 	bl	8000cc4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e04f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 020c 	and.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d1eb      	bne.n	800334c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d20c      	bcs.n	800339c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e032      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4916      	ldr	r1, [pc, #88]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	490e      	ldr	r1, [pc, #56]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033da:	f000 f821 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490a      	ldr	r1, [pc, #40]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fc1e 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023c00 	.word	0x40023c00
 8003410:	40023800 	.word	0x40023800
 8003414:	0800c078 	.word	0x0800c078
 8003418:	20000000 	.word	0x20000000
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	2300      	movs	r3, #0
 8003432:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003438:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b08      	cmp	r3, #8
 8003442:	d00d      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x40>
 8003444:	2b08      	cmp	r3, #8
 8003446:	f200 80bd 	bhi.w	80035c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x34>
 800344e:	2b04      	cmp	r3, #4
 8003450:	d003      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0x3a>
 8003452:	e0b7      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003454:	4b61      	ldr	r3, [pc, #388]	; (80035dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003456:	60bb      	str	r3, [r7, #8]
       break;
 8003458:	e0b7      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800345a:	4b61      	ldr	r3, [pc, #388]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800345c:	60bb      	str	r3, [r7, #8]
      break;
 800345e:	e0b4      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003460:	4b5d      	ldr	r3, [pc, #372]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003468:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346a:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d04d      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003476:	4b58      	ldr	r3, [pc, #352]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	461a      	mov	r2, r3
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	ea02 0800 	and.w	r8, r2, r0
 800348e:	ea03 0901 	and.w	r9, r3, r1
 8003492:	4640      	mov	r0, r8
 8003494:	4649      	mov	r1, r9
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	014b      	lsls	r3, r1, #5
 80034a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034a4:	0142      	lsls	r2, r0, #5
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	ebb0 0008 	subs.w	r0, r0, r8
 80034ae:	eb61 0109 	sbc.w	r1, r1, r9
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	018b      	lsls	r3, r1, #6
 80034bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034c0:	0182      	lsls	r2, r0, #6
 80034c2:	1a12      	subs	r2, r2, r0
 80034c4:	eb63 0301 	sbc.w	r3, r3, r1
 80034c8:	f04f 0000 	mov.w	r0, #0
 80034cc:	f04f 0100 	mov.w	r1, #0
 80034d0:	00d9      	lsls	r1, r3, #3
 80034d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034d6:	00d0      	lsls	r0, r2, #3
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	eb12 0208 	adds.w	r2, r2, r8
 80034e0:	eb43 0309 	adc.w	r3, r3, r9
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	0259      	lsls	r1, r3, #9
 80034ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034f2:	0250      	lsls	r0, r2, #9
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	461a      	mov	r2, r3
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	f7fc febc 	bl	8000280 <__aeabi_uldivmod>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4613      	mov	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e04a      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003512:	4b31      	ldr	r3, [pc, #196]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	099b      	lsrs	r3, r3, #6
 8003518:	461a      	mov	r2, r3
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003522:	f04f 0100 	mov.w	r1, #0
 8003526:	ea02 0400 	and.w	r4, r2, r0
 800352a:	ea03 0501 	and.w	r5, r3, r1
 800352e:	4620      	mov	r0, r4
 8003530:	4629      	mov	r1, r5
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	014b      	lsls	r3, r1, #5
 800353c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003540:	0142      	lsls	r2, r0, #5
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	1b00      	subs	r0, r0, r4
 8003548:	eb61 0105 	sbc.w	r1, r1, r5
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	018b      	lsls	r3, r1, #6
 8003556:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800355a:	0182      	lsls	r2, r0, #6
 800355c:	1a12      	subs	r2, r2, r0
 800355e:	eb63 0301 	sbc.w	r3, r3, r1
 8003562:	f04f 0000 	mov.w	r0, #0
 8003566:	f04f 0100 	mov.w	r1, #0
 800356a:	00d9      	lsls	r1, r3, #3
 800356c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003570:	00d0      	lsls	r0, r2, #3
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	1912      	adds	r2, r2, r4
 8003578:	eb45 0303 	adc.w	r3, r5, r3
 800357c:	f04f 0000 	mov.w	r0, #0
 8003580:	f04f 0100 	mov.w	r1, #0
 8003584:	0299      	lsls	r1, r3, #10
 8003586:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800358a:	0290      	lsls	r0, r2, #10
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	461a      	mov	r2, r3
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	f7fc fe70 	bl	8000280 <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4613      	mov	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	3301      	adds	r3, #1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	60bb      	str	r3, [r7, #8]
      break;
 80035c2:	e002      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035c6:	60bb      	str	r3, [r7, #8]
      break;
 80035c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ca:	68bb      	ldr	r3, [r7, #8]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	00f42400 	.word	0x00f42400
 80035e0:	007a1200 	.word	0x007a1200

080035e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000000 	.word	0x20000000

080035fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003600:	f7ff fff0 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	0a9b      	lsrs	r3, r3, #10
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4903      	ldr	r1, [pc, #12]	; (8003620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40023800 	.word	0x40023800
 8003620:	0800c088 	.word	0x0800c088

08003624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003628:	f7ff ffdc 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	0b5b      	lsrs	r3, r3, #13
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	4903      	ldr	r1, [pc, #12]	; (8003648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	0800c088 	.word	0x0800c088

0800364c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e03f      	b.n	80036de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fa4e 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	; 0x24
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f929 	bl	80038e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b08a      	sub	sp, #40	; 0x28
 80036ea:	af02      	add	r7, sp, #8
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b20      	cmp	r3, #32
 8003704:	d17c      	bne.n	8003800 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_UART_Transmit+0x2c>
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e075      	b.n	8003802 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_UART_Transmit+0x3e>
 8003720:	2302      	movs	r3, #2
 8003722:	e06e      	b.n	8003802 <HAL_UART_Transmit+0x11c>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2221      	movs	r2, #33	; 0x21
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800373a:	f7fd fac3 	bl	8000cc4 <HAL_GetTick>
 800373e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	88fa      	ldrh	r2, [r7, #6]
 8003744:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	88fa      	ldrh	r2, [r7, #6]
 800374a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003754:	d108      	bne.n	8003768 <HAL_UART_Transmit+0x82>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	e003      	b.n	8003770 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800376c:	2300      	movs	r3, #0
 800376e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003778:	e02a      	b.n	80037d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f840 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e036      	b.n	8003802 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	3302      	adds	r3, #2
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	e007      	b.n	80037c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3301      	adds	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1cf      	bne.n	800377a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	2140      	movs	r1, #64	; 0x40
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f810 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e006      	b.n	8003802 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b090      	sub	sp, #64	; 0x40
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381a:	e050      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d04c      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x30>
 800382a:	f7fd fa4b 	bl	8000cc4 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003836:	429a      	cmp	r2, r3
 8003838:	d241      	bcs.n	80038be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	330c      	adds	r3, #12
 8003858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800385a:	637a      	str	r2, [r7, #52]	; 0x34
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e5      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	613b      	str	r3, [r7, #16]
   return(result);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	63bb      	str	r3, [r7, #56]	; 0x38
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3314      	adds	r3, #20
 800388c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800388e:	623a      	str	r2, [r7, #32]
 8003890:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	69f9      	ldr	r1, [r7, #28]
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	61bb      	str	r3, [r7, #24]
   return(result);
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e5      	bne.n	800386e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e00f      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d09f      	beq.n	800381c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3740      	adds	r7, #64	; 0x40
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ec:	b09f      	sub	sp, #124	; 0x7c
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fe:	68d9      	ldr	r1, [r3, #12]
 8003900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	ea40 0301 	orr.w	r3, r0, r1
 8003908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800390a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	431a      	orrs	r2, r3
 8003914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	431a      	orrs	r2, r3
 800391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	4313      	orrs	r3, r2
 8003920:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800392c:	f021 010c 	bic.w	r1, r1, #12
 8003930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003936:	430b      	orrs	r3, r1
 8003938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800393a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003946:	6999      	ldr	r1, [r3, #24]
 8003948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	ea40 0301 	orr.w	r3, r0, r1
 8003950:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4bc5      	ldr	r3, [pc, #788]	; (8003c6c <UART_SetConfig+0x384>)
 8003958:	429a      	cmp	r2, r3
 800395a:	d004      	beq.n	8003966 <UART_SetConfig+0x7e>
 800395c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4bc3      	ldr	r3, [pc, #780]	; (8003c70 <UART_SetConfig+0x388>)
 8003962:	429a      	cmp	r2, r3
 8003964:	d103      	bne.n	800396e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003966:	f7ff fe5d 	bl	8003624 <HAL_RCC_GetPCLK2Freq>
 800396a:	6778      	str	r0, [r7, #116]	; 0x74
 800396c:	e002      	b.n	8003974 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800396e:	f7ff fe45 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 8003972:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397c:	f040 80b6 	bne.w	8003aec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003982:	461c      	mov	r4, r3
 8003984:	f04f 0500 	mov.w	r5, #0
 8003988:	4622      	mov	r2, r4
 800398a:	462b      	mov	r3, r5
 800398c:	1891      	adds	r1, r2, r2
 800398e:	6439      	str	r1, [r7, #64]	; 0x40
 8003990:	415b      	adcs	r3, r3
 8003992:	647b      	str	r3, [r7, #68]	; 0x44
 8003994:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003998:	1912      	adds	r2, r2, r4
 800399a:	eb45 0303 	adc.w	r3, r5, r3
 800399e:	f04f 0000 	mov.w	r0, #0
 80039a2:	f04f 0100 	mov.w	r1, #0
 80039a6:	00d9      	lsls	r1, r3, #3
 80039a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039ac:	00d0      	lsls	r0, r2, #3
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	1911      	adds	r1, r2, r4
 80039b4:	6639      	str	r1, [r7, #96]	; 0x60
 80039b6:	416b      	adcs	r3, r5
 80039b8:	667b      	str	r3, [r7, #100]	; 0x64
 80039ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	461a      	mov	r2, r3
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	1891      	adds	r1, r2, r2
 80039c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80039c8:	415b      	adcs	r3, r3
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80039d4:	f7fc fc54 	bl	8000280 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4ba5      	ldr	r3, [pc, #660]	; (8003c74 <UART_SetConfig+0x38c>)
 80039de:	fba3 2302 	umull	r2, r3, r3, r2
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	011e      	lsls	r6, r3, #4
 80039e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e8:	461c      	mov	r4, r3
 80039ea:	f04f 0500 	mov.w	r5, #0
 80039ee:	4622      	mov	r2, r4
 80039f0:	462b      	mov	r3, r5
 80039f2:	1891      	adds	r1, r2, r2
 80039f4:	6339      	str	r1, [r7, #48]	; 0x30
 80039f6:	415b      	adcs	r3, r3
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
 80039fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039fe:	1912      	adds	r2, r2, r4
 8003a00:	eb45 0303 	adc.w	r3, r5, r3
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	00d9      	lsls	r1, r3, #3
 8003a0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a12:	00d0      	lsls	r0, r2, #3
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	1911      	adds	r1, r2, r4
 8003a1a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a1c:	416b      	adcs	r3, r5
 8003a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	461a      	mov	r2, r3
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	1891      	adds	r1, r2, r2
 8003a2c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a2e:	415b      	adcs	r3, r3
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a3a:	f7fc fc21 	bl	8000280 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4b8c      	ldr	r3, [pc, #560]	; (8003c74 <UART_SetConfig+0x38c>)
 8003a44:	fba3 1302 	umull	r1, r3, r3, r2
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	2164      	movs	r1, #100	; 0x64
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	3332      	adds	r3, #50	; 0x32
 8003a56:	4a87      	ldr	r2, [pc, #540]	; (8003c74 <UART_SetConfig+0x38c>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a64:	441e      	add	r6, r3
 8003a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f04f 0100 	mov.w	r1, #0
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	1894      	adds	r4, r2, r2
 8003a74:	623c      	str	r4, [r7, #32]
 8003a76:	415b      	adcs	r3, r3
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a7e:	1812      	adds	r2, r2, r0
 8003a80:	eb41 0303 	adc.w	r3, r1, r3
 8003a84:	f04f 0400 	mov.w	r4, #0
 8003a88:	f04f 0500 	mov.w	r5, #0
 8003a8c:	00dd      	lsls	r5, r3, #3
 8003a8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a92:	00d4      	lsls	r4, r2, #3
 8003a94:	4622      	mov	r2, r4
 8003a96:	462b      	mov	r3, r5
 8003a98:	1814      	adds	r4, r2, r0
 8003a9a:	653c      	str	r4, [r7, #80]	; 0x50
 8003a9c:	414b      	adcs	r3, r1
 8003a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	1891      	adds	r1, r2, r2
 8003aac:	61b9      	str	r1, [r7, #24]
 8003aae:	415b      	adcs	r3, r3
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003aba:	f7fc fbe1 	bl	8000280 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4b6c      	ldr	r3, [pc, #432]	; (8003c74 <UART_SetConfig+0x38c>)
 8003ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2164      	movs	r1, #100	; 0x64
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	3332      	adds	r3, #50	; 0x32
 8003ad6:	4a67      	ldr	r2, [pc, #412]	; (8003c74 <UART_SetConfig+0x38c>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	f003 0207 	and.w	r2, r3, #7
 8003ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4432      	add	r2, r6
 8003ae8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aea:	e0b9      	b.n	8003c60 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aee:	461c      	mov	r4, r3
 8003af0:	f04f 0500 	mov.w	r5, #0
 8003af4:	4622      	mov	r2, r4
 8003af6:	462b      	mov	r3, r5
 8003af8:	1891      	adds	r1, r2, r2
 8003afa:	6139      	str	r1, [r7, #16]
 8003afc:	415b      	adcs	r3, r3
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b04:	1912      	adds	r2, r2, r4
 8003b06:	eb45 0303 	adc.w	r3, r5, r3
 8003b0a:	f04f 0000 	mov.w	r0, #0
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	00d9      	lsls	r1, r3, #3
 8003b14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b18:	00d0      	lsls	r0, r2, #3
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	eb12 0804 	adds.w	r8, r2, r4
 8003b22:	eb43 0905 	adc.w	r9, r3, r5
 8003b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	008b      	lsls	r3, r1, #2
 8003b3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b3e:	0082      	lsls	r2, r0, #2
 8003b40:	4640      	mov	r0, r8
 8003b42:	4649      	mov	r1, r9
 8003b44:	f7fc fb9c 	bl	8000280 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4b49      	ldr	r3, [pc, #292]	; (8003c74 <UART_SetConfig+0x38c>)
 8003b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	011e      	lsls	r6, r3, #4
 8003b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f04f 0100 	mov.w	r1, #0
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	1894      	adds	r4, r2, r2
 8003b64:	60bc      	str	r4, [r7, #8]
 8003b66:	415b      	adcs	r3, r3
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b6e:	1812      	adds	r2, r2, r0
 8003b70:	eb41 0303 	adc.w	r3, r1, r3
 8003b74:	f04f 0400 	mov.w	r4, #0
 8003b78:	f04f 0500 	mov.w	r5, #0
 8003b7c:	00dd      	lsls	r5, r3, #3
 8003b7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b82:	00d4      	lsls	r4, r2, #3
 8003b84:	4622      	mov	r2, r4
 8003b86:	462b      	mov	r3, r5
 8003b88:	1814      	adds	r4, r2, r0
 8003b8a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b8c:	414b      	adcs	r3, r1
 8003b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f04f 0100 	mov.w	r1, #0
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	008b      	lsls	r3, r1, #2
 8003ba4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ba8:	0082      	lsls	r2, r0, #2
 8003baa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003bae:	f7fc fb67 	bl	8000280 <__aeabi_uldivmod>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4b2f      	ldr	r3, [pc, #188]	; (8003c74 <UART_SetConfig+0x38c>)
 8003bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	2164      	movs	r1, #100	; 0x64
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	3332      	adds	r3, #50	; 0x32
 8003bca:	4a2a      	ldr	r2, [pc, #168]	; (8003c74 <UART_SetConfig+0x38c>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd6:	441e      	add	r6, r3
 8003bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	1894      	adds	r4, r2, r2
 8003be6:	603c      	str	r4, [r7, #0]
 8003be8:	415b      	adcs	r3, r3
 8003bea:	607b      	str	r3, [r7, #4]
 8003bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bf0:	1812      	adds	r2, r2, r0
 8003bf2:	eb41 0303 	adc.w	r3, r1, r3
 8003bf6:	f04f 0400 	mov.w	r4, #0
 8003bfa:	f04f 0500 	mov.w	r5, #0
 8003bfe:	00dd      	lsls	r5, r3, #3
 8003c00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c04:	00d4      	lsls	r4, r2, #3
 8003c06:	4622      	mov	r2, r4
 8003c08:	462b      	mov	r3, r5
 8003c0a:	eb12 0a00 	adds.w	sl, r2, r0
 8003c0e:	eb43 0b01 	adc.w	fp, r3, r1
 8003c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	008b      	lsls	r3, r1, #2
 8003c26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c2a:	0082      	lsls	r2, r0, #2
 8003c2c:	4650      	mov	r0, sl
 8003c2e:	4659      	mov	r1, fp
 8003c30:	f7fc fb26 	bl	8000280 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <UART_SetConfig+0x38c>)
 8003c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2164      	movs	r1, #100	; 0x64
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	3332      	adds	r3, #50	; 0x32
 8003c4c:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <UART_SetConfig+0x38c>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	f003 020f 	and.w	r2, r3, #15
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4432      	add	r2, r6
 8003c5e:	609a      	str	r2, [r3, #8]
}
 8003c60:	bf00      	nop
 8003c62:	377c      	adds	r7, #124	; 0x7c
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40011000 	.word	0x40011000
 8003c70:	40011400 	.word	0x40011400
 8003c74:	51eb851f 	.word	0x51eb851f

08003c78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c78:	b084      	sub	sp, #16
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	f107 001c 	add.w	r0, r7, #28
 8003c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d122      	bne.n	8003cd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f9a0 	bl	8004010 <USB_CoreReset>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	73fb      	strb	r3, [r7, #15]
 8003cd4:	e01a      	b.n	8003d0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f994 	bl	8004010 <USB_CoreReset>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8003cfe:	e005      	b.n	8003d0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d10b      	bne.n	8003d2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f043 0206 	orr.w	r2, r3, #6
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d36:	b004      	add	sp, #16
 8003d38:	4770      	bx	lr

08003d3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 0201 	bic.w	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d115      	bne.n	8003dcc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003dac:	2001      	movs	r0, #1
 8003dae:	f7fc ff95 	bl	8000cdc <HAL_Delay>
      ms++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f91a 	bl	8003ff2 <USB_GetMode>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d01e      	beq.n	8003e02 <USB_SetCurrentMode+0x84>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b31      	cmp	r3, #49	; 0x31
 8003dc8:	d9f0      	bls.n	8003dac <USB_SetCurrentMode+0x2e>
 8003dca:	e01a      	b.n	8003e02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d115      	bne.n	8003dfe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003dde:	2001      	movs	r0, #1
 8003de0:	f7fc ff7c 	bl	8000cdc <HAL_Delay>
      ms++;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3301      	adds	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f901 	bl	8003ff2 <USB_GetMode>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <USB_SetCurrentMode+0x84>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b31      	cmp	r3, #49	; 0x31
 8003dfa:	d9f0      	bls.n	8003dde <USB_SetCurrentMode+0x60>
 8003dfc:	e001      	b.n	8003e02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e005      	b.n	8003e0e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b32      	cmp	r3, #50	; 0x32
 8003e06:	d101      	bne.n	8003e0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	019b      	lsls	r3, r3, #6
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <USB_FlushTxFifo+0x44>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e006      	b.n	8003e50 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d0f1      	beq.n	8003e32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	00030d40 	.word	0x00030d40

08003e60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2210      	movs	r2, #16
 8003e70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <USB_FlushRxFifo+0x3c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e006      	b.n	8003e90 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d0f1      	beq.n	8003e72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	00030d40 	.word	0x00030d40

08003ea0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	460b      	mov	r3, r1
 8003eb0:	71fb      	strb	r3, [r7, #7]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d123      	bne.n	8003f0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ec6:	88bb      	ldrh	r3, [r7, #4]
 8003ec8:	3303      	adds	r3, #3
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e018      	b.n	8003f06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	031a      	lsls	r2, r3, #12
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	3301      	adds	r3, #1
 8003eec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3301      	adds	r3, #1
 8003efe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	3301      	adds	r3, #1
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d3e2      	bcc.n	8003ed4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3724      	adds	r7, #36	; 0x24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b08b      	sub	sp, #44	; 0x2c
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	623b      	str	r3, [r7, #32]
 8003f46:	e014      	b.n	8003f72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	3301      	adds	r3, #1
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	3301      	adds	r3, #1
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	3301      	adds	r3, #1
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	623b      	str	r3, [r7, #32]
 8003f72:	6a3a      	ldr	r2, [r7, #32]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d3e6      	bcc.n	8003f48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f7a:	8bfb      	ldrh	r3, [r7, #30]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01e      	beq.n	8003fbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f107 0310 	add.w	r3, r7, #16
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	701a      	strb	r2, [r3, #0]
      i++;
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	3301      	adds	r3, #1
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003fb2:	8bfb      	ldrh	r3, [r7, #30]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fb8:	8bfb      	ldrh	r3, [r7, #30]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1ea      	bne.n	8003f94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	372c      	adds	r7, #44	; 0x2c
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3301      	adds	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	4a13      	ldr	r2, [pc, #76]	; (8004070 <USB_CoreReset+0x60>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e01a      	b.n	8004062 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	daf3      	bge.n	800401c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f043 0201 	orr.w	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3301      	adds	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	4a09      	ldr	r2, [pc, #36]	; (8004070 <USB_CoreReset+0x60>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e006      	b.n	8004062 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b01      	cmp	r3, #1
 800405e:	d0f1      	beq.n	8004044 <USB_CoreReset+0x34>

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	00030d40 	.word	0x00030d40

08004074 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004074:	b084      	sub	sp, #16
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	f107 001c 	add.w	r0, r7, #28
 8004082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004090:	461a      	mov	r2, r3
 8004092:	2300      	movs	r3, #0
 8004094:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d018      	beq.n	80040f8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10a      	bne.n	80040e2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040da:	f043 0304 	orr.w	r3, r3, #4
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	e014      	b.n	800410c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e009      	b.n	800410c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004106:	f023 0304 	bic.w	r3, r3, #4
 800410a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800410c:	2110      	movs	r1, #16
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff fe82 	bl	8003e18 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fea3 	bl	8003e60 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e015      	b.n	800414c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	461a      	mov	r2, r3
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004140:	461a      	mov	r2, r3
 8004142:	2300      	movs	r3, #0
 8004144:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3301      	adds	r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	429a      	cmp	r2, r3
 8004152:	d3e5      	bcc.n	8004120 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f04f 32ff 	mov.w	r2, #4294967295
 8004160:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004174:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <USB_HostInit+0x154>)
 800417a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a13      	ldr	r2, [pc, #76]	; (80041cc <USB_HostInit+0x158>)
 8004180:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004184:	e009      	b.n	800419a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2280      	movs	r2, #128	; 0x80
 800418a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a10      	ldr	r2, [pc, #64]	; (80041d0 <USB_HostInit+0x15c>)
 8004190:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a0f      	ldr	r2, [pc, #60]	; (80041d4 <USB_HostInit+0x160>)
 8004196:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f043 0210 	orr.w	r2, r3, #16
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <USB_HostInit+0x164>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041c4:	b004      	add	sp, #16
 80041c6:	4770      	bx	lr
 80041c8:	01000200 	.word	0x01000200
 80041cc:	00e00300 	.word	0x00e00300
 80041d0:	00600080 	.word	0x00600080
 80041d4:	004000e0 	.word	0x004000e0
 80041d8:	a3200008 	.word	0xa3200008

080041dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d107      	bne.n	800422e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004224:	461a      	mov	r2, r3
 8004226:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800422a:	6053      	str	r3, [r2, #4]
 800422c:	e009      	b.n	8004242 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d106      	bne.n	8004242 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800423a:	461a      	mov	r2, r3
 800423c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004240:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004270:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800427a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004280:	2064      	movs	r0, #100	; 0x64
 8004282:	f7fc fd2b 	bl	8000cdc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800428e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004292:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004294:	200a      	movs	r0, #10
 8004296:	f7fc fd21 	bl	8000cdc <HAL_Delay>

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <USB_DriveVbus+0x44>
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d106      	bne.n	80042e8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80042e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042e6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f2:	d109      	bne.n	8004308 <USB_DriveVbus+0x64>
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004306:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004316:	b480      	push	{r7}
 8004318:	b085      	sub	sp, #20
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	0c5b      	lsrs	r3, r3, #17
 8004334:	f003 0303 	and.w	r3, r3, #3
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	b29b      	uxth	r3, r3
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	4608      	mov	r0, r1
 8004372:	4611      	mov	r1, r2
 8004374:	461a      	mov	r2, r3
 8004376:	4603      	mov	r3, r0
 8004378:	70fb      	strb	r3, [r7, #3]
 800437a:	460b      	mov	r3, r1
 800437c:	70bb      	strb	r3, [r7, #2]
 800437e:	4613      	mov	r3, r2
 8004380:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004396:	461a      	mov	r2, r3
 8004398:	f04f 33ff 	mov.w	r3, #4294967295
 800439c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800439e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d87e      	bhi.n	80044a4 <USB_HC_Init+0x13c>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <USB_HC_Init+0x44>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	08004467 	.word	0x08004467
 80043b4:	080043bd 	.word	0x080043bd
 80043b8:	08004429 	.word	0x08004429
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c8:	461a      	mov	r2, r3
 80043ca:	f240 439d 	movw	r3, #1181	; 0x49d
 80043ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80043d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da10      	bge.n	80043fa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80043f8:	e057      	b.n	80044aa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d051      	beq.n	80044aa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	440a      	add	r2, r1
 800441c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004420:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004424:	60d3      	str	r3, [r2, #12]
      break;
 8004426:	e040      	b.n	80044aa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	461a      	mov	r2, r3
 8004436:	f240 639d 	movw	r3, #1693	; 0x69d
 800443a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800443c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004440:	2b00      	cmp	r3, #0
 8004442:	da34      	bge.n	80044ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	0151      	lsls	r1, r2, #5
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	440a      	add	r2, r1
 800445a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800445e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004462:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004464:	e023      	b.n	80044ae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4413      	add	r3, r2
 800446e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004472:	461a      	mov	r2, r3
 8004474:	f240 2325 	movw	r3, #549	; 0x225
 8004478:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800447a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800447e:	2b00      	cmp	r3, #0
 8004480:	da17      	bge.n	80044b2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	0151      	lsls	r1, r2, #5
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	440a      	add	r2, r1
 8004498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800449c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80044a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80044a2:	e006      	b.n	80044b2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	77fb      	strb	r3, [r7, #31]
      break;
 80044a8:	e004      	b.n	80044b4 <USB_HC_Init+0x14c>
      break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <USB_HC_Init+0x14c>
      break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <USB_HC_Init+0x14c>
      break;
 80044b2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	2101      	movs	r1, #1
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	6939      	ldr	r1, [r7, #16]
 80044ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80044ce:	4313      	orrs	r3, r2
 80044d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80044de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da03      	bge.n	80044ee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80044e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	e001      	b.n	80044f2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff ff0f 	bl	8004316 <USB_GetHostSpeed>
 80044f8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80044fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d106      	bne.n	8004510 <USB_HC_Init+0x1a8>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d003      	beq.n	8004510 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	e001      	b.n	8004514 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004514:	787b      	ldrb	r3, [r7, #1]
 8004516:	059b      	lsls	r3, r3, #22
 8004518:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800451c:	78bb      	ldrb	r3, [r7, #2]
 800451e:	02db      	lsls	r3, r3, #11
 8004520:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004524:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004526:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800452a:	049b      	lsls	r3, r3, #18
 800452c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004530:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004532:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004534:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004538:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	0159      	lsls	r1, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	440b      	add	r3, r1
 8004546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004550:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004552:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004556:	2b03      	cmp	r3, #3
 8004558:	d10f      	bne.n	800457a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	78fa      	ldrb	r2, [r7, #3]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	440a      	add	r2, r1
 8004570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004574:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004578:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800457a:	7ffb      	ldrb	r3, [r7, #31]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08c      	sub	sp, #48	; 0x30
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	4613      	mov	r3, r2
 8004590:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800459c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045a0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d02d      	beq.n	800460a <USB_HC_StartXfer+0x86>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	791b      	ldrb	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d129      	bne.n	800460a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d117      	bne.n	80045ec <USB_HC_StartXfer+0x68>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	79db      	ldrb	r3, [r3, #7]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <USB_HC_StartXfer+0x48>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	79db      	ldrb	r3, [r3, #7]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d10f      	bne.n	80045ec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	6a3a      	ldr	r2, [r7, #32]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <USB_HC_StartXfer+0x86>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	795b      	ldrb	r3, [r3, #5]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	4619      	mov	r1, r3
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fa2f 	bl	8004a64 <USB_DoPing>
      return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e0f8      	b.n	80047fc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d018      	beq.n	8004644 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	8912      	ldrh	r2, [r2, #8]
 800461a:	4413      	add	r3, r2
 800461c:	3b01      	subs	r3, #1
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	8912      	ldrh	r2, [r2, #8]
 8004622:	fbb3 f3f2 	udiv	r3, r3, r2
 8004626:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004628:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800462a:	8b7b      	ldrh	r3, [r7, #26]
 800462c:	429a      	cmp	r2, r3
 800462e:	d90b      	bls.n	8004648 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004630:	8b7b      	ldrh	r3, [r7, #26]
 8004632:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004634:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	8912      	ldrh	r2, [r2, #8]
 800463a:	fb02 f203 	mul.w	r2, r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	611a      	str	r2, [r3, #16]
 8004642:	e001      	b.n	8004648 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004644:	2301      	movs	r3, #1
 8004646:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	78db      	ldrb	r3, [r3, #3]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	8912      	ldrh	r2, [r2, #8]
 8004656:	fb02 f203 	mul.w	r2, r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	611a      	str	r2, [r3, #16]
 800465e:	e003      	b.n	8004668 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004670:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004672:	04d9      	lsls	r1, r3, #19
 8004674:	4b63      	ldr	r3, [pc, #396]	; (8004804 <USB_HC_StartXfer+0x280>)
 8004676:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004678:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	7a9b      	ldrb	r3, [r3, #10]
 800467e:	075b      	lsls	r3, r3, #29
 8004680:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004684:	69f9      	ldr	r1, [r7, #28]
 8004686:	0148      	lsls	r0, r1, #5
 8004688:	6a39      	ldr	r1, [r7, #32]
 800468a:	4401      	add	r1, r0
 800468c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004690:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004692:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	68d9      	ldr	r1, [r3, #12]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046aa:	460a      	mov	r2, r1
 80046ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf0c      	ite	eq
 80046be:	2301      	moveq	r3, #1
 80046c0:	2300      	movne	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	7e7b      	ldrb	r3, [r7, #25]
 80046f6:	075b      	lsls	r3, r3, #29
 80046f8:	69f9      	ldr	r1, [r7, #28]
 80046fa:	0148      	lsls	r0, r1, #5
 80046fc:	6a39      	ldr	r1, [r7, #32]
 80046fe:	4401      	add	r1, r0
 8004700:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	4413      	add	r3, r2
 8004710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800471e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	78db      	ldrb	r3, [r3, #3]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	e003      	b.n	800473a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004738:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004740:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	4413      	add	r3, r2
 800474a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474e:	461a      	mov	r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e04e      	b.n	80047fc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	78db      	ldrb	r3, [r3, #3]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d149      	bne.n	80047fa <USB_HC_StartXfer+0x276>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d045      	beq.n	80047fa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	79db      	ldrb	r3, [r3, #7]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d830      	bhi.n	80047d8 <USB_HC_StartXfer+0x254>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <USB_HC_StartXfer+0x1f8>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	0800478d 	.word	0x0800478d
 8004780:	080047b1 	.word	0x080047b1
 8004784:	0800478d 	.word	0x0800478d
 8004788:	080047b1 	.word	0x080047b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	3303      	adds	r3, #3
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004796:	8afa      	ldrh	r2, [r7, #22]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	b29b      	uxth	r3, r3
 800479e:	429a      	cmp	r2, r3
 80047a0:	d91c      	bls.n	80047dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80047ae:	e015      	b.n	80047dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	3303      	adds	r3, #3
 80047b6:	089b      	lsrs	r3, r3, #2
 80047b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80047ba:	8afa      	ldrh	r2, [r7, #22]
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d90a      	bls.n	80047e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80047d6:	e003      	b.n	80047e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80047d8:	bf00      	nop
 80047da:	e002      	b.n	80047e2 <USB_HC_StartXfer+0x25e>
        break;
 80047dc:	bf00      	nop
 80047de:	e000      	b.n	80047e2 <USB_HC_StartXfer+0x25e>
        break;
 80047e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	68d9      	ldr	r1, [r3, #12]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	785a      	ldrb	r2, [r3, #1]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2000      	movs	r0, #0
 80047f2:	9000      	str	r0, [sp, #0]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff fb53 	bl	8003ea0 <USB_WritePacket>
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3728      	adds	r7, #40	; 0x28
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	1ff80000 	.word	0x1ff80000

08004808 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	b29b      	uxth	r3, r3
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800482a:	b480      	push	{r7}
 800482c:	b089      	sub	sp, #36	; 0x24
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0c9b      	lsrs	r3, r3, #18
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	0fdb      	lsrs	r3, r3, #31
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b20      	cmp	r3, #32
 8004878:	d104      	bne.n	8004884 <USB_HC_Halt+0x5a>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	e0e8      	b.n	8004a56 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <USB_HC_Halt+0x66>
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d173      	bne.n	8004978 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 80cb 	bne.w	8004a54 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d143      	bne.n	8004952 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	0151      	lsls	r1, r2, #5
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	440a      	add	r2, r1
 80048e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004908:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	4413      	add	r3, r2
 8004912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	440a      	add	r2, r1
 8004920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004924:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004928:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3301      	adds	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004936:	d81d      	bhi.n	8004974 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800494a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800494e:	d0ec      	beq.n	800492a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004950:	e080      	b.n	8004a54 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	440a      	add	r2, r1
 8004968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800496c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004970:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004972:	e06f      	b.n	8004a54 <USB_HC_Halt+0x22a>
            break;
 8004974:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004976:	e06d      	b.n	8004a54 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	4413      	add	r3, r2
 8004980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	440a      	add	r2, r1
 800498e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004992:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004996:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d143      	bne.n	8004a30 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	0151      	lsls	r1, r2, #5
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	440a      	add	r2, r1
 80049de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a06:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a14:	d81d      	bhi.n	8004a52 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a2c:	d0ec      	beq.n	8004a08 <USB_HC_Halt+0x1de>
 8004a2e:	e011      	b.n	8004a54 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	e000      	b.n	8004a54 <USB_HC_Halt+0x22a>
          break;
 8004a52:	bf00      	nop
    }
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3724      	adds	r7, #36	; 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	04da      	lsls	r2, r3, #19
 8004a80:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <USB_DoPing+0x74>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	0151      	lsls	r1, r2, #5
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	440a      	add	r2, r1
 8004a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a94:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ab4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	1ff80000 	.word	0x1ff80000

08004adc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff f935 	bl	8003d5c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004af2:	2110      	movs	r1, #16
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff f98f 	bl	8003e18 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff f9b0 	bl	8003e60 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	e01f      	b.n	8004b46 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b1c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b2c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	3301      	adds	r3, #1
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b0f      	cmp	r3, #15
 8004b4a:	d9dc      	bls.n	8004b06 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	e034      	b.n	8004bbc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b68:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b70:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b78:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b86:	461a      	mov	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b98:	d80c      	bhi.n	8004bb4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bb0:	d0ec      	beq.n	8004b8c <USB_StopHost+0xb0>
 8004bb2:	e000      	b.n	8004bb6 <USB_StopHost+0xda>
        break;
 8004bb4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b0f      	cmp	r3, #15
 8004bc0:	d9c7      	bls.n	8004b52 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff f8ae 	bl	8003d3a <USB_EnableGlobalInt>

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8004bec:	4904      	ldr	r1, [pc, #16]	; (8004c00 <MX_FATFS_Init+0x18>)
 8004bee:	4805      	ldr	r0, [pc, #20]	; (8004c04 <MX_FATFS_Init+0x1c>)
 8004bf0:	f006 f96e 	bl	800aed0 <FATFS_LinkDriver>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <MX_FATFS_Init+0x20>)
 8004bfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004bfc:	bf00      	nop
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	200003bc 	.word	0x200003bc
 8004c04:	0800c090 	.word	0x0800c090
 8004c08:	20000824 	.word	0x20000824

08004c0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004c10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	4619      	mov	r1, r3
 8004c46:	4808      	ldr	r0, [pc, #32]	; (8004c68 <USBH_status+0x34>)
 8004c48:	f000 fe1a 	bl	8005880 <USBH_MSC_UnitIsReady>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <USBH_status+0x24>
  {
    res = RES_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e001      	b.n	8004c5c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000828 	.word	0x20000828

08004c6c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b094      	sub	sp, #80	; 0x50
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8004c82:	7bf9      	ldrb	r1, [r7, #15]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	4813      	ldr	r0, [pc, #76]	; (8004cdc <USBH_read+0x70>)
 8004c8e:	f000 fe41 	bl	8005914 <USBH_MSC_Read>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <USBH_read+0x34>
  {
    res = RES_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004c9e:	e017      	b.n	8004cd0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8004ca0:	f107 0210 	add.w	r2, r7, #16
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	480c      	ldr	r0, [pc, #48]	; (8004cdc <USBH_read+0x70>)
 8004caa:	f000 fe0f 	bl	80058cc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8004cae:	7f7b      	ldrb	r3, [r7, #29]
 8004cb0:	2b3a      	cmp	r3, #58	; 0x3a
 8004cb2:	d005      	beq.n	8004cc0 <USBH_read+0x54>
 8004cb4:	2b3a      	cmp	r3, #58	; 0x3a
 8004cb6:	dc07      	bgt.n	8004cc8 <USBH_read+0x5c>
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d001      	beq.n	8004cc0 <USBH_read+0x54>
 8004cbc:	2b28      	cmp	r3, #40	; 0x28
 8004cbe:	d103      	bne.n	8004cc8 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004cc6:	e003      	b.n	8004cd0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004cce:	bf00      	nop
    }
  }

  return res;
 8004cd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3748      	adds	r7, #72	; 0x48
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000828 	.word	0x20000828

08004ce0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b094      	sub	sp, #80	; 0x50
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8004cf6:	7bf9      	ldrb	r1, [r7, #15]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4817      	ldr	r0, [pc, #92]	; (8004d60 <USBH_write+0x80>)
 8004d02:	f000 fe70 	bl	80059e6 <USBH_MSC_Write>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <USBH_write+0x34>
  {
    res = RES_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004d12:	e01f      	b.n	8004d54 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8004d14:	f107 0210 	add.w	r2, r7, #16
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4810      	ldr	r0, [pc, #64]	; (8004d60 <USBH_write+0x80>)
 8004d1e:	f000 fdd5 	bl	80058cc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8004d22:	7f7b      	ldrb	r3, [r7, #29]
 8004d24:	2b3a      	cmp	r3, #58	; 0x3a
 8004d26:	d00d      	beq.n	8004d44 <USBH_write+0x64>
 8004d28:	2b3a      	cmp	r3, #58	; 0x3a
 8004d2a:	dc0f      	bgt.n	8004d4c <USBH_write+0x6c>
 8004d2c:	2b28      	cmp	r3, #40	; 0x28
 8004d2e:	d009      	beq.n	8004d44 <USBH_write+0x64>
 8004d30:	2b28      	cmp	r3, #40	; 0x28
 8004d32:	dc0b      	bgt.n	8004d4c <USBH_write+0x6c>
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d005      	beq.n	8004d44 <USBH_write+0x64>
 8004d38:	2b27      	cmp	r3, #39	; 0x27
 8004d3a:	d107      	bne.n	8004d4c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004d42:	e007      	b.n	8004d54 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8004d44:	2303      	movs	r3, #3
 8004d46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004d4a:	e003      	b.n	8004d54 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004d52:	bf00      	nop
    }
  }

  return res;
 8004d54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3748      	adds	r7, #72	; 0x48
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000828 	.word	0x20000828

08004d64 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b090      	sub	sp, #64	; 0x40
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	603a      	str	r2, [r7, #0]
 8004d6e:	71fb      	strb	r3, [r7, #7]
 8004d70:	460b      	mov	r3, r1
 8004d72:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8004d7a:	79bb      	ldrb	r3, [r7, #6]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d852      	bhi.n	8004e26 <USBH_ioctl+0xc2>
 8004d80:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <USBH_ioctl+0x24>)
 8004d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d86:	bf00      	nop
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004da1 	.word	0x08004da1
 8004d90:	08004dcb 	.word	0x08004dcb
 8004d94:	08004df7 	.word	0x08004df7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004d9e:	e045      	b.n	8004e2c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004da0:	f107 0208 	add.w	r2, r7, #8
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	4619      	mov	r1, r3
 8004da8:	4823      	ldr	r0, [pc, #140]	; (8004e38 <USBH_ioctl+0xd4>)
 8004daa:	f000 fd8f 	bl	80058cc <USBH_MSC_GetLUNInfo>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004dc0:	e034      	b.n	8004e2c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004dc8:	e030      	b.n	8004e2c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004dca:	f107 0208 	add.w	r2, r7, #8
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4819      	ldr	r0, [pc, #100]	; (8004e38 <USBH_ioctl+0xd4>)
 8004dd4:	f000 fd7a 	bl	80058cc <USBH_MSC_GetLUNInfo>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8004dde:	8a3b      	ldrh	r3, [r7, #16]
 8004de0:	461a      	mov	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004dec:	e01e      	b.n	8004e2c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004df4:	e01a      	b.n	8004e2c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004df6:	f107 0208 	add.w	r2, r7, #8
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	480e      	ldr	r0, [pc, #56]	; (8004e38 <USBH_ioctl+0xd4>)
 8004e00:	f000 fd64 	bl	80058cc <USBH_MSC_GetLUNInfo>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8004e0a:	8a3b      	ldrh	r3, [r7, #16]
 8004e0c:	0a5b      	lsrs	r3, r3, #9
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004e1c:	e006      	b.n	8004e2c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004e24:	e002      	b.n	8004e2c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8004e26:	2304      	movs	r3, #4
 8004e28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8004e2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3740      	adds	r7, #64	; 0x40
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000828 	.word	0x20000828

08004e3c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b089      	sub	sp, #36	; 0x24
 8004e40:	af04      	add	r7, sp, #16
 8004e42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e4a:	7919      	ldrb	r1, [r3, #4]
 8004e4c:	2350      	movs	r3, #80	; 0x50
 8004e4e:	2206      	movs	r2, #6
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f001 fc53 	bl	80066fc <USBH_FindInterface>
 8004e56:	4603      	mov	r3, r0
 8004e58:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2bff      	cmp	r3, #255	; 0xff
 8004e5e:	d002      	beq.n	8004e66 <USBH_MSC_InterfaceInit+0x2a>
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d901      	bls.n	8004e6a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004e66:	2302      	movs	r3, #2
 8004e68:	e0ef      	b.n	800504a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f001 fc28 	bl	80066c4 <USBH_SelectInterface>
 8004e74:	4603      	mov	r3, r0
 8004e76:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004e78:	7bbb      	ldrb	r3, [r7, #14]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e0e3      	b.n	800504a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004e88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e8c:	f006 fc24 	bl	800b6d8 <malloc>
 8004e90:	4603      	mov	r3, r0
 8004e92:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e0d0      	b.n	800504a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8004ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eac:	2100      	movs	r1, #0
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	f006 fc30 	bl	800b714 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	211a      	movs	r1, #26
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	b25b      	sxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	da16      	bge.n	8004efa <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	211a      	movs	r1, #26
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004edc:	781a      	ldrb	r2, [r3, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	211a      	movs	r1, #26
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004ef2:	881a      	ldrh	r2, [r3, #0]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	815a      	strh	r2, [r3, #10]
 8004ef8:	e015      	b.n	8004f26 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	211a      	movs	r1, #26
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	4413      	add	r3, r2
 8004f06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004f0a:	781a      	ldrb	r2, [r3, #0]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	211a      	movs	r1, #26
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004f20:	881a      	ldrh	r2, [r3, #0]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	211a      	movs	r1, #26
 8004f2c:	fb01 f303 	mul.w	r3, r1, r3
 8004f30:	4413      	add	r3, r2
 8004f32:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	b25b      	sxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	da16      	bge.n	8004f6c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	211a      	movs	r1, #26
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	4413      	add	r3, r2
 8004f4a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004f4e:	781a      	ldrb	r2, [r3, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	211a      	movs	r1, #26
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004f64:	881a      	ldrh	r2, [r3, #0]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	815a      	strh	r2, [r3, #10]
 8004f6a:	e015      	b.n	8004f98 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	211a      	movs	r1, #26
 8004f72:	fb01 f303 	mul.w	r3, r1, r3
 8004f76:	4413      	add	r3, r2
 8004f78:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	211a      	movs	r1, #26
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	799b      	ldrb	r3, [r3, #6]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f002 fdc4 	bl	8007b3e <USBH_AllocPipe>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	79db      	ldrb	r3, [r3, #7]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f002 fdba 	bl	8007b3e <USBH_AllocPipe>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fdac 	bl	8005b30 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	7959      	ldrb	r1, [r3, #5]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	7998      	ldrb	r0, [r3, #6]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	8912      	ldrh	r2, [r2, #8]
 8004ff0:	9202      	str	r2, [sp, #8]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	9201      	str	r2, [sp, #4]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	4623      	mov	r3, r4
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f002 fd6f 	bl	8007ae0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	7919      	ldrb	r1, [r3, #4]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	79d8      	ldrb	r0, [r3, #7]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	8952      	ldrh	r2, [r2, #10]
 800501a:	9202      	str	r2, [sp, #8]
 800501c:	2202      	movs	r2, #2
 800501e:	9201      	str	r2, [sp, #4]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	4623      	mov	r3, r4
 8005024:	4602      	mov	r2, r0
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f002 fd5a 	bl	8007ae0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	791b      	ldrb	r3, [r3, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f006 fa8e 	bl	800b556 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	795b      	ldrb	r3, [r3, #5]
 800503e:	2200      	movs	r2, #0
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f006 fa87 	bl	800b556 <USBH_LL_SetToggle>

  return USBH_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bd90      	pop	{r4, r7, pc}

08005052 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	795b      	ldrb	r3, [r3, #5]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	795b      	ldrb	r3, [r3, #5]
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f002 fd53 	bl	8007b1e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	795b      	ldrb	r3, [r3, #5]
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f002 fd7e 	bl	8007b80 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	791b      	ldrb	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00e      	beq.n	80050b0 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	791b      	ldrb	r3, [r3, #4]
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f002 fd40 	bl	8007b1e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	791b      	ldrb	r3, [r3, #4]
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f002 fd6b 	bl	8007b80 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00b      	beq.n	80050d4 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f006 fb0f 	bl	800b6e8 <free>
    phost->pActiveClass->pData = 0U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050d0:	2200      	movs	r2, #0
 80050d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	7b9b      	ldrb	r3, [r3, #14]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d041      	beq.n	8005180 <USBH_MSC_ClassRequest+0xa2>
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	dc4b      	bgt.n	8005198 <USBH_MSC_ClassRequest+0xba>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <USBH_MSC_ClassRequest+0x2a>
 8005104:	2b02      	cmp	r3, #2
 8005106:	d147      	bne.n	8005198 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fcf0 	bl	8005af2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005112:	4603      	mov	r3, r0
 8005114:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	2b03      	cmp	r3, #3
 800511a:	d104      	bne.n	8005126 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d137      	bne.n	800519c <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d804      	bhi.n	800513e <USBH_MSC_ClassRequest+0x60>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	3301      	adds	r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	e000      	b.n	8005140 <USBH_MSC_ClassRequest+0x62>
 800513e:	2202      	movs	r2, #2
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005144:	2300      	movs	r3, #0
 8005146:	73bb      	strb	r3, [r7, #14]
 8005148:	e014      	b.n	8005174 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800514a:	7bbb      	ldrb	r3, [r7, #14]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	2134      	movs	r1, #52	; 0x34
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	4413      	add	r3, r2
 8005156:	3392      	adds	r3, #146	; 0x92
 8005158:	2202      	movs	r2, #2
 800515a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800515c:	7bbb      	ldrb	r3, [r7, #14]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	2134      	movs	r1, #52	; 0x34
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	4413      	add	r3, r2
 8005168:	33c1      	adds	r3, #193	; 0xc1
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800516e:	7bbb      	ldrb	r3, [r7, #14]
 8005170:	3301      	adds	r3, #1
 8005172:	73bb      	strb	r3, [r7, #14]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	7bba      	ldrb	r2, [r7, #14]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3e5      	bcc.n	800514a <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800517e:	e00d      	b.n	800519c <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005180:	2100      	movs	r1, #0
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f002 f87b 	bl	800727e <USBH_ClrFeature>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d108      	bne.n	80051a0 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	7bda      	ldrb	r2, [r3, #15]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005196:	e003      	b.n	80051a0 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8005198:	bf00      	nop
 800519a:	e002      	b.n	80051a2 <USBH_MSC_ClassRequest+0xc4>
      break;
 800519c:	bf00      	nop
 800519e:	e000      	b.n	80051a2 <USBH_MSC_ClassRequest+0xc4>
      break;
 80051a0:	bf00      	nop
  }

  return status;
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80051be:	2301      	movs	r3, #1
 80051c0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	7b1b      	ldrb	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <USBH_MSC_Process+0x2e>
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	f000 8271 	beq.w	80056ba <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80051d8:	e272      	b.n	80056c0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	429a      	cmp	r2, r3
 80051e8:	f080 824f 	bcs.w	800568a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80051f2:	4619      	mov	r1, r3
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	2334      	movs	r3, #52	; 0x34
 80051f8:	fb03 f301 	mul.w	r3, r3, r1
 80051fc:	4413      	add	r3, r2
 80051fe:	3391      	adds	r3, #145	; 0x91
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800520a:	4619      	mov	r1, r3
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	2334      	movs	r3, #52	; 0x34
 8005210:	fb03 f301 	mul.w	r3, r3, r1
 8005214:	4413      	add	r3, r2
 8005216:	3390      	adds	r3, #144	; 0x90
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b08      	cmp	r3, #8
 800521c:	f200 8243 	bhi.w	80056a6 <USBH_MSC_Process+0x4fa>
 8005220:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <USBH_MSC_Process+0x7c>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	0800524d 	.word	0x0800524d
 800522c:	080056a7 	.word	0x080056a7
 8005230:	08005315 	.word	0x08005315
 8005234:	08005499 	.word	0x08005499
 8005238:	08005273 	.word	0x08005273
 800523c:	08005565 	.word	0x08005565
 8005240:	080056a7 	.word	0x080056a7
 8005244:	080056a7 	.word	0x080056a7
 8005248:	08005679 	.word	0x08005679
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005252:	4619      	mov	r1, r3
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	2334      	movs	r3, #52	; 0x34
 8005258:	fb03 f301 	mul.w	r3, r3, r1
 800525c:	4413      	add	r3, r2
 800525e:	3390      	adds	r3, #144	; 0x90
 8005260:	2204      	movs	r2, #4
 8005262:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005270:	e222      	b.n	80056b8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005278:	b2d9      	uxtb	r1, r3
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005280:	461a      	mov	r2, r3
 8005282:	2334      	movs	r3, #52	; 0x34
 8005284:	fb03 f302 	mul.w	r3, r3, r2
 8005288:	3398      	adds	r3, #152	; 0x98
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	3307      	adds	r3, #7
 8005290:	461a      	mov	r2, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 ff6a 	bl	800616c <USBH_MSC_SCSI_Inquiry>
 8005298:	4603      	mov	r3, r0
 800529a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10b      	bne.n	80052ba <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80052a8:	4619      	mov	r1, r3
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	2334      	movs	r3, #52	; 0x34
 80052ae:	fb03 f301 	mul.w	r3, r3, r1
 80052b2:	4413      	add	r3, r2
 80052b4:	3390      	adds	r3, #144	; 0x90
 80052b6:	2202      	movs	r2, #2
 80052b8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d10c      	bne.n	80052da <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80052c6:	4619      	mov	r1, r3
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	2334      	movs	r3, #52	; 0x34
 80052cc:	fb03 f301 	mul.w	r3, r3, r1
 80052d0:	4413      	add	r3, r2
 80052d2:	3390      	adds	r3, #144	; 0x90
 80052d4:	2205      	movs	r2, #5
 80052d6:	701a      	strb	r2, [r3, #0]
            break;
 80052d8:	e1e7      	b.n	80056aa <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	f040 81e4 	bne.w	80056aa <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80052e8:	4619      	mov	r1, r3
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	2334      	movs	r3, #52	; 0x34
 80052ee:	fb03 f301 	mul.w	r3, r3, r1
 80052f2:	4413      	add	r3, r2
 80052f4:	3390      	adds	r3, #144	; 0x90
 80052f6:	2201      	movs	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005300:	4619      	mov	r1, r3
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	2334      	movs	r3, #52	; 0x34
 8005306:	fb03 f301 	mul.w	r3, r3, r1
 800530a:	4413      	add	r3, r2
 800530c:	3391      	adds	r3, #145	; 0x91
 800530e:	2202      	movs	r2, #2
 8005310:	701a      	strb	r2, [r3, #0]
            break;
 8005312:	e1ca      	b.n	80056aa <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800531a:	b2db      	uxtb	r3, r3
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fe66 	bl	8005ff0 <USBH_MSC_SCSI_TestUnitReady>
 8005324:	4603      	mov	r3, r0
 8005326:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d149      	bne.n	80053c2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005334:	4619      	mov	r1, r3
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	2334      	movs	r3, #52	; 0x34
 800533a:	fb03 f301 	mul.w	r3, r3, r1
 800533e:	4413      	add	r3, r2
 8005340:	3392      	adds	r3, #146	; 0x92
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00c      	beq.n	8005362 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800534e:	4619      	mov	r1, r3
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	2334      	movs	r3, #52	; 0x34
 8005354:	fb03 f301 	mul.w	r3, r3, r1
 8005358:	4413      	add	r3, r2
 800535a:	33c1      	adds	r3, #193	; 0xc1
 800535c:	2201      	movs	r2, #1
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	e00b      	b.n	800537a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005368:	4619      	mov	r1, r3
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	2334      	movs	r3, #52	; 0x34
 800536e:	fb03 f301 	mul.w	r3, r3, r1
 8005372:	4413      	add	r3, r2
 8005374:	33c1      	adds	r3, #193	; 0xc1
 8005376:	2200      	movs	r2, #0
 8005378:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005380:	4619      	mov	r1, r3
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	2334      	movs	r3, #52	; 0x34
 8005386:	fb03 f301 	mul.w	r3, r3, r1
 800538a:	4413      	add	r3, r2
 800538c:	3390      	adds	r3, #144	; 0x90
 800538e:	2203      	movs	r2, #3
 8005390:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005398:	4619      	mov	r1, r3
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	2334      	movs	r3, #52	; 0x34
 800539e:	fb03 f301 	mul.w	r3, r3, r1
 80053a2:	4413      	add	r3, r2
 80053a4:	3391      	adds	r3, #145	; 0x91
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80053b0:	4619      	mov	r1, r3
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	2334      	movs	r3, #52	; 0x34
 80053b6:	fb03 f301 	mul.w	r3, r3, r1
 80053ba:	4413      	add	r3, r2
 80053bc:	3392      	adds	r3, #146	; 0x92
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80053c2:	7bbb      	ldrb	r3, [r7, #14]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d14a      	bne.n	800545e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80053ce:	4619      	mov	r1, r3
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	2334      	movs	r3, #52	; 0x34
 80053d4:	fb03 f301 	mul.w	r3, r3, r1
 80053d8:	4413      	add	r3, r2
 80053da:	3392      	adds	r3, #146	; 0x92
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d00c      	beq.n	80053fc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80053e8:	4619      	mov	r1, r3
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	2334      	movs	r3, #52	; 0x34
 80053ee:	fb03 f301 	mul.w	r3, r3, r1
 80053f2:	4413      	add	r3, r2
 80053f4:	33c1      	adds	r3, #193	; 0xc1
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	e00b      	b.n	8005414 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005402:	4619      	mov	r1, r3
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	2334      	movs	r3, #52	; 0x34
 8005408:	fb03 f301 	mul.w	r3, r3, r1
 800540c:	4413      	add	r3, r2
 800540e:	33c1      	adds	r3, #193	; 0xc1
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800541a:	4619      	mov	r1, r3
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	2334      	movs	r3, #52	; 0x34
 8005420:	fb03 f301 	mul.w	r3, r3, r1
 8005424:	4413      	add	r3, r2
 8005426:	3390      	adds	r3, #144	; 0x90
 8005428:	2205      	movs	r2, #5
 800542a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005432:	4619      	mov	r1, r3
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	2334      	movs	r3, #52	; 0x34
 8005438:	fb03 f301 	mul.w	r3, r3, r1
 800543c:	4413      	add	r3, r2
 800543e:	3391      	adds	r3, #145	; 0x91
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800544a:	4619      	mov	r1, r3
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	2334      	movs	r3, #52	; 0x34
 8005450:	fb03 f301 	mul.w	r3, r3, r1
 8005454:	4413      	add	r3, r2
 8005456:	3392      	adds	r3, #146	; 0x92
 8005458:	2202      	movs	r2, #2
 800545a:	701a      	strb	r2, [r3, #0]
            break;
 800545c:	e127      	b.n	80056ae <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800545e:	7bbb      	ldrb	r3, [r7, #14]
 8005460:	2b04      	cmp	r3, #4
 8005462:	f040 8124 	bne.w	80056ae <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800546c:	4619      	mov	r1, r3
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	2334      	movs	r3, #52	; 0x34
 8005472:	fb03 f301 	mul.w	r3, r3, r1
 8005476:	4413      	add	r3, r2
 8005478:	3390      	adds	r3, #144	; 0x90
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005484:	4619      	mov	r1, r3
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	2334      	movs	r3, #52	; 0x34
 800548a:	fb03 f301 	mul.w	r3, r3, r1
 800548e:	4413      	add	r3, r2
 8005490:	3391      	adds	r3, #145	; 0x91
 8005492:	2202      	movs	r2, #2
 8005494:	701a      	strb	r2, [r3, #0]
            break;
 8005496:	e10a      	b.n	80056ae <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800549e:	b2d9      	uxtb	r1, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80054a6:	461a      	mov	r2, r3
 80054a8:	2334      	movs	r3, #52	; 0x34
 80054aa:	fb03 f302 	mul.w	r3, r3, r2
 80054ae:	3390      	adds	r3, #144	; 0x90
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4413      	add	r3, r2
 80054b4:	3304      	adds	r3, #4
 80054b6:	461a      	mov	r2, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fddc 	bl	8006076 <USBH_MSC_SCSI_ReadCapacity>
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d120      	bne.n	800550a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80054ce:	4619      	mov	r1, r3
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	2334      	movs	r3, #52	; 0x34
 80054d4:	fb03 f301 	mul.w	r3, r3, r1
 80054d8:	4413      	add	r3, r2
 80054da:	3390      	adds	r3, #144	; 0x90
 80054dc:	2201      	movs	r2, #1
 80054de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80054e6:	4619      	mov	r1, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	2334      	movs	r3, #52	; 0x34
 80054ec:	fb03 f301 	mul.w	r3, r3, r1
 80054f0:	4413      	add	r3, r2
 80054f2:	3391      	adds	r3, #145	; 0x91
 80054f4:	2200      	movs	r2, #0
 80054f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80054fe:	3301      	adds	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005508:	e0d3      	b.n	80056b2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d10c      	bne.n	800552a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005516:	4619      	mov	r1, r3
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	2334      	movs	r3, #52	; 0x34
 800551c:	fb03 f301 	mul.w	r3, r3, r1
 8005520:	4413      	add	r3, r2
 8005522:	3390      	adds	r3, #144	; 0x90
 8005524:	2205      	movs	r2, #5
 8005526:	701a      	strb	r2, [r3, #0]
            break;
 8005528:	e0c3      	b.n	80056b2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b04      	cmp	r3, #4
 800552e:	f040 80c0 	bne.w	80056b2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005538:	4619      	mov	r1, r3
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	2334      	movs	r3, #52	; 0x34
 800553e:	fb03 f301 	mul.w	r3, r3, r1
 8005542:	4413      	add	r3, r2
 8005544:	3390      	adds	r3, #144	; 0x90
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005550:	4619      	mov	r1, r3
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	2334      	movs	r3, #52	; 0x34
 8005556:	fb03 f301 	mul.w	r3, r3, r1
 800555a:	4413      	add	r3, r2
 800555c:	3391      	adds	r3, #145	; 0x91
 800555e:	2202      	movs	r2, #2
 8005560:	701a      	strb	r2, [r3, #0]
            break;
 8005562:	e0a6      	b.n	80056b2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800556a:	b2d9      	uxtb	r1, r3
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005572:	461a      	mov	r2, r3
 8005574:	2334      	movs	r3, #52	; 0x34
 8005576:	fb03 f302 	mul.w	r3, r3, r2
 800557a:	3398      	adds	r3, #152	; 0x98
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4413      	add	r3, r2
 8005580:	3304      	adds	r3, #4
 8005582:	461a      	mov	r2, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fe96 	bl	80062b6 <USBH_MSC_SCSI_RequestSense>
 800558a:	4603      	mov	r3, r0
 800558c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d145      	bne.n	8005620 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800559a:	4619      	mov	r1, r3
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	2334      	movs	r3, #52	; 0x34
 80055a0:	fb03 f301 	mul.w	r3, r3, r1
 80055a4:	4413      	add	r3, r2
 80055a6:	339c      	adds	r3, #156	; 0x9c
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d00c      	beq.n	80055c8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80055b4:	4619      	mov	r1, r3
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	2334      	movs	r3, #52	; 0x34
 80055ba:	fb03 f301 	mul.w	r3, r3, r1
 80055be:	4413      	add	r3, r2
 80055c0:	339c      	adds	r3, #156	; 0x9c
 80055c2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d117      	bne.n	80055f8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80055da:	4293      	cmp	r3, r2
 80055dc:	d80c      	bhi.n	80055f8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80055e4:	4619      	mov	r1, r3
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	2334      	movs	r3, #52	; 0x34
 80055ea:	fb03 f301 	mul.w	r3, r3, r1
 80055ee:	4413      	add	r3, r2
 80055f0:	3390      	adds	r3, #144	; 0x90
 80055f2:	2202      	movs	r2, #2
 80055f4:	701a      	strb	r2, [r3, #0]
                  break;
 80055f6:	e05f      	b.n	80056b8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80055fe:	4619      	mov	r1, r3
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	2334      	movs	r3, #52	; 0x34
 8005604:	fb03 f301 	mul.w	r3, r3, r1
 8005608:	4413      	add	r3, r2
 800560a:	3390      	adds	r3, #144	; 0x90
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005616:	3301      	adds	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d10c      	bne.n	8005640 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800562c:	4619      	mov	r1, r3
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	2334      	movs	r3, #52	; 0x34
 8005632:	fb03 f301 	mul.w	r3, r3, r1
 8005636:	4413      	add	r3, r2
 8005638:	3390      	adds	r3, #144	; 0x90
 800563a:	2208      	movs	r2, #8
 800563c:	701a      	strb	r2, [r3, #0]
            break;
 800563e:	e03a      	b.n	80056b6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b04      	cmp	r3, #4
 8005644:	d137      	bne.n	80056b6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800564c:	4619      	mov	r1, r3
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	2334      	movs	r3, #52	; 0x34
 8005652:	fb03 f301 	mul.w	r3, r3, r1
 8005656:	4413      	add	r3, r2
 8005658:	3390      	adds	r3, #144	; 0x90
 800565a:	2201      	movs	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005664:	4619      	mov	r1, r3
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	2334      	movs	r3, #52	; 0x34
 800566a:	fb03 f301 	mul.w	r3, r3, r1
 800566e:	4413      	add	r3, r2
 8005670:	3391      	adds	r3, #145	; 0x91
 8005672:	2202      	movs	r2, #2
 8005674:	701a      	strb	r2, [r3, #0]
            break;
 8005676:	e01e      	b.n	80056b6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800567e:	3301      	adds	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005688:	e016      	b.n	80056b8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2200      	movs	r2, #0
 800568e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2201      	movs	r2, #1
 8005696:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800569e:	2102      	movs	r1, #2
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	4798      	blx	r3
      break;
 80056a4:	e00c      	b.n	80056c0 <USBH_MSC_Process+0x514>
            break;
 80056a6:	bf00      	nop
 80056a8:	e00a      	b.n	80056c0 <USBH_MSC_Process+0x514>
            break;
 80056aa:	bf00      	nop
 80056ac:	e008      	b.n	80056c0 <USBH_MSC_Process+0x514>
            break;
 80056ae:	bf00      	nop
 80056b0:	e006      	b.n	80056c0 <USBH_MSC_Process+0x514>
            break;
 80056b2:	bf00      	nop
 80056b4:	e004      	b.n	80056c0 <USBH_MSC_Process+0x514>
            break;
 80056b6:	bf00      	nop
      break;
 80056b8:	e002      	b.n	80056c0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	75fb      	strb	r3, [r7, #23]
      break;
 80056be:	bf00      	nop
  }
  return error;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop

080056cc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b088      	sub	sp, #32
 80056e6:	af02      	add	r7, sp, #8
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	460b      	mov	r3, r1
 80056ec:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80056f8:	2301      	movs	r3, #1
 80056fa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80056fc:	2301      	movs	r3, #1
 80056fe:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	2134      	movs	r1, #52	; 0x34
 8005706:	fb01 f303 	mul.w	r3, r1, r3
 800570a:	4413      	add	r3, r2
 800570c:	3390      	adds	r3, #144	; 0x90
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b07      	cmp	r3, #7
 8005712:	d03c      	beq.n	800578e <USBH_MSC_RdWrProcess+0xac>
 8005714:	2b07      	cmp	r3, #7
 8005716:	f300 80a7 	bgt.w	8005868 <USBH_MSC_RdWrProcess+0x186>
 800571a:	2b05      	cmp	r3, #5
 800571c:	d06c      	beq.n	80057f8 <USBH_MSC_RdWrProcess+0x116>
 800571e:	2b06      	cmp	r3, #6
 8005720:	f040 80a2 	bne.w	8005868 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8005724:	78f9      	ldrb	r1, [r7, #3]
 8005726:	2300      	movs	r3, #0
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	2300      	movs	r3, #0
 800572c:	2200      	movs	r2, #0
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fea5 	bl	800647e <USBH_MSC_SCSI_Read>
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	2134      	movs	r1, #52	; 0x34
 8005744:	fb01 f303 	mul.w	r3, r1, r3
 8005748:	4413      	add	r3, r2
 800574a:	3390      	adds	r3, #144	; 0x90
 800574c:	2201      	movs	r2, #1
 800574e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005754:	e08a      	b.n	800586c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d109      	bne.n	8005770 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	2134      	movs	r1, #52	; 0x34
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	4413      	add	r3, r2
 8005768:	3390      	adds	r3, #144	; 0x90
 800576a:	2205      	movs	r2, #5
 800576c:	701a      	strb	r2, [r3, #0]
      break;
 800576e:	e07d      	b.n	800586c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b04      	cmp	r3, #4
 8005774:	d17a      	bne.n	800586c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	2134      	movs	r1, #52	; 0x34
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	4413      	add	r3, r2
 8005782:	3390      	adds	r3, #144	; 0x90
 8005784:	2208      	movs	r2, #8
 8005786:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005788:	2302      	movs	r3, #2
 800578a:	75fb      	strb	r3, [r7, #23]
      break;
 800578c:	e06e      	b.n	800586c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800578e:	78f9      	ldrb	r1, [r7, #3]
 8005790:	2300      	movs	r3, #0
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	2200      	movs	r2, #0
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fe05 	bl	80063a8 <USBH_MSC_SCSI_Write>
 800579e:	4603      	mov	r3, r0
 80057a0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	2134      	movs	r1, #52	; 0x34
 80057ae:	fb01 f303 	mul.w	r3, r1, r3
 80057b2:	4413      	add	r3, r2
 80057b4:	3390      	adds	r3, #144	; 0x90
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80057be:	e057      	b.n	8005870 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d109      	bne.n	80057da <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	2134      	movs	r1, #52	; 0x34
 80057cc:	fb01 f303 	mul.w	r3, r1, r3
 80057d0:	4413      	add	r3, r2
 80057d2:	3390      	adds	r3, #144	; 0x90
 80057d4:	2205      	movs	r2, #5
 80057d6:	701a      	strb	r2, [r3, #0]
      break;
 80057d8:	e04a      	b.n	8005870 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d147      	bne.n	8005870 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	2134      	movs	r1, #52	; 0x34
 80057e6:	fb01 f303 	mul.w	r3, r1, r3
 80057ea:	4413      	add	r3, r2
 80057ec:	3390      	adds	r3, #144	; 0x90
 80057ee:	2208      	movs	r2, #8
 80057f0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80057f2:	2302      	movs	r3, #2
 80057f4:	75fb      	strb	r3, [r7, #23]
      break;
 80057f6:	e03b      	b.n	8005870 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	2234      	movs	r2, #52	; 0x34
 80057fc:	fb02 f303 	mul.w	r3, r2, r3
 8005800:	3398      	adds	r3, #152	; 0x98
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fd52 	bl	80062b6 <USBH_MSC_SCSI_RequestSense>
 8005812:	4603      	mov	r3, r0
 8005814:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d113      	bne.n	8005844 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	2134      	movs	r1, #52	; 0x34
 8005822:	fb01 f303 	mul.w	r3, r1, r3
 8005826:	4413      	add	r3, r2
 8005828:	3390      	adds	r3, #144	; 0x90
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	2134      	movs	r1, #52	; 0x34
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	4413      	add	r3, r2
 800583a:	3391      	adds	r3, #145	; 0x91
 800583c:	2202      	movs	r2, #2
 800583e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8005840:	2302      	movs	r3, #2
 8005842:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d014      	beq.n	8005874 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b04      	cmp	r3, #4
 800584e:	d111      	bne.n	8005874 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	2134      	movs	r1, #52	; 0x34
 8005856:	fb01 f303 	mul.w	r3, r1, r3
 800585a:	4413      	add	r3, r2
 800585c:	3390      	adds	r3, #144	; 0x90
 800585e:	2208      	movs	r2, #8
 8005860:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005862:	2302      	movs	r3, #2
 8005864:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005866:	e005      	b.n	8005874 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8005868:	bf00      	nop
 800586a:	e004      	b.n	8005876 <USBH_MSC_RdWrProcess+0x194>
      break;
 800586c:	bf00      	nop
 800586e:	e002      	b.n	8005876 <USBH_MSC_RdWrProcess+0x194>
      break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <USBH_MSC_RdWrProcess+0x194>
      break;
 8005874:	bf00      	nop

  }
  return error;
 8005876:	7dfb      	ldrb	r3, [r7, #23]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b0b      	cmp	r3, #11
 800589e:	d10c      	bne.n	80058ba <USBH_MSC_UnitIsReady+0x3a>
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	2134      	movs	r1, #52	; 0x34
 80058a6:	fb01 f303 	mul.w	r3, r1, r3
 80058aa:	4413      	add	r3, r2
 80058ac:	3391      	adds	r3, #145	; 0x91
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
 80058b8:	e001      	b.n	80058be <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	460b      	mov	r3, r1
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b0b      	cmp	r3, #11
 80058ec:	d10d      	bne.n	800590a <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80058ee:	7afb      	ldrb	r3, [r7, #11]
 80058f0:	2234      	movs	r2, #52	; 0x34
 80058f2:	fb02 f303 	mul.w	r3, r2, r3
 80058f6:	3390      	adds	r3, #144	; 0x90
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4413      	add	r3, r2
 80058fc:	2234      	movs	r2, #52	; 0x34
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f005 fef9 	bl	800b6f8 <memcpy>
    return USBH_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800590a:	2302      	movs	r3, #2
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af02      	add	r7, sp, #8
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	460b      	mov	r3, r1
 8005922:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005940:	2b0b      	cmp	r3, #11
 8005942:	d109      	bne.n	8005958 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005944:	7afb      	ldrb	r3, [r7, #11]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	2134      	movs	r1, #52	; 0x34
 800594a:	fb01 f303 	mul.w	r3, r1, r3
 800594e:	4413      	add	r3, r2
 8005950:	3390      	adds	r3, #144	; 0x90
 8005952:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8005954:	2b01      	cmp	r3, #1
 8005956:	d001      	beq.n	800595c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8005958:	2302      	movs	r3, #2
 800595a:	e040      	b.n	80059de <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2206      	movs	r2, #6
 8005960:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8005962:	7afb      	ldrb	r3, [r7, #11]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	2134      	movs	r1, #52	; 0x34
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	4413      	add	r3, r2
 800596e:	3390      	adds	r3, #144	; 0x90
 8005970:	2206      	movs	r2, #6
 8005972:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8005974:	7afb      	ldrb	r3, [r7, #11]
 8005976:	b29a      	uxth	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800597e:	7af9      	ldrb	r1, [r7, #11]
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fd78 	bl	800647e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005994:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005996:	e016      	b.n	80059c6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad2      	subs	r2, r2, r3
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	f242 7110 	movw	r1, #10000	; 0x2710
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d805      	bhi.n	80059bc <USBH_MSC_Read+0xa8>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2201      	movs	r2, #1
 80059c0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80059c2:	2302      	movs	r3, #2
 80059c4:	e00b      	b.n	80059de <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80059c6:	7afb      	ldrb	r3, [r7, #11]
 80059c8:	4619      	mov	r1, r3
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f7ff fe89 	bl	80056e2 <USBH_MSC_RdWrProcess>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d0e0      	beq.n	8005998 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2201      	movs	r2, #1
 80059da:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b088      	sub	sp, #32
 80059ea:	af02      	add	r7, sp, #8
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
 80059f2:	460b      	mov	r3, r1
 80059f4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00e      	beq.n	8005a2a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005a12:	2b0b      	cmp	r3, #11
 8005a14:	d109      	bne.n	8005a2a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005a16:	7afb      	ldrb	r3, [r7, #11]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	2134      	movs	r1, #52	; 0x34
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	4413      	add	r3, r2
 8005a22:	3390      	adds	r3, #144	; 0x90
 8005a24:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d001      	beq.n	8005a2e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e040      	b.n	8005ab0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2207      	movs	r2, #7
 8005a32:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8005a34:	7afb      	ldrb	r3, [r7, #11]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	2134      	movs	r1, #52	; 0x34
 8005a3a:	fb01 f303 	mul.w	r3, r1, r3
 8005a3e:	4413      	add	r3, r2
 8005a40:	3390      	adds	r3, #144	; 0x90
 8005a42:	2207      	movs	r2, #7
 8005a44:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8005a46:	7afb      	ldrb	r3, [r7, #11]
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8005a50:	7af9      	ldrb	r1, [r7, #11]
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fca4 	bl	80063a8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005a66:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005a68:	e016      	b.n	8005a98 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad2      	subs	r2, r2, r3
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	f242 7110 	movw	r1, #10000	; 0x2710
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d805      	bhi.n	8005a8e <USBH_MSC_Write+0xa8>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2201      	movs	r2, #1
 8005a92:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8005a94:	2302      	movs	r3, #2
 8005a96:	e00b      	b.n	8005ab0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005a98:	7afb      	ldrb	r3, [r7, #11]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f7ff fe20 	bl	80056e2 <USBH_MSC_RdWrProcess>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d0e0      	beq.n	8005a6a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2221      	movs	r2, #33	; 0x21
 8005ac4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	22ff      	movs	r2, #255	; 0xff
 8005aca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f001 fdab 	bl	800763e <USBH_CtlReq>
 8005ae8:	4603      	mov	r3, r0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	22a1      	movs	r2, #161	; 0xa1
 8005b00:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	22fe      	movs	r2, #254	; 0xfe
 8005b06:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 fd8d 	bl	800763e <USBH_CtlReq>
 8005b24:	4603      	mov	r3, r0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4a09      	ldr	r2, [pc, #36]	; (8005b6c <USBH_MSC_BOT_Init+0x3c>)
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <USBH_MSC_BOT_Init+0x40>)
 8005b4c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	43425355 	.word	0x43425355
 8005b70:	20304050 	.word	0x20304050

08005b74 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8005b84:	2301      	movs	r3, #1
 8005b86:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	2b0a      	cmp	r3, #10
 8005ba8:	f200 819e 	bhi.w	8005ee8 <USBH_MSC_BOT_Process+0x374>
 8005bac:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <USBH_MSC_BOT_Process+0x40>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	08005c09 	.word	0x08005c09
 8005bbc:	08005c73 	.word	0x08005c73
 8005bc0:	08005c91 	.word	0x08005c91
 8005bc4:	08005d15 	.word	0x08005d15
 8005bc8:	08005d37 	.word	0x08005d37
 8005bcc:	08005dcf 	.word	0x08005dcf
 8005bd0:	08005deb 	.word	0x08005deb
 8005bd4:	08005e3d 	.word	0x08005e3d
 8005bd8:	08005e6d 	.word	0x08005e6d
 8005bdc:	08005ecf 	.word	0x08005ecf
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	78fa      	ldrb	r2, [r7, #3]
 8005be4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	795b      	ldrb	r3, [r3, #5]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	9200      	str	r2, [sp, #0]
 8005bfe:	221f      	movs	r2, #31
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 ff2a 	bl	8007a5a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8005c06:	e17e      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	795b      	ldrb	r3, [r3, #5]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f005 fc80 	bl	800b514 <USBH_LL_GetURBState>
 8005c14:	4603      	mov	r3, r0
 8005c16:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8005c18:	7d3b      	ldrb	r3, [r7, #20]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d118      	bne.n	8005c50 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00f      	beq.n	8005c46 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	da04      	bge.n	8005c3c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2203      	movs	r2, #3
 8005c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005c3a:	e157      	b.n	8005eec <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2205      	movs	r2, #5
 8005c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005c44:	e152      	b.n	8005eec <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2207      	movs	r2, #7
 8005c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005c4e:	e14d      	b.n	8005eec <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005c50:	7d3b      	ldrb	r3, [r7, #20]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d104      	bne.n	8005c60 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005c5e:	e145      	b.n	8005eec <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8005c60:	7d3b      	ldrb	r3, [r7, #20]
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	f040 8142 	bne.w	8005eec <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	220a      	movs	r2, #10
 8005c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005c70:	e13c      	b.n	8005eec <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	895a      	ldrh	r2, [r3, #10]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	791b      	ldrb	r3, [r3, #4]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 ff0f 	bl	8007aa4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8005c8e:	e13a      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	791b      	ldrb	r3, [r3, #4]
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f005 fc3c 	bl	800b514 <USBH_LL_GetURBState>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8005ca0:	7d3b      	ldrb	r3, [r7, #20]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d12d      	bne.n	8005d02 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	8952      	ldrh	r2, [r2, #10]
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d910      	bls.n	8005cd4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	8952      	ldrh	r2, [r2, #10]
 8005cbc:	441a      	add	r2, r3
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	8952      	ldrh	r2, [r2, #10]
 8005ccc:	1a9a      	subs	r2, r3, r2
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005cd2:	e002      	b.n	8005cda <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	895a      	ldrh	r2, [r3, #10]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	791b      	ldrb	r3, [r3, #4]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f001 fed7 	bl	8007aa4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8005cf6:	e0fb      	b.n	8005ef0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2207      	movs	r2, #7
 8005cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005d00:	e0f6      	b.n	8005ef0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8005d02:	7d3b      	ldrb	r3, [r7, #20]
 8005d04:	2b05      	cmp	r3, #5
 8005d06:	f040 80f3 	bne.w	8005ef0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2209      	movs	r2, #9
 8005d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005d12:	e0ed      	b.n	8005ef0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	891a      	ldrh	r2, [r3, #8]
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	795b      	ldrb	r3, [r3, #5]
 8005d22:	2001      	movs	r0, #1
 8005d24:	9000      	str	r0, [sp, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 fe97 	bl	8007a5a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2206      	movs	r2, #6
 8005d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005d34:	e0e7      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	795b      	ldrb	r3, [r3, #5]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f005 fbe9 	bl	800b514 <USBH_LL_GetURBState>
 8005d42:	4603      	mov	r3, r0
 8005d44:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8005d46:	7d3b      	ldrb	r3, [r7, #20]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d12f      	bne.n	8005dac <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	8912      	ldrh	r2, [r2, #8]
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d910      	bls.n	8005d7a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	8912      	ldrh	r2, [r2, #8]
 8005d62:	441a      	add	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	8912      	ldrh	r2, [r2, #8]
 8005d72:	1a9a      	subs	r2, r3, r2
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d78:	e002      	b.n	8005d80 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00c      	beq.n	8005da2 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	891a      	ldrh	r2, [r3, #8]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	795b      	ldrb	r3, [r3, #5]
 8005d96:	2001      	movs	r0, #1
 8005d98:	9000      	str	r0, [sp, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fe5d 	bl	8007a5a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8005da0:	e0a8      	b.n	8005ef4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2207      	movs	r2, #7
 8005da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005daa:	e0a3      	b.n	8005ef4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005dac:	7d3b      	ldrb	r3, [r7, #20]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d104      	bne.n	8005dbc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2205      	movs	r2, #5
 8005db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005dba:	e09b      	b.n	8005ef4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8005dbc:	7d3b      	ldrb	r3, [r7, #20]
 8005dbe:	2b05      	cmp	r3, #5
 8005dc0:	f040 8098 	bne.w	8005ef4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	220a      	movs	r2, #10
 8005dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005dcc:	e092      	b.n	8005ef4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	791b      	ldrb	r3, [r3, #4]
 8005dd8:	220d      	movs	r2, #13
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 fe62 	bl	8007aa4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2208      	movs	r2, #8
 8005de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005de8:	e08d      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	791b      	ldrb	r3, [r3, #4]
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f005 fb8f 	bl	800b514 <USBH_LL_GetURBState>
 8005df6:	4603      	mov	r3, r0
 8005df8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8005dfa:	7d3b      	ldrb	r3, [r7, #20]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d115      	bne.n	8005e2c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f8a9 	bl	8005f68 <USBH_MSC_DecodeCSW>
 8005e16:	4603      	mov	r3, r0
 8005e18:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8005e1a:	7d7b      	ldrb	r3, [r7, #21]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8005e24:	e068      	b.n	8005ef8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8005e26:	2302      	movs	r3, #2
 8005e28:	75fb      	strb	r3, [r7, #23]
      break;
 8005e2a:	e065      	b.n	8005ef8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8005e2c:	7d3b      	ldrb	r3, [r7, #20]
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d162      	bne.n	8005ef8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2209      	movs	r2, #9
 8005e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005e3a:	e05d      	b.n	8005ef8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f864 	bl	8005f10 <USBH_MSC_BOT_Abort>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8005e4c:	7dbb      	ldrb	r3, [r7, #22]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d104      	bne.n	8005e5c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2207      	movs	r2, #7
 8005e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8005e5a:	e04f      	b.n	8005efc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8005e5c:	7dbb      	ldrb	r3, [r7, #22]
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d14c      	bne.n	8005efc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	220b      	movs	r2, #11
 8005e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005e6a:	e047      	b.n	8005efc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f84c 	bl	8005f10 <USBH_MSC_BOT_Abort>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8005e7c:	7dbb      	ldrb	r3, [r7, #22]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d11d      	bne.n	8005ebe <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	795b      	ldrb	r3, [r3, #5]
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f005 fb94 	bl	800b5b6 <USBH_LL_GetToggle>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	7959      	ldrb	r1, [r3, #5]
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	f1c3 0301 	rsb	r3, r3, #1
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f005 fb58 	bl	800b556 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	791b      	ldrb	r3, [r3, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f005 fb51 	bl	800b556 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	2209      	movs	r2, #9
 8005eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8005ebc:	e020      	b.n	8005f00 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8005ebe:	7dbb      	ldrb	r3, [r7, #22]
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d11d      	bne.n	8005f00 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	220b      	movs	r2, #11
 8005ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005ecc:	e018      	b.n	8005f00 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fdf2 	bl	8005ab8 <USBH_MSC_BOT_REQ_Reset>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d112      	bne.n	8005f04 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8005ee6:	e00d      	b.n	8005f04 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8005ee8:	bf00      	nop
 8005eea:	e00c      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>
      break;
 8005eec:	bf00      	nop
 8005eee:	e00a      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>
      break;
 8005ef0:	bf00      	nop
 8005ef2:	e008      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>
      break;
 8005ef4:	bf00      	nop
 8005ef6:	e006      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>
      break;
 8005ef8:	bf00      	nop
 8005efa:	e004      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>
      break;
 8005efc:	bf00      	nop
 8005efe:	e002      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>
      break;
 8005f00:	bf00      	nop
 8005f02:	e000      	b.n	8005f06 <USBH_MSC_BOT_Process+0x392>
      break;
 8005f04:	bf00      	nop
  }
  return status;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8005f20:	2302      	movs	r3, #2
 8005f22:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8005f2e:	78bb      	ldrb	r3, [r7, #2]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <USBH_MSC_BOT_Abort+0x2a>
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d009      	beq.n	8005f4c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8005f38:	e011      	b.n	8005f5e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	79db      	ldrb	r3, [r3, #7]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f001 f99c 	bl	800727e <USBH_ClrFeature>
 8005f46:	4603      	mov	r3, r0
 8005f48:	73fb      	strb	r3, [r7, #15]
      break;
 8005f4a:	e008      	b.n	8005f5e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	799b      	ldrb	r3, [r3, #6]
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 f993 	bl	800727e <USBH_ClrFeature>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f5c:	bf00      	nop
  }
  return status;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	791b      	ldrb	r3, [r3, #4]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f005 fa33 	bl	800b3f0 <USBH_LL_GetLastXferSize>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b0d      	cmp	r3, #13
 8005f8e:	d002      	beq.n	8005f96 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8005f90:	2302      	movs	r3, #2
 8005f92:	73fb      	strb	r3, [r7, #15]
 8005f94:	e024      	b.n	8005fe0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9a:	4a14      	ldr	r2, [pc, #80]	; (8005fec <USBH_MSC_DecodeCSW+0x84>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d11d      	bne.n	8005fdc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d119      	bne.n	8005fe0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
 8005fba:	e011      	b.n	8005fe0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d102      	bne.n	8005fcc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	73fb      	strb	r3, [r7, #15]
 8005fca:	e009      	b.n	8005fe0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d104      	bne.n	8005fe0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	73fb      	strb	r3, [r7, #15]
 8005fda:	e001      	b.n	8005fe0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	53425355 	.word	0x53425355

08005ff0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006010:	2b01      	cmp	r3, #1
 8006012:	d002      	beq.n	800601a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006014:	2b02      	cmp	r3, #2
 8006016:	d021      	beq.n	800605c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006018:	e028      	b.n	800606c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2200      	movs	r2, #0
 800601e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	220a      	movs	r2, #10
 800602c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	3363      	adds	r3, #99	; 0x63
 8006034:	2210      	movs	r2, #16
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f005 fb6b 	bl	800b714 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006056:	2301      	movs	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
      break;
 800605a:	e007      	b.n	800606c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fd87 	bl	8005b74 <USBH_MSC_BOT_Process>
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
      break;
 800606a:	bf00      	nop
  }

  return error;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b086      	sub	sp, #24
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	460b      	mov	r3, r1
 8006080:	607a      	str	r2, [r7, #4]
 8006082:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006084:	2301      	movs	r3, #1
 8006086:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006098:	2b01      	cmp	r3, #1
 800609a:	d002      	beq.n	80060a2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800609c:	2b02      	cmp	r3, #2
 800609e:	d027      	beq.n	80060f0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80060a0:	e05f      	b.n	8006162 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2208      	movs	r2, #8
 80060a6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2280      	movs	r2, #128	; 0x80
 80060ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	220a      	movs	r2, #10
 80060b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	3363      	adds	r3, #99	; 0x63
 80060bc:	2210      	movs	r2, #16
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f005 fb27 	bl	800b714 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2225      	movs	r2, #37	; 0x25
 80060ca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f103 0210 	add.w	r2, r3, #16
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80060ea:	2301      	movs	r3, #1
 80060ec:	75fb      	strb	r3, [r7, #23]
      break;
 80060ee:	e038      	b.n	8006162 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80060f0:	7afb      	ldrb	r3, [r7, #11]
 80060f2:	4619      	mov	r1, r3
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff fd3d 	bl	8005b74 <USBH_MSC_BOT_Process>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d12d      	bne.n	8006160 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800610a:	3303      	adds	r3, #3
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006116:	3302      	adds	r3, #2
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006124:	3301      	adds	r3, #1
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800612a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	061b      	lsls	r3, r3, #24
 8006136:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006142:	3307      	adds	r3, #7
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b29a      	uxth	r2, r3
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800614e:	3306      	adds	r3, #6
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	b29b      	uxth	r3, r3
 8006158:	4313      	orrs	r3, r2
 800615a:	b29a      	uxth	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	809a      	strh	r2, [r3, #4]
      break;
 8006160:	bf00      	nop
  }

  return error;
 8006162:	7dfb      	ldrb	r3, [r7, #23]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	460b      	mov	r3, r1
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800617a:	2302      	movs	r3, #2
 800617c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800618e:	2b01      	cmp	r3, #1
 8006190:	d002      	beq.n	8006198 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006192:	2b02      	cmp	r3, #2
 8006194:	d03d      	beq.n	8006212 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006196:	e089      	b.n	80062ac <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2224      	movs	r2, #36	; 0x24
 800619c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2280      	movs	r2, #128	; 0x80
 80061a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	220a      	movs	r2, #10
 80061aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	3363      	adds	r3, #99	; 0x63
 80061b2:	220a      	movs	r2, #10
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f005 faac 	bl	800b714 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2212      	movs	r2, #18
 80061c0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	015b      	lsls	r3, r3, #5
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2224      	movs	r2, #36	; 0x24
 80061e4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f103 0210 	add.w	r2, r3, #16
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800620c:	2301      	movs	r3, #1
 800620e:	75fb      	strb	r3, [r7, #23]
      break;
 8006210:	e04c      	b.n	80062ac <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006212:	7afb      	ldrb	r3, [r7, #11]
 8006214:	4619      	mov	r1, r3
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff fcac 	bl	8005b74 <USBH_MSC_BOT_Process>
 800621c:	4603      	mov	r3, r0
 800621e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d141      	bne.n	80062aa <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006226:	2222      	movs	r2, #34	; 0x22
 8006228:	2100      	movs	r1, #0
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f005 fa72 	bl	800b714 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	b2da      	uxtb	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	b2da      	uxtb	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006258:	3301      	adds	r3, #1
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b25b      	sxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	da03      	bge.n	800626a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	709a      	strb	r2, [r3, #2]
 8006268:	e002      	b.n	8006270 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	1cd8      	adds	r0, r3, #3
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800627a:	3308      	adds	r3, #8
 800627c:	2208      	movs	r2, #8
 800627e:	4619      	mov	r1, r3
 8006280:	f005 fa3a 	bl	800b6f8 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f103 000c 	add.w	r0, r3, #12
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006290:	3310      	adds	r3, #16
 8006292:	2210      	movs	r2, #16
 8006294:	4619      	mov	r1, r3
 8006296:	f005 fa2f 	bl	800b6f8 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	331d      	adds	r3, #29
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80062a4:	3220      	adds	r2, #32
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	601a      	str	r2, [r3, #0]
      break;
 80062aa:	bf00      	nop
  }

  return error;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b086      	sub	sp, #24
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	460b      	mov	r3, r1
 80062c0:	607a      	str	r2, [r7, #4]
 80062c2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80062c4:	2302      	movs	r3, #2
 80062c6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d002      	beq.n	80062e2 <USBH_MSC_SCSI_RequestSense+0x2c>
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d03d      	beq.n	800635c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80062e0:	e05d      	b.n	800639e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	220e      	movs	r2, #14
 80062e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	2280      	movs	r2, #128	; 0x80
 80062ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	220a      	movs	r2, #10
 80062f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3363      	adds	r3, #99	; 0x63
 80062fc:	2210      	movs	r2, #16
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f005 fa07 	bl	800b714 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2203      	movs	r2, #3
 800630a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	015b      	lsls	r3, r3, #5
 8006312:	b2da      	uxtb	r2, r3
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	220e      	movs	r2, #14
 800632e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2202      	movs	r2, #2
 8006346:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f103 0210 	add.w	r2, r3, #16
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006356:	2301      	movs	r3, #1
 8006358:	75fb      	strb	r3, [r7, #23]
      break;
 800635a:	e020      	b.n	800639e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800635c:	7afb      	ldrb	r3, [r7, #11]
 800635e:	4619      	mov	r1, r3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff fc07 	bl	8005b74 <USBH_MSC_BOT_Process>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d115      	bne.n	800639c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006376:	3302      	adds	r3, #2
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	b2da      	uxtb	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800638a:	7b1a      	ldrb	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006396:	7b5a      	ldrb	r2, [r3, #13]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	709a      	strb	r2, [r3, #2]
      break;
 800639c:	bf00      	nop
  }

  return error;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	460b      	mov	r3, r1
 80063b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80063b8:	2302      	movs	r3, #2
 80063ba:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d002      	beq.n	80063d6 <USBH_MSC_SCSI_Write+0x2e>
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d047      	beq.n	8006464 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80063d4:	e04e      	b.n	8006474 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80063dc:	461a      	mov	r2, r3
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	fb03 f202 	mul.w	r2, r3, r2
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	220a      	movs	r2, #10
 80063f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	3363      	adds	r3, #99	; 0x63
 80063fc:	2210      	movs	r2, #16
 80063fe:	2100      	movs	r1, #0
 8006400:	4618      	mov	r0, r3
 8006402:	f005 f987 	bl	800b714 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	222a      	movs	r2, #42	; 0x2a
 800640a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800640e:	79fa      	ldrb	r2, [r7, #7]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006416:	79ba      	ldrb	r2, [r7, #6]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800641e:	797a      	ldrb	r2, [r7, #5]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006426:	1d3b      	adds	r3, r7, #4
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006430:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800643a:	f107 0320 	add.w	r3, r7, #32
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2202      	movs	r2, #2
 8006452:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800645e:	2301      	movs	r3, #1
 8006460:	75fb      	strb	r3, [r7, #23]
      break;
 8006462:	e007      	b.n	8006474 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006464:	7afb      	ldrb	r3, [r7, #11]
 8006466:	4619      	mov	r1, r3
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff fb83 	bl	8005b74 <USBH_MSC_BOT_Process>
 800646e:	4603      	mov	r3, r0
 8006470:	75fb      	strb	r3, [r7, #23]
      break;
 8006472:	bf00      	nop
  }

  return error;
 8006474:	7dfb      	ldrb	r3, [r7, #23]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	460b      	mov	r3, r1
 800648c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800648e:	2302      	movs	r3, #2
 8006490:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d002      	beq.n	80064ac <USBH_MSC_SCSI_Read+0x2e>
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d047      	beq.n	800653a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80064aa:	e04e      	b.n	800654a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80064b2:	461a      	mov	r2, r3
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	fb03 f202 	mul.w	r2, r3, r2
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2280      	movs	r2, #128	; 0x80
 80064c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	220a      	movs	r2, #10
 80064ca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	3363      	adds	r3, #99	; 0x63
 80064d2:	2210      	movs	r2, #16
 80064d4:	2100      	movs	r1, #0
 80064d6:	4618      	mov	r0, r3
 80064d8:	f005 f91c 	bl	800b714 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2228      	movs	r2, #40	; 0x28
 80064e0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80064e4:	79fa      	ldrb	r2, [r7, #7]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80064ec:	79ba      	ldrb	r2, [r7, #6]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80064f4:	797a      	ldrb	r2, [r7, #5]
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80064fc:	1d3b      	adds	r3, r7, #4
 80064fe:	781a      	ldrb	r2, [r3, #0]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006506:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006510:	f107 0320 	add.w	r3, r7, #32
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006534:	2301      	movs	r3, #1
 8006536:	75fb      	strb	r3, [r7, #23]
      break;
 8006538:	e007      	b.n	800654a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800653a:	7afb      	ldrb	r3, [r7, #11]
 800653c:	4619      	mov	r1, r3
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7ff fb18 	bl	8005b74 <USBH_MSC_BOT_Process>
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]
      break;
 8006548:	bf00      	nop
  }

  return error;
 800654a:	7dfb      	ldrb	r3, [r7, #23]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006568:	2302      	movs	r3, #2
 800656a:	e029      	b.n	80065c0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	79fa      	ldrb	r2, [r7, #7]
 8006570:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f81f 	bl	80065c8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f004 fe65 	bl	800b288 <USBH_LL_Init>

  return USBH_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065d4:	2300      	movs	r3, #0
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	e009      	b.n	80065ee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	33e0      	adds	r3, #224	; 0xe0
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	2200      	movs	r2, #0
 80065e6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b0e      	cmp	r3, #14
 80065f2:	d9f2      	bls.n	80065da <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	e009      	b.n	800660e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006614:	d3f1      	bcc.n	80065fa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2240      	movs	r2, #64	; 0x40
 800663a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d016      	beq.n	80066b2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10e      	bne.n	80066ac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006694:	1c59      	adds	r1, r3, #1
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	33de      	adds	r3, #222	; 0xde
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
 80066aa:	e004      	b.n	80066b6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066ac:	2302      	movs	r3, #2
 80066ae:	73fb      	strb	r3, [r7, #15]
 80066b0:	e001      	b.n	80066b6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066b2:	2302      	movs	r3, #2
 80066b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066da:	78fa      	ldrb	r2, [r7, #3]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d204      	bcs.n	80066ea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	78fa      	ldrb	r2, [r7, #3]
 80066e4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80066e8:	e001      	b.n	80066ee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80066ea:	2302      	movs	r3, #2
 80066ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	4608      	mov	r0, r1
 8006706:	4611      	mov	r1, r2
 8006708:	461a      	mov	r2, r3
 800670a:	4603      	mov	r3, r0
 800670c:	70fb      	strb	r3, [r7, #3]
 800670e:	460b      	mov	r3, r1
 8006710:	70bb      	strb	r3, [r7, #2]
 8006712:	4613      	mov	r3, r2
 8006714:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800671a:	2300      	movs	r3, #0
 800671c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006724:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006726:	e025      	b.n	8006774 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006728:	7dfb      	ldrb	r3, [r7, #23]
 800672a:	221a      	movs	r2, #26
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	3308      	adds	r3, #8
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	3302      	adds	r3, #2
 8006738:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	795b      	ldrb	r3, [r3, #5]
 800673e:	78fa      	ldrb	r2, [r7, #3]
 8006740:	429a      	cmp	r2, r3
 8006742:	d002      	beq.n	800674a <USBH_FindInterface+0x4e>
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	2bff      	cmp	r3, #255	; 0xff
 8006748:	d111      	bne.n	800676e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800674e:	78ba      	ldrb	r2, [r7, #2]
 8006750:	429a      	cmp	r2, r3
 8006752:	d002      	beq.n	800675a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006754:	78bb      	ldrb	r3, [r7, #2]
 8006756:	2bff      	cmp	r3, #255	; 0xff
 8006758:	d109      	bne.n	800676e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800675e:	787a      	ldrb	r2, [r7, #1]
 8006760:	429a      	cmp	r2, r3
 8006762:	d002      	beq.n	800676a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006764:	787b      	ldrb	r3, [r7, #1]
 8006766:	2bff      	cmp	r3, #255	; 0xff
 8006768:	d101      	bne.n	800676e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	e006      	b.n	800677c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800676e:	7dfb      	ldrb	r3, [r7, #23]
 8006770:	3301      	adds	r3, #1
 8006772:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d9d6      	bls.n	8006728 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800677a:	23ff      	movs	r3, #255	; 0xff
}
 800677c:	4618      	mov	r0, r3
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f004 fdb5 	bl	800b300 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006796:	2101      	movs	r1, #1
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f004 fece 	bl	800b53a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af04      	add	r7, sp, #16
 80067ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067b0:	2302      	movs	r3, #2
 80067b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d102      	bne.n	80067ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2203      	movs	r2, #3
 80067c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b0b      	cmp	r3, #11
 80067d2:	f200 81b3 	bhi.w	8006b3c <USBH_Process+0x394>
 80067d6:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <USBH_Process+0x34>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	0800680d 	.word	0x0800680d
 80067e0:	0800683f 	.word	0x0800683f
 80067e4:	080068a7 	.word	0x080068a7
 80067e8:	08006ad7 	.word	0x08006ad7
 80067ec:	08006b3d 	.word	0x08006b3d
 80067f0:	0800694b 	.word	0x0800694b
 80067f4:	08006a7d 	.word	0x08006a7d
 80067f8:	08006981 	.word	0x08006981
 80067fc:	080069a1 	.word	0x080069a1
 8006800:	080069c1 	.word	0x080069c1
 8006804:	080069ef 	.word	0x080069ef
 8006808:	08006abf 	.word	0x08006abf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8193 	beq.w	8006b40 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006820:	20c8      	movs	r0, #200	; 0xc8
 8006822:	f004 fef8 	bl	800b616 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f004 fdc7 	bl	800b3ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800683c:	e180      	b.n	8006b40 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006856:	e182      	b.n	8006b5e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800685e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006862:	d914      	bls.n	800688e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800686a:	3301      	adds	r3, #1
 800686c:	b2da      	uxtb	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800687a:	2b03      	cmp	r3, #3
 800687c:	d903      	bls.n	8006886 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	220d      	movs	r2, #13
 8006882:	701a      	strb	r2, [r3, #0]
      break;
 8006884:	e16b      	b.n	8006b5e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
      break;
 800688c:	e167      	b.n	8006b5e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006894:	f103 020a 	add.w	r2, r3, #10
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800689e:	200a      	movs	r0, #10
 80068a0:	f004 feb9 	bl	800b616 <USBH_Delay>
      break;
 80068a4:	e15b      	b.n	8006b5e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068b6:	2104      	movs	r1, #4
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068bc:	2064      	movs	r0, #100	; 0x64
 80068be:	f004 feaa 	bl	800b616 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f004 fd52 	bl	800b36c <USBH_LL_GetSpeed>
 80068c8:	4603      	mov	r3, r0
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2205      	movs	r2, #5
 80068d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068d8:	2100      	movs	r1, #0
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 f92f 	bl	8007b3e <USBH_AllocPipe>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80068e8:	2180      	movs	r1, #128	; 0x80
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 f927 	bl	8007b3e <USBH_AllocPipe>
 80068f0:	4603      	mov	r3, r0
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	7919      	ldrb	r1, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800690c:	b292      	uxth	r2, r2
 800690e:	9202      	str	r2, [sp, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	9201      	str	r2, [sp, #4]
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	4603      	mov	r3, r0
 8006918:	2280      	movs	r2, #128	; 0x80
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 f8e0 	bl	8007ae0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	7959      	ldrb	r1, [r3, #5]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006934:	b292      	uxth	r2, r2
 8006936:	9202      	str	r2, [sp, #8]
 8006938:	2200      	movs	r2, #0
 800693a:	9201      	str	r2, [sp, #4]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	4603      	mov	r3, r0
 8006940:	2200      	movs	r2, #0
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 f8cc 	bl	8007ae0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006948:	e109      	b.n	8006b5e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f90c 	bl	8006b68 <USBH_HandleEnum>
 8006950:	4603      	mov	r3, r0
 8006952:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	f040 80f3 	bne.w	8006b44 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800696c:	2b01      	cmp	r3, #1
 800696e:	d103      	bne.n	8006978 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2208      	movs	r2, #8
 8006974:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006976:	e0e5      	b.n	8006b44 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2207      	movs	r2, #7
 800697c:	701a      	strb	r2, [r3, #0]
      break;
 800697e:	e0e1      	b.n	8006b44 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 80de 	beq.w	8006b48 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006992:	2101      	movs	r1, #1
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2208      	movs	r2, #8
 800699c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800699e:	e0d3      	b.n	8006b48 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fc20 	bl	80071f0 <USBH_SetCfg>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 80ca 	bne.w	8006b4c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2209      	movs	r2, #9
 80069bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80069be:	e0c5      	b.n	8006b4c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00b      	beq.n	80069e6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80069ce:	2101      	movs	r1, #1
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fc30 	bl	8007236 <USBH_SetFeature>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f040 80b9 	bne.w	8006b50 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	220a      	movs	r2, #10
 80069e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80069e4:	e0b4      	b.n	8006b50 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	220a      	movs	r2, #10
 80069ea:	701a      	strb	r2, [r3, #0]
      break;
 80069ec:	e0b0      	b.n	8006b50 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80ad 	beq.w	8006b54 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]
 8006a06:	e016      	b.n	8006a36 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a08:	7bfa      	ldrb	r2, [r7, #15]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	32de      	adds	r2, #222	; 0xde
 8006a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a12:	791a      	ldrb	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d108      	bne.n	8006a30 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a1e:	7bfa      	ldrb	r2, [r7, #15]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	32de      	adds	r2, #222	; 0xde
 8006a24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a2e:	e005      	b.n	8006a3c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
 8006a32:	3301      	adds	r3, #1
 8006a34:	73fb      	strb	r3, [r7, #15]
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0e5      	beq.n	8006a08 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d016      	beq.n	8006a74 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	4798      	blx	r3
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d109      	bne.n	8006a6c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2206      	movs	r2, #6
 8006a5c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a64:	2103      	movs	r1, #3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a6a:	e073      	b.n	8006b54 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	220d      	movs	r2, #13
 8006a70:	701a      	strb	r2, [r3, #0]
      break;
 8006a72:	e06f      	b.n	8006b54 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	220d      	movs	r2, #13
 8006a78:	701a      	strb	r2, [r3, #0]
      break;
 8006a7a:	e06b      	b.n	8006b54 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d017      	beq.n	8006ab6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	4798      	blx	r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	220b      	movs	r2, #11
 8006aa2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006aa4:	e058      	b.n	8006b58 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d154      	bne.n	8006b58 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	220d      	movs	r2, #13
 8006ab2:	701a      	strb	r2, [r3, #0]
      break;
 8006ab4:	e050      	b.n	8006b58 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	220d      	movs	r2, #13
 8006aba:	701a      	strb	r2, [r3, #0]
      break;
 8006abc:	e04c      	b.n	8006b58 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d049      	beq.n	8006b5c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	4798      	blx	r3
      }
      break;
 8006ad4:	e042      	b.n	8006b5c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fd72 	bl	80065c8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d009      	beq.n	8006b02 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b12:	2105      	movs	r1, #5
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d107      	bne.n	8006b34 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fe2b 	bl	8006788 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b32:	e014      	b.n	8006b5e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f004 fbe3 	bl	800b300 <USBH_LL_Start>
      break;
 8006b3a:	e010      	b.n	8006b5e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b3c:	bf00      	nop
 8006b3e:	e00e      	b.n	8006b5e <USBH_Process+0x3b6>
      break;
 8006b40:	bf00      	nop
 8006b42:	e00c      	b.n	8006b5e <USBH_Process+0x3b6>
      break;
 8006b44:	bf00      	nop
 8006b46:	e00a      	b.n	8006b5e <USBH_Process+0x3b6>
    break;
 8006b48:	bf00      	nop
 8006b4a:	e008      	b.n	8006b5e <USBH_Process+0x3b6>
      break;
 8006b4c:	bf00      	nop
 8006b4e:	e006      	b.n	8006b5e <USBH_Process+0x3b6>
      break;
 8006b50:	bf00      	nop
 8006b52:	e004      	b.n	8006b5e <USBH_Process+0x3b6>
      break;
 8006b54:	bf00      	nop
 8006b56:	e002      	b.n	8006b5e <USBH_Process+0x3b6>
      break;
 8006b58:	bf00      	nop
 8006b5a:	e000      	b.n	8006b5e <USBH_Process+0x3b6>
      break;
 8006b5c:	bf00      	nop
  }
  return USBH_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af04      	add	r7, sp, #16
 8006b6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b07      	cmp	r3, #7
 8006b7e:	f200 81c1 	bhi.w	8006f04 <USBH_HandleEnum+0x39c>
 8006b82:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <USBH_HandleEnum+0x20>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006ba9 	.word	0x08006ba9
 8006b8c:	08006c67 	.word	0x08006c67
 8006b90:	08006cd1 	.word	0x08006cd1
 8006b94:	08006d5f 	.word	0x08006d5f
 8006b98:	08006dc9 	.word	0x08006dc9
 8006b9c:	08006e39 	.word	0x08006e39
 8006ba0:	08006e7f 	.word	0x08006e7f
 8006ba4:	08006ec5 	.word	0x08006ec5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ba8:	2108      	movs	r1, #8
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa50 	bl	8007050 <USBH_Get_DevDesc>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d130      	bne.n	8006c1c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	7919      	ldrb	r1, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bde:	b292      	uxth	r2, r2
 8006be0:	9202      	str	r2, [sp, #8]
 8006be2:	2200      	movs	r2, #0
 8006be4:	9201      	str	r2, [sp, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	4603      	mov	r3, r0
 8006bea:	2280      	movs	r2, #128	; 0x80
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 ff77 	bl	8007ae0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7959      	ldrb	r1, [r3, #5]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c06:	b292      	uxth	r2, r2
 8006c08:	9202      	str	r2, [sp, #8]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	9201      	str	r2, [sp, #4]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	4603      	mov	r3, r0
 8006c12:	2200      	movs	r2, #0
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 ff63 	bl	8007ae0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c1a:	e175      	b.n	8006f08 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	f040 8172 	bne.w	8006f08 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d903      	bls.n	8006c46 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	220d      	movs	r2, #13
 8006c42:	701a      	strb	r2, [r3, #0]
      break;
 8006c44:	e160      	b.n	8006f08 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	795b      	ldrb	r3, [r3, #5]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 ff97 	bl	8007b80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	791b      	ldrb	r3, [r3, #4]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 ff91 	bl	8007b80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
      break;
 8006c64:	e150      	b.n	8006f08 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c66:	2112      	movs	r1, #18
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f9f1 	bl	8007050 <USBH_Get_DevDesc>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d103      	bne.n	8006c80 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c7e:	e145      	b.n	8006f0c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	f040 8142 	bne.w	8006f0c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c8e:	3301      	adds	r3, #1
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d903      	bls.n	8006caa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	220d      	movs	r2, #13
 8006ca6:	701a      	strb	r2, [r3, #0]
      break;
 8006ca8:	e130      	b.n	8006f0c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	795b      	ldrb	r3, [r3, #5]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 ff65 	bl	8007b80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	791b      	ldrb	r3, [r3, #4]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 ff5f 	bl	8007b80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
      break;
 8006cce:	e11d      	b.n	8006f0c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa68 	bl	80071a8 <USBH_SetAddress>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d132      	bne.n	8006d48 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006ce2:	2002      	movs	r0, #2
 8006ce4:	f004 fc97 	bl	800b616 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	7919      	ldrb	r1, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d0a:	b292      	uxth	r2, r2
 8006d0c:	9202      	str	r2, [sp, #8]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	9201      	str	r2, [sp, #4]
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	4603      	mov	r3, r0
 8006d16:	2280      	movs	r2, #128	; 0x80
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fee1 	bl	8007ae0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	7959      	ldrb	r1, [r3, #5]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d32:	b292      	uxth	r2, r2
 8006d34:	9202      	str	r2, [sp, #8]
 8006d36:	2200      	movs	r2, #0
 8006d38:	9201      	str	r2, [sp, #4]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2200      	movs	r2, #0
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fecd 	bl	8007ae0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d46:	e0e3      	b.n	8006f10 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	f040 80e0 	bne.w	8006f10 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	220d      	movs	r2, #13
 8006d54:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	705a      	strb	r2, [r3, #1]
      break;
 8006d5c:	e0d8      	b.n	8006f10 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d5e:	2109      	movs	r1, #9
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f99d 	bl	80070a0 <USBH_Get_CfgDesc>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2204      	movs	r2, #4
 8006d74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d76:	e0cd      	b.n	8006f14 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	f040 80ca 	bne.w	8006f14 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d86:	3301      	adds	r3, #1
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d903      	bls.n	8006da2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	220d      	movs	r2, #13
 8006d9e:	701a      	strb	r2, [r3, #0]
      break;
 8006da0:	e0b8      	b.n	8006f14 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	795b      	ldrb	r3, [r3, #5]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fee9 	bl	8007b80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	791b      	ldrb	r3, [r3, #4]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fee3 	bl	8007b80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
      break;
 8006dc6:	e0a5      	b.n	8006f14 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f965 	bl	80070a0 <USBH_Get_CfgDesc>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d103      	bne.n	8006de8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2205      	movs	r2, #5
 8006de4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006de6:	e097      	b.n	8006f18 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	f040 8094 	bne.w	8006f18 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006df6:	3301      	adds	r3, #1
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d903      	bls.n	8006e12 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	220d      	movs	r2, #13
 8006e0e:	701a      	strb	r2, [r3, #0]
      break;
 8006e10:	e082      	b.n	8006f18 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	795b      	ldrb	r3, [r3, #5]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 feb1 	bl	8007b80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	791b      	ldrb	r3, [r3, #4]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 feab 	bl	8007b80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
      break;
 8006e36:	e06f      	b.n	8006f18 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d019      	beq.n	8006e76 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e4e:	23ff      	movs	r3, #255	; 0xff
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f949 	bl	80070e8 <USBH_Get_StringDesc>
 8006e56:	4603      	mov	r3, r0
 8006e58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2206      	movs	r2, #6
 8006e64:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e66:	e059      	b.n	8006f1c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d156      	bne.n	8006f1c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2206      	movs	r2, #6
 8006e72:	705a      	strb	r2, [r3, #1]
      break;
 8006e74:	e052      	b.n	8006f1c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2206      	movs	r2, #6
 8006e7a:	705a      	strb	r2, [r3, #1]
      break;
 8006e7c:	e04e      	b.n	8006f1c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d019      	beq.n	8006ebc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e94:	23ff      	movs	r3, #255	; 0xff
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f926 	bl	80070e8 <USBH_Get_StringDesc>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d103      	bne.n	8006eae <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2207      	movs	r2, #7
 8006eaa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006eac:	e038      	b.n	8006f20 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d135      	bne.n	8006f20 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2207      	movs	r2, #7
 8006eb8:	705a      	strb	r2, [r3, #1]
      break;
 8006eba:	e031      	b.n	8006f20 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2207      	movs	r2, #7
 8006ec0:	705a      	strb	r2, [r3, #1]
      break;
 8006ec2:	e02d      	b.n	8006f20 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d017      	beq.n	8006efe <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006eda:	23ff      	movs	r3, #255	; 0xff
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f903 	bl	80070e8 <USBH_Get_StringDesc>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d102      	bne.n	8006ef2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006ef0:	e018      	b.n	8006f24 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d115      	bne.n	8006f24 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
      break;
 8006efc:	e012      	b.n	8006f24 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
      break;
 8006f02:	e00f      	b.n	8006f24 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f04:	bf00      	nop
 8006f06:	e00e      	b.n	8006f26 <USBH_HandleEnum+0x3be>
      break;
 8006f08:	bf00      	nop
 8006f0a:	e00c      	b.n	8006f26 <USBH_HandleEnum+0x3be>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e00a      	b.n	8006f26 <USBH_HandleEnum+0x3be>
      break;
 8006f10:	bf00      	nop
 8006f12:	e008      	b.n	8006f26 <USBH_HandleEnum+0x3be>
      break;
 8006f14:	bf00      	nop
 8006f16:	e006      	b.n	8006f26 <USBH_HandleEnum+0x3be>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e004      	b.n	8006f26 <USBH_HandleEnum+0x3be>
      break;
 8006f1c:	bf00      	nop
 8006f1e:	e002      	b.n	8006f26 <USBH_HandleEnum+0x3be>
      break;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <USBH_HandleEnum+0x3be>
      break;
 8006f24:	bf00      	nop
  }
  return Status;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f804 	bl	8006f72 <USBH_HandleSof>
}
 8006f6a:	bf00      	nop
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b0b      	cmp	r3, #11
 8006f82:	d10a      	bne.n	8006f9a <USBH_HandleSof+0x28>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
  }
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006fb2:	bf00      	nop
}
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006fce:	bf00      	nop
}
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f004 f984 	bl	800b336 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	791b      	ldrb	r3, [r3, #4]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fda3 	bl	8007b80 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	795b      	ldrb	r3, [r3, #5]
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fd9d 	bl	8007b80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af02      	add	r7, sp, #8
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	b29b      	uxth	r3, r3
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	4613      	mov	r3, r2
 800706a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800706e:	2100      	movs	r1, #0
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f864 	bl	800713e <USBH_GetDescriptor>
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	b292      	uxth	r2, r2
 8007090:	4619      	mov	r1, r3
 8007092:	f000 f918 	bl	80072c6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	331c      	adds	r3, #28
 80070b0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070b2:	887b      	ldrh	r3, [r7, #2]
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070bc:	2100      	movs	r1, #0
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f83d 	bl	800713e <USBH_GetDescriptor>
 80070c4:	4603      	mov	r3, r0
 80070c6:	72fb      	strb	r3, [r7, #11]
 80070c8:	7afb      	ldrb	r3, [r7, #11]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d107      	bne.n	80070de <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070d4:	887a      	ldrh	r2, [r7, #2]
 80070d6:	68f9      	ldr	r1, [r7, #12]
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f964 	bl	80073a6 <USBH_ParseCfgDesc>
  }

  return status;
 80070de:	7afb      	ldrb	r3, [r7, #11]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	607a      	str	r2, [r7, #4]
 80070f2:	461a      	mov	r2, r3
 80070f4:	460b      	mov	r3, r1
 80070f6:	72fb      	strb	r3, [r7, #11]
 80070f8:	4613      	mov	r3, r2
 80070fa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007104:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800710c:	893b      	ldrh	r3, [r7, #8]
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	460b      	mov	r3, r1
 8007112:	2100      	movs	r1, #0
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 f812 	bl	800713e <USBH_GetDescriptor>
 800711a:	4603      	mov	r3, r0
 800711c:	75fb      	strb	r3, [r7, #23]
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d107      	bne.n	8007134 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800712a:	893a      	ldrh	r2, [r7, #8]
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fa37 	bl	80075a2 <USBH_ParseStringDesc>
  }

  return status;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	72fb      	strb	r3, [r7, #11]
 800714c:	4613      	mov	r3, r2
 800714e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	789b      	ldrb	r3, [r3, #2]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d11c      	bne.n	8007192 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007158:	7afb      	ldrb	r3, [r7, #11]
 800715a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800715e:	b2da      	uxtb	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2206      	movs	r2, #6
 8007168:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	893a      	ldrh	r2, [r7, #8]
 800716e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007170:	893b      	ldrh	r3, [r7, #8]
 8007172:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800717a:	d104      	bne.n	8007186 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f240 4209 	movw	r2, #1033	; 0x409
 8007182:	829a      	strh	r2, [r3, #20]
 8007184:	e002      	b.n	800718c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8b3a      	ldrh	r2, [r7, #24]
 8007190:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007192:	8b3b      	ldrh	r3, [r7, #24]
 8007194:	461a      	mov	r2, r3
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fa50 	bl	800763e <USBH_CtlReq>
 800719e:	4603      	mov	r3, r0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	789b      	ldrb	r3, [r3, #2]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d10f      	bne.n	80071dc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2205      	movs	r2, #5
 80071c6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80071c8:	78fb      	ldrb	r3, [r7, #3]
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80071dc:	2200      	movs	r2, #0
 80071de:	2100      	movs	r1, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fa2c 	bl	800763e <USBH_CtlReq>
 80071e6:	4603      	mov	r3, r0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	789b      	ldrb	r3, [r3, #2]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d10e      	bne.n	8007222 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2209      	movs	r2, #9
 800720e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	887a      	ldrh	r2, [r7, #2]
 8007214:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007222:	2200      	movs	r2, #0
 8007224:	2100      	movs	r1, #0
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa09 	bl	800763e <USBH_CtlReq>
 800722c:	4603      	mov	r3, r0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	460b      	mov	r3, r1
 8007240:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	789b      	ldrb	r3, [r3, #2]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d10f      	bne.n	800726a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2203      	movs	r2, #3
 8007254:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	b29a      	uxth	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800726a:	2200      	movs	r2, #0
 800726c:	2100      	movs	r1, #0
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f9e5 	bl	800763e <USBH_CtlReq>
 8007274:	4603      	mov	r3, r0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	789b      	ldrb	r3, [r3, #2]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d10f      	bne.n	80072b2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80072b2:	2200      	movs	r2, #0
 80072b4:	2100      	movs	r1, #0
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9c1 	bl	800763e <USBH_CtlReq>
 80072bc:	4603      	mov	r3, r0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	4613      	mov	r3, r2
 80072d2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	781a      	ldrb	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	785a      	ldrb	r2, [r3, #1]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3302      	adds	r3, #2
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3303      	adds	r3, #3
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	4313      	orrs	r3, r2
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	791a      	ldrb	r2, [r3, #4]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	795a      	ldrb	r2, [r3, #5]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	799a      	ldrb	r2, [r3, #6]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	79da      	ldrb	r2, [r3, #7]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007320:	88fb      	ldrh	r3, [r7, #6]
 8007322:	2b08      	cmp	r3, #8
 8007324:	d939      	bls.n	800739a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	3308      	adds	r3, #8
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	b29a      	uxth	r2, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	3309      	adds	r3, #9
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	b29b      	uxth	r3, r3
 800733a:	4313      	orrs	r3, r2
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	330a      	adds	r3, #10
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	b29a      	uxth	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	330b      	adds	r3, #11
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	b29b      	uxth	r3, r3
 8007356:	4313      	orrs	r3, r2
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	330c      	adds	r3, #12
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	b29a      	uxth	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	330d      	adds	r3, #13
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	b29b      	uxth	r3, r3
 8007372:	4313      	orrs	r3, r2
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	7b9a      	ldrb	r2, [r3, #14]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	7bda      	ldrb	r2, [r3, #15]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	7c1a      	ldrb	r2, [r3, #16]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	7c5a      	ldrb	r2, [r3, #17]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	745a      	strb	r2, [r3, #17]
  }
}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b08a      	sub	sp, #40	; 0x28
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	60b9      	str	r1, [r7, #8]
 80073b0:	4613      	mov	r3, r2
 80073b2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	781a      	ldrb	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	785a      	ldrb	r2, [r3, #1]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	3302      	adds	r3, #2
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	b29a      	uxth	r2, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	3303      	adds	r3, #3
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	4313      	orrs	r3, r2
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	791a      	ldrb	r2, [r3, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	795a      	ldrb	r2, [r3, #5]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	799a      	ldrb	r2, [r3, #6]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	79da      	ldrb	r2, [r3, #7]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	7a1a      	ldrb	r2, [r3, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	2b09      	cmp	r3, #9
 8007420:	d95f      	bls.n	80074e2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007422:	2309      	movs	r3, #9
 8007424:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007426:	2300      	movs	r3, #0
 8007428:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800742a:	e051      	b.n	80074d0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800742c:	f107 0316 	add.w	r3, r7, #22
 8007430:	4619      	mov	r1, r3
 8007432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007434:	f000 f8e8 	bl	8007608 <USBH_GetNextDesc>
 8007438:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	2b04      	cmp	r3, #4
 8007440:	d146      	bne.n	80074d0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007446:	221a      	movs	r2, #26
 8007448:	fb02 f303 	mul.w	r3, r2, r3
 800744c:	3308      	adds	r3, #8
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4413      	add	r3, r2
 8007452:	3302      	adds	r3, #2
 8007454:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007458:	69f8      	ldr	r0, [r7, #28]
 800745a:	f000 f846 	bl	80074ea <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007464:	2300      	movs	r3, #0
 8007466:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007468:	e022      	b.n	80074b0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800746a:	f107 0316 	add.w	r3, r7, #22
 800746e:	4619      	mov	r1, r3
 8007470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007472:	f000 f8c9 	bl	8007608 <USBH_GetNextDesc>
 8007476:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	785b      	ldrb	r3, [r3, #1]
 800747c:	2b05      	cmp	r3, #5
 800747e:	d117      	bne.n	80074b0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007480:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007484:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007488:	3201      	adds	r2, #1
 800748a:	00d2      	lsls	r2, r2, #3
 800748c:	211a      	movs	r1, #26
 800748e:	fb01 f303 	mul.w	r3, r1, r3
 8007492:	4413      	add	r3, r2
 8007494:	3308      	adds	r3, #8
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	3304      	adds	r3, #4
 800749c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800749e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074a0:	69b8      	ldr	r0, [r7, #24]
 80074a2:	f000 f851 	bl	8007548 <USBH_ParseEPDesc>
            ep_ix++;
 80074a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80074aa:	3301      	adds	r3, #1
 80074ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	791b      	ldrb	r3, [r3, #4]
 80074b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d204      	bcs.n	80074c6 <USBH_ParseCfgDesc+0x120>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	885a      	ldrh	r2, [r3, #2]
 80074c0:	8afb      	ldrh	r3, [r7, #22]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d8d1      	bhi.n	800746a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80074c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ca:	3301      	adds	r3, #1
 80074cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d804      	bhi.n	80074e2 <USBH_ParseCfgDesc+0x13c>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	885a      	ldrh	r2, [r3, #2]
 80074dc:	8afb      	ldrh	r3, [r7, #22]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d8a4      	bhi.n	800742c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80074e2:	bf00      	nop
 80074e4:	3728      	adds	r7, #40	; 0x28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	785a      	ldrb	r2, [r3, #1]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	789a      	ldrb	r2, [r3, #2]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	78da      	ldrb	r2, [r3, #3]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	791a      	ldrb	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	795a      	ldrb	r2, [r3, #5]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	799a      	ldrb	r2, [r3, #6]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	79da      	ldrb	r2, [r3, #7]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	7a1a      	ldrb	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	721a      	strb	r2, [r3, #8]
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781a      	ldrb	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	785a      	ldrb	r2, [r3, #1]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	789a      	ldrb	r2, [r3, #2]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	78da      	ldrb	r2, [r3, #3]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	3304      	adds	r3, #4
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b29a      	uxth	r2, r3
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	3305      	adds	r3, #5
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	b29b      	uxth	r3, r3
 8007586:	4313      	orrs	r3, r2
 8007588:	b29a      	uxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	799a      	ldrb	r2, [r3, #6]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	719a      	strb	r2, [r3, #6]
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b087      	sub	sp, #28
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	4613      	mov	r3, r2
 80075ae:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d120      	bne.n	80075fc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	1e9a      	subs	r2, r3, #2
 80075c0:	88fb      	ldrh	r3, [r7, #6]
 80075c2:	4293      	cmp	r3, r2
 80075c4:	bf28      	it	cs
 80075c6:	4613      	movcs	r3, r2
 80075c8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3302      	adds	r3, #2
 80075ce:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80075d0:	2300      	movs	r3, #0
 80075d2:	82fb      	strh	r3, [r7, #22]
 80075d4:	e00b      	b.n	80075ee <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80075d6:	8afb      	ldrh	r3, [r7, #22]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80075e8:	8afb      	ldrh	r3, [r7, #22]
 80075ea:	3302      	adds	r3, #2
 80075ec:	82fb      	strh	r3, [r7, #22]
 80075ee:	8afa      	ldrh	r2, [r7, #22]
 80075f0:	8abb      	ldrh	r3, [r7, #20]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d3ef      	bcc.n	80075d6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
  }
}
 80075fc:	bf00      	nop
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	881a      	ldrh	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	4413      	add	r3, r2
 800761e:	b29a      	uxth	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007630:	68fb      	ldr	r3, [r7, #12]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	4613      	mov	r3, r2
 800764a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800764c:	2301      	movs	r3, #1
 800764e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	789b      	ldrb	r3, [r3, #2]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d002      	beq.n	800765e <USBH_CtlReq+0x20>
 8007658:	2b02      	cmp	r3, #2
 800765a:	d00f      	beq.n	800767c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800765c:	e027      	b.n	80076ae <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	88fa      	ldrh	r2, [r7, #6]
 8007668:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2202      	movs	r2, #2
 8007674:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007676:	2301      	movs	r3, #1
 8007678:	75fb      	strb	r3, [r7, #23]
      break;
 800767a:	e018      	b.n	80076ae <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f81b 	bl	80076b8 <USBH_HandleControl>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <USBH_CtlReq+0x54>
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	2b03      	cmp	r3, #3
 8007690:	d106      	bne.n	80076a0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	761a      	strb	r2, [r3, #24]
      break;
 800769e:	e005      	b.n	80076ac <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d102      	bne.n	80076ac <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	709a      	strb	r2, [r3, #2]
      break;
 80076ac:	bf00      	nop
  }
  return status;
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af02      	add	r7, sp, #8
 80076be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	7e1b      	ldrb	r3, [r3, #24]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	2b0a      	cmp	r3, #10
 80076d0:	f200 8156 	bhi.w	8007980 <USBH_HandleControl+0x2c8>
 80076d4:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <USBH_HandleControl+0x24>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	08007709 	.word	0x08007709
 80076e0:	08007723 	.word	0x08007723
 80076e4:	0800778d 	.word	0x0800778d
 80076e8:	080077b3 	.word	0x080077b3
 80076ec:	080077eb 	.word	0x080077eb
 80076f0:	08007815 	.word	0x08007815
 80076f4:	08007867 	.word	0x08007867
 80076f8:	08007889 	.word	0x08007889
 80076fc:	080078c5 	.word	0x080078c5
 8007700:	080078eb 	.word	0x080078eb
 8007704:	08007929 	.word	0x08007929
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f103 0110 	add.w	r1, r3, #16
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	795b      	ldrb	r3, [r3, #5]
 8007712:	461a      	mov	r2, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f943 	bl	80079a0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2202      	movs	r2, #2
 800771e:	761a      	strb	r2, [r3, #24]
      break;
 8007720:	e139      	b.n	8007996 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	795b      	ldrb	r3, [r3, #5]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f003 fef3 	bl	800b514 <USBH_LL_GetURBState>
 800772e:	4603      	mov	r3, r0
 8007730:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d11e      	bne.n	8007776 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7c1b      	ldrb	r3, [r3, #16]
 800773c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007740:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	8adb      	ldrh	r3, [r3, #22]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800774a:	7b7b      	ldrb	r3, [r7, #13]
 800774c:	2b80      	cmp	r3, #128	; 0x80
 800774e:	d103      	bne.n	8007758 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2203      	movs	r2, #3
 8007754:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007756:	e115      	b.n	8007984 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2205      	movs	r2, #5
 800775c:	761a      	strb	r2, [r3, #24]
      break;
 800775e:	e111      	b.n	8007984 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007760:	7b7b      	ldrb	r3, [r7, #13]
 8007762:	2b80      	cmp	r3, #128	; 0x80
 8007764:	d103      	bne.n	800776e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2209      	movs	r2, #9
 800776a:	761a      	strb	r2, [r3, #24]
      break;
 800776c:	e10a      	b.n	8007984 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2207      	movs	r2, #7
 8007772:	761a      	strb	r2, [r3, #24]
      break;
 8007774:	e106      	b.n	8007984 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b04      	cmp	r3, #4
 800777a:	d003      	beq.n	8007784 <USBH_HandleControl+0xcc>
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	2b02      	cmp	r3, #2
 8007780:	f040 8100 	bne.w	8007984 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	220b      	movs	r2, #11
 8007788:	761a      	strb	r2, [r3, #24]
      break;
 800778a:	e0fb      	b.n	8007984 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6899      	ldr	r1, [r3, #8]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	899a      	ldrh	r2, [r3, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	791b      	ldrb	r3, [r3, #4]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f93a 	bl	8007a1e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2204      	movs	r2, #4
 80077ae:	761a      	strb	r2, [r3, #24]
      break;
 80077b0:	e0f1      	b.n	8007996 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	791b      	ldrb	r3, [r3, #4]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f003 feab 	bl	800b514 <USBH_LL_GetURBState>
 80077be:	4603      	mov	r3, r0
 80077c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d102      	bne.n	80077ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2209      	movs	r2, #9
 80077cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b05      	cmp	r3, #5
 80077d2:	d102      	bne.n	80077da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80077d4:	2303      	movs	r3, #3
 80077d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80077d8:	e0d6      	b.n	8007988 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b04      	cmp	r3, #4
 80077de:	f040 80d3 	bne.w	8007988 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	220b      	movs	r2, #11
 80077e6:	761a      	strb	r2, [r3, #24]
      break;
 80077e8:	e0ce      	b.n	8007988 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6899      	ldr	r1, [r3, #8]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	899a      	ldrh	r2, [r3, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	795b      	ldrb	r3, [r3, #5]
 80077f6:	2001      	movs	r0, #1
 80077f8:	9000      	str	r0, [sp, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f8ea 	bl	80079d4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007806:	b29a      	uxth	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2206      	movs	r2, #6
 8007810:	761a      	strb	r2, [r3, #24]
      break;
 8007812:	e0c0      	b.n	8007996 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	795b      	ldrb	r3, [r3, #5]
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f003 fe7a 	bl	800b514 <USBH_LL_GetURBState>
 8007820:	4603      	mov	r3, r0
 8007822:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d103      	bne.n	8007832 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2207      	movs	r2, #7
 800782e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007830:	e0ac      	b.n	800798c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b05      	cmp	r3, #5
 8007836:	d105      	bne.n	8007844 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	220c      	movs	r2, #12
 800783c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800783e:	2303      	movs	r3, #3
 8007840:	73fb      	strb	r3, [r7, #15]
      break;
 8007842:	e0a3      	b.n	800798c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d103      	bne.n	8007852 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2205      	movs	r2, #5
 800784e:	761a      	strb	r2, [r3, #24]
      break;
 8007850:	e09c      	b.n	800798c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b04      	cmp	r3, #4
 8007856:	f040 8099 	bne.w	800798c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	220b      	movs	r2, #11
 800785e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007860:	2302      	movs	r3, #2
 8007862:	73fb      	strb	r3, [r7, #15]
      break;
 8007864:	e092      	b.n	800798c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	791b      	ldrb	r3, [r3, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	2100      	movs	r1, #0
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8d5 	bl	8007a1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800787a:	b29a      	uxth	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2208      	movs	r2, #8
 8007884:	761a      	strb	r2, [r3, #24]

      break;
 8007886:	e086      	b.n	8007996 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	791b      	ldrb	r3, [r3, #4]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f003 fe40 	bl	800b514 <USBH_LL_GetURBState>
 8007894:	4603      	mov	r3, r0
 8007896:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d105      	bne.n	80078aa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	220d      	movs	r2, #13
 80078a2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078a8:	e072      	b.n	8007990 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d103      	bne.n	80078b8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	220b      	movs	r2, #11
 80078b4:	761a      	strb	r2, [r3, #24]
      break;
 80078b6:	e06b      	b.n	8007990 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	d168      	bne.n	8007990 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80078be:	2303      	movs	r3, #3
 80078c0:	73fb      	strb	r3, [r7, #15]
      break;
 80078c2:	e065      	b.n	8007990 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	795b      	ldrb	r3, [r3, #5]
 80078c8:	2201      	movs	r2, #1
 80078ca:	9200      	str	r2, [sp, #0]
 80078cc:	2200      	movs	r2, #0
 80078ce:	2100      	movs	r1, #0
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f87f 	bl	80079d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078dc:	b29a      	uxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	220a      	movs	r2, #10
 80078e6:	761a      	strb	r2, [r3, #24]
      break;
 80078e8:	e055      	b.n	8007996 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	795b      	ldrb	r3, [r3, #5]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f003 fe0f 	bl	800b514 <USBH_LL_GetURBState>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d105      	bne.n	800790c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	220d      	movs	r2, #13
 8007908:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800790a:	e043      	b.n	8007994 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d103      	bne.n	800791a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2209      	movs	r2, #9
 8007916:	761a      	strb	r2, [r3, #24]
      break;
 8007918:	e03c      	b.n	8007994 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b04      	cmp	r3, #4
 800791e:	d139      	bne.n	8007994 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	220b      	movs	r2, #11
 8007924:	761a      	strb	r2, [r3, #24]
      break;
 8007926:	e035      	b.n	8007994 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	7e5b      	ldrb	r3, [r3, #25]
 800792c:	3301      	adds	r3, #1
 800792e:	b2da      	uxtb	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	765a      	strb	r2, [r3, #25]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7e5b      	ldrb	r3, [r3, #25]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d806      	bhi.n	800794a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007948:	e025      	b.n	8007996 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007950:	2106      	movs	r1, #6
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	795b      	ldrb	r3, [r3, #5]
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f90c 	bl	8007b80 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	791b      	ldrb	r3, [r3, #4]
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f906 	bl	8007b80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800797a:	2302      	movs	r3, #2
 800797c:	73fb      	strb	r3, [r7, #15]
      break;
 800797e:	e00a      	b.n	8007996 <USBH_HandleControl+0x2de>

    default:
      break;
 8007980:	bf00      	nop
 8007982:	e008      	b.n	8007996 <USBH_HandleControl+0x2de>
      break;
 8007984:	bf00      	nop
 8007986:	e006      	b.n	8007996 <USBH_HandleControl+0x2de>
      break;
 8007988:	bf00      	nop
 800798a:	e004      	b.n	8007996 <USBH_HandleControl+0x2de>
      break;
 800798c:	bf00      	nop
 800798e:	e002      	b.n	8007996 <USBH_HandleControl+0x2de>
      break;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <USBH_HandleControl+0x2de>
      break;
 8007994:	bf00      	nop
  }

  return status;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af04      	add	r7, sp, #16
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80079ae:	79f9      	ldrb	r1, [r7, #7]
 80079b0:	2300      	movs	r3, #0
 80079b2:	9303      	str	r3, [sp, #12]
 80079b4:	2308      	movs	r3, #8
 80079b6:	9302      	str	r3, [sp, #8]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	2300      	movs	r3, #0
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	2300      	movs	r3, #0
 80079c2:	2200      	movs	r2, #0
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f003 fd74 	bl	800b4b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af04      	add	r7, sp, #16
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4611      	mov	r1, r2
 80079e0:	461a      	mov	r2, r3
 80079e2:	460b      	mov	r3, r1
 80079e4:	80fb      	strh	r3, [r7, #6]
 80079e6:	4613      	mov	r3, r2
 80079e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80079f8:	7979      	ldrb	r1, [r7, #5]
 80079fa:	7e3b      	ldrb	r3, [r7, #24]
 80079fc:	9303      	str	r3, [sp, #12]
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	9302      	str	r3, [sp, #8]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	2301      	movs	r3, #1
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f003 fd4f 	bl	800b4b2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b088      	sub	sp, #32
 8007a22:	af04      	add	r7, sp, #16
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	80fb      	strh	r3, [r7, #6]
 8007a30:	4613      	mov	r3, r2
 8007a32:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007a34:	7979      	ldrb	r1, [r7, #5]
 8007a36:	2300      	movs	r3, #0
 8007a38:	9303      	str	r3, [sp, #12]
 8007a3a:	88fb      	ldrh	r3, [r7, #6]
 8007a3c:	9302      	str	r3, [sp, #8]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	2301      	movs	r3, #1
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	2300      	movs	r3, #0
 8007a48:	2201      	movs	r2, #1
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f003 fd31 	bl	800b4b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007a50:	2300      	movs	r3, #0

}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b088      	sub	sp, #32
 8007a5e:	af04      	add	r7, sp, #16
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	4611      	mov	r1, r2
 8007a66:	461a      	mov	r2, r3
 8007a68:	460b      	mov	r3, r1
 8007a6a:	80fb      	strh	r3, [r7, #6]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007a7e:	7979      	ldrb	r1, [r7, #5]
 8007a80:	7e3b      	ldrb	r3, [r7, #24]
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	2302      	movs	r3, #2
 8007a92:	2200      	movs	r2, #0
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f003 fd0c 	bl	800b4b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	80fb      	strh	r3, [r7, #6]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007aba:	7979      	ldrb	r1, [r7, #5]
 8007abc:	2300      	movs	r3, #0
 8007abe:	9303      	str	r3, [sp, #12]
 8007ac0:	88fb      	ldrh	r3, [r7, #6]
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	2302      	movs	r3, #2
 8007ace:	2201      	movs	r2, #1
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f003 fcee 	bl	800b4b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af04      	add	r7, sp, #16
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	4608      	mov	r0, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	461a      	mov	r2, r3
 8007aee:	4603      	mov	r3, r0
 8007af0:	70fb      	strb	r3, [r7, #3]
 8007af2:	460b      	mov	r3, r1
 8007af4:	70bb      	strb	r3, [r7, #2]
 8007af6:	4613      	mov	r3, r2
 8007af8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007afa:	7878      	ldrb	r0, [r7, #1]
 8007afc:	78ba      	ldrb	r2, [r7, #2]
 8007afe:	78f9      	ldrb	r1, [r7, #3]
 8007b00:	8b3b      	ldrh	r3, [r7, #24]
 8007b02:	9302      	str	r3, [sp, #8]
 8007b04:	7d3b      	ldrb	r3, [r7, #20]
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	7c3b      	ldrb	r3, [r7, #16]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f003 fc81 	bl	800b416 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f003 fca0 	bl	800b474 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f836 	bl	8007bbc <USBH_GetFreePipe>
 8007b50:	4603      	mov	r3, r0
 8007b52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b54:	89fb      	ldrh	r3, [r7, #14]
 8007b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00a      	beq.n	8007b74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	89fb      	ldrh	r3, [r7, #14]
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	33e0      	adds	r3, #224	; 0xe0
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007b74:	89fb      	ldrh	r3, [r7, #14]
 8007b76:	b2db      	uxtb	r3, r3
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	2b0a      	cmp	r3, #10
 8007b90:	d80d      	bhi.n	8007bae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007b92:	78fb      	ldrb	r3, [r7, #3]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	33e0      	adds	r3, #224	; 0xe0
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	33e0      	adds	r3, #224	; 0xe0
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73fb      	strb	r3, [r7, #15]
 8007bcc:	e00f      	b.n	8007bee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	33e0      	adds	r3, #224	; 0xe0
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d102      	bne.n	8007be8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	e007      	b.n	8007bf8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	3301      	adds	r3, #1
 8007bec:	73fb      	strb	r3, [r7, #15]
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b0a      	cmp	r3, #10
 8007bf2:	d9ec      	bls.n	8007bce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <disk_status+0x30>)
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	79fa      	ldrb	r2, [r7, #7]
 8007c1c:	4905      	ldr	r1, [pc, #20]	; (8007c34 <disk_status+0x30>)
 8007c1e:	440a      	add	r2, r1
 8007c20:	7a12      	ldrb	r2, [r2, #8]
 8007c22:	4610      	mov	r0, r2
 8007c24:	4798      	blx	r3
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	200002d8 	.word	0x200002d8

08007c38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	4a0d      	ldr	r2, [pc, #52]	; (8007c80 <disk_initialize+0x48>)
 8007c4a:	5cd3      	ldrb	r3, [r2, r3]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d111      	bne.n	8007c74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	4a0b      	ldr	r2, [pc, #44]	; (8007c80 <disk_initialize+0x48>)
 8007c54:	2101      	movs	r1, #1
 8007c56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	4a09      	ldr	r2, [pc, #36]	; (8007c80 <disk_initialize+0x48>)
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	79fa      	ldrb	r2, [r7, #7]
 8007c66:	4906      	ldr	r1, [pc, #24]	; (8007c80 <disk_initialize+0x48>)
 8007c68:	440a      	add	r2, r1
 8007c6a:	7a12      	ldrb	r2, [r2, #8]
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	4603      	mov	r3, r0
 8007c72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	200002d8 	.word	0x200002d8

08007c84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c84:	b590      	push	{r4, r7, lr}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	4a0a      	ldr	r2, [pc, #40]	; (8007cc0 <disk_read+0x3c>)
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	689c      	ldr	r4, [r3, #8]
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	4a07      	ldr	r2, [pc, #28]	; (8007cc0 <disk_read+0x3c>)
 8007ca4:	4413      	add	r3, r2
 8007ca6:	7a18      	ldrb	r0, [r3, #8]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	47a0      	blx	r4
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd90      	pop	{r4, r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	200002d8 	.word	0x200002d8

08007cc4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007cc4:	b590      	push	{r4, r7, lr}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4a0a      	ldr	r2, [pc, #40]	; (8007d00 <disk_write+0x3c>)
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	68dc      	ldr	r4, [r3, #12]
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4a07      	ldr	r2, [pc, #28]	; (8007d00 <disk_write+0x3c>)
 8007ce4:	4413      	add	r3, r2
 8007ce6:	7a18      	ldrb	r0, [r3, #8]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	47a0      	blx	r4
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd90      	pop	{r4, r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	200002d8 	.word	0x200002d8

08007d04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	603a      	str	r2, [r7, #0]
 8007d0e:	71fb      	strb	r3, [r7, #7]
 8007d10:	460b      	mov	r3, r1
 8007d12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	4a09      	ldr	r2, [pc, #36]	; (8007d3c <disk_ioctl+0x38>)
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	79fa      	ldrb	r2, [r7, #7]
 8007d22:	4906      	ldr	r1, [pc, #24]	; (8007d3c <disk_ioctl+0x38>)
 8007d24:	440a      	add	r2, r1
 8007d26:	7a10      	ldrb	r0, [r2, #8]
 8007d28:	79b9      	ldrb	r1, [r7, #6]
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	4798      	blx	r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
  return res;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	200002d8 	.word	0x200002d8

08007d40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d50:	89fb      	ldrh	r3, [r7, #14]
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	b21a      	sxth	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b21b      	sxth	r3, r3
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	b21b      	sxth	r3, r3
 8007d60:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d62:	89fb      	ldrh	r3, [r7, #14]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3303      	adds	r3, #3
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	3202      	adds	r2, #2
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	3201      	adds	r2, #1
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	021b      	lsls	r3, r3, #8
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7812      	ldrb	r2, [r2, #0]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
	return rv;
 8007da8:	68fb      	ldr	r3, [r7, #12]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	887a      	ldrh	r2, [r7, #2]
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	887b      	ldrh	r3, [r7, #2]
 8007dd0:	0a1b      	lsrs	r3, r3, #8
 8007dd2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	607a      	str	r2, [r7, #4]
 8007dda:	887a      	ldrh	r2, [r7, #2]
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	0a1b      	lsrs	r3, r3, #8
 8007e06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	607a      	str	r2, [r7, #4]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	b2d2      	uxtb	r2, r2
 8007e12:	701a      	strb	r2, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	b2d2      	uxtb	r2, r2
 8007e24:	701a      	strb	r2, [r3, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	0a1b      	lsrs	r3, r3, #8
 8007e2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	b2d2      	uxtb	r2, r2
 8007e36:	701a      	strb	r2, [r3, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00d      	beq.n	8007e7a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	1c53      	adds	r3, r2, #1
 8007e62:	613b      	str	r3, [r7, #16]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1c59      	adds	r1, r3, #1
 8007e68:	6179      	str	r1, [r7, #20]
 8007e6a:	7812      	ldrb	r2, [r2, #0]
 8007e6c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	607b      	str	r3, [r7, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1f1      	bne.n	8007e5e <mem_cpy+0x1a>
	}
}
 8007e7a:	bf00      	nop
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007e86:	b480      	push	{r7}
 8007e88:	b087      	sub	sp, #28
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	617a      	str	r2, [r7, #20]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	607b      	str	r3, [r7, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1f3      	bne.n	8007e96 <mem_set+0x10>
}
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007ebc:	b480      	push	{r7}
 8007ebe:	b089      	sub	sp, #36	; 0x24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	61fb      	str	r3, [r7, #28]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	61fa      	str	r2, [r7, #28]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	4619      	mov	r1, r3
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	61ba      	str	r2, [r7, #24]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	1acb      	subs	r3, r1, r3
 8007ee8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	607b      	str	r3, [r7, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <mem_cmp+0x40>
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0eb      	beq.n	8007ed4 <mem_cmp+0x18>

	return r;
 8007efc:	697b      	ldr	r3, [r7, #20]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3724      	adds	r7, #36	; 0x24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007f14:	e002      	b.n	8007f1c <chk_chr+0x12>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	607b      	str	r3, [r7, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <chk_chr+0x26>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d1f2      	bne.n	8007f16 <chk_chr+0xc>
	return *str;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	781b      	ldrb	r3, [r3, #0]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60bb      	str	r3, [r7, #8]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	e029      	b.n	8007fa8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007f54:	4a27      	ldr	r2, [pc, #156]	; (8007ff4 <chk_lock+0xb4>)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	011b      	lsls	r3, r3, #4
 8007f5a:	4413      	add	r3, r2
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01d      	beq.n	8007f9e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f62:	4a24      	ldr	r2, [pc, #144]	; (8007ff4 <chk_lock+0xb4>)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	011b      	lsls	r3, r3, #4
 8007f68:	4413      	add	r3, r2
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d116      	bne.n	8007fa2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007f74:	4a1f      	ldr	r2, [pc, #124]	; (8007ff4 <chk_lock+0xb4>)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	4413      	add	r3, r2
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d10c      	bne.n	8007fa2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f88:	4a1a      	ldr	r2, [pc, #104]	; (8007ff4 <chk_lock+0xb4>)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	4413      	add	r3, r2
 8007f90:	3308      	adds	r3, #8
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d102      	bne.n	8007fa2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f9c:	e007      	b.n	8007fae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d9d2      	bls.n	8007f54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d109      	bne.n	8007fc8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <chk_lock+0x80>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d101      	bne.n	8007fc4 <chk_lock+0x84>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e010      	b.n	8007fe6 <chk_lock+0xa6>
 8007fc4:	2312      	movs	r3, #18
 8007fc6:	e00e      	b.n	8007fe6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d108      	bne.n	8007fe0 <chk_lock+0xa0>
 8007fce:	4a09      	ldr	r2, [pc, #36]	; (8007ff4 <chk_lock+0xb4>)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	4413      	add	r3, r2
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fde:	d101      	bne.n	8007fe4 <chk_lock+0xa4>
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	e000      	b.n	8007fe6 <chk_lock+0xa6>
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	200000b8 	.word	0x200000b8

08007ff8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ffe:	2300      	movs	r3, #0
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	e002      	b.n	800800a <enq_lock+0x12>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3301      	adds	r3, #1
 8008008:	607b      	str	r3, [r7, #4]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d806      	bhi.n	800801e <enq_lock+0x26>
 8008010:	4a09      	ldr	r2, [pc, #36]	; (8008038 <enq_lock+0x40>)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	4413      	add	r3, r2
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f2      	bne.n	8008004 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b02      	cmp	r3, #2
 8008022:	bf14      	ite	ne
 8008024:	2301      	movne	r3, #1
 8008026:	2300      	moveq	r3, #0
 8008028:	b2db      	uxtb	r3, r3
}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	200000b8 	.word	0x200000b8

0800803c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	e01f      	b.n	800808c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800804c:	4a41      	ldr	r2, [pc, #260]	; (8008154 <inc_lock+0x118>)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	4413      	add	r3, r2
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d113      	bne.n	8008086 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800805e:	4a3d      	ldr	r2, [pc, #244]	; (8008154 <inc_lock+0x118>)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	011b      	lsls	r3, r3, #4
 8008064:	4413      	add	r3, r2
 8008066:	3304      	adds	r3, #4
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800806e:	429a      	cmp	r2, r3
 8008070:	d109      	bne.n	8008086 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008072:	4a38      	ldr	r2, [pc, #224]	; (8008154 <inc_lock+0x118>)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	011b      	lsls	r3, r3, #4
 8008078:	4413      	add	r3, r2
 800807a:	3308      	adds	r3, #8
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008082:	429a      	cmp	r2, r3
 8008084:	d006      	beq.n	8008094 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d9dc      	bls.n	800804c <inc_lock+0x10>
 8008092:	e000      	b.n	8008096 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008094:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d132      	bne.n	8008102 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	e002      	b.n	80080a8 <inc_lock+0x6c>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3301      	adds	r3, #1
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d806      	bhi.n	80080bc <inc_lock+0x80>
 80080ae:	4a29      	ldr	r2, [pc, #164]	; (8008154 <inc_lock+0x118>)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	011b      	lsls	r3, r3, #4
 80080b4:	4413      	add	r3, r2
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1f2      	bne.n	80080a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d101      	bne.n	80080c6 <inc_lock+0x8a>
 80080c2:	2300      	movs	r3, #0
 80080c4:	e040      	b.n	8008148 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	4922      	ldr	r1, [pc, #136]	; (8008154 <inc_lock+0x118>)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	440b      	add	r3, r1
 80080d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	491e      	ldr	r1, [pc, #120]	; (8008154 <inc_lock+0x118>)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	440b      	add	r3, r1
 80080e0:	3304      	adds	r3, #4
 80080e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	695a      	ldr	r2, [r3, #20]
 80080e8:	491a      	ldr	r1, [pc, #104]	; (8008154 <inc_lock+0x118>)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	440b      	add	r3, r1
 80080f0:	3308      	adds	r3, #8
 80080f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80080f4:	4a17      	ldr	r2, [pc, #92]	; (8008154 <inc_lock+0x118>)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	4413      	add	r3, r2
 80080fc:	330c      	adds	r3, #12
 80080fe:	2200      	movs	r2, #0
 8008100:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d009      	beq.n	800811c <inc_lock+0xe0>
 8008108:	4a12      	ldr	r2, [pc, #72]	; (8008154 <inc_lock+0x118>)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	4413      	add	r3, r2
 8008110:	330c      	adds	r3, #12
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <inc_lock+0xe0>
 8008118:	2300      	movs	r3, #0
 800811a:	e015      	b.n	8008148 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d108      	bne.n	8008134 <inc_lock+0xf8>
 8008122:	4a0c      	ldr	r2, [pc, #48]	; (8008154 <inc_lock+0x118>)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	011b      	lsls	r3, r3, #4
 8008128:	4413      	add	r3, r2
 800812a:	330c      	adds	r3, #12
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	3301      	adds	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	e001      	b.n	8008138 <inc_lock+0xfc>
 8008134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008138:	4906      	ldr	r1, [pc, #24]	; (8008154 <inc_lock+0x118>)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	440b      	add	r3, r1
 8008140:	330c      	adds	r3, #12
 8008142:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3301      	adds	r3, #1
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	200000b8 	.word	0x200000b8

08008158 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3b01      	subs	r3, #1
 8008164:	607b      	str	r3, [r7, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d825      	bhi.n	80081b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800816c:	4a17      	ldr	r2, [pc, #92]	; (80081cc <dec_lock+0x74>)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	011b      	lsls	r3, r3, #4
 8008172:	4413      	add	r3, r2
 8008174:	330c      	adds	r3, #12
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800817a:	89fb      	ldrh	r3, [r7, #14]
 800817c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008180:	d101      	bne.n	8008186 <dec_lock+0x2e>
 8008182:	2300      	movs	r3, #0
 8008184:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008186:	89fb      	ldrh	r3, [r7, #14]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <dec_lock+0x3a>
 800818c:	89fb      	ldrh	r3, [r7, #14]
 800818e:	3b01      	subs	r3, #1
 8008190:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008192:	4a0e      	ldr	r2, [pc, #56]	; (80081cc <dec_lock+0x74>)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	4413      	add	r3, r2
 800819a:	330c      	adds	r3, #12
 800819c:	89fa      	ldrh	r2, [r7, #14]
 800819e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80081a0:	89fb      	ldrh	r3, [r7, #14]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d105      	bne.n	80081b2 <dec_lock+0x5a>
 80081a6:	4a09      	ldr	r2, [pc, #36]	; (80081cc <dec_lock+0x74>)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	4413      	add	r3, r2
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	737b      	strb	r3, [r7, #13]
 80081b6:	e001      	b.n	80081bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80081b8:	2302      	movs	r3, #2
 80081ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80081bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	200000b8 	.word	0x200000b8

080081d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80081d8:	2300      	movs	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	e010      	b.n	8008200 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80081de:	4a0d      	ldr	r2, [pc, #52]	; (8008214 <clear_lock+0x44>)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	4413      	add	r3, r2
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d105      	bne.n	80081fa <clear_lock+0x2a>
 80081ee:	4a09      	ldr	r2, [pc, #36]	; (8008214 <clear_lock+0x44>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	4413      	add	r3, r2
 80081f6:	2200      	movs	r2, #0
 80081f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d9eb      	bls.n	80081de <clear_lock+0xe>
	}
}
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	200000b8 	.word	0x200000b8

08008218 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	78db      	ldrb	r3, [r3, #3]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d034      	beq.n	8008296 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008230:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7858      	ldrb	r0, [r3, #1]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800823c:	2301      	movs	r3, #1
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	f7ff fd40 	bl	8007cc4 <disk_write>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <sync_window+0x38>
			res = FR_DISK_ERR;
 800824a:	2301      	movs	r3, #1
 800824c:	73fb      	strb	r3, [r7, #15]
 800824e:	e022      	b.n	8008296 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	1ad2      	subs	r2, r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	429a      	cmp	r2, r3
 8008264:	d217      	bcs.n	8008296 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	789b      	ldrb	r3, [r3, #2]
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	e010      	b.n	8008290 <sync_window+0x78>
					wsect += fs->fsize;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4413      	add	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	7858      	ldrb	r0, [r3, #1]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008282:	2301      	movs	r3, #1
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	f7ff fd1d 	bl	8007cc4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	3b01      	subs	r3, #1
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d8eb      	bhi.n	800826e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d01b      	beq.n	80082f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff ffad 	bl	8008218 <sync_window>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d113      	bne.n	80082f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7858      	ldrb	r0, [r3, #1]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80082d2:	2301      	movs	r3, #1
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	f7ff fcd5 	bl	8007c84 <disk_read>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80082e0:	f04f 33ff 	mov.w	r3, #4294967295
 80082e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff ff87 	bl	8008218 <sync_window>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d158      	bne.n	80083c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d148      	bne.n	80083ae <sync_fs+0xb2>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	791b      	ldrb	r3, [r3, #4]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d144      	bne.n	80083ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3334      	adds	r3, #52	; 0x34
 8008328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800832c:	2100      	movs	r1, #0
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff fda9 	bl	8007e86 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3334      	adds	r3, #52	; 0x34
 8008338:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800833c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff fd38 	bl	8007db6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3334      	adds	r3, #52	; 0x34
 800834a:	4921      	ldr	r1, [pc, #132]	; (80083d0 <sync_fs+0xd4>)
 800834c:	4618      	mov	r0, r3
 800834e:	f7ff fd4d 	bl	8007dec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3334      	adds	r3, #52	; 0x34
 8008356:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800835a:	491e      	ldr	r1, [pc, #120]	; (80083d4 <sync_fs+0xd8>)
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff fd45 	bl	8007dec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3334      	adds	r3, #52	; 0x34
 8008366:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	4619      	mov	r1, r3
 8008370:	4610      	mov	r0, r2
 8008372:	f7ff fd3b 	bl	8007dec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3334      	adds	r3, #52	; 0x34
 800837a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	4619      	mov	r1, r3
 8008384:	4610      	mov	r0, r2
 8008386:	f7ff fd31 	bl	8007dec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	7858      	ldrb	r0, [r3, #1]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083a2:	2301      	movs	r3, #1
 80083a4:	f7ff fc8e 	bl	8007cc4 <disk_write>
			fs->fsi_flag = 0;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	2200      	movs	r2, #0
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff fca4 	bl	8007d04 <disk_ioctl>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <sync_fs+0xca>
 80083c2:	2301      	movs	r3, #1
 80083c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	41615252 	.word	0x41615252
 80083d4:	61417272 	.word	0x61417272

080083d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	3b02      	subs	r3, #2
 80083e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	3b02      	subs	r3, #2
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d301      	bcc.n	80083f8 <clust2sect+0x20>
 80083f4:	2300      	movs	r3, #0
 80083f6:	e008      	b.n	800840a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	895b      	ldrh	r3, [r3, #10]
 80083fc:	461a      	mov	r2, r3
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	fb03 f202 	mul.w	r2, r3, r2
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	4413      	add	r3, r2
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b086      	sub	sp, #24
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d904      	bls.n	8008436 <get_fat+0x20>
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	429a      	cmp	r2, r3
 8008434:	d302      	bcc.n	800843c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008436:	2301      	movs	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	e08f      	b.n	800855c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800843c:	f04f 33ff 	mov.w	r3, #4294967295
 8008440:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b03      	cmp	r3, #3
 8008448:	d062      	beq.n	8008510 <get_fat+0xfa>
 800844a:	2b03      	cmp	r3, #3
 800844c:	dc7c      	bgt.n	8008548 <get_fat+0x132>
 800844e:	2b01      	cmp	r3, #1
 8008450:	d002      	beq.n	8008458 <get_fat+0x42>
 8008452:	2b02      	cmp	r3, #2
 8008454:	d042      	beq.n	80084dc <get_fat+0xc6>
 8008456:	e077      	b.n	8008548 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	0a5b      	lsrs	r3, r3, #9
 800846e:	4413      	add	r3, r2
 8008470:	4619      	mov	r1, r3
 8008472:	6938      	ldr	r0, [r7, #16]
 8008474:	f7ff ff14 	bl	80082a0 <move_window>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d167      	bne.n	800854e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	60fa      	str	r2, [r7, #12]
 8008484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4413      	add	r3, r2
 800848c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008490:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	0a5b      	lsrs	r3, r3, #9
 800849a:	4413      	add	r3, r2
 800849c:	4619      	mov	r1, r3
 800849e:	6938      	ldr	r0, [r7, #16]
 80084a0:	f7ff fefe 	bl	80082a0 <move_window>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d153      	bne.n	8008552 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	4413      	add	r3, r2
 80084b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	461a      	mov	r2, r3
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <get_fat+0xbc>
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	091b      	lsrs	r3, r3, #4
 80084d0:	e002      	b.n	80084d8 <get_fat+0xc2>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084d8:	617b      	str	r3, [r7, #20]
			break;
 80084da:	e03f      	b.n	800855c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	0a1b      	lsrs	r3, r3, #8
 80084e4:	4413      	add	r3, r2
 80084e6:	4619      	mov	r1, r3
 80084e8:	6938      	ldr	r0, [r7, #16]
 80084ea:	f7ff fed9 	bl	80082a0 <move_window>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d130      	bne.n	8008556 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008502:	4413      	add	r3, r2
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff fc1b 	bl	8007d40 <ld_word>
 800850a:	4603      	mov	r3, r0
 800850c:	617b      	str	r3, [r7, #20]
			break;
 800850e:	e025      	b.n	800855c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	09db      	lsrs	r3, r3, #7
 8008518:	4413      	add	r3, r2
 800851a:	4619      	mov	r1, r3
 800851c:	6938      	ldr	r0, [r7, #16]
 800851e:	f7ff febf 	bl	80082a0 <move_window>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d118      	bne.n	800855a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008536:	4413      	add	r3, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff fc19 	bl	8007d70 <ld_dword>
 800853e:	4603      	mov	r3, r0
 8008540:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008544:	617b      	str	r3, [r7, #20]
			break;
 8008546:	e009      	b.n	800855c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008548:	2301      	movs	r3, #1
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	e006      	b.n	800855c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800854e:	bf00      	nop
 8008550:	e004      	b.n	800855c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008552:	bf00      	nop
 8008554:	e002      	b.n	800855c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008556:	bf00      	nop
 8008558:	e000      	b.n	800855c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800855a:	bf00      	nop
		}
	}

	return val;
 800855c:	697b      	ldr	r3, [r7, #20]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3718      	adds	r7, #24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008566:	b590      	push	{r4, r7, lr}
 8008568:	b089      	sub	sp, #36	; 0x24
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008572:	2302      	movs	r3, #2
 8008574:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2b01      	cmp	r3, #1
 800857a:	f240 80d2 	bls.w	8008722 <put_fat+0x1bc>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	429a      	cmp	r2, r3
 8008586:	f080 80cc 	bcs.w	8008722 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b03      	cmp	r3, #3
 8008590:	f000 8096 	beq.w	80086c0 <put_fat+0x15a>
 8008594:	2b03      	cmp	r3, #3
 8008596:	f300 80cd 	bgt.w	8008734 <put_fat+0x1ce>
 800859a:	2b01      	cmp	r3, #1
 800859c:	d002      	beq.n	80085a4 <put_fat+0x3e>
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d06e      	beq.n	8008680 <put_fat+0x11a>
 80085a2:	e0c7      	b.n	8008734 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	61bb      	str	r3, [r7, #24]
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	085b      	lsrs	r3, r3, #1
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	4413      	add	r3, r2
 80085b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	0a5b      	lsrs	r3, r3, #9
 80085ba:	4413      	add	r3, r2
 80085bc:	4619      	mov	r1, r3
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff fe6e 	bl	80082a0 <move_window>
 80085c4:	4603      	mov	r3, r0
 80085c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085c8:	7ffb      	ldrb	r3, [r7, #31]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 80ab 	bne.w	8008726 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	1c59      	adds	r1, r3, #1
 80085da:	61b9      	str	r1, [r7, #24]
 80085dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e0:	4413      	add	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <put_fat+0xa4>
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	b25b      	sxtb	r3, r3
 80085f4:	f003 030f 	and.w	r3, r3, #15
 80085f8:	b25a      	sxtb	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	011b      	lsls	r3, r3, #4
 8008600:	b25b      	sxtb	r3, r3
 8008602:	4313      	orrs	r3, r2
 8008604:	b25b      	sxtb	r3, r3
 8008606:	b2db      	uxtb	r3, r3
 8008608:	e001      	b.n	800860e <put_fat+0xa8>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2201      	movs	r2, #1
 8008616:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	0a5b      	lsrs	r3, r3, #9
 8008620:	4413      	add	r3, r2
 8008622:	4619      	mov	r1, r3
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7ff fe3b 	bl	80082a0 <move_window>
 800862a:	4603      	mov	r3, r0
 800862c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800862e:	7ffb      	ldrb	r3, [r7, #31]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d17a      	bne.n	800872a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008640:	4413      	add	r3, r2
 8008642:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <put_fat+0xf0>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	091b      	lsrs	r3, r3, #4
 8008652:	b2db      	uxtb	r3, r3
 8008654:	e00e      	b.n	8008674 <put_fat+0x10e>
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	b25b      	sxtb	r3, r3
 800865c:	f023 030f 	bic.w	r3, r3, #15
 8008660:	b25a      	sxtb	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	0a1b      	lsrs	r3, r3, #8
 8008666:	b25b      	sxtb	r3, r3
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	b25b      	sxtb	r3, r3
 800866e:	4313      	orrs	r3, r2
 8008670:	b25b      	sxtb	r3, r3
 8008672:	b2db      	uxtb	r3, r3
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2201      	movs	r2, #1
 800867c:	70da      	strb	r2, [r3, #3]
			break;
 800867e:	e059      	b.n	8008734 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	4413      	add	r3, r2
 800868a:	4619      	mov	r1, r3
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f7ff fe07 	bl	80082a0 <move_window>
 8008692:	4603      	mov	r3, r0
 8008694:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008696:	7ffb      	ldrb	r3, [r7, #31]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d148      	bne.n	800872e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80086aa:	4413      	add	r3, r2
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	b292      	uxth	r2, r2
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff fb7f 	bl	8007db6 <st_word>
			fs->wflag = 1;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	70da      	strb	r2, [r3, #3]
			break;
 80086be:	e039      	b.n	8008734 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	09db      	lsrs	r3, r3, #7
 80086c8:	4413      	add	r3, r2
 80086ca:	4619      	mov	r1, r3
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f7ff fde7 	bl	80082a0 <move_window>
 80086d2:	4603      	mov	r3, r0
 80086d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086d6:	7ffb      	ldrb	r3, [r7, #31]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d12a      	bne.n	8008732 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086f0:	4413      	add	r3, r2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff fb3c 	bl	8007d70 <ld_dword>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80086fe:	4323      	orrs	r3, r4
 8008700:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008710:	4413      	add	r3, r2
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fb69 	bl	8007dec <st_dword>
			fs->wflag = 1;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2201      	movs	r2, #1
 800871e:	70da      	strb	r2, [r3, #3]
			break;
 8008720:	e008      	b.n	8008734 <put_fat+0x1ce>
		}
	}
 8008722:	bf00      	nop
 8008724:	e006      	b.n	8008734 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008726:	bf00      	nop
 8008728:	e004      	b.n	8008734 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800872a:	bf00      	nop
 800872c:	e002      	b.n	8008734 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800872e:	bf00      	nop
 8008730:	e000      	b.n	8008734 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008732:	bf00      	nop
	return res;
 8008734:	7ffb      	ldrb	r3, [r7, #31]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3724      	adds	r7, #36	; 0x24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd90      	pop	{r4, r7, pc}

0800873e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b088      	sub	sp, #32
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d904      	bls.n	8008764 <remove_chain+0x26>
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	429a      	cmp	r2, r3
 8008762:	d301      	bcc.n	8008768 <remove_chain+0x2a>
 8008764:	2302      	movs	r3, #2
 8008766:	e04b      	b.n	8008800 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00c      	beq.n	8008788 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800876e:	f04f 32ff 	mov.w	r2, #4294967295
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	69b8      	ldr	r0, [r7, #24]
 8008776:	f7ff fef6 	bl	8008566 <put_fat>
 800877a:	4603      	mov	r3, r0
 800877c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800877e:	7ffb      	ldrb	r3, [r7, #31]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <remove_chain+0x4a>
 8008784:	7ffb      	ldrb	r3, [r7, #31]
 8008786:	e03b      	b.n	8008800 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f7ff fe43 	bl	8008416 <get_fat>
 8008790:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d031      	beq.n	80087fc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d101      	bne.n	80087a2 <remove_chain+0x64>
 800879e:	2302      	movs	r3, #2
 80087a0:	e02e      	b.n	8008800 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d101      	bne.n	80087ae <remove_chain+0x70>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e028      	b.n	8008800 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80087ae:	2200      	movs	r2, #0
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	69b8      	ldr	r0, [r7, #24]
 80087b4:	f7ff fed7 	bl	8008566 <put_fat>
 80087b8:	4603      	mov	r3, r0
 80087ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80087bc:	7ffb      	ldrb	r3, [r7, #31]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <remove_chain+0x88>
 80087c2:	7ffb      	ldrb	r3, [r7, #31]
 80087c4:	e01c      	b.n	8008800 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	3b02      	subs	r3, #2
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d20b      	bcs.n	80087ec <remove_chain+0xae>
			fs->free_clst++;
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	791b      	ldrb	r3, [r3, #4]
 80087e2:	f043 0301 	orr.w	r3, r3, #1
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d3c6      	bcc.n	8008788 <remove_chain+0x4a>
 80087fa:	e000      	b.n	80087fe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80087fc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3720      	adds	r7, #32
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10d      	bne.n	800883a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <create_chain+0x2c>
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	69ba      	ldr	r2, [r7, #24]
 8008830:	429a      	cmp	r2, r3
 8008832:	d31b      	bcc.n	800886c <create_chain+0x64>
 8008834:	2301      	movs	r3, #1
 8008836:	61bb      	str	r3, [r7, #24]
 8008838:	e018      	b.n	800886c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff fdea 	bl	8008416 <get_fat>
 8008842:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d801      	bhi.n	800884e <create_chain+0x46>
 800884a:	2301      	movs	r3, #1
 800884c:	e070      	b.n	8008930 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008854:	d101      	bne.n	800885a <create_chain+0x52>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	e06a      	b.n	8008930 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	429a      	cmp	r2, r3
 8008862:	d201      	bcs.n	8008868 <create_chain+0x60>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	e063      	b.n	8008930 <create_chain+0x128>
		scl = clst;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	3301      	adds	r3, #1
 8008874:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	429a      	cmp	r2, r3
 800887e:	d307      	bcc.n	8008890 <create_chain+0x88>
				ncl = 2;
 8008880:	2302      	movs	r3, #2
 8008882:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008884:	69fa      	ldr	r2, [r7, #28]
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	429a      	cmp	r2, r3
 800888a:	d901      	bls.n	8008890 <create_chain+0x88>
 800888c:	2300      	movs	r3, #0
 800888e:	e04f      	b.n	8008930 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008890:	69f9      	ldr	r1, [r7, #28]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff fdbf 	bl	8008416 <get_fat>
 8008898:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00e      	beq.n	80088be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d003      	beq.n	80088ae <create_chain+0xa6>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ac:	d101      	bne.n	80088b2 <create_chain+0xaa>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	e03e      	b.n	8008930 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d1da      	bne.n	8008870 <create_chain+0x68>
 80088ba:	2300      	movs	r3, #0
 80088bc:	e038      	b.n	8008930 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80088be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80088c0:	f04f 32ff 	mov.w	r2, #4294967295
 80088c4:	69f9      	ldr	r1, [r7, #28]
 80088c6:	6938      	ldr	r0, [r7, #16]
 80088c8:	f7ff fe4d 	bl	8008566 <put_fat>
 80088cc:	4603      	mov	r3, r0
 80088ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d109      	bne.n	80088ea <create_chain+0xe2>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d006      	beq.n	80088ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80088dc:	69fa      	ldr	r2, [r7, #28]
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6938      	ldr	r0, [r7, #16]
 80088e2:	f7ff fe40 	bl	8008566 <put_fat>
 80088e6:	4603      	mov	r3, r0
 80088e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d116      	bne.n	800891e <create_chain+0x116>
		fs->last_clst = ncl;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	69fa      	ldr	r2, [r7, #28]
 80088f4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	3b02      	subs	r3, #2
 8008900:	429a      	cmp	r2, r3
 8008902:	d804      	bhi.n	800890e <create_chain+0x106>
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	1e5a      	subs	r2, r3, #1
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	791b      	ldrb	r3, [r3, #4]
 8008912:	f043 0301 	orr.w	r3, r3, #1
 8008916:	b2da      	uxtb	r2, r3
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	711a      	strb	r2, [r3, #4]
 800891c:	e007      	b.n	800892e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d102      	bne.n	800892a <create_chain+0x122>
 8008924:	f04f 33ff 	mov.w	r3, #4294967295
 8008928:	e000      	b.n	800892c <create_chain+0x124>
 800892a:	2301      	movs	r3, #1
 800892c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800892e:	69fb      	ldr	r3, [r7, #28]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3720      	adds	r7, #32
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	3304      	adds	r3, #4
 800894e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	0a5b      	lsrs	r3, r3, #9
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	8952      	ldrh	r2, [r2, #10]
 8008958:	fbb3 f3f2 	udiv	r3, r3, r2
 800895c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1d1a      	adds	r2, r3, #4
 8008962:	613a      	str	r2, [r7, #16]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <clmt_clust+0x3a>
 800896e:	2300      	movs	r3, #0
 8008970:	e010      	b.n	8008994 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	429a      	cmp	r2, r3
 8008978:	d307      	bcc.n	800898a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	3304      	adds	r3, #4
 8008986:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008988:	e7e9      	b.n	800895e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800898a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	4413      	add	r3, r2
}
 8008994:	4618      	mov	r0, r3
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089b6:	d204      	bcs.n	80089c2 <dir_sdi+0x22>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	f003 031f 	and.w	r3, r3, #31
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80089c2:	2302      	movs	r3, #2
 80089c4:	e063      	b.n	8008a8e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <dir_sdi+0x46>
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d902      	bls.n	80089e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10c      	bne.n	8008a06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	8912      	ldrh	r2, [r2, #8]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d301      	bcc.n	80089fc <dir_sdi+0x5c>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e048      	b.n	8008a8e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	61da      	str	r2, [r3, #28]
 8008a04:	e029      	b.n	8008a5a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	895b      	ldrh	r3, [r3, #10]
 8008a0a:	025b      	lsls	r3, r3, #9
 8008a0c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a0e:	e019      	b.n	8008a44 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6979      	ldr	r1, [r7, #20]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff fcfe 	bl	8008416 <get_fat>
 8008a1a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d101      	bne.n	8008a28 <dir_sdi+0x88>
 8008a24:	2301      	movs	r3, #1
 8008a26:	e032      	b.n	8008a8e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d904      	bls.n	8008a38 <dir_sdi+0x98>
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d301      	bcc.n	8008a3c <dir_sdi+0x9c>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e028      	b.n	8008a8e <dir_sdi+0xee>
			ofs -= csz;
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d2e1      	bcs.n	8008a10 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008a4c:	6979      	ldr	r1, [r7, #20]
 8008a4e:	6938      	ldr	r0, [r7, #16]
 8008a50:	f7ff fcc2 	bl	80083d8 <clust2sect>
 8008a54:	4602      	mov	r2, r0
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <dir_sdi+0xcc>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e010      	b.n	8008a8e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	69da      	ldr	r2, [r3, #28]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	0a5b      	lsrs	r3, r3, #9
 8008a74:	441a      	add	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a86:	441a      	add	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b086      	sub	sp, #24
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	3320      	adds	r3, #32
 8008aac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <dir_next+0x28>
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008abc:	d301      	bcc.n	8008ac2 <dir_next+0x2c>
 8008abe:	2304      	movs	r3, #4
 8008ac0:	e0aa      	b.n	8008c18 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f040 8098 	bne.w	8008bfe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10b      	bne.n	8008af8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	095b      	lsrs	r3, r3, #5
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	8912      	ldrh	r2, [r2, #8]
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	f0c0 8088 	bcc.w	8008bfe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	61da      	str	r2, [r3, #28]
 8008af4:	2304      	movs	r3, #4
 8008af6:	e08f      	b.n	8008c18 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	0a5b      	lsrs	r3, r3, #9
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	8952      	ldrh	r2, [r2, #10]
 8008b00:	3a01      	subs	r2, #1
 8008b02:	4013      	ands	r3, r2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d17a      	bne.n	8008bfe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4610      	mov	r0, r2
 8008b12:	f7ff fc80 	bl	8008416 <get_fat>
 8008b16:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d801      	bhi.n	8008b22 <dir_next+0x8c>
 8008b1e:	2302      	movs	r3, #2
 8008b20:	e07a      	b.n	8008c18 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b28:	d101      	bne.n	8008b2e <dir_next+0x98>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e074      	b.n	8008c18 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d358      	bcc.n	8008bea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d104      	bne.n	8008b48 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	61da      	str	r2, [r3, #28]
 8008b44:	2304      	movs	r3, #4
 8008b46:	e067      	b.n	8008c18 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4610      	mov	r0, r2
 8008b52:	f7ff fe59 	bl	8008808 <create_chain>
 8008b56:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <dir_next+0xcc>
 8008b5e:	2307      	movs	r3, #7
 8008b60:	e05a      	b.n	8008c18 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <dir_next+0xd6>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e055      	b.n	8008c18 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b72:	d101      	bne.n	8008b78 <dir_next+0xe2>
 8008b74:	2301      	movs	r3, #1
 8008b76:	e04f      	b.n	8008c18 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7ff fb4d 	bl	8008218 <sync_window>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <dir_next+0xf2>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e047      	b.n	8008c18 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3334      	adds	r3, #52	; 0x34
 8008b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7ff f977 	bl	8007e86 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b98:	2300      	movs	r3, #0
 8008b9a:	613b      	str	r3, [r7, #16]
 8008b9c:	6979      	ldr	r1, [r7, #20]
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f7ff fc1a 	bl	80083d8 <clust2sect>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8008baa:	e012      	b.n	8008bd2 <dir_next+0x13c>
						fs->wflag = 1;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7ff fb30 	bl	8008218 <sync_window>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <dir_next+0x12c>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e02a      	b.n	8008c18 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	613b      	str	r3, [r7, #16]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	895b      	ldrh	r3, [r3, #10]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d3e6      	bcc.n	8008bac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	1ad2      	subs	r2, r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008bf0:	6979      	ldr	r1, [r7, #20]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f7ff fbf0 	bl	80083d8 <clust2sect>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c10:	441a      	add	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008c30:	2100      	movs	r1, #0
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7ff feb4 	bl	80089a0 <dir_sdi>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c3c:	7dfb      	ldrb	r3, [r7, #23]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d12b      	bne.n	8008c9a <dir_alloc+0x7a>
		n = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f7ff fb27 	bl	80082a0 <move_window>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d11d      	bne.n	8008c98 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2be5      	cmp	r3, #229	; 0xe5
 8008c64:	d004      	beq.n	8008c70 <dir_alloc+0x50>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d107      	bne.n	8008c80 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	3301      	adds	r3, #1
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d102      	bne.n	8008c84 <dir_alloc+0x64>
 8008c7e:	e00c      	b.n	8008c9a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008c80:	2300      	movs	r3, #0
 8008c82:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008c84:	2101      	movs	r1, #1
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff ff05 	bl	8008a96 <dir_next>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0d7      	beq.n	8008c46 <dir_alloc+0x26>
 8008c96:	e000      	b.n	8008c9a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008c98:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d101      	bne.n	8008ca4 <dir_alloc+0x84>
 8008ca0:	2307      	movs	r3, #7
 8008ca2:	75fb      	strb	r3, [r7, #23]
	return res;
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	331a      	adds	r3, #26
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff f83f 	bl	8007d40 <ld_word>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d109      	bne.n	8008ce2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	3314      	adds	r3, #20
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff f834 	bl	8007d40 <ld_word>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	041b      	lsls	r3, r3, #16
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	331a      	adds	r3, #26
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	b292      	uxth	r2, r2
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff f857 	bl	8007db6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d109      	bne.n	8008d24 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f103 0214 	add.w	r2, r3, #20
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	0c1b      	lsrs	r3, r3, #16
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7ff f849 	bl	8007db6 <st_word>
	}
}
 8008d24:	bf00      	nop
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008d2c:	b590      	push	{r4, r7, lr}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	331a      	adds	r3, #26
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff f800 	bl	8007d40 <ld_word>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <cmp_lfn+0x1e>
 8008d46:	2300      	movs	r3, #0
 8008d48:	e059      	b.n	8008dfe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d52:	1e5a      	subs	r2, r3, #1
 8008d54:	4613      	mov	r3, r2
 8008d56:	005b      	lsls	r3, r3, #1
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008d60:	2301      	movs	r3, #1
 8008d62:	81fb      	strh	r3, [r7, #14]
 8008d64:	2300      	movs	r3, #0
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	e033      	b.n	8008dd2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008d6a:	4a27      	ldr	r2, [pc, #156]	; (8008e08 <cmp_lfn+0xdc>)
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	4413      	add	r3, r2
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	4413      	add	r3, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fe ffe1 	bl	8007d40 <ld_word>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008d82:	89fb      	ldrh	r3, [r7, #14]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d01a      	beq.n	8008dbe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2bfe      	cmp	r3, #254	; 0xfe
 8008d8c:	d812      	bhi.n	8008db4 <cmp_lfn+0x88>
 8008d8e:	89bb      	ldrh	r3, [r7, #12]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f002 f8e9 	bl	800af68 <ff_wtoupper>
 8008d96:	4603      	mov	r3, r0
 8008d98:	461c      	mov	r4, r3
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	617a      	str	r2, [r7, #20]
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f002 f8dd 	bl	800af68 <ff_wtoupper>
 8008dae:	4603      	mov	r3, r0
 8008db0:	429c      	cmp	r4, r3
 8008db2:	d001      	beq.n	8008db8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008db4:	2300      	movs	r3, #0
 8008db6:	e022      	b.n	8008dfe <cmp_lfn+0xd2>
			}
			wc = uc;
 8008db8:	89bb      	ldrh	r3, [r7, #12]
 8008dba:	81fb      	strh	r3, [r7, #14]
 8008dbc:	e006      	b.n	8008dcc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008dbe:	89bb      	ldrh	r3, [r7, #12]
 8008dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d001      	beq.n	8008dcc <cmp_lfn+0xa0>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e018      	b.n	8008dfe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	613b      	str	r3, [r7, #16]
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	2b0c      	cmp	r3, #12
 8008dd6:	d9c8      	bls.n	8008d6a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00b      	beq.n	8008dfc <cmp_lfn+0xd0>
 8008de4:	89fb      	ldrh	r3, [r7, #14]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d008      	beq.n	8008dfc <cmp_lfn+0xd0>
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	4413      	add	r3, r2
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <cmp_lfn+0xd0>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e000      	b.n	8008dfe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008dfc:	2301      	movs	r3, #1
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	371c      	adds	r7, #28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd90      	pop	{r4, r7, pc}
 8008e06:	bf00      	nop
 8008e08:	0800c124 	.word	0x0800c124

08008e0c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4611      	mov	r1, r2
 8008e18:	461a      	mov	r2, r3
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	71fb      	strb	r3, [r7, #7]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	330d      	adds	r3, #13
 8008e26:	79ba      	ldrb	r2, [r7, #6]
 8008e28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	330b      	adds	r3, #11
 8008e2e:	220f      	movs	r2, #15
 8008e30:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	330c      	adds	r3, #12
 8008e36:	2200      	movs	r2, #0
 8008e38:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	331a      	adds	r3, #26
 8008e3e:	2100      	movs	r1, #0
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe ffb8 	bl	8007db6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	1e5a      	subs	r2, r3, #1
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	82fb      	strh	r3, [r7, #22]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008e5e:	8afb      	ldrh	r3, [r7, #22]
 8008e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d007      	beq.n	8008e78 <put_lfn+0x6c>
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	61fa      	str	r2, [r7, #28]
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008e78:	4a17      	ldr	r2, [pc, #92]	; (8008ed8 <put_lfn+0xcc>)
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	4413      	add	r3, r2
 8008e86:	8afa      	ldrh	r2, [r7, #22]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe ff93 	bl	8007db6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008e90:	8afb      	ldrh	r3, [r7, #22]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d102      	bne.n	8008e9c <put_lfn+0x90>
 8008e96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e9a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	61bb      	str	r3, [r7, #24]
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2b0c      	cmp	r3, #12
 8008ea6:	d9da      	bls.n	8008e5e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008ea8:	8afb      	ldrh	r3, [r7, #22]
 8008eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d006      	beq.n	8008ec0 <put_lfn+0xb4>
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	4413      	add	r3, r2
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d103      	bne.n	8008ec8 <put_lfn+0xbc>
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	79fa      	ldrb	r2, [r7, #7]
 8008ecc:	701a      	strb	r2, [r3, #0]
}
 8008ece:	bf00      	nop
 8008ed0:	3720      	adds	r7, #32
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	0800c124 	.word	0x0800c124

08008edc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08c      	sub	sp, #48	; 0x30
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008eea:	220b      	movs	r2, #11
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f7fe ffa8 	bl	8007e44 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b05      	cmp	r3, #5
 8008ef8:	d92b      	bls.n	8008f52 <gen_numname+0x76>
		sr = seq;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008efe:	e022      	b.n	8008f46 <gen_numname+0x6a>
			wc = *lfn++;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	1c9a      	adds	r2, r3, #2
 8008f04:	607a      	str	r2, [r7, #4]
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f0e:	e017      	b.n	8008f40 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	005a      	lsls	r2, r3, #1
 8008f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	4413      	add	r3, r2
 8008f1c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008f1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f20:	085b      	lsrs	r3, r3, #1
 8008f22:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <gen_numname+0x5e>
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008f34:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008f38:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	2b0f      	cmp	r3, #15
 8008f44:	d9e4      	bls.n	8008f10 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1d8      	bne.n	8008f00 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008f52:	2307      	movs	r3, #7
 8008f54:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	3330      	adds	r3, #48	; 0x30
 8008f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008f66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f6a:	2b39      	cmp	r3, #57	; 0x39
 8008f6c:	d904      	bls.n	8008f78 <gen_numname+0x9c>
 8008f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f72:	3307      	adds	r3, #7
 8008f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	1e5a      	subs	r2, r3, #1
 8008f7c:	62ba      	str	r2, [r7, #40]	; 0x28
 8008f7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008f82:	4413      	add	r3, r2
 8008f84:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008f88:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	091b      	lsrs	r3, r3, #4
 8008f90:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1de      	bne.n	8008f56 <gen_numname+0x7a>
	ns[i] = '~';
 8008f98:	f107 0214 	add.w	r2, r7, #20
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	4413      	add	r3, r2
 8008fa0:	227e      	movs	r2, #126	; 0x7e
 8008fa2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa8:	e002      	b.n	8008fb0 <gen_numname+0xd4>
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	3301      	adds	r3, #1
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d205      	bcs.n	8008fc4 <gen_numname+0xe8>
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	4413      	add	r3, r2
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	d1f2      	bne.n	8008faa <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	2b07      	cmp	r3, #7
 8008fc8:	d808      	bhi.n	8008fdc <gen_numname+0x100>
 8008fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	62ba      	str	r2, [r7, #40]	; 0x28
 8008fd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008fda:	e000      	b.n	8008fde <gen_numname+0x102>
 8008fdc:	2120      	movs	r1, #32
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	627a      	str	r2, [r7, #36]	; 0x24
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	460a      	mov	r2, r1
 8008fea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	2b07      	cmp	r3, #7
 8008ff0:	d9e8      	bls.n	8008fc4 <gen_numname+0xe8>
}
 8008ff2:	bf00      	nop
 8008ff4:	bf00      	nop
 8008ff6:	3730      	adds	r7, #48	; 0x30
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009008:	230b      	movs	r3, #11
 800900a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	b2da      	uxtb	r2, r3
 8009010:	0852      	lsrs	r2, r2, #1
 8009012:	01db      	lsls	r3, r3, #7
 8009014:	4313      	orrs	r3, r2
 8009016:	b2da      	uxtb	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	1c59      	adds	r1, r3, #1
 800901c:	6079      	str	r1, [r7, #4]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	4413      	add	r3, r2
 8009022:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	3b01      	subs	r3, #1
 8009028:	60bb      	str	r3, [r7, #8]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1ed      	bne.n	800900c <sum_sfn+0x10>
	return sum;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b086      	sub	sp, #24
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800904c:	2100      	movs	r1, #0
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff fca6 	bl	80089a0 <dir_sdi>
 8009054:	4603      	mov	r3, r0
 8009056:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <dir_find+0x24>
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	e0a9      	b.n	80091b6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009062:	23ff      	movs	r3, #255	; 0xff
 8009064:	753b      	strb	r3, [r7, #20]
 8009066:	7d3b      	ldrb	r3, [r7, #20]
 8009068:	757b      	strb	r3, [r7, #21]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f04f 32ff 	mov.w	r2, #4294967295
 8009070:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	4619      	mov	r1, r3
 8009078:	6938      	ldr	r0, [r7, #16]
 800907a:	f7ff f911 	bl	80082a0 <move_window>
 800907e:	4603      	mov	r3, r0
 8009080:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f040 8090 	bne.w	80091aa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009092:	7dbb      	ldrb	r3, [r7, #22]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d102      	bne.n	800909e <dir_find+0x60>
 8009098:	2304      	movs	r3, #4
 800909a:	75fb      	strb	r3, [r7, #23]
 800909c:	e08a      	b.n	80091b4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	330b      	adds	r3, #11
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090aa:	73fb      	strb	r3, [r7, #15]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7bfa      	ldrb	r2, [r7, #15]
 80090b0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80090b2:	7dbb      	ldrb	r3, [r7, #22]
 80090b4:	2be5      	cmp	r3, #229	; 0xe5
 80090b6:	d007      	beq.n	80090c8 <dir_find+0x8a>
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d009      	beq.n	80090d6 <dir_find+0x98>
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
 80090c4:	2b0f      	cmp	r3, #15
 80090c6:	d006      	beq.n	80090d6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80090c8:	23ff      	movs	r3, #255	; 0xff
 80090ca:	757b      	strb	r3, [r7, #21]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295
 80090d2:	631a      	str	r2, [r3, #48]	; 0x30
 80090d4:	e05e      	b.n	8009194 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	2b0f      	cmp	r3, #15
 80090da:	d136      	bne.n	800914a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80090e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d154      	bne.n	8009194 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80090ea:	7dbb      	ldrb	r3, [r7, #22]
 80090ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00d      	beq.n	8009110 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	7b5b      	ldrb	r3, [r3, #13]
 80090fa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80090fc:	7dbb      	ldrb	r3, [r7, #22]
 80090fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009102:	75bb      	strb	r3, [r7, #22]
 8009104:	7dbb      	ldrb	r3, [r7, #22]
 8009106:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	695a      	ldr	r2, [r3, #20]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009110:	7dba      	ldrb	r2, [r7, #22]
 8009112:	7d7b      	ldrb	r3, [r7, #21]
 8009114:	429a      	cmp	r2, r3
 8009116:	d115      	bne.n	8009144 <dir_find+0x106>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	330d      	adds	r3, #13
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	7d3a      	ldrb	r2, [r7, #20]
 8009122:	429a      	cmp	r2, r3
 8009124:	d10e      	bne.n	8009144 <dir_find+0x106>
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f7ff fdfb 	bl	8008d2c <cmp_lfn>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <dir_find+0x106>
 800913c:	7d7b      	ldrb	r3, [r7, #21]
 800913e:	3b01      	subs	r3, #1
 8009140:	b2db      	uxtb	r3, r3
 8009142:	e000      	b.n	8009146 <dir_find+0x108>
 8009144:	23ff      	movs	r3, #255	; 0xff
 8009146:	757b      	strb	r3, [r7, #21]
 8009148:	e024      	b.n	8009194 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800914a:	7d7b      	ldrb	r3, [r7, #21]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d109      	bne.n	8009164 <dir_find+0x126>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff ff51 	bl	8008ffc <sum_sfn>
 800915a:	4603      	mov	r3, r0
 800915c:	461a      	mov	r2, r3
 800915e:	7d3b      	ldrb	r3, [r7, #20]
 8009160:	4293      	cmp	r3, r2
 8009162:	d024      	beq.n	80091ae <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10a      	bne.n	8009188 <dir_find+0x14a>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a18      	ldr	r0, [r3, #32]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	3324      	adds	r3, #36	; 0x24
 800917a:	220b      	movs	r2, #11
 800917c:	4619      	mov	r1, r3
 800917e:	f7fe fe9d 	bl	8007ebc <mem_cmp>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d014      	beq.n	80091b2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009188:	23ff      	movs	r3, #255	; 0xff
 800918a:	757b      	strb	r3, [r7, #21]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f04f 32ff 	mov.w	r2, #4294967295
 8009192:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009194:	2100      	movs	r1, #0
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7ff fc7d 	bl	8008a96 <dir_next>
 800919c:	4603      	mov	r3, r0
 800919e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f43f af65 	beq.w	8009072 <dir_find+0x34>
 80091a8:	e004      	b.n	80091b4 <dir_find+0x176>
		if (res != FR_OK) break;
 80091aa:	bf00      	nop
 80091ac:	e002      	b.n	80091b4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80091ae:	bf00      	nop
 80091b0:	e000      	b.n	80091b4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80091b2:	bf00      	nop

	return res;
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08c      	sub	sp, #48	; 0x30
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80091d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <dir_register+0x20>
 80091dc:	2306      	movs	r3, #6
 80091de:	e0e0      	b.n	80093a2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80091e0:	2300      	movs	r3, #0
 80091e2:	627b      	str	r3, [r7, #36]	; 0x24
 80091e4:	e002      	b.n	80091ec <dir_register+0x2c>
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	3301      	adds	r3, #1
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	4413      	add	r3, r2
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1f4      	bne.n	80091e6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009202:	f107 030c 	add.w	r3, r7, #12
 8009206:	220c      	movs	r2, #12
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe fe1b 	bl	8007e44 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	d032      	beq.n	800927e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2240      	movs	r2, #64	; 0x40
 800921c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009220:	2301      	movs	r3, #1
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
 8009224:	e016      	b.n	8009254 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	68da      	ldr	r2, [r3, #12]
 8009230:	f107 010c 	add.w	r1, r7, #12
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	f7ff fe51 	bl	8008edc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff feff 	bl	800903e <dir_find>
 8009240:	4603      	mov	r3, r0
 8009242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800924a:	2b00      	cmp	r3, #0
 800924c:	d106      	bne.n	800925c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	3301      	adds	r3, #1
 8009252:	62bb      	str	r3, [r7, #40]	; 0x28
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	2b63      	cmp	r3, #99	; 0x63
 8009258:	d9e5      	bls.n	8009226 <dir_register+0x66>
 800925a:	e000      	b.n	800925e <dir_register+0x9e>
			if (res != FR_OK) break;
 800925c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009260:	2b64      	cmp	r3, #100	; 0x64
 8009262:	d101      	bne.n	8009268 <dir_register+0xa8>
 8009264:	2307      	movs	r3, #7
 8009266:	e09c      	b.n	80093a2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800926c:	2b04      	cmp	r3, #4
 800926e:	d002      	beq.n	8009276 <dir_register+0xb6>
 8009270:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009274:	e095      	b.n	80093a2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009276:	7dfa      	ldrb	r2, [r7, #23]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	f003 0302 	and.w	r3, r3, #2
 8009284:	2b00      	cmp	r3, #0
 8009286:	d007      	beq.n	8009298 <dir_register+0xd8>
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	330c      	adds	r3, #12
 800928c:	4a47      	ldr	r2, [pc, #284]	; (80093ac <dir_register+0x1ec>)
 800928e:	fba2 2303 	umull	r2, r3, r2, r3
 8009292:	089b      	lsrs	r3, r3, #2
 8009294:	3301      	adds	r3, #1
 8009296:	e000      	b.n	800929a <dir_register+0xda>
 8009298:	2301      	movs	r3, #1
 800929a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800929c:	6a39      	ldr	r1, [r7, #32]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff fcbe 	bl	8008c20 <dir_alloc>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80092aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d148      	bne.n	8009344 <dir_register+0x184>
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	623b      	str	r3, [r7, #32]
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d042      	beq.n	8009344 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	695a      	ldr	r2, [r3, #20]
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	015b      	lsls	r3, r3, #5
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff fb68 	bl	80089a0 <dir_sdi>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80092d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d132      	bne.n	8009344 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	3324      	adds	r3, #36	; 0x24
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff fe8a 	bl	8008ffc <sum_sfn>
 80092e8:	4603      	mov	r3, r0
 80092ea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	4619      	mov	r1, r3
 80092f2:	69f8      	ldr	r0, [r7, #28]
 80092f4:	f7fe ffd4 	bl	80082a0 <move_window>
 80092f8:	4603      	mov	r3, r0
 80092fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80092fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009302:	2b00      	cmp	r3, #0
 8009304:	d11d      	bne.n	8009342 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	68d8      	ldr	r0, [r3, #12]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a19      	ldr	r1, [r3, #32]
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	b2da      	uxtb	r2, r3
 8009312:	7efb      	ldrb	r3, [r7, #27]
 8009314:	f7ff fd7a 	bl	8008e0c <put_lfn>
				fs->wflag = 1;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	2201      	movs	r2, #1
 800931c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800931e:	2100      	movs	r1, #0
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff fbb8 	bl	8008a96 <dir_next>
 8009326:	4603      	mov	r3, r0
 8009328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800932c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009330:	2b00      	cmp	r3, #0
 8009332:	d107      	bne.n	8009344 <dir_register+0x184>
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	3b01      	subs	r3, #1
 8009338:	623b      	str	r3, [r7, #32]
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1d5      	bne.n	80092ec <dir_register+0x12c>
 8009340:	e000      	b.n	8009344 <dir_register+0x184>
				if (res != FR_OK) break;
 8009342:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009348:	2b00      	cmp	r3, #0
 800934a:	d128      	bne.n	800939e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	4619      	mov	r1, r3
 8009352:	69f8      	ldr	r0, [r7, #28]
 8009354:	f7fe ffa4 	bl	80082a0 <move_window>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800935e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009362:	2b00      	cmp	r3, #0
 8009364:	d11b      	bne.n	800939e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	2220      	movs	r2, #32
 800936c:	2100      	movs	r1, #0
 800936e:	4618      	mov	r0, r3
 8009370:	f7fe fd89 	bl	8007e86 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a18      	ldr	r0, [r3, #32]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3324      	adds	r3, #36	; 0x24
 800937c:	220b      	movs	r2, #11
 800937e:	4619      	mov	r1, r3
 8009380:	f7fe fd60 	bl	8007e44 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	330c      	adds	r3, #12
 8009390:	f002 0218 	and.w	r2, r2, #24
 8009394:	b2d2      	uxtb	r2, r2
 8009396:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	2201      	movs	r2, #1
 800939c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800939e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3730      	adds	r7, #48	; 0x30
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	4ec4ec4f 	.word	0x4ec4ec4f

080093b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08a      	sub	sp, #40	; 0x28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	613b      	str	r3, [r7, #16]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	2300      	movs	r3, #0
 80093ca:	617b      	str	r3, [r7, #20]
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	61ba      	str	r2, [r7, #24]
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	4413      	add	r3, r2
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80093de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093e0:	2b1f      	cmp	r3, #31
 80093e2:	d940      	bls.n	8009466 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80093e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093e6:	2b2f      	cmp	r3, #47	; 0x2f
 80093e8:	d006      	beq.n	80093f8 <create_name+0x48>
 80093ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093ec:	2b5c      	cmp	r3, #92	; 0x5c
 80093ee:	d110      	bne.n	8009412 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80093f0:	e002      	b.n	80093f8 <create_name+0x48>
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	3301      	adds	r3, #1
 80093f6:	61bb      	str	r3, [r7, #24]
 80093f8:	693a      	ldr	r2, [r7, #16]
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	4413      	add	r3, r2
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2b2f      	cmp	r3, #47	; 0x2f
 8009402:	d0f6      	beq.n	80093f2 <create_name+0x42>
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	4413      	add	r3, r2
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2b5c      	cmp	r3, #92	; 0x5c
 800940e:	d0f0      	beq.n	80093f2 <create_name+0x42>
			break;
 8009410:	e02a      	b.n	8009468 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2bfe      	cmp	r3, #254	; 0xfe
 8009416:	d901      	bls.n	800941c <create_name+0x6c>
 8009418:	2306      	movs	r3, #6
 800941a:	e177      	b.n	800970c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800941c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800941e:	b2db      	uxtb	r3, r3
 8009420:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009424:	2101      	movs	r1, #1
 8009426:	4618      	mov	r0, r3
 8009428:	f001 fd62 	bl	800aef0 <ff_convert>
 800942c:	4603      	mov	r3, r0
 800942e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <create_name+0x8a>
 8009436:	2306      	movs	r3, #6
 8009438:	e168      	b.n	800970c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800943a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800943c:	2b7f      	cmp	r3, #127	; 0x7f
 800943e:	d809      	bhi.n	8009454 <create_name+0xa4>
 8009440:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009442:	4619      	mov	r1, r3
 8009444:	48b3      	ldr	r0, [pc, #716]	; (8009714 <create_name+0x364>)
 8009446:	f7fe fd60 	bl	8007f0a <chk_chr>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <create_name+0xa4>
 8009450:	2306      	movs	r3, #6
 8009452:	e15b      	b.n	800970c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	617a      	str	r2, [r7, #20]
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009462:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009464:	e7b4      	b.n	80093d0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009466:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	441a      	add	r2, r3
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009474:	2b1f      	cmp	r3, #31
 8009476:	d801      	bhi.n	800947c <create_name+0xcc>
 8009478:	2304      	movs	r3, #4
 800947a:	e000      	b.n	800947e <create_name+0xce>
 800947c:	2300      	movs	r3, #0
 800947e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009482:	e011      	b.n	80094a8 <create_name+0xf8>
		w = lfn[di - 1];
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800948a:	3b01      	subs	r3, #1
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4413      	add	r3, r2
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009498:	2b20      	cmp	r3, #32
 800949a:	d002      	beq.n	80094a2 <create_name+0xf2>
 800949c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800949e:	2b2e      	cmp	r3, #46	; 0x2e
 80094a0:	d106      	bne.n	80094b0 <create_name+0x100>
		di--;
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1ea      	bne.n	8009484 <create_name+0xd4>
 80094ae:	e000      	b.n	80094b2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80094b0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4413      	add	r3, r2
 80094ba:	2200      	movs	r2, #0
 80094bc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <create_name+0x118>
 80094c4:	2306      	movs	r3, #6
 80094c6:	e121      	b.n	800970c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3324      	adds	r3, #36	; 0x24
 80094cc:	220b      	movs	r2, #11
 80094ce:	2120      	movs	r1, #32
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe fcd8 	bl	8007e86 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80094d6:	2300      	movs	r3, #0
 80094d8:	61bb      	str	r3, [r7, #24]
 80094da:	e002      	b.n	80094e2 <create_name+0x132>
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	3301      	adds	r3, #1
 80094e0:	61bb      	str	r3, [r7, #24]
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	2b20      	cmp	r3, #32
 80094ee:	d0f5      	beq.n	80094dc <create_name+0x12c>
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	4413      	add	r3, r2
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	2b2e      	cmp	r3, #46	; 0x2e
 80094fc:	d0ee      	beq.n	80094dc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d009      	beq.n	8009518 <create_name+0x168>
 8009504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009508:	f043 0303 	orr.w	r3, r3, #3
 800950c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009510:	e002      	b.n	8009518 <create_name+0x168>
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	3b01      	subs	r3, #1
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d009      	beq.n	8009532 <create_name+0x182>
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009524:	3b01      	subs	r3, #1
 8009526:	005b      	lsls	r3, r3, #1
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4413      	add	r3, r2
 800952c:	881b      	ldrh	r3, [r3, #0]
 800952e:	2b2e      	cmp	r3, #46	; 0x2e
 8009530:	d1ef      	bne.n	8009512 <create_name+0x162>

	i = b = 0; ni = 8;
 8009532:	2300      	movs	r3, #0
 8009534:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009538:	2300      	movs	r3, #0
 800953a:	623b      	str	r3, [r7, #32]
 800953c:	2308      	movs	r3, #8
 800953e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	61ba      	str	r2, [r7, #24]
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	4413      	add	r3, r2
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 8090 	beq.w	8009678 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800955a:	2b20      	cmp	r3, #32
 800955c:	d006      	beq.n	800956c <create_name+0x1bc>
 800955e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009560:	2b2e      	cmp	r3, #46	; 0x2e
 8009562:	d10a      	bne.n	800957a <create_name+0x1ca>
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	429a      	cmp	r2, r3
 800956a:	d006      	beq.n	800957a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800956c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009570:	f043 0303 	orr.w	r3, r3, #3
 8009574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009578:	e07d      	b.n	8009676 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800957a:	6a3a      	ldr	r2, [r7, #32]
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	429a      	cmp	r2, r3
 8009580:	d203      	bcs.n	800958a <create_name+0x1da>
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	429a      	cmp	r2, r3
 8009588:	d123      	bne.n	80095d2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	2b0b      	cmp	r3, #11
 800958e:	d106      	bne.n	800959e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009594:	f043 0303 	orr.w	r3, r3, #3
 8009598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800959c:	e06f      	b.n	800967e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d005      	beq.n	80095b2 <create_name+0x202>
 80095a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095aa:	f043 0303 	orr.w	r3, r3, #3
 80095ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d860      	bhi.n	800967c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	2308      	movs	r3, #8
 80095c0:	623b      	str	r3, [r7, #32]
 80095c2:	230b      	movs	r3, #11
 80095c4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80095c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80095d0:	e051      	b.n	8009676 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80095d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095d4:	2b7f      	cmp	r3, #127	; 0x7f
 80095d6:	d914      	bls.n	8009602 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80095d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095da:	2100      	movs	r1, #0
 80095dc:	4618      	mov	r0, r3
 80095de:	f001 fc87 	bl	800aef0 <ff_convert>
 80095e2:	4603      	mov	r3, r0
 80095e4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80095e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <create_name+0x246>
 80095ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095ee:	3b80      	subs	r3, #128	; 0x80
 80095f0:	4a49      	ldr	r2, [pc, #292]	; (8009718 <create_name+0x368>)
 80095f2:	5cd3      	ldrb	r3, [r2, r3]
 80095f4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80095f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095fa:	f043 0302 	orr.w	r3, r3, #2
 80095fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	d007      	beq.n	8009618 <create_name+0x268>
 8009608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800960a:	4619      	mov	r1, r3
 800960c:	4843      	ldr	r0, [pc, #268]	; (800971c <create_name+0x36c>)
 800960e:	f7fe fc7c 	bl	8007f0a <chk_chr>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d008      	beq.n	800962a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009618:	235f      	movs	r3, #95	; 0x5f
 800961a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800961c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009620:	f043 0303 	orr.w	r3, r3, #3
 8009624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009628:	e01b      	b.n	8009662 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800962a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800962c:	2b40      	cmp	r3, #64	; 0x40
 800962e:	d909      	bls.n	8009644 <create_name+0x294>
 8009630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009632:	2b5a      	cmp	r3, #90	; 0x5a
 8009634:	d806      	bhi.n	8009644 <create_name+0x294>
					b |= 2;
 8009636:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800963a:	f043 0302 	orr.w	r3, r3, #2
 800963e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009642:	e00e      	b.n	8009662 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009646:	2b60      	cmp	r3, #96	; 0x60
 8009648:	d90b      	bls.n	8009662 <create_name+0x2b2>
 800964a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800964c:	2b7a      	cmp	r3, #122	; 0x7a
 800964e:	d808      	bhi.n	8009662 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009650:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009654:	f043 0301 	orr.w	r3, r3, #1
 8009658:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800965c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800965e:	3b20      	subs	r3, #32
 8009660:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	623a      	str	r2, [r7, #32]
 8009668:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800966a:	b2d1      	uxtb	r1, r2
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	4413      	add	r3, r2
 8009670:	460a      	mov	r2, r1
 8009672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009676:	e763      	b.n	8009540 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009678:	bf00      	nop
 800967a:	e000      	b.n	800967e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800967c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009684:	2be5      	cmp	r3, #229	; 0xe5
 8009686:	d103      	bne.n	8009690 <create_name+0x2e0>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2205      	movs	r2, #5
 800968c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	2b08      	cmp	r3, #8
 8009694:	d104      	bne.n	80096a0 <create_name+0x2f0>
 8009696:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80096a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096a4:	f003 030c 	and.w	r3, r3, #12
 80096a8:	2b0c      	cmp	r3, #12
 80096aa:	d005      	beq.n	80096b8 <create_name+0x308>
 80096ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096b0:	f003 0303 	and.w	r3, r3, #3
 80096b4:	2b03      	cmp	r3, #3
 80096b6:	d105      	bne.n	80096c4 <create_name+0x314>
 80096b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096bc:	f043 0302 	orr.w	r3, r3, #2
 80096c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80096c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c8:	f003 0302 	and.w	r3, r3, #2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d117      	bne.n	8009700 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80096d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096d4:	f003 0303 	and.w	r3, r3, #3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d105      	bne.n	80096e8 <create_name+0x338>
 80096dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096e0:	f043 0310 	orr.w	r3, r3, #16
 80096e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80096e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096ec:	f003 030c 	and.w	r3, r3, #12
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d105      	bne.n	8009700 <create_name+0x350>
 80096f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096f8:	f043 0308 	orr.w	r3, r3, #8
 80096fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009706:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800970a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800970c:	4618      	mov	r0, r3
 800970e:	3728      	adds	r7, #40	; 0x28
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	0800c030 	.word	0x0800c030
 8009718:	0800c0a4 	.word	0x0800c0a4
 800971c:	0800c03c 	.word	0x0800c03c

08009720 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009734:	e002      	b.n	800973c <follow_path+0x1c>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	3301      	adds	r3, #1
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b2f      	cmp	r3, #47	; 0x2f
 8009742:	d0f8      	beq.n	8009736 <follow_path+0x16>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b5c      	cmp	r3, #92	; 0x5c
 800974a:	d0f4      	beq.n	8009736 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	2200      	movs	r2, #0
 8009750:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b1f      	cmp	r3, #31
 8009758:	d80a      	bhi.n	8009770 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2280      	movs	r2, #128	; 0x80
 800975e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009762:	2100      	movs	r1, #0
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff f91b 	bl	80089a0 <dir_sdi>
 800976a:	4603      	mov	r3, r0
 800976c:	75fb      	strb	r3, [r7, #23]
 800976e:	e043      	b.n	80097f8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009770:	463b      	mov	r3, r7
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff fe1b 	bl	80093b0 <create_name>
 800977a:	4603      	mov	r3, r0
 800977c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d134      	bne.n	80097ee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fc5a 	bl	800903e <dir_find>
 800978a:	4603      	mov	r3, r0
 800978c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009794:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00a      	beq.n	80097b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d127      	bne.n	80097f2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80097a2:	7afb      	ldrb	r3, [r7, #11]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d122      	bne.n	80097f2 <follow_path+0xd2>
 80097ac:	2305      	movs	r3, #5
 80097ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80097b0:	e01f      	b.n	80097f2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80097b2:	7afb      	ldrb	r3, [r7, #11]
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d11c      	bne.n	80097f6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	799b      	ldrb	r3, [r3, #6]
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d102      	bne.n	80097ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 80097c8:	2305      	movs	r3, #5
 80097ca:	75fb      	strb	r3, [r7, #23]
 80097cc:	e014      	b.n	80097f8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097dc:	4413      	add	r3, r2
 80097de:	4619      	mov	r1, r3
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f7ff fa64 	bl	8008cae <ld_clust>
 80097e6:	4602      	mov	r2, r0
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80097ec:	e7c0      	b.n	8009770 <follow_path+0x50>
			if (res != FR_OK) break;
 80097ee:	bf00      	nop
 80097f0:	e002      	b.n	80097f8 <follow_path+0xd8>
				break;
 80097f2:	bf00      	nop
 80097f4:	e000      	b.n	80097f8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80097f6:	bf00      	nop
			}
		}
	}

	return res;
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009802:	b480      	push	{r7}
 8009804:	b087      	sub	sp, #28
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800980a:	f04f 33ff 	mov.w	r3, #4294967295
 800980e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d031      	beq.n	800987c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	617b      	str	r3, [r7, #20]
 800981e:	e002      	b.n	8009826 <get_ldnumber+0x24>
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	3301      	adds	r3, #1
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b1f      	cmp	r3, #31
 800982c:	d903      	bls.n	8009836 <get_ldnumber+0x34>
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2b3a      	cmp	r3, #58	; 0x3a
 8009834:	d1f4      	bne.n	8009820 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	2b3a      	cmp	r3, #58	; 0x3a
 800983c:	d11c      	bne.n	8009878 <get_ldnumber+0x76>
			tp = *path;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	60fa      	str	r2, [r7, #12]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	3b30      	subs	r3, #48	; 0x30
 800984e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2b09      	cmp	r3, #9
 8009854:	d80e      	bhi.n	8009874 <get_ldnumber+0x72>
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	429a      	cmp	r2, r3
 800985c:	d10a      	bne.n	8009874 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d107      	bne.n	8009874 <get_ldnumber+0x72>
					vol = (int)i;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	3301      	adds	r3, #1
 800986c:	617b      	str	r3, [r7, #20]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	e002      	b.n	800987e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009878:	2300      	movs	r3, #0
 800987a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800987c:	693b      	ldr	r3, [r7, #16]
}
 800987e:	4618      	mov	r0, r3
 8009880:	371c      	adds	r7, #28
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
	...

0800988c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	70da      	strb	r2, [r3, #3]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f04f 32ff 	mov.w	r2, #4294967295
 80098a2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7fe fcfa 	bl	80082a0 <move_window>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <check_fs+0x2a>
 80098b2:	2304      	movs	r3, #4
 80098b4:	e038      	b.n	8009928 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3334      	adds	r3, #52	; 0x34
 80098ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fa3e 	bl	8007d40 <ld_word>
 80098c4:	4603      	mov	r3, r0
 80098c6:	461a      	mov	r2, r3
 80098c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d001      	beq.n	80098d4 <check_fs+0x48>
 80098d0:	2303      	movs	r3, #3
 80098d2:	e029      	b.n	8009928 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098da:	2be9      	cmp	r3, #233	; 0xe9
 80098dc:	d009      	beq.n	80098f2 <check_fs+0x66>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098e4:	2beb      	cmp	r3, #235	; 0xeb
 80098e6:	d11e      	bne.n	8009926 <check_fs+0x9a>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80098ee:	2b90      	cmp	r3, #144	; 0x90
 80098f0:	d119      	bne.n	8009926 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3334      	adds	r3, #52	; 0x34
 80098f6:	3336      	adds	r3, #54	; 0x36
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe fa39 	bl	8007d70 <ld_dword>
 80098fe:	4603      	mov	r3, r0
 8009900:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009904:	4a0a      	ldr	r2, [pc, #40]	; (8009930 <check_fs+0xa4>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d101      	bne.n	800990e <check_fs+0x82>
 800990a:	2300      	movs	r3, #0
 800990c:	e00c      	b.n	8009928 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	3334      	adds	r3, #52	; 0x34
 8009912:	3352      	adds	r3, #82	; 0x52
 8009914:	4618      	mov	r0, r3
 8009916:	f7fe fa2b 	bl	8007d70 <ld_dword>
 800991a:	4603      	mov	r3, r0
 800991c:	4a05      	ldr	r2, [pc, #20]	; (8009934 <check_fs+0xa8>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d101      	bne.n	8009926 <check_fs+0x9a>
 8009922:	2300      	movs	r3, #0
 8009924:	e000      	b.n	8009928 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009926:	2302      	movs	r3, #2
}
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	00544146 	.word	0x00544146
 8009934:	33544146 	.word	0x33544146

08009938 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b096      	sub	sp, #88	; 0x58
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	4613      	mov	r3, r2
 8009944:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f7ff ff58 	bl	8009802 <get_ldnumber>
 8009952:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009956:	2b00      	cmp	r3, #0
 8009958:	da01      	bge.n	800995e <find_volume+0x26>
 800995a:	230b      	movs	r3, #11
 800995c:	e231      	b.n	8009dc2 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800995e:	4aa8      	ldr	r2, [pc, #672]	; (8009c00 <find_volume+0x2c8>)
 8009960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009966:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <find_volume+0x3a>
 800996e:	230c      	movs	r3, #12
 8009970:	e227      	b.n	8009dc2 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009976:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	f023 0301 	bic.w	r3, r3, #1
 800997e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01a      	beq.n	80099be <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	785b      	ldrb	r3, [r3, #1]
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe f939 	bl	8007c04 <disk_status>
 8009992:	4603      	mov	r3, r0
 8009994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10c      	bne.n	80099be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80099a4:	79fb      	ldrb	r3, [r7, #7]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d007      	beq.n	80099ba <find_volume+0x82>
 80099aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099ae:	f003 0304 	and.w	r3, r3, #4
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80099b6:	230a      	movs	r3, #10
 80099b8:	e203      	b.n	8009dc2 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 80099ba:	2300      	movs	r3, #0
 80099bc:	e201      	b.n	8009dc2 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	2200      	movs	r2, #0
 80099c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80099c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	785b      	ldrb	r3, [r3, #1]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fe f931 	bl	8007c38 <disk_initialize>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80099dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80099e8:	2303      	movs	r3, #3
 80099ea:	e1ea      	b.n	8009dc2 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d007      	beq.n	8009a02 <find_volume+0xca>
 80099f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099f6:	f003 0304 	and.w	r3, r3, #4
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80099fe:	230a      	movs	r3, #10
 8009a00:	e1df      	b.n	8009dc2 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009a06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a0a:	f7ff ff3f 	bl	800988c <check_fs>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009a14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d14b      	bne.n	8009ab4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a20:	e01f      	b.n	8009a62 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a2a:	011b      	lsls	r3, r3, #4
 8009a2c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009a30:	4413      	add	r3, r2
 8009a32:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a36:	3304      	adds	r3, #4
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d006      	beq.n	8009a4c <find_volume+0x114>
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a40:	3308      	adds	r3, #8
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe f994 	bl	8007d70 <ld_dword>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	e000      	b.n	8009a4e <find_volume+0x116>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009a56:	440b      	add	r3, r1
 8009a58:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a5e:	3301      	adds	r3, #1
 8009a60:	643b      	str	r3, [r7, #64]	; 0x40
 8009a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d9dc      	bls.n	8009a22 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009a68:	2300      	movs	r3, #0
 8009a6a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <find_volume+0x140>
 8009a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a74:	3b01      	subs	r3, #1
 8009a76:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009a80:	4413      	add	r3, r2
 8009a82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009a86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d005      	beq.n	8009a9a <find_volume+0x162>
 8009a8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a92:	f7ff fefb 	bl	800988c <check_fs>
 8009a96:	4603      	mov	r3, r0
 8009a98:	e000      	b.n	8009a9c <find_volume+0x164>
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d905      	bls.n	8009ab4 <find_volume+0x17c>
 8009aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aaa:	3301      	adds	r3, #1
 8009aac:	643b      	str	r3, [r7, #64]	; 0x40
 8009aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d9e1      	bls.n	8009a78 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009ab4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ab8:	2b04      	cmp	r3, #4
 8009aba:	d101      	bne.n	8009ac0 <find_volume+0x188>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e180      	b.n	8009dc2 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009ac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d901      	bls.n	8009acc <find_volume+0x194>
 8009ac8:	230d      	movs	r3, #13
 8009aca:	e17a      	b.n	8009dc2 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ace:	3334      	adds	r3, #52	; 0x34
 8009ad0:	330b      	adds	r3, #11
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fe f934 	bl	8007d40 <ld_word>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ade:	d001      	beq.n	8009ae4 <find_volume+0x1ac>
 8009ae0:	230d      	movs	r3, #13
 8009ae2:	e16e      	b.n	8009dc2 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae6:	3334      	adds	r3, #52	; 0x34
 8009ae8:	3316      	adds	r3, #22
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe f928 	bl	8007d40 <ld_word>
 8009af0:	4603      	mov	r3, r0
 8009af2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d106      	bne.n	8009b08 <find_volume+0x1d0>
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	3334      	adds	r3, #52	; 0x34
 8009afe:	3324      	adds	r3, #36	; 0x24
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fe f935 	bl	8007d70 <ld_dword>
 8009b06:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b0c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b10:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b16:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	789b      	ldrb	r3, [r3, #2]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d005      	beq.n	8009b2c <find_volume+0x1f4>
 8009b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b22:	789b      	ldrb	r3, [r3, #2]
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d001      	beq.n	8009b2c <find_volume+0x1f4>
 8009b28:	230d      	movs	r3, #13
 8009b2a:	e14a      	b.n	8009dc2 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2e:	789b      	ldrb	r3, [r3, #2]
 8009b30:	461a      	mov	r2, r3
 8009b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b34:	fb02 f303 	mul.w	r3, r2, r3
 8009b38:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b44:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	895b      	ldrh	r3, [r3, #10]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d008      	beq.n	8009b60 <find_volume+0x228>
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b50:	895b      	ldrh	r3, [r3, #10]
 8009b52:	461a      	mov	r2, r3
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	895b      	ldrh	r3, [r3, #10]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <find_volume+0x22c>
 8009b60:	230d      	movs	r3, #13
 8009b62:	e12e      	b.n	8009dc2 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b66:	3334      	adds	r3, #52	; 0x34
 8009b68:	3311      	adds	r3, #17
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe f8e8 	bl	8007d40 <ld_word>
 8009b70:	4603      	mov	r3, r0
 8009b72:	461a      	mov	r2, r3
 8009b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b76:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7a:	891b      	ldrh	r3, [r3, #8]
 8009b7c:	f003 030f 	and.w	r3, r3, #15
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <find_volume+0x252>
 8009b86:	230d      	movs	r3, #13
 8009b88:	e11b      	b.n	8009dc2 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	3334      	adds	r3, #52	; 0x34
 8009b8e:	3313      	adds	r3, #19
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe f8d5 	bl	8007d40 <ld_word>
 8009b96:	4603      	mov	r3, r0
 8009b98:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d106      	bne.n	8009bae <find_volume+0x276>
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	3334      	adds	r3, #52	; 0x34
 8009ba4:	3320      	adds	r3, #32
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fe f8e2 	bl	8007d70 <ld_dword>
 8009bac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	3334      	adds	r3, #52	; 0x34
 8009bb2:	330e      	adds	r3, #14
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fe f8c3 	bl	8007d40 <ld_word>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009bbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <find_volume+0x290>
 8009bc4:	230d      	movs	r3, #13
 8009bc6:	e0fc      	b.n	8009dc2 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009bc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bcc:	4413      	add	r3, r2
 8009bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bd0:	8912      	ldrh	r2, [r2, #8]
 8009bd2:	0912      	lsrs	r2, r2, #4
 8009bd4:	b292      	uxth	r2, r2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d201      	bcs.n	8009be6 <find_volume+0x2ae>
 8009be2:	230d      	movs	r3, #13
 8009be4:	e0ed      	b.n	8009dc2 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bee:	8952      	ldrh	r2, [r2, #10]
 8009bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bf4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d103      	bne.n	8009c04 <find_volume+0x2cc>
 8009bfc:	230d      	movs	r3, #13
 8009bfe:	e0e0      	b.n	8009dc2 <find_volume+0x48a>
 8009c00:	200000b0 	.word	0x200000b0
		fmt = FS_FAT32;
 8009c04:	2303      	movs	r3, #3
 8009c06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d802      	bhi.n	8009c1a <find_volume+0x2e2>
 8009c14:	2302      	movs	r3, #2
 8009c16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d802      	bhi.n	8009c2a <find_volume+0x2f2>
 8009c24:	2301      	movs	r3, #1
 8009c26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	1c9a      	adds	r2, r3, #2
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c30:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c36:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009c38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c3c:	441a      	add	r2, r3
 8009c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c40:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009c42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	441a      	add	r2, r3
 8009c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d11e      	bne.n	8009c92 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c56:	3334      	adds	r3, #52	; 0x34
 8009c58:	332a      	adds	r3, #42	; 0x2a
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe f870 	bl	8007d40 <ld_word>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <find_volume+0x332>
 8009c66:	230d      	movs	r3, #13
 8009c68:	e0ab      	b.n	8009dc2 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6c:	891b      	ldrh	r3, [r3, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <find_volume+0x33e>
 8009c72:	230d      	movs	r3, #13
 8009c74:	e0a5      	b.n	8009dc2 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c78:	3334      	adds	r3, #52	; 0x34
 8009c7a:	332c      	adds	r3, #44	; 0x2c
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe f877 	bl	8007d70 <ld_dword>
 8009c82:	4602      	mov	r2, r0
 8009c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c86:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c90:	e01f      	b.n	8009cd2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c94:	891b      	ldrh	r3, [r3, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <find_volume+0x366>
 8009c9a:	230d      	movs	r3, #13
 8009c9c:	e091      	b.n	8009dc2 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ca4:	441a      	add	r2, r3
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d103      	bne.n	8009cba <find_volume+0x382>
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	e00a      	b.n	8009cd0 <find_volume+0x398>
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	699a      	ldr	r2, [r3, #24]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	4413      	add	r3, r2
 8009cc4:	085a      	lsrs	r2, r3, #1
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009cd0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd4:	69da      	ldr	r2, [r3, #28]
 8009cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009cdc:	0a5b      	lsrs	r3, r3, #9
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d201      	bcs.n	8009ce6 <find_volume+0x3ae>
 8009ce2:	230d      	movs	r3, #13
 8009ce4:	e06d      	b.n	8009dc2 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cec:	615a      	str	r2, [r3, #20]
 8009cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf0:	695a      	ldr	r2, [r3, #20]
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf8:	2280      	movs	r2, #128	; 0x80
 8009cfa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d149      	bne.n	8009d98 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d06:	3334      	adds	r3, #52	; 0x34
 8009d08:	3330      	adds	r3, #48	; 0x30
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe f818 	bl	8007d40 <ld_word>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d140      	bne.n	8009d98 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d18:	3301      	adds	r3, #1
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d1e:	f7fe fabf 	bl	80082a0 <move_window>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d137      	bne.n	8009d98 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d30:	3334      	adds	r3, #52	; 0x34
 8009d32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe f802 	bl	8007d40 <ld_word>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d127      	bne.n	8009d98 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	3334      	adds	r3, #52	; 0x34
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fe f80f 	bl	8007d70 <ld_dword>
 8009d52:	4603      	mov	r3, r0
 8009d54:	4a1d      	ldr	r2, [pc, #116]	; (8009dcc <find_volume+0x494>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d11e      	bne.n	8009d98 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5c:	3334      	adds	r3, #52	; 0x34
 8009d5e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe f804 	bl	8007d70 <ld_dword>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	4a19      	ldr	r2, [pc, #100]	; (8009dd0 <find_volume+0x498>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d113      	bne.n	8009d98 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d72:	3334      	adds	r3, #52	; 0x34
 8009d74:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fd fff9 	bl	8007d70 <ld_dword>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d82:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d86:	3334      	adds	r3, #52	; 0x34
 8009d88:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fd ffef 	bl	8007d70 <ld_dword>
 8009d92:	4602      	mov	r2, r0
 8009d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d96:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009d9e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009da0:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <find_volume+0x49c>)
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <find_volume+0x49c>)
 8009daa:	801a      	strh	r2, [r3, #0]
 8009dac:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <find_volume+0x49c>)
 8009dae:	881a      	ldrh	r2, [r3, #0]
 8009db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	4a08      	ldr	r2, [pc, #32]	; (8009dd8 <find_volume+0x4a0>)
 8009db8:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009dba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009dbc:	f7fe fa08 	bl	80081d0 <clear_lock>
#endif
	return FR_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3758      	adds	r7, #88	; 0x58
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	41615252 	.word	0x41615252
 8009dd0:	61417272 	.word	0x61417272
 8009dd4:	200000b4 	.word	0x200000b4
 8009dd8:	200000d8 	.word	0x200000d8

08009ddc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009de6:	2309      	movs	r3, #9
 8009de8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d01c      	beq.n	8009e2a <validate+0x4e>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d018      	beq.n	8009e2a <validate+0x4e>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d013      	beq.n	8009e2a <validate+0x4e>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	889a      	ldrh	r2, [r3, #4]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	88db      	ldrh	r3, [r3, #6]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d10c      	bne.n	8009e2a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fd fef4 	bl	8007c04 <disk_status>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <validate+0x4e>
			res = FR_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d102      	bne.n	8009e36 <validate+0x5a>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	e000      	b.n	8009e38 <validate+0x5c>
 8009e36:	2300      	movs	r3, #0
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	6013      	str	r3, [r2, #0]
	return res;
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	4613      	mov	r3, r2
 8009e54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009e5a:	f107 0310 	add.w	r3, r7, #16
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff fccf 	bl	8009802 <get_ldnumber>
 8009e64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	da01      	bge.n	8009e70 <f_mount+0x28>
 8009e6c:	230b      	movs	r3, #11
 8009e6e:	e02b      	b.n	8009ec8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009e70:	4a17      	ldr	r2, [pc, #92]	; (8009ed0 <f_mount+0x88>)
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d005      	beq.n	8009e8c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009e80:	69b8      	ldr	r0, [r7, #24]
 8009e82:	f7fe f9a5 	bl	80081d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	490d      	ldr	r1, [pc, #52]	; (8009ed0 <f_mount+0x88>)
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <f_mount+0x66>
 8009ea8:	79fb      	ldrb	r3, [r7, #7]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d001      	beq.n	8009eb2 <f_mount+0x6a>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e00a      	b.n	8009ec8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009eb2:	f107 010c 	add.w	r1, r7, #12
 8009eb6:	f107 0308 	add.w	r3, r7, #8
 8009eba:	2200      	movs	r2, #0
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7ff fd3b 	bl	8009938 <find_volume>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3720      	adds	r7, #32
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	200000b0 	.word	0x200000b0

08009ed4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b09a      	sub	sp, #104	; 0x68
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <f_open+0x18>
 8009ee8:	2309      	movs	r3, #9
 8009eea:	e1ad      	b.n	800a248 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ef2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009ef4:	79fa      	ldrb	r2, [r7, #7]
 8009ef6:	f107 0110 	add.w	r1, r7, #16
 8009efa:	f107 0308 	add.w	r3, r7, #8
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7ff fd1a 	bl	8009938 <find_volume>
 8009f04:	4603      	mov	r3, r0
 8009f06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f040 8191 	bne.w	800a236 <f_open+0x362>
		dj.obj.fs = fs;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	f107 0314 	add.w	r3, r7, #20
 8009f1e:	4611      	mov	r1, r2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff fbfd 	bl	8009720 <follow_path>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009f2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d11a      	bne.n	8009f6a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009f34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f38:	b25b      	sxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	da03      	bge.n	8009f46 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009f3e:	2306      	movs	r3, #6
 8009f40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009f44:	e011      	b.n	8009f6a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009f46:	79fb      	ldrb	r3, [r7, #7]
 8009f48:	f023 0301 	bic.w	r3, r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	bf14      	ite	ne
 8009f50:	2301      	movne	r3, #1
 8009f52:	2300      	moveq	r3, #0
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	461a      	mov	r2, r3
 8009f58:	f107 0314 	add.w	r3, r7, #20
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fd ffee 	bl	8007f40 <chk_lock>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	f003 031c 	and.w	r3, r3, #28
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d07f      	beq.n	800a074 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009f74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d017      	beq.n	8009fac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009f7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	d10e      	bne.n	8009fa2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009f84:	f7fe f838 	bl	8007ff8 <enq_lock>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d006      	beq.n	8009f9c <f_open+0xc8>
 8009f8e:	f107 0314 	add.w	r3, r7, #20
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7ff f914 	bl	80091c0 <dir_register>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	e000      	b.n	8009f9e <f_open+0xca>
 8009f9c:	2312      	movs	r3, #18
 8009f9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	f043 0308 	orr.w	r3, r3, #8
 8009fa8:	71fb      	strb	r3, [r7, #7]
 8009faa:	e010      	b.n	8009fce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009fac:	7ebb      	ldrb	r3, [r7, #26]
 8009fae:	f003 0311 	and.w	r3, r3, #17
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <f_open+0xea>
					res = FR_DENIED;
 8009fb6:	2307      	movs	r3, #7
 8009fb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009fbc:	e007      	b.n	8009fce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009fbe:	79fb      	ldrb	r3, [r7, #7]
 8009fc0:	f003 0304 	and.w	r3, r3, #4
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <f_open+0xfa>
 8009fc8:	2308      	movs	r3, #8
 8009fca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009fce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d168      	bne.n	800a0a8 <f_open+0x1d4>
 8009fd6:	79fb      	ldrb	r3, [r7, #7]
 8009fd8:	f003 0308 	and.w	r3, r3, #8
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d063      	beq.n	800a0a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009fe0:	f7fa fe14 	bl	8004c0c <get_fattime>
 8009fe4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe8:	330e      	adds	r3, #14
 8009fea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fd fefd 	bl	8007dec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff4:	3316      	adds	r3, #22
 8009ff6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fd fef7 	bl	8007dec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a000:	330b      	adds	r3, #11
 800a002:	2220      	movs	r2, #32
 800a004:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a00a:	4611      	mov	r1, r2
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe fe4e 	bl	8008cae <ld_clust>
 800a012:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a018:	2200      	movs	r2, #0
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fe fe66 	bl	8008cec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a022:	331c      	adds	r3, #28
 800a024:	2100      	movs	r1, #0
 800a026:	4618      	mov	r0, r3
 800a028:	f7fd fee0 	bl	8007dec <st_dword>
					fs->wflag = 1;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	2201      	movs	r2, #1
 800a030:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a034:	2b00      	cmp	r3, #0
 800a036:	d037      	beq.n	800a0a8 <f_open+0x1d4>
						dw = fs->winsect;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a03e:	f107 0314 	add.w	r3, r7, #20
 800a042:	2200      	movs	r2, #0
 800a044:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a046:	4618      	mov	r0, r3
 800a048:	f7fe fb79 	bl	800873e <remove_chain>
 800a04c:	4603      	mov	r3, r0
 800a04e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a052:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a056:	2b00      	cmp	r3, #0
 800a058:	d126      	bne.n	800a0a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe f91e 	bl	80082a0 <move_window>
 800a064:	4603      	mov	r3, r0
 800a066:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a06e:	3a01      	subs	r2, #1
 800a070:	611a      	str	r2, [r3, #16]
 800a072:	e019      	b.n	800a0a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a074:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d115      	bne.n	800a0a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a07c:	7ebb      	ldrb	r3, [r7, #26]
 800a07e:	f003 0310 	and.w	r3, r3, #16
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a086:	2304      	movs	r3, #4
 800a088:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a08c:	e00c      	b.n	800a0a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	2b00      	cmp	r3, #0
 800a096:	d007      	beq.n	800a0a8 <f_open+0x1d4>
 800a098:	7ebb      	ldrb	r3, [r7, #26]
 800a09a:	f003 0301 	and.w	r3, r3, #1
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <f_open+0x1d4>
						res = FR_DENIED;
 800a0a2:	2307      	movs	r3, #7
 800a0a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a0a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d128      	bne.n	800a102 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a0b0:	79fb      	ldrb	r3, [r7, #7]
 800a0b2:	f003 0308 	and.w	r3, r3, #8
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a0ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a0d0:	79fb      	ldrb	r3, [r7, #7]
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	bf14      	ite	ne
 800a0da:	2301      	movne	r3, #1
 800a0dc:	2300      	moveq	r3, #0
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	f107 0314 	add.w	r3, r7, #20
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fd ffa7 	bl	800803c <inc_lock>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d102      	bne.n	800a102 <f_open+0x22e>
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a102:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a106:	2b00      	cmp	r3, #0
 800a108:	f040 8095 	bne.w	800a236 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a110:	4611      	mov	r1, r2
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fdcb 	bl	8008cae <ld_clust>
 800a118:	4602      	mov	r2, r0
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a120:	331c      	adds	r3, #28
 800a122:	4618      	mov	r0, r3
 800a124:	f7fd fe24 	bl	8007d70 <ld_dword>
 800a128:	4602      	mov	r2, r0
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	88da      	ldrh	r2, [r3, #6]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	79fa      	ldrb	r2, [r7, #7]
 800a146:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3330      	adds	r3, #48	; 0x30
 800a15e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a162:	2100      	movs	r1, #0
 800a164:	4618      	mov	r0, r3
 800a166:	f7fd fe8e 	bl	8007e86 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	f003 0320 	and.w	r3, r3, #32
 800a170:	2b00      	cmp	r3, #0
 800a172:	d060      	beq.n	800a236 <f_open+0x362>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d05c      	beq.n	800a236 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	68da      	ldr	r2, [r3, #12]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	895b      	ldrh	r3, [r3, #10]
 800a188:	025b      	lsls	r3, r3, #9
 800a18a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a198:	e016      	b.n	800a1c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe f939 	bl	8008416 <get_fat>
 800a1a4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a1a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d802      	bhi.n	800a1b2 <f_open+0x2de>
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a1b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b8:	d102      	bne.n	800a1c0 <f_open+0x2ec>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a1c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <f_open+0x304>
 800a1d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d8e0      	bhi.n	800a19a <f_open+0x2c6>
				}
				fp->clust = clst;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a1de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d127      	bne.n	800a236 <f_open+0x362>
 800a1e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d022      	beq.n	800a236 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fe f8ef 	bl	80083d8 <clust2sect>
 800a1fa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d103      	bne.n	800a20a <f_open+0x336>
						res = FR_INT_ERR;
 800a202:	2302      	movs	r3, #2
 800a204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a208:	e015      	b.n	800a236 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a20a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a20c:	0a5a      	lsrs	r2, r3, #9
 800a20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a210:	441a      	add	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	7858      	ldrb	r0, [r3, #1]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6a1a      	ldr	r2, [r3, #32]
 800a224:	2301      	movs	r3, #1
 800a226:	f7fd fd2d 	bl	8007c84 <disk_read>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <f_open+0x362>
 800a230:	2301      	movs	r3, #1
 800a232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a236:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d002      	beq.n	800a244 <f_open+0x370>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a244:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3768      	adds	r7, #104	; 0x68
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08e      	sub	sp, #56	; 0x38
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f107 0214 	add.w	r2, r7, #20
 800a26e:	4611      	mov	r1, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff fdb3 	bl	8009ddc <validate>
 800a276:	4603      	mov	r3, r0
 800a278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a27c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a280:	2b00      	cmp	r3, #0
 800a282:	d107      	bne.n	800a294 <f_read+0x44>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	7d5b      	ldrb	r3, [r3, #21]
 800a288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a28c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <f_read+0x4a>
 800a294:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a298:	e115      	b.n	800a4c6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	7d1b      	ldrb	r3, [r3, #20]
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <f_read+0x5a>
 800a2a6:	2307      	movs	r3, #7
 800a2a8:	e10d      	b.n	800a4c6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	68da      	ldr	r2, [r3, #12]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	f240 80fe 	bls.w	800a4bc <f_read+0x26c>
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a2c4:	e0fa      	b.n	800a4bc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f040 80c6 	bne.w	800a460 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	0a5b      	lsrs	r3, r3, #9
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	8952      	ldrh	r2, [r2, #10]
 800a2de:	3a01      	subs	r2, #1
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d12f      	bne.n	800a34a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d103      	bne.n	800a2fa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	633b      	str	r3, [r7, #48]	; 0x30
 800a2f8:	e013      	b.n	800a322 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d007      	beq.n	800a312 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	4619      	mov	r1, r3
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7fe fb15 	bl	8008938 <clmt_clust>
 800a30e:	6338      	str	r0, [r7, #48]	; 0x30
 800a310:	e007      	b.n	800a322 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	4619      	mov	r1, r3
 800a31a:	4610      	mov	r0, r2
 800a31c:	f7fe f87b 	bl	8008416 <get_fat>
 800a320:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	2b01      	cmp	r3, #1
 800a326:	d804      	bhi.n	800a332 <f_read+0xe2>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2202      	movs	r2, #2
 800a32c:	755a      	strb	r2, [r3, #21]
 800a32e:	2302      	movs	r3, #2
 800a330:	e0c9      	b.n	800a4c6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a338:	d104      	bne.n	800a344 <f_read+0xf4>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2201      	movs	r2, #1
 800a33e:	755a      	strb	r2, [r3, #21]
 800a340:	2301      	movs	r3, #1
 800a342:	e0c0      	b.n	800a4c6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a348:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	4619      	mov	r1, r3
 800a352:	4610      	mov	r0, r2
 800a354:	f7fe f840 	bl	80083d8 <clust2sect>
 800a358:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d104      	bne.n	800a36a <f_read+0x11a>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2202      	movs	r2, #2
 800a364:	755a      	strb	r2, [r3, #21]
 800a366:	2302      	movs	r3, #2
 800a368:	e0ad      	b.n	800a4c6 <f_read+0x276>
			sect += csect;
 800a36a:	69ba      	ldr	r2, [r7, #24]
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	4413      	add	r3, r2
 800a370:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	0a5b      	lsrs	r3, r3, #9
 800a376:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d039      	beq.n	800a3f2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	4413      	add	r3, r2
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	8952      	ldrh	r2, [r2, #10]
 800a388:	4293      	cmp	r3, r2
 800a38a:	d905      	bls.n	800a398 <f_read+0x148>
					cc = fs->csize - csect;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	895b      	ldrh	r3, [r3, #10]
 800a390:	461a      	mov	r2, r3
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	7858      	ldrb	r0, [r3, #1]
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	69ba      	ldr	r2, [r7, #24]
 800a3a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3a2:	f7fd fc6f 	bl	8007c84 <disk_read>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d004      	beq.n	800a3b6 <f_read+0x166>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	755a      	strb	r2, [r3, #21]
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e087      	b.n	800a4c6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	7d1b      	ldrb	r3, [r3, #20]
 800a3ba:	b25b      	sxtb	r3, r3
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	da14      	bge.n	800a3ea <f_read+0x19a>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6a1a      	ldr	r2, [r3, #32]
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d90d      	bls.n	800a3ea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a1a      	ldr	r2, [r3, #32]
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	025b      	lsls	r3, r3, #9
 800a3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3da:	18d0      	adds	r0, r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3330      	adds	r3, #48	; 0x30
 800a3e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	f7fd fd2d 	bl	8007e44 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	025b      	lsls	r3, r3, #9
 800a3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a3f0:	e050      	b.n	800a494 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	69ba      	ldr	r2, [r7, #24]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d02e      	beq.n	800a45a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	7d1b      	ldrb	r3, [r3, #20]
 800a400:	b25b      	sxtb	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	da18      	bge.n	800a438 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	7858      	ldrb	r0, [r3, #1]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6a1a      	ldr	r2, [r3, #32]
 800a414:	2301      	movs	r3, #1
 800a416:	f7fd fc55 	bl	8007cc4 <disk_write>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d004      	beq.n	800a42a <f_read+0x1da>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2201      	movs	r2, #1
 800a424:	755a      	strb	r2, [r3, #21]
 800a426:	2301      	movs	r3, #1
 800a428:	e04d      	b.n	800a4c6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	7d1b      	ldrb	r3, [r3, #20]
 800a42e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a432:	b2da      	uxtb	r2, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	7858      	ldrb	r0, [r3, #1]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a442:	2301      	movs	r3, #1
 800a444:	69ba      	ldr	r2, [r7, #24]
 800a446:	f7fd fc1d 	bl	8007c84 <disk_read>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d004      	beq.n	800a45a <f_read+0x20a>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2201      	movs	r2, #1
 800a454:	755a      	strb	r2, [r3, #21]
 800a456:	2301      	movs	r3, #1
 800a458:	e035      	b.n	800a4c6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a468:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a46c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a46e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	429a      	cmp	r2, r3
 800a474:	d901      	bls.n	800a47a <f_read+0x22a>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a488:	4413      	add	r3, r2
 800a48a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a48c:	4619      	mov	r1, r3
 800a48e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a490:	f7fd fcd8 	bl	8007e44 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	4413      	add	r3, r2
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	699a      	ldr	r2, [r3, #24]
 800a4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a2:	441a      	add	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	619a      	str	r2, [r3, #24]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ae:	441a      	add	r2, r3
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f47f af01 	bne.w	800a2c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3738      	adds	r7, #56	; 0x38
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b08c      	sub	sp, #48	; 0x30
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	607a      	str	r2, [r7, #4]
 800a4da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f107 0210 	add.w	r2, r7, #16
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff fc74 	bl	8009ddc <validate>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a4fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d107      	bne.n	800a512 <f_write+0x44>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	7d5b      	ldrb	r3, [r3, #21]
 800a506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a50a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <f_write+0x4a>
 800a512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a516:	e14b      	b.n	800a7b0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	7d1b      	ldrb	r3, [r3, #20]
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <f_write+0x5a>
 800a524:	2307      	movs	r3, #7
 800a526:	e143      	b.n	800a7b0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	699a      	ldr	r2, [r3, #24]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	441a      	add	r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	429a      	cmp	r2, r3
 800a536:	f080 812d 	bcs.w	800a794 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	43db      	mvns	r3, r3
 800a540:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a542:	e127      	b.n	800a794 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f040 80e3 	bne.w	800a718 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	0a5b      	lsrs	r3, r3, #9
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	8952      	ldrh	r2, [r2, #10]
 800a55c:	3a01      	subs	r2, #1
 800a55e:	4013      	ands	r3, r2
 800a560:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d143      	bne.n	800a5f0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10c      	bne.n	800a58a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d11a      	bne.n	800a5b2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2100      	movs	r1, #0
 800a580:	4618      	mov	r0, r3
 800a582:	f7fe f941 	bl	8008808 <create_chain>
 800a586:	62b8      	str	r0, [r7, #40]	; 0x28
 800a588:	e013      	b.n	800a5b2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d007      	beq.n	800a5a2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	4619      	mov	r1, r3
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f7fe f9cd 	bl	8008938 <clmt_clust>
 800a59e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a5a0:	e007      	b.n	800a5b2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	f7fe f92c 	bl	8008808 <create_chain>
 800a5b0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 80f2 	beq.w	800a79e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d104      	bne.n	800a5ca <f_write+0xfc>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	755a      	strb	r2, [r3, #21]
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e0f2      	b.n	800a7b0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d0:	d104      	bne.n	800a5dc <f_write+0x10e>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	755a      	strb	r2, [r3, #21]
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e0e9      	b.n	800a7b0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <f_write+0x122>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	7d1b      	ldrb	r3, [r3, #20]
 800a5f4:	b25b      	sxtb	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	da18      	bge.n	800a62c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	7858      	ldrb	r0, [r3, #1]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6a1a      	ldr	r2, [r3, #32]
 800a608:	2301      	movs	r3, #1
 800a60a:	f7fd fb5b 	bl	8007cc4 <disk_write>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d004      	beq.n	800a61e <f_write+0x150>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2201      	movs	r2, #1
 800a618:	755a      	strb	r2, [r3, #21]
 800a61a:	2301      	movs	r3, #1
 800a61c:	e0c8      	b.n	800a7b0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	7d1b      	ldrb	r3, [r3, #20]
 800a622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a626:	b2da      	uxtb	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	4619      	mov	r1, r3
 800a634:	4610      	mov	r0, r2
 800a636:	f7fd fecf 	bl	80083d8 <clust2sect>
 800a63a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <f_write+0x17e>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2202      	movs	r2, #2
 800a646:	755a      	strb	r2, [r3, #21]
 800a648:	2302      	movs	r3, #2
 800a64a:	e0b1      	b.n	800a7b0 <f_write+0x2e2>
			sect += csect;
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	4413      	add	r3, r2
 800a652:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	0a5b      	lsrs	r3, r3, #9
 800a658:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d03c      	beq.n	800a6da <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	4413      	add	r3, r2
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	8952      	ldrh	r2, [r2, #10]
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d905      	bls.n	800a67a <f_write+0x1ac>
					cc = fs->csize - csect;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	895b      	ldrh	r3, [r3, #10]
 800a672:	461a      	mov	r2, r3
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	7858      	ldrb	r0, [r3, #1]
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	69f9      	ldr	r1, [r7, #28]
 800a684:	f7fd fb1e 	bl	8007cc4 <disk_write>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d004      	beq.n	800a698 <f_write+0x1ca>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2201      	movs	r2, #1
 800a692:	755a      	strb	r2, [r3, #21]
 800a694:	2301      	movs	r3, #1
 800a696:	e08b      	b.n	800a7b0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6a1a      	ldr	r2, [r3, #32]
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	6a3a      	ldr	r2, [r7, #32]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d915      	bls.n	800a6d2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6a1a      	ldr	r2, [r3, #32]
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	025b      	lsls	r3, r3, #9
 800a6b6:	69fa      	ldr	r2, [r7, #28]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6be:	4619      	mov	r1, r3
 800a6c0:	f7fd fbc0 	bl	8007e44 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	7d1b      	ldrb	r3, [r3, #20]
 800a6c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	025b      	lsls	r3, r3, #9
 800a6d6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a6d8:	e03f      	b.n	800a75a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d016      	beq.n	800a712 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	699a      	ldr	r2, [r3, #24]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d210      	bcs.n	800a712 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	7858      	ldrb	r0, [r3, #1]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	f7fd fac1 	bl	8007c84 <disk_read>
 800a702:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a704:	2b00      	cmp	r3, #0
 800a706:	d004      	beq.n	800a712 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2201      	movs	r2, #1
 800a70c:	755a      	strb	r2, [r3, #21]
 800a70e:	2301      	movs	r3, #1
 800a710:	e04e      	b.n	800a7b0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a720:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d901      	bls.n	800a732 <f_write+0x264>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a740:	4413      	add	r3, r2
 800a742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a744:	69f9      	ldr	r1, [r7, #28]
 800a746:	4618      	mov	r0, r3
 800a748:	f7fd fb7c 	bl	8007e44 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	7d1b      	ldrb	r3, [r3, #20]
 800a750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a754:	b2da      	uxtb	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	4413      	add	r3, r2
 800a760:	61fb      	str	r3, [r7, #28]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	699a      	ldr	r2, [r3, #24]
 800a766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a768:	441a      	add	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	619a      	str	r2, [r3, #24]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	68da      	ldr	r2, [r3, #12]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	429a      	cmp	r2, r3
 800a778:	bf38      	it	cc
 800a77a:	461a      	movcc	r2, r3
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	60da      	str	r2, [r3, #12]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	441a      	add	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f47f aed4 	bne.w	800a544 <f_write+0x76>
 800a79c:	e000      	b.n	800a7a0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a79e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	7d1b      	ldrb	r3, [r3, #20]
 800a7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3730      	adds	r7, #48	; 0x30
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f107 0208 	add.w	r2, r7, #8
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7ff fb07 	bl	8009ddc <validate>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d168      	bne.n	800a8aa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	7d1b      	ldrb	r3, [r3, #20]
 800a7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d062      	beq.n	800a8aa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	7d1b      	ldrb	r3, [r3, #20]
 800a7e8:	b25b      	sxtb	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	da15      	bge.n	800a81a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	7858      	ldrb	r0, [r3, #1]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a1a      	ldr	r2, [r3, #32]
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f7fd fa61 	bl	8007cc4 <disk_write>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <f_sync+0x54>
 800a808:	2301      	movs	r3, #1
 800a80a:	e04f      	b.n	800a8ac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	7d1b      	ldrb	r3, [r3, #20]
 800a810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a814:	b2da      	uxtb	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a81a:	f7fa f9f7 	bl	8004c0c <get_fattime>
 800a81e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	f7fd fd39 	bl	80082a0 <move_window>
 800a82e:	4603      	mov	r3, r0
 800a830:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a832:	7dfb      	ldrb	r3, [r7, #23]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d138      	bne.n	800a8aa <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a83c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	330b      	adds	r3, #11
 800a842:	781a      	ldrb	r2, [r3, #0]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	330b      	adds	r3, #11
 800a848:	f042 0220 	orr.w	r2, r2, #32
 800a84c:	b2d2      	uxtb	r2, r2
 800a84e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6818      	ldr	r0, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	461a      	mov	r2, r3
 800a85a:	68f9      	ldr	r1, [r7, #12]
 800a85c:	f7fe fa46 	bl	8008cec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f103 021c 	add.w	r2, r3, #28
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	4619      	mov	r1, r3
 800a86c:	4610      	mov	r0, r2
 800a86e:	f7fd fabd 	bl	8007dec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3316      	adds	r3, #22
 800a876:	6939      	ldr	r1, [r7, #16]
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fd fab7 	bl	8007dec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3312      	adds	r3, #18
 800a882:	2100      	movs	r1, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f7fd fa96 	bl	8007db6 <st_word>
					fs->wflag = 1;
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2201      	movs	r2, #1
 800a88e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	4618      	mov	r0, r3
 800a894:	f7fd fd32 	bl	80082fc <sync_fs>
 800a898:	4603      	mov	r3, r0
 800a89a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	7d1b      	ldrb	r3, [r3, #20]
 800a8a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f7ff ff7b 	bl	800a7b8 <f_sync>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d118      	bne.n	800a8fe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f107 0208 	add.w	r2, r7, #8
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff fa81 	bl	8009ddc <validate>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10c      	bne.n	800a8fe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fd fc35 	bl	8008158 <dec_lock>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a914:	78fb      	ldrb	r3, [r7, #3]
 800a916:	2b0a      	cmp	r3, #10
 800a918:	d103      	bne.n	800a922 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a91a:	210d      	movs	r1, #13
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff fff3 	bl	800a908 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	db25      	blt.n	800a97a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	60fa      	str	r2, [r7, #12]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	4413      	add	r3, r2
 800a938:	78fa      	ldrb	r2, [r7, #3]
 800a93a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b3c      	cmp	r3, #60	; 0x3c
 800a940:	dd12      	ble.n	800a968 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6818      	ldr	r0, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f103 010c 	add.w	r1, r3, #12
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	f107 0308 	add.w	r3, r7, #8
 800a952:	f7ff fdbc 	bl	800a4ce <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d101      	bne.n	800a962 <putc_bfd+0x5a>
 800a95e:	2300      	movs	r3, #0
 800a960:	e001      	b.n	800a966 <putc_bfd+0x5e>
 800a962:	f04f 33ff 	mov.w	r3, #4294967295
 800a966:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	1c5a      	adds	r2, r3, #1
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	609a      	str	r2, [r3, #8]
 800a978:	e000      	b.n	800a97c <putc_bfd+0x74>
	if (i < 0) return;
 800a97a:	bf00      	nop
}
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	db16      	blt.n	800a9c0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6818      	ldr	r0, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f103 010c 	add.w	r1, r3, #12
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	f107 030c 	add.w	r3, r7, #12
 800a9a6:	f7ff fd92 	bl	800a4ce <f_write>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d107      	bne.n	800a9c0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d102      	bne.n	800a9c0 <putc_flush+0x3e>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	e001      	b.n	800a9c4 <putc_flush+0x42>
	return EOF;
 800a9c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	605a      	str	r2, [r3, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	609a      	str	r2, [r3, #8]
}
 800a9ea:	bf00      	nop
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
	...

0800a9f8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a9f8:	b40e      	push	{r1, r2, r3}
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b0a7      	sub	sp, #156	; 0x9c
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800aa02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff ffdf 	bl	800a9cc <putc_init>

	va_start(arp, fmt);
 800aa0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800aa12:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800aa14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800aa24:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 81f4 	beq.w	800ae16 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800aa2e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa32:	2b25      	cmp	r3, #37	; 0x25
 800aa34:	d008      	beq.n	800aa48 <f_printf+0x50>
			putc_bfd(&pb, c);
 800aa36:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800aa3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa3e:	4611      	mov	r1, r2
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff ff61 	bl	800a908 <putc_bfd>
			continue;
 800aa46:	e1e5      	b.n	800ae14 <f_printf+0x41c>
		}
		w = f = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800aa54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800aa64:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa68:	2b30      	cmp	r3, #48	; 0x30
 800aa6a:	d10b      	bne.n	800aa84 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aa72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800aa82:	e024      	b.n	800aace <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800aa84:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa88:	2b2d      	cmp	r3, #45	; 0x2d
 800aa8a:	d120      	bne.n	800aace <f_printf+0xd6>
				f = 2; c = *fmt++;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aa92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa96:	1c5a      	adds	r2, r3, #1
 800aa98:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800aaa2:	e014      	b.n	800aace <f_printf+0xd6>
			w = w * 10 + c - '0';
 800aaa4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	005b      	lsls	r3, r3, #1
 800aab0:	461a      	mov	r2, r3
 800aab2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aab6:	4413      	add	r3, r2
 800aab8:	3b30      	subs	r3, #48	; 0x30
 800aaba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800aabe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aac2:	1c5a      	adds	r2, r3, #1
 800aac4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800aace:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aad2:	2b2f      	cmp	r3, #47	; 0x2f
 800aad4:	d903      	bls.n	800aade <f_printf+0xe6>
 800aad6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aada:	2b39      	cmp	r3, #57	; 0x39
 800aadc:	d9e2      	bls.n	800aaa4 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800aade:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aae2:	2b6c      	cmp	r3, #108	; 0x6c
 800aae4:	d003      	beq.n	800aaee <f_printf+0xf6>
 800aae6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aaea:	2b4c      	cmp	r3, #76	; 0x4c
 800aaec:	d10d      	bne.n	800ab0a <f_printf+0x112>
			f |= 4; c = *fmt++;
 800aaee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aaf2:	f043 0304 	orr.w	r3, r3, #4
 800aaf6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aafa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aafe:	1c5a      	adds	r2, r3, #1
 800ab00:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800ab0a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f000 8183 	beq.w	800ae1a <f_printf+0x422>
		d = c;
 800ab14:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ab18:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800ab1c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab20:	2b60      	cmp	r3, #96	; 0x60
 800ab22:	d908      	bls.n	800ab36 <f_printf+0x13e>
 800ab24:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab28:	2b7a      	cmp	r3, #122	; 0x7a
 800ab2a:	d804      	bhi.n	800ab36 <f_printf+0x13e>
 800ab2c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab30:	3b20      	subs	r3, #32
 800ab32:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800ab36:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab3a:	3b42      	subs	r3, #66	; 0x42
 800ab3c:	2b16      	cmp	r3, #22
 800ab3e:	f200 8098 	bhi.w	800ac72 <f_printf+0x27a>
 800ab42:	a201      	add	r2, pc, #4	; (adr r2, 800ab48 <f_printf+0x150>)
 800ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab48:	0800ac53 	.word	0x0800ac53
 800ab4c:	0800ac3b 	.word	0x0800ac3b
 800ab50:	0800ac63 	.word	0x0800ac63
 800ab54:	0800ac73 	.word	0x0800ac73
 800ab58:	0800ac73 	.word	0x0800ac73
 800ab5c:	0800ac73 	.word	0x0800ac73
 800ab60:	0800ac73 	.word	0x0800ac73
 800ab64:	0800ac73 	.word	0x0800ac73
 800ab68:	0800ac73 	.word	0x0800ac73
 800ab6c:	0800ac73 	.word	0x0800ac73
 800ab70:	0800ac73 	.word	0x0800ac73
 800ab74:	0800ac73 	.word	0x0800ac73
 800ab78:	0800ac73 	.word	0x0800ac73
 800ab7c:	0800ac5b 	.word	0x0800ac5b
 800ab80:	0800ac73 	.word	0x0800ac73
 800ab84:	0800ac73 	.word	0x0800ac73
 800ab88:	0800ac73 	.word	0x0800ac73
 800ab8c:	0800aba5 	.word	0x0800aba5
 800ab90:	0800ac73 	.word	0x0800ac73
 800ab94:	0800ac63 	.word	0x0800ac63
 800ab98:	0800ac73 	.word	0x0800ac73
 800ab9c:	0800ac73 	.word	0x0800ac73
 800aba0:	0800ac6b 	.word	0x0800ac6b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800aba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aba6:	1d1a      	adds	r2, r3, #4
 800aba8:	67ba      	str	r2, [r7, #120]	; 0x78
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800abae:	2300      	movs	r3, #0
 800abb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800abb4:	e004      	b.n	800abc0 <f_printf+0x1c8>
 800abb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abba:	3301      	adds	r3, #1
 800abbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800abc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800abc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abc6:	4413      	add	r3, r2
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1f3      	bne.n	800abb6 <f_printf+0x1be>
			if (!(f & 2)) {
 800abce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800abd2:	f003 0302 	and.w	r3, r3, #2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d11a      	bne.n	800ac10 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800abda:	e005      	b.n	800abe8 <f_printf+0x1f0>
 800abdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abe0:	2120      	movs	r1, #32
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7ff fe90 	bl	800a908 <putc_bfd>
 800abe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800abf2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d8f0      	bhi.n	800abdc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800abfa:	e009      	b.n	800ac10 <f_printf+0x218>
 800abfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ac02:	781a      	ldrb	r2, [r3, #0]
 800ac04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff fe7c 	bl	800a908 <putc_bfd>
 800ac10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1f1      	bne.n	800abfc <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800ac18:	e005      	b.n	800ac26 <f_printf+0x22e>
 800ac1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac1e:	2120      	movs	r1, #32
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff fe71 	bl	800a908 <putc_bfd>
 800ac26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac30:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d8f0      	bhi.n	800ac1a <f_printf+0x222>
			continue;
 800ac38:	e0ec      	b.n	800ae14 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800ac3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac3c:	1d1a      	adds	r2, r3, #4
 800ac3e:	67ba      	str	r2, [r7, #120]	; 0x78
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac48:	4611      	mov	r1, r2
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7ff fe5c 	bl	800a908 <putc_bfd>
 800ac50:	e0e0      	b.n	800ae14 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800ac52:	2302      	movs	r3, #2
 800ac54:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ac58:	e014      	b.n	800ac84 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800ac5a:	2308      	movs	r3, #8
 800ac5c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ac60:	e010      	b.n	800ac84 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800ac62:	230a      	movs	r3, #10
 800ac64:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ac68:	e00c      	b.n	800ac84 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800ac6a:	2310      	movs	r3, #16
 800ac6c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ac70:	e008      	b.n	800ac84 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800ac72:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ac76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7ff fe43 	bl	800a908 <putc_bfd>
 800ac82:	e0c7      	b.n	800ae14 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800ac84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d004      	beq.n	800ac9a <f_printf+0x2a2>
 800ac90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac92:	1d1a      	adds	r2, r3, #4
 800ac94:	67ba      	str	r2, [r7, #120]	; 0x78
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	e00c      	b.n	800acb4 <f_printf+0x2bc>
 800ac9a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ac9e:	2b44      	cmp	r3, #68	; 0x44
 800aca0:	d104      	bne.n	800acac <f_printf+0x2b4>
 800aca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aca4:	1d1a      	adds	r2, r3, #4
 800aca6:	67ba      	str	r2, [r7, #120]	; 0x78
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	e003      	b.n	800acb4 <f_printf+0x2bc>
 800acac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acae:	1d1a      	adds	r2, r3, #4
 800acb0:	67ba      	str	r2, [r7, #120]	; 0x78
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800acb8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800acbc:	2b44      	cmp	r3, #68	; 0x44
 800acbe:	d10e      	bne.n	800acde <f_printf+0x2e6>
 800acc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	da0a      	bge.n	800acde <f_printf+0x2e6>
			v = 0 - v;
 800acc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800accc:	425b      	negs	r3, r3
 800acce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800acd2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800acd6:	f043 0308 	orr.w	r3, r3, #8
 800acda:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800ace4:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800ace8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acec:	fbb3 f1f2 	udiv	r1, r3, r2
 800acf0:	fb02 f201 	mul.w	r2, r2, r1
 800acf4:	1a9b      	subs	r3, r3, r2
 800acf6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800acfa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800acfe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ad02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800ad0a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad0e:	2b09      	cmp	r3, #9
 800ad10:	d90b      	bls.n	800ad2a <f_printf+0x332>
 800ad12:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ad16:	2b78      	cmp	r3, #120	; 0x78
 800ad18:	d101      	bne.n	800ad1e <f_printf+0x326>
 800ad1a:	2227      	movs	r2, #39	; 0x27
 800ad1c:	e000      	b.n	800ad20 <f_printf+0x328>
 800ad1e:	2207      	movs	r2, #7
 800ad20:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad24:	4413      	add	r3, r2
 800ad26:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800ad2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad2e:	1c5a      	adds	r2, r3, #1
 800ad30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ad34:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ad38:	3230      	adds	r2, #48	; 0x30
 800ad3a:	b2d2      	uxtb	r2, r2
 800ad3c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800ad40:	440b      	add	r3, r1
 800ad42:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800ad46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <f_printf+0x35e>
 800ad4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad52:	2b1f      	cmp	r3, #31
 800ad54:	d9c6      	bls.n	800ace4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800ad56:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ad5a:	f003 0308 	and.w	r3, r3, #8
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00a      	beq.n	800ad78 <f_printf+0x380>
 800ad62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ad6c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800ad70:	4413      	add	r3, r2
 800ad72:	222d      	movs	r2, #45	; 0x2d
 800ad74:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ad78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ad80:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <f_printf+0x398>
 800ad8c:	2330      	movs	r3, #48	; 0x30
 800ad8e:	e000      	b.n	800ad92 <f_printf+0x39a>
 800ad90:	2320      	movs	r3, #32
 800ad92:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ad96:	e007      	b.n	800ada8 <f_printf+0x3b0>
 800ad98:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ad9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ada0:	4611      	mov	r1, r2
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7ff fdb0 	bl	800a908 <putc_bfd>
 800ada8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800adac:	f003 0302 	and.w	r3, r3, #2
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d108      	bne.n	800adc6 <f_printf+0x3ce>
 800adb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800adbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d8e8      	bhi.n	800ad98 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800adc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800adca:	3b01      	subs	r3, #1
 800adcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800add0:	f107 020c 	add.w	r2, r7, #12
 800add4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800add8:	4413      	add	r3, r2
 800adda:	781a      	ldrb	r2, [r3, #0]
 800addc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ade0:	4611      	mov	r1, r2
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff fd90 	bl	800a908 <putc_bfd>
		} while (i);
 800ade8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1ea      	bne.n	800adc6 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800adf0:	e007      	b.n	800ae02 <f_printf+0x40a>
 800adf2:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800adf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7ff fd83 	bl	800a908 <putc_bfd>
 800ae02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d8ee      	bhi.n	800adf2 <f_printf+0x3fa>
		c = *fmt++;
 800ae14:	e5fe      	b.n	800aa14 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ae16:	bf00      	nop
 800ae18:	e000      	b.n	800ae1c <f_printf+0x424>
		if (!c) break;
 800ae1a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ae1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fdae 	bl	800a982 <putc_flush>
 800ae26:	4603      	mov	r3, r0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	379c      	adds	r7, #156	; 0x9c
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae32:	b003      	add	sp, #12
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop

0800ae38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b087      	sub	sp, #28
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	4613      	mov	r3, r2
 800ae44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ae46:	2301      	movs	r3, #1
 800ae48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ae4e:	4b1f      	ldr	r3, [pc, #124]	; (800aecc <FATFS_LinkDriverEx+0x94>)
 800ae50:	7a5b      	ldrb	r3, [r3, #9]
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d131      	bne.n	800aebc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ae58:	4b1c      	ldr	r3, [pc, #112]	; (800aecc <FATFS_LinkDriverEx+0x94>)
 800ae5a:	7a5b      	ldrb	r3, [r3, #9]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4b1a      	ldr	r3, [pc, #104]	; (800aecc <FATFS_LinkDriverEx+0x94>)
 800ae62:	2100      	movs	r1, #0
 800ae64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ae66:	4b19      	ldr	r3, [pc, #100]	; (800aecc <FATFS_LinkDriverEx+0x94>)
 800ae68:	7a5b      	ldrb	r3, [r3, #9]
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	4a17      	ldr	r2, [pc, #92]	; (800aecc <FATFS_LinkDriverEx+0x94>)
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4413      	add	r3, r2
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ae76:	4b15      	ldr	r3, [pc, #84]	; (800aecc <FATFS_LinkDriverEx+0x94>)
 800ae78:	7a5b      	ldrb	r3, [r3, #9]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	4b13      	ldr	r3, [pc, #76]	; (800aecc <FATFS_LinkDriverEx+0x94>)
 800ae80:	4413      	add	r3, r2
 800ae82:	79fa      	ldrb	r2, [r7, #7]
 800ae84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ae86:	4b11      	ldr	r3, [pc, #68]	; (800aecc <FATFS_LinkDriverEx+0x94>)
 800ae88:	7a5b      	ldrb	r3, [r3, #9]
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	1c5a      	adds	r2, r3, #1
 800ae8e:	b2d1      	uxtb	r1, r2
 800ae90:	4a0e      	ldr	r2, [pc, #56]	; (800aecc <FATFS_LinkDriverEx+0x94>)
 800ae92:	7251      	strb	r1, [r2, #9]
 800ae94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ae96:	7dbb      	ldrb	r3, [r7, #22]
 800ae98:	3330      	adds	r3, #48	; 0x30
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	3301      	adds	r3, #1
 800aea4:	223a      	movs	r2, #58	; 0x3a
 800aea6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	3302      	adds	r3, #2
 800aeac:	222f      	movs	r2, #47	; 0x2f
 800aeae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	3303      	adds	r3, #3
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aebc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	371c      	adds	r7, #28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	200002d8 	.word	0x200002d8

0800aed0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aeda:	2200      	movs	r2, #0
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7ff ffaa 	bl	800ae38 <FATFS_LinkDriverEx>
 800aee4:	4603      	mov	r3, r0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	4603      	mov	r3, r0
 800aef8:	6039      	str	r1, [r7, #0]
 800aefa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800aefc:	88fb      	ldrh	r3, [r7, #6]
 800aefe:	2b7f      	cmp	r3, #127	; 0x7f
 800af00:	d802      	bhi.n	800af08 <ff_convert+0x18>
		c = chr;
 800af02:	88fb      	ldrh	r3, [r7, #6]
 800af04:	81fb      	strh	r3, [r7, #14]
 800af06:	e025      	b.n	800af54 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800af0e:	88fb      	ldrh	r3, [r7, #6]
 800af10:	2bff      	cmp	r3, #255	; 0xff
 800af12:	d805      	bhi.n	800af20 <ff_convert+0x30>
 800af14:	88fb      	ldrh	r3, [r7, #6]
 800af16:	3b80      	subs	r3, #128	; 0x80
 800af18:	4a12      	ldr	r2, [pc, #72]	; (800af64 <ff_convert+0x74>)
 800af1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af1e:	e000      	b.n	800af22 <ff_convert+0x32>
 800af20:	2300      	movs	r3, #0
 800af22:	81fb      	strh	r3, [r7, #14]
 800af24:	e016      	b.n	800af54 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800af26:	2300      	movs	r3, #0
 800af28:	81fb      	strh	r3, [r7, #14]
 800af2a:	e009      	b.n	800af40 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800af2c:	89fb      	ldrh	r3, [r7, #14]
 800af2e:	4a0d      	ldr	r2, [pc, #52]	; (800af64 <ff_convert+0x74>)
 800af30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af34:	88fa      	ldrh	r2, [r7, #6]
 800af36:	429a      	cmp	r2, r3
 800af38:	d006      	beq.n	800af48 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800af3a:	89fb      	ldrh	r3, [r7, #14]
 800af3c:	3301      	adds	r3, #1
 800af3e:	81fb      	strh	r3, [r7, #14]
 800af40:	89fb      	ldrh	r3, [r7, #14]
 800af42:	2b7f      	cmp	r3, #127	; 0x7f
 800af44:	d9f2      	bls.n	800af2c <ff_convert+0x3c>
 800af46:	e000      	b.n	800af4a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800af48:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800af4a:	89fb      	ldrh	r3, [r7, #14]
 800af4c:	3380      	adds	r3, #128	; 0x80
 800af4e:	b29b      	uxth	r3, r3
 800af50:	b2db      	uxtb	r3, r3
 800af52:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800af54:	89fb      	ldrh	r3, [r7, #14]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	0800c134 	.word	0x0800c134

0800af68 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800af68:	b480      	push	{r7}
 800af6a:	b087      	sub	sp, #28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800af72:	88fb      	ldrh	r3, [r7, #6]
 800af74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af78:	d201      	bcs.n	800af7e <ff_wtoupper+0x16>
 800af7a:	4b3e      	ldr	r3, [pc, #248]	; (800b074 <ff_wtoupper+0x10c>)
 800af7c:	e000      	b.n	800af80 <ff_wtoupper+0x18>
 800af7e:	4b3e      	ldr	r3, [pc, #248]	; (800b078 <ff_wtoupper+0x110>)
 800af80:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	1c9a      	adds	r2, r3, #2
 800af86:	617a      	str	r2, [r7, #20]
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800af8c:	8a7b      	ldrh	r3, [r7, #18]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d068      	beq.n	800b064 <ff_wtoupper+0xfc>
 800af92:	88fa      	ldrh	r2, [r7, #6]
 800af94:	8a7b      	ldrh	r3, [r7, #18]
 800af96:	429a      	cmp	r2, r3
 800af98:	d364      	bcc.n	800b064 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	1c9a      	adds	r2, r3, #2
 800af9e:	617a      	str	r2, [r7, #20]
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	823b      	strh	r3, [r7, #16]
 800afa4:	8a3b      	ldrh	r3, [r7, #16]
 800afa6:	0a1b      	lsrs	r3, r3, #8
 800afa8:	81fb      	strh	r3, [r7, #14]
 800afaa:	8a3b      	ldrh	r3, [r7, #16]
 800afac:	b2db      	uxtb	r3, r3
 800afae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800afb0:	88fa      	ldrh	r2, [r7, #6]
 800afb2:	8a79      	ldrh	r1, [r7, #18]
 800afb4:	8a3b      	ldrh	r3, [r7, #16]
 800afb6:	440b      	add	r3, r1
 800afb8:	429a      	cmp	r2, r3
 800afba:	da49      	bge.n	800b050 <ff_wtoupper+0xe8>
			switch (cmd) {
 800afbc:	89fb      	ldrh	r3, [r7, #14]
 800afbe:	2b08      	cmp	r3, #8
 800afc0:	d84f      	bhi.n	800b062 <ff_wtoupper+0xfa>
 800afc2:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <ff_wtoupper+0x60>)
 800afc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc8:	0800afed 	.word	0x0800afed
 800afcc:	0800afff 	.word	0x0800afff
 800afd0:	0800b015 	.word	0x0800b015
 800afd4:	0800b01d 	.word	0x0800b01d
 800afd8:	0800b025 	.word	0x0800b025
 800afdc:	0800b02d 	.word	0x0800b02d
 800afe0:	0800b035 	.word	0x0800b035
 800afe4:	0800b03d 	.word	0x0800b03d
 800afe8:	0800b045 	.word	0x0800b045
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800afec:	88fa      	ldrh	r2, [r7, #6]
 800afee:	8a7b      	ldrh	r3, [r7, #18]
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	4413      	add	r3, r2
 800aff8:	881b      	ldrh	r3, [r3, #0]
 800affa:	80fb      	strh	r3, [r7, #6]
 800affc:	e027      	b.n	800b04e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800affe:	88fa      	ldrh	r2, [r7, #6]
 800b000:	8a7b      	ldrh	r3, [r7, #18]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	b29b      	uxth	r3, r3
 800b006:	f003 0301 	and.w	r3, r3, #1
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	88fa      	ldrh	r2, [r7, #6]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	80fb      	strh	r3, [r7, #6]
 800b012:	e01c      	b.n	800b04e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b014:	88fb      	ldrh	r3, [r7, #6]
 800b016:	3b10      	subs	r3, #16
 800b018:	80fb      	strh	r3, [r7, #6]
 800b01a:	e018      	b.n	800b04e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b01c:	88fb      	ldrh	r3, [r7, #6]
 800b01e:	3b20      	subs	r3, #32
 800b020:	80fb      	strh	r3, [r7, #6]
 800b022:	e014      	b.n	800b04e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b024:	88fb      	ldrh	r3, [r7, #6]
 800b026:	3b30      	subs	r3, #48	; 0x30
 800b028:	80fb      	strh	r3, [r7, #6]
 800b02a:	e010      	b.n	800b04e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b02c:	88fb      	ldrh	r3, [r7, #6]
 800b02e:	3b1a      	subs	r3, #26
 800b030:	80fb      	strh	r3, [r7, #6]
 800b032:	e00c      	b.n	800b04e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b034:	88fb      	ldrh	r3, [r7, #6]
 800b036:	3308      	adds	r3, #8
 800b038:	80fb      	strh	r3, [r7, #6]
 800b03a:	e008      	b.n	800b04e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b03c:	88fb      	ldrh	r3, [r7, #6]
 800b03e:	3b50      	subs	r3, #80	; 0x50
 800b040:	80fb      	strh	r3, [r7, #6]
 800b042:	e004      	b.n	800b04e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b044:	88fb      	ldrh	r3, [r7, #6]
 800b046:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b04a:	80fb      	strh	r3, [r7, #6]
 800b04c:	bf00      	nop
			}
			break;
 800b04e:	e008      	b.n	800b062 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b050:	89fb      	ldrh	r3, [r7, #14]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d195      	bne.n	800af82 <ff_wtoupper+0x1a>
 800b056:	8a3b      	ldrh	r3, [r7, #16]
 800b058:	005b      	lsls	r3, r3, #1
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	4413      	add	r3, r2
 800b05e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b060:	e78f      	b.n	800af82 <ff_wtoupper+0x1a>
			break;
 800b062:	bf00      	nop
	}

	return chr;
 800b064:	88fb      	ldrh	r3, [r7, #6]
}
 800b066:	4618      	mov	r0, r3
 800b068:	371c      	adds	r7, #28
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	0800c234 	.word	0x0800c234
 800b078:	0800c428 	.word	0x0800c428

0800b07c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b080:	2201      	movs	r2, #1
 800b082:	490e      	ldr	r1, [pc, #56]	; (800b0bc <MX_USB_HOST_Init+0x40>)
 800b084:	480e      	ldr	r0, [pc, #56]	; (800b0c0 <MX_USB_HOST_Init+0x44>)
 800b086:	f7fb fa65 	bl	8006554 <USBH_Init>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b090:	f7f5 fc6c 	bl	800096c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b094:	490b      	ldr	r1, [pc, #44]	; (800b0c4 <MX_USB_HOST_Init+0x48>)
 800b096:	480a      	ldr	r0, [pc, #40]	; (800b0c0 <MX_USB_HOST_Init+0x44>)
 800b098:	f7fb faea 	bl	8006670 <USBH_RegisterClass>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b0a2:	f7f5 fc63 	bl	800096c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b0a6:	4806      	ldr	r0, [pc, #24]	; (800b0c0 <MX_USB_HOST_Init+0x44>)
 800b0a8:	f7fb fb6e 	bl	8006788 <USBH_Start>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b0b2:	f7f5 fc5b 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b0b6:	bf00      	nop
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	0800b0dd 	.word	0x0800b0dd
 800b0c0:	20000828 	.word	0x20000828
 800b0c4:	2000000c 	.word	0x2000000c

0800b0c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b0cc:	4802      	ldr	r0, [pc, #8]	; (800b0d8 <MX_USB_HOST_Process+0x10>)
 800b0ce:	f7fb fb6b 	bl	80067a8 <USBH_Process>
}
 800b0d2:	bf00      	nop
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20000828 	.word	0x20000828

0800b0dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b0e8:	78fb      	ldrb	r3, [r7, #3]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	2b04      	cmp	r3, #4
 800b0ee:	d819      	bhi.n	800b124 <USBH_UserProcess+0x48>
 800b0f0:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <USBH_UserProcess+0x1c>)
 800b0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f6:	bf00      	nop
 800b0f8:	0800b125 	.word	0x0800b125
 800b0fc:	0800b115 	.word	0x0800b115
 800b100:	0800b125 	.word	0x0800b125
 800b104:	0800b11d 	.word	0x0800b11d
 800b108:	0800b10d 	.word	0x0800b10d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b10c:	4b09      	ldr	r3, [pc, #36]	; (800b134 <USBH_UserProcess+0x58>)
 800b10e:	2203      	movs	r2, #3
 800b110:	701a      	strb	r2, [r3, #0]
  break;
 800b112:	e008      	b.n	800b126 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b114:	4b07      	ldr	r3, [pc, #28]	; (800b134 <USBH_UserProcess+0x58>)
 800b116:	2202      	movs	r2, #2
 800b118:	701a      	strb	r2, [r3, #0]
  break;
 800b11a:	e004      	b.n	800b126 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b11c:	4b05      	ldr	r3, [pc, #20]	; (800b134 <USBH_UserProcess+0x58>)
 800b11e:	2201      	movs	r2, #1
 800b120:	701a      	strb	r2, [r3, #0]
  break;
 800b122:	e000      	b.n	800b126 <USBH_UserProcess+0x4a>

  default:
  break;
 800b124:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b126:	bf00      	nop
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	200002e4 	.word	0x200002e4

0800b138 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08a      	sub	sp, #40	; 0x28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b140:	f107 0314 	add.w	r3, r7, #20
 800b144:	2200      	movs	r2, #0
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	605a      	str	r2, [r3, #4]
 800b14a:	609a      	str	r2, [r3, #8]
 800b14c:	60da      	str	r2, [r3, #12]
 800b14e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b158:	d13a      	bne.n	800b1d0 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b15a:	2300      	movs	r3, #0
 800b15c:	613b      	str	r3, [r7, #16]
 800b15e:	4b1e      	ldr	r3, [pc, #120]	; (800b1d8 <HAL_HCD_MspInit+0xa0>)
 800b160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b162:	4a1d      	ldr	r2, [pc, #116]	; (800b1d8 <HAL_HCD_MspInit+0xa0>)
 800b164:	f043 0301 	orr.w	r3, r3, #1
 800b168:	6313      	str	r3, [r2, #48]	; 0x30
 800b16a:	4b1b      	ldr	r3, [pc, #108]	; (800b1d8 <HAL_HCD_MspInit+0xa0>)
 800b16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	613b      	str	r3, [r7, #16]
 800b174:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b176:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b17a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b17c:	2302      	movs	r3, #2
 800b17e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b180:	2300      	movs	r3, #0
 800b182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b184:	2303      	movs	r3, #3
 800b186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b188:	230a      	movs	r3, #10
 800b18a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b18c:	f107 0314 	add.w	r3, r7, #20
 800b190:	4619      	mov	r1, r3
 800b192:	4812      	ldr	r0, [pc, #72]	; (800b1dc <HAL_HCD_MspInit+0xa4>)
 800b194:	f7f5 fed8 	bl	8000f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b198:	4b0f      	ldr	r3, [pc, #60]	; (800b1d8 <HAL_HCD_MspInit+0xa0>)
 800b19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b19c:	4a0e      	ldr	r2, [pc, #56]	; (800b1d8 <HAL_HCD_MspInit+0xa0>)
 800b19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1a2:	6353      	str	r3, [r2, #52]	; 0x34
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60fb      	str	r3, [r7, #12]
 800b1a8:	4b0b      	ldr	r3, [pc, #44]	; (800b1d8 <HAL_HCD_MspInit+0xa0>)
 800b1aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ac:	4a0a      	ldr	r2, [pc, #40]	; (800b1d8 <HAL_HCD_MspInit+0xa0>)
 800b1ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1b2:	6453      	str	r3, [r2, #68]	; 0x44
 800b1b4:	4b08      	ldr	r3, [pc, #32]	; (800b1d8 <HAL_HCD_MspInit+0xa0>)
 800b1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1bc:	60fb      	str	r3, [r7, #12]
 800b1be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	2043      	movs	r0, #67	; 0x43
 800b1c6:	f7f5 fe88 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b1ca:	2043      	movs	r0, #67	; 0x43
 800b1cc:	f7f5 fea1 	bl	8000f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b1d0:	bf00      	nop
 800b1d2:	3728      	adds	r7, #40	; 0x28
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	40023800 	.word	0x40023800
 800b1dc:	40020000 	.word	0x40020000

0800b1e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fb fead 	bl	8006f4e <USBH_LL_IncTimer>
}
 800b1f4:	bf00      	nop
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fb fee5 	bl	8006fda <USBH_LL_Connect>
}
 800b210:	bf00      	nop
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b226:	4618      	mov	r0, r3
 800b228:	f7fb feee 	bl	8007008 <USBH_LL_Disconnect>
}
 800b22c:	bf00      	nop
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70fb      	strb	r3, [r7, #3]
 800b240:	4613      	mov	r3, r2
 800b242:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fb fe9f 	bl	8006fa2 <USBH_LL_PortEnabled>
}
 800b264:	bf00      	nop
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fb fe9f 	bl	8006fbe <USBH_LL_PortDisabled>
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b296:	2b01      	cmp	r3, #1
 800b298:	d12a      	bne.n	800b2f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b29a:	4a18      	ldr	r2, [pc, #96]	; (800b2fc <USBH_LL_Init+0x74>)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a15      	ldr	r2, [pc, #84]	; (800b2fc <USBH_LL_Init+0x74>)
 800b2a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2aa:	4b14      	ldr	r3, [pc, #80]	; (800b2fc <USBH_LL_Init+0x74>)
 800b2ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b2b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b2b2:	4b12      	ldr	r3, [pc, #72]	; (800b2fc <USBH_LL_Init+0x74>)
 800b2b4:	2208      	movs	r2, #8
 800b2b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b2b8:	4b10      	ldr	r3, [pc, #64]	; (800b2fc <USBH_LL_Init+0x74>)
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b2be:	4b0f      	ldr	r3, [pc, #60]	; (800b2fc <USBH_LL_Init+0x74>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b2c4:	4b0d      	ldr	r3, [pc, #52]	; (800b2fc <USBH_LL_Init+0x74>)
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b2ca:	4b0c      	ldr	r3, [pc, #48]	; (800b2fc <USBH_LL_Init+0x74>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b2d0:	480a      	ldr	r0, [pc, #40]	; (800b2fc <USBH_LL_Init+0x74>)
 800b2d2:	f7f5 ffd6 	bl	8001282 <HAL_HCD_Init>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b2dc:	f7f5 fb46 	bl	800096c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b2e0:	4806      	ldr	r0, [pc, #24]	; (800b2fc <USBH_LL_Init+0x74>)
 800b2e2:	f7f6 fbba 	bl	8001a5a <HAL_HCD_GetCurrentFrame>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7fb fe20 	bl	8006f30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20000c00 	.word	0x20000c00

0800b300 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b316:	4618      	mov	r0, r3
 800b318:	f7f6 fb29 	bl	800196e <HAL_HCD_Start>
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	4618      	mov	r0, r3
 800b324:	f000 f982 	bl	800b62c <USBH_Get_USB_Status>
 800b328:	4603      	mov	r3, r0
 800b32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b084      	sub	sp, #16
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7f6 fb31 	bl	80019b4 <HAL_HCD_Stop>
 800b352:	4603      	mov	r3, r0
 800b354:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b356:	7bfb      	ldrb	r3, [r7, #15]
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 f967 	bl	800b62c <USBH_Get_USB_Status>
 800b35e:	4603      	mov	r3, r0
 800b360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b362:	7bbb      	ldrb	r3, [r7, #14]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b374:	2301      	movs	r3, #1
 800b376:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b37e:	4618      	mov	r0, r3
 800b380:	f7f6 fb79 	bl	8001a76 <HAL_HCD_GetCurrentSpeed>
 800b384:	4603      	mov	r3, r0
 800b386:	2b02      	cmp	r3, #2
 800b388:	d00c      	beq.n	800b3a4 <USBH_LL_GetSpeed+0x38>
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d80d      	bhi.n	800b3aa <USBH_LL_GetSpeed+0x3e>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d002      	beq.n	800b398 <USBH_LL_GetSpeed+0x2c>
 800b392:	2b01      	cmp	r3, #1
 800b394:	d003      	beq.n	800b39e <USBH_LL_GetSpeed+0x32>
 800b396:	e008      	b.n	800b3aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b398:	2300      	movs	r3, #0
 800b39a:	73fb      	strb	r3, [r7, #15]
    break;
 800b39c:	e008      	b.n	800b3b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a2:	e005      	b.n	800b3b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a8:	e002      	b.n	800b3b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ae:	bf00      	nop
  }
  return  speed;
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b084      	sub	sp, #16
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7f6 fb0c 	bl	80019ee <HAL_HCD_ResetPort>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 f925 	bl	800b62c <USBH_Get_USB_Status>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b402:	78fa      	ldrb	r2, [r7, #3]
 800b404:	4611      	mov	r1, r2
 800b406:	4618      	mov	r0, r3
 800b408:	f7f6 fb13 	bl	8001a32 <HAL_HCD_HC_GetXferCount>
 800b40c:	4603      	mov	r3, r0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b416:	b590      	push	{r4, r7, lr}
 800b418:	b089      	sub	sp, #36	; 0x24
 800b41a:	af04      	add	r7, sp, #16
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	4608      	mov	r0, r1
 800b420:	4611      	mov	r1, r2
 800b422:	461a      	mov	r2, r3
 800b424:	4603      	mov	r3, r0
 800b426:	70fb      	strb	r3, [r7, #3]
 800b428:	460b      	mov	r3, r1
 800b42a:	70bb      	strb	r3, [r7, #2]
 800b42c:	4613      	mov	r3, r2
 800b42e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b43e:	787c      	ldrb	r4, [r7, #1]
 800b440:	78ba      	ldrb	r2, [r7, #2]
 800b442:	78f9      	ldrb	r1, [r7, #3]
 800b444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b446:	9302      	str	r3, [sp, #8]
 800b448:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	4623      	mov	r3, r4
 800b456:	f7f5 ff76 	bl	8001346 <HAL_HCD_HC_Init>
 800b45a:	4603      	mov	r3, r0
 800b45c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	4618      	mov	r0, r3
 800b462:	f000 f8e3 	bl	800b62c <USBH_Get_USB_Status>
 800b466:	4603      	mov	r3, r0
 800b468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b46a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	bd90      	pop	{r4, r7, pc}

0800b474 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b48e:	78fa      	ldrb	r2, [r7, #3]
 800b490:	4611      	mov	r1, r2
 800b492:	4618      	mov	r0, r3
 800b494:	f7f5 ffe6 	bl	8001464 <HAL_HCD_HC_Halt>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 f8c4 	bl	800b62c <USBH_Get_USB_Status>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b4b2:	b590      	push	{r4, r7, lr}
 800b4b4:	b089      	sub	sp, #36	; 0x24
 800b4b6:	af04      	add	r7, sp, #16
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	4608      	mov	r0, r1
 800b4bc:	4611      	mov	r1, r2
 800b4be:	461a      	mov	r2, r3
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	70fb      	strb	r3, [r7, #3]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70bb      	strb	r3, [r7, #2]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b4da:	787c      	ldrb	r4, [r7, #1]
 800b4dc:	78ba      	ldrb	r2, [r7, #2]
 800b4de:	78f9      	ldrb	r1, [r7, #3]
 800b4e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b4e4:	9303      	str	r3, [sp, #12]
 800b4e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b4e8:	9302      	str	r3, [sp, #8]
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	4623      	mov	r3, r4
 800b4f6:	f7f5 ffd9 	bl	80014ac <HAL_HCD_HC_SubmitRequest>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
 800b500:	4618      	mov	r0, r3
 800b502:	f000 f893 	bl	800b62c <USBH_Get_USB_Status>
 800b506:	4603      	mov	r3, r0
 800b508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b50a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	bd90      	pop	{r4, r7, pc}

0800b514 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	460b      	mov	r3, r1
 800b51e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b526:	78fa      	ldrb	r2, [r7, #3]
 800b528:	4611      	mov	r1, r2
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7f6 fa6d 	bl	8001a0a <HAL_HCD_HC_GetURBState>
 800b530:	4603      	mov	r3, r0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b082      	sub	sp, #8
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800b546:	20c8      	movs	r0, #200	; 0xc8
 800b548:	f7f5 fbc8 	bl	8000cdc <HAL_Delay>
  return USBH_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b556:	b480      	push	{r7}
 800b558:	b085      	sub	sp, #20
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]
 800b562:	4613      	mov	r3, r2
 800b564:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b56c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b56e:	78fb      	ldrb	r3, [r7, #3]
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	212c      	movs	r1, #44	; 0x2c
 800b574:	fb01 f303 	mul.w	r3, r1, r3
 800b578:	4413      	add	r3, r2
 800b57a:	333b      	adds	r3, #59	; 0x3b
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d009      	beq.n	800b596 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b582:	78fb      	ldrb	r3, [r7, #3]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	212c      	movs	r1, #44	; 0x2c
 800b588:	fb01 f303 	mul.w	r3, r1, r3
 800b58c:	4413      	add	r3, r2
 800b58e:	3354      	adds	r3, #84	; 0x54
 800b590:	78ba      	ldrb	r2, [r7, #2]
 800b592:	701a      	strb	r2, [r3, #0]
 800b594:	e008      	b.n	800b5a8 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b596:	78fb      	ldrb	r3, [r7, #3]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	212c      	movs	r1, #44	; 0x2c
 800b59c:	fb01 f303 	mul.w	r3, r1, r3
 800b5a0:	4413      	add	r3, r2
 800b5a2:	3355      	adds	r3, #85	; 0x55
 800b5a4:	78ba      	ldrb	r2, [r7, #2]
 800b5a6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3714      	adds	r7, #20
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b085      	sub	sp, #20
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5cc:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b5ce:	78fb      	ldrb	r3, [r7, #3]
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	212c      	movs	r1, #44	; 0x2c
 800b5d4:	fb01 f303 	mul.w	r3, r1, r3
 800b5d8:	4413      	add	r3, r2
 800b5da:	333b      	adds	r3, #59	; 0x3b
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d009      	beq.n	800b5f6 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b5e2:	78fb      	ldrb	r3, [r7, #3]
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	212c      	movs	r1, #44	; 0x2c
 800b5e8:	fb01 f303 	mul.w	r3, r1, r3
 800b5ec:	4413      	add	r3, r2
 800b5ee:	3354      	adds	r3, #84	; 0x54
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	73fb      	strb	r3, [r7, #15]
 800b5f4:	e008      	b.n	800b608 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b5f6:	78fb      	ldrb	r3, [r7, #3]
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	212c      	movs	r1, #44	; 0x2c
 800b5fc:	fb01 f303 	mul.w	r3, r1, r3
 800b600:	4413      	add	r3, r2
 800b602:	3355      	adds	r3, #85	; 0x55
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b608:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3714      	adds	r7, #20
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr

0800b616 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7f5 fb5c 	bl	8000cdc <HAL_Delay>
}
 800b624:	bf00      	nop
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	4603      	mov	r3, r0
 800b634:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b63a:	79fb      	ldrb	r3, [r7, #7]
 800b63c:	2b03      	cmp	r3, #3
 800b63e:	d817      	bhi.n	800b670 <USBH_Get_USB_Status+0x44>
 800b640:	a201      	add	r2, pc, #4	; (adr r2, 800b648 <USBH_Get_USB_Status+0x1c>)
 800b642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b646:	bf00      	nop
 800b648:	0800b659 	.word	0x0800b659
 800b64c:	0800b65f 	.word	0x0800b65f
 800b650:	0800b665 	.word	0x0800b665
 800b654:	0800b66b 	.word	0x0800b66b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b658:	2300      	movs	r3, #0
 800b65a:	73fb      	strb	r3, [r7, #15]
    break;
 800b65c:	e00b      	b.n	800b676 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b65e:	2302      	movs	r3, #2
 800b660:	73fb      	strb	r3, [r7, #15]
    break;
 800b662:	e008      	b.n	800b676 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b664:	2301      	movs	r3, #1
 800b666:	73fb      	strb	r3, [r7, #15]
    break;
 800b668:	e005      	b.n	800b676 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b66a:	2302      	movs	r3, #2
 800b66c:	73fb      	strb	r3, [r7, #15]
    break;
 800b66e:	e002      	b.n	800b676 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b670:	2302      	movs	r3, #2
 800b672:	73fb      	strb	r3, [r7, #15]
    break;
 800b674:	bf00      	nop
  }
  return usb_status;
 800b676:	7bfb      	ldrb	r3, [r7, #15]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <__errno>:
 800b684:	4b01      	ldr	r3, [pc, #4]	; (800b68c <__errno+0x8>)
 800b686:	6818      	ldr	r0, [r3, #0]
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	2000002c 	.word	0x2000002c

0800b690 <__libc_init_array>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	4d0d      	ldr	r5, [pc, #52]	; (800b6c8 <__libc_init_array+0x38>)
 800b694:	4c0d      	ldr	r4, [pc, #52]	; (800b6cc <__libc_init_array+0x3c>)
 800b696:	1b64      	subs	r4, r4, r5
 800b698:	10a4      	asrs	r4, r4, #2
 800b69a:	2600      	movs	r6, #0
 800b69c:	42a6      	cmp	r6, r4
 800b69e:	d109      	bne.n	800b6b4 <__libc_init_array+0x24>
 800b6a0:	4d0b      	ldr	r5, [pc, #44]	; (800b6d0 <__libc_init_array+0x40>)
 800b6a2:	4c0c      	ldr	r4, [pc, #48]	; (800b6d4 <__libc_init_array+0x44>)
 800b6a4:	f000 fc5e 	bl	800bf64 <_init>
 800b6a8:	1b64      	subs	r4, r4, r5
 800b6aa:	10a4      	asrs	r4, r4, #2
 800b6ac:	2600      	movs	r6, #0
 800b6ae:	42a6      	cmp	r6, r4
 800b6b0:	d105      	bne.n	800b6be <__libc_init_array+0x2e>
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b8:	4798      	blx	r3
 800b6ba:	3601      	adds	r6, #1
 800b6bc:	e7ee      	b.n	800b69c <__libc_init_array+0xc>
 800b6be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6c2:	4798      	blx	r3
 800b6c4:	3601      	adds	r6, #1
 800b6c6:	e7f2      	b.n	800b6ae <__libc_init_array+0x1e>
 800b6c8:	0800c520 	.word	0x0800c520
 800b6cc:	0800c520 	.word	0x0800c520
 800b6d0:	0800c520 	.word	0x0800c520
 800b6d4:	0800c524 	.word	0x0800c524

0800b6d8 <malloc>:
 800b6d8:	4b02      	ldr	r3, [pc, #8]	; (800b6e4 <malloc+0xc>)
 800b6da:	4601      	mov	r1, r0
 800b6dc:	6818      	ldr	r0, [r3, #0]
 800b6de:	f000 b871 	b.w	800b7c4 <_malloc_r>
 800b6e2:	bf00      	nop
 800b6e4:	2000002c 	.word	0x2000002c

0800b6e8 <free>:
 800b6e8:	4b02      	ldr	r3, [pc, #8]	; (800b6f4 <free+0xc>)
 800b6ea:	4601      	mov	r1, r0
 800b6ec:	6818      	ldr	r0, [r3, #0]
 800b6ee:	f000 b819 	b.w	800b724 <_free_r>
 800b6f2:	bf00      	nop
 800b6f4:	2000002c 	.word	0x2000002c

0800b6f8 <memcpy>:
 800b6f8:	440a      	add	r2, r1
 800b6fa:	4291      	cmp	r1, r2
 800b6fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b700:	d100      	bne.n	800b704 <memcpy+0xc>
 800b702:	4770      	bx	lr
 800b704:	b510      	push	{r4, lr}
 800b706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b70e:	4291      	cmp	r1, r2
 800b710:	d1f9      	bne.n	800b706 <memcpy+0xe>
 800b712:	bd10      	pop	{r4, pc}

0800b714 <memset>:
 800b714:	4402      	add	r2, r0
 800b716:	4603      	mov	r3, r0
 800b718:	4293      	cmp	r3, r2
 800b71a:	d100      	bne.n	800b71e <memset+0xa>
 800b71c:	4770      	bx	lr
 800b71e:	f803 1b01 	strb.w	r1, [r3], #1
 800b722:	e7f9      	b.n	800b718 <memset+0x4>

0800b724 <_free_r>:
 800b724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b726:	2900      	cmp	r1, #0
 800b728:	d048      	beq.n	800b7bc <_free_r+0x98>
 800b72a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b72e:	9001      	str	r0, [sp, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	f1a1 0404 	sub.w	r4, r1, #4
 800b736:	bfb8      	it	lt
 800b738:	18e4      	addlt	r4, r4, r3
 800b73a:	f000 f8cd 	bl	800b8d8 <__malloc_lock>
 800b73e:	4a20      	ldr	r2, [pc, #128]	; (800b7c0 <_free_r+0x9c>)
 800b740:	9801      	ldr	r0, [sp, #4]
 800b742:	6813      	ldr	r3, [r2, #0]
 800b744:	4615      	mov	r5, r2
 800b746:	b933      	cbnz	r3, 800b756 <_free_r+0x32>
 800b748:	6063      	str	r3, [r4, #4]
 800b74a:	6014      	str	r4, [r2, #0]
 800b74c:	b003      	add	sp, #12
 800b74e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b752:	f000 b8c7 	b.w	800b8e4 <__malloc_unlock>
 800b756:	42a3      	cmp	r3, r4
 800b758:	d90b      	bls.n	800b772 <_free_r+0x4e>
 800b75a:	6821      	ldr	r1, [r4, #0]
 800b75c:	1862      	adds	r2, r4, r1
 800b75e:	4293      	cmp	r3, r2
 800b760:	bf04      	itt	eq
 800b762:	681a      	ldreq	r2, [r3, #0]
 800b764:	685b      	ldreq	r3, [r3, #4]
 800b766:	6063      	str	r3, [r4, #4]
 800b768:	bf04      	itt	eq
 800b76a:	1852      	addeq	r2, r2, r1
 800b76c:	6022      	streq	r2, [r4, #0]
 800b76e:	602c      	str	r4, [r5, #0]
 800b770:	e7ec      	b.n	800b74c <_free_r+0x28>
 800b772:	461a      	mov	r2, r3
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	b10b      	cbz	r3, 800b77c <_free_r+0x58>
 800b778:	42a3      	cmp	r3, r4
 800b77a:	d9fa      	bls.n	800b772 <_free_r+0x4e>
 800b77c:	6811      	ldr	r1, [r2, #0]
 800b77e:	1855      	adds	r5, r2, r1
 800b780:	42a5      	cmp	r5, r4
 800b782:	d10b      	bne.n	800b79c <_free_r+0x78>
 800b784:	6824      	ldr	r4, [r4, #0]
 800b786:	4421      	add	r1, r4
 800b788:	1854      	adds	r4, r2, r1
 800b78a:	42a3      	cmp	r3, r4
 800b78c:	6011      	str	r1, [r2, #0]
 800b78e:	d1dd      	bne.n	800b74c <_free_r+0x28>
 800b790:	681c      	ldr	r4, [r3, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	6053      	str	r3, [r2, #4]
 800b796:	4421      	add	r1, r4
 800b798:	6011      	str	r1, [r2, #0]
 800b79a:	e7d7      	b.n	800b74c <_free_r+0x28>
 800b79c:	d902      	bls.n	800b7a4 <_free_r+0x80>
 800b79e:	230c      	movs	r3, #12
 800b7a0:	6003      	str	r3, [r0, #0]
 800b7a2:	e7d3      	b.n	800b74c <_free_r+0x28>
 800b7a4:	6825      	ldr	r5, [r4, #0]
 800b7a6:	1961      	adds	r1, r4, r5
 800b7a8:	428b      	cmp	r3, r1
 800b7aa:	bf04      	itt	eq
 800b7ac:	6819      	ldreq	r1, [r3, #0]
 800b7ae:	685b      	ldreq	r3, [r3, #4]
 800b7b0:	6063      	str	r3, [r4, #4]
 800b7b2:	bf04      	itt	eq
 800b7b4:	1949      	addeq	r1, r1, r5
 800b7b6:	6021      	streq	r1, [r4, #0]
 800b7b8:	6054      	str	r4, [r2, #4]
 800b7ba:	e7c7      	b.n	800b74c <_free_r+0x28>
 800b7bc:	b003      	add	sp, #12
 800b7be:	bd30      	pop	{r4, r5, pc}
 800b7c0:	200002e8 	.word	0x200002e8

0800b7c4 <_malloc_r>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	1ccd      	adds	r5, r1, #3
 800b7c8:	f025 0503 	bic.w	r5, r5, #3
 800b7cc:	3508      	adds	r5, #8
 800b7ce:	2d0c      	cmp	r5, #12
 800b7d0:	bf38      	it	cc
 800b7d2:	250c      	movcc	r5, #12
 800b7d4:	2d00      	cmp	r5, #0
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	db01      	blt.n	800b7de <_malloc_r+0x1a>
 800b7da:	42a9      	cmp	r1, r5
 800b7dc:	d903      	bls.n	800b7e6 <_malloc_r+0x22>
 800b7de:	230c      	movs	r3, #12
 800b7e0:	6033      	str	r3, [r6, #0]
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7e6:	f000 f877 	bl	800b8d8 <__malloc_lock>
 800b7ea:	4921      	ldr	r1, [pc, #132]	; (800b870 <_malloc_r+0xac>)
 800b7ec:	680a      	ldr	r2, [r1, #0]
 800b7ee:	4614      	mov	r4, r2
 800b7f0:	b99c      	cbnz	r4, 800b81a <_malloc_r+0x56>
 800b7f2:	4f20      	ldr	r7, [pc, #128]	; (800b874 <_malloc_r+0xb0>)
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	b923      	cbnz	r3, 800b802 <_malloc_r+0x3e>
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f000 f83c 	bl	800b878 <_sbrk_r>
 800b800:	6038      	str	r0, [r7, #0]
 800b802:	4629      	mov	r1, r5
 800b804:	4630      	mov	r0, r6
 800b806:	f000 f837 	bl	800b878 <_sbrk_r>
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	d123      	bne.n	800b856 <_malloc_r+0x92>
 800b80e:	230c      	movs	r3, #12
 800b810:	6033      	str	r3, [r6, #0]
 800b812:	4630      	mov	r0, r6
 800b814:	f000 f866 	bl	800b8e4 <__malloc_unlock>
 800b818:	e7e3      	b.n	800b7e2 <_malloc_r+0x1e>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	1b5b      	subs	r3, r3, r5
 800b81e:	d417      	bmi.n	800b850 <_malloc_r+0x8c>
 800b820:	2b0b      	cmp	r3, #11
 800b822:	d903      	bls.n	800b82c <_malloc_r+0x68>
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	441c      	add	r4, r3
 800b828:	6025      	str	r5, [r4, #0]
 800b82a:	e004      	b.n	800b836 <_malloc_r+0x72>
 800b82c:	6863      	ldr	r3, [r4, #4]
 800b82e:	42a2      	cmp	r2, r4
 800b830:	bf0c      	ite	eq
 800b832:	600b      	streq	r3, [r1, #0]
 800b834:	6053      	strne	r3, [r2, #4]
 800b836:	4630      	mov	r0, r6
 800b838:	f000 f854 	bl	800b8e4 <__malloc_unlock>
 800b83c:	f104 000b 	add.w	r0, r4, #11
 800b840:	1d23      	adds	r3, r4, #4
 800b842:	f020 0007 	bic.w	r0, r0, #7
 800b846:	1ac2      	subs	r2, r0, r3
 800b848:	d0cc      	beq.n	800b7e4 <_malloc_r+0x20>
 800b84a:	1a1b      	subs	r3, r3, r0
 800b84c:	50a3      	str	r3, [r4, r2]
 800b84e:	e7c9      	b.n	800b7e4 <_malloc_r+0x20>
 800b850:	4622      	mov	r2, r4
 800b852:	6864      	ldr	r4, [r4, #4]
 800b854:	e7cc      	b.n	800b7f0 <_malloc_r+0x2c>
 800b856:	1cc4      	adds	r4, r0, #3
 800b858:	f024 0403 	bic.w	r4, r4, #3
 800b85c:	42a0      	cmp	r0, r4
 800b85e:	d0e3      	beq.n	800b828 <_malloc_r+0x64>
 800b860:	1a21      	subs	r1, r4, r0
 800b862:	4630      	mov	r0, r6
 800b864:	f000 f808 	bl	800b878 <_sbrk_r>
 800b868:	3001      	adds	r0, #1
 800b86a:	d1dd      	bne.n	800b828 <_malloc_r+0x64>
 800b86c:	e7cf      	b.n	800b80e <_malloc_r+0x4a>
 800b86e:	bf00      	nop
 800b870:	200002e8 	.word	0x200002e8
 800b874:	200002ec 	.word	0x200002ec

0800b878 <_sbrk_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	4d06      	ldr	r5, [pc, #24]	; (800b894 <_sbrk_r+0x1c>)
 800b87c:	2300      	movs	r3, #0
 800b87e:	4604      	mov	r4, r0
 800b880:	4608      	mov	r0, r1
 800b882:	602b      	str	r3, [r5, #0]
 800b884:	f7f5 f8d4 	bl	8000a30 <_sbrk>
 800b888:	1c43      	adds	r3, r0, #1
 800b88a:	d102      	bne.n	800b892 <_sbrk_r+0x1a>
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	b103      	cbz	r3, 800b892 <_sbrk_r+0x1a>
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	bd38      	pop	{r3, r4, r5, pc}
 800b894:	20000f04 	.word	0x20000f04

0800b898 <siprintf>:
 800b898:	b40e      	push	{r1, r2, r3}
 800b89a:	b500      	push	{lr}
 800b89c:	b09c      	sub	sp, #112	; 0x70
 800b89e:	ab1d      	add	r3, sp, #116	; 0x74
 800b8a0:	9002      	str	r0, [sp, #8]
 800b8a2:	9006      	str	r0, [sp, #24]
 800b8a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b8a8:	4809      	ldr	r0, [pc, #36]	; (800b8d0 <siprintf+0x38>)
 800b8aa:	9107      	str	r1, [sp, #28]
 800b8ac:	9104      	str	r1, [sp, #16]
 800b8ae:	4909      	ldr	r1, [pc, #36]	; (800b8d4 <siprintf+0x3c>)
 800b8b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8b4:	9105      	str	r1, [sp, #20]
 800b8b6:	6800      	ldr	r0, [r0, #0]
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	a902      	add	r1, sp, #8
 800b8bc:	f000 f874 	bl	800b9a8 <_svfiprintf_r>
 800b8c0:	9b02      	ldr	r3, [sp, #8]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	701a      	strb	r2, [r3, #0]
 800b8c6:	b01c      	add	sp, #112	; 0x70
 800b8c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8cc:	b003      	add	sp, #12
 800b8ce:	4770      	bx	lr
 800b8d0:	2000002c 	.word	0x2000002c
 800b8d4:	ffff0208 	.word	0xffff0208

0800b8d8 <__malloc_lock>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	; (800b8e0 <__malloc_lock+0x8>)
 800b8da:	f000 baf9 	b.w	800bed0 <__retarget_lock_acquire_recursive>
 800b8de:	bf00      	nop
 800b8e0:	20000f0c 	.word	0x20000f0c

0800b8e4 <__malloc_unlock>:
 800b8e4:	4801      	ldr	r0, [pc, #4]	; (800b8ec <__malloc_unlock+0x8>)
 800b8e6:	f000 baf4 	b.w	800bed2 <__retarget_lock_release_recursive>
 800b8ea:	bf00      	nop
 800b8ec:	20000f0c 	.word	0x20000f0c

0800b8f0 <__ssputs_r>:
 800b8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f4:	688e      	ldr	r6, [r1, #8]
 800b8f6:	429e      	cmp	r6, r3
 800b8f8:	4682      	mov	sl, r0
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	4690      	mov	r8, r2
 800b8fe:	461f      	mov	r7, r3
 800b900:	d838      	bhi.n	800b974 <__ssputs_r+0x84>
 800b902:	898a      	ldrh	r2, [r1, #12]
 800b904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b908:	d032      	beq.n	800b970 <__ssputs_r+0x80>
 800b90a:	6825      	ldr	r5, [r4, #0]
 800b90c:	6909      	ldr	r1, [r1, #16]
 800b90e:	eba5 0901 	sub.w	r9, r5, r1
 800b912:	6965      	ldr	r5, [r4, #20]
 800b914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b91c:	3301      	adds	r3, #1
 800b91e:	444b      	add	r3, r9
 800b920:	106d      	asrs	r5, r5, #1
 800b922:	429d      	cmp	r5, r3
 800b924:	bf38      	it	cc
 800b926:	461d      	movcc	r5, r3
 800b928:	0553      	lsls	r3, r2, #21
 800b92a:	d531      	bpl.n	800b990 <__ssputs_r+0xa0>
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7ff ff49 	bl	800b7c4 <_malloc_r>
 800b932:	4606      	mov	r6, r0
 800b934:	b950      	cbnz	r0, 800b94c <__ssputs_r+0x5c>
 800b936:	230c      	movs	r3, #12
 800b938:	f8ca 3000 	str.w	r3, [sl]
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b942:	81a3      	strh	r3, [r4, #12]
 800b944:	f04f 30ff 	mov.w	r0, #4294967295
 800b948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94c:	6921      	ldr	r1, [r4, #16]
 800b94e:	464a      	mov	r2, r9
 800b950:	f7ff fed2 	bl	800b6f8 <memcpy>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b95e:	81a3      	strh	r3, [r4, #12]
 800b960:	6126      	str	r6, [r4, #16]
 800b962:	6165      	str	r5, [r4, #20]
 800b964:	444e      	add	r6, r9
 800b966:	eba5 0509 	sub.w	r5, r5, r9
 800b96a:	6026      	str	r6, [r4, #0]
 800b96c:	60a5      	str	r5, [r4, #8]
 800b96e:	463e      	mov	r6, r7
 800b970:	42be      	cmp	r6, r7
 800b972:	d900      	bls.n	800b976 <__ssputs_r+0x86>
 800b974:	463e      	mov	r6, r7
 800b976:	4632      	mov	r2, r6
 800b978:	6820      	ldr	r0, [r4, #0]
 800b97a:	4641      	mov	r1, r8
 800b97c:	f000 faaa 	bl	800bed4 <memmove>
 800b980:	68a3      	ldr	r3, [r4, #8]
 800b982:	6822      	ldr	r2, [r4, #0]
 800b984:	1b9b      	subs	r3, r3, r6
 800b986:	4432      	add	r2, r6
 800b988:	60a3      	str	r3, [r4, #8]
 800b98a:	6022      	str	r2, [r4, #0]
 800b98c:	2000      	movs	r0, #0
 800b98e:	e7db      	b.n	800b948 <__ssputs_r+0x58>
 800b990:	462a      	mov	r2, r5
 800b992:	f000 fab9 	bl	800bf08 <_realloc_r>
 800b996:	4606      	mov	r6, r0
 800b998:	2800      	cmp	r0, #0
 800b99a:	d1e1      	bne.n	800b960 <__ssputs_r+0x70>
 800b99c:	6921      	ldr	r1, [r4, #16]
 800b99e:	4650      	mov	r0, sl
 800b9a0:	f7ff fec0 	bl	800b724 <_free_r>
 800b9a4:	e7c7      	b.n	800b936 <__ssputs_r+0x46>
	...

0800b9a8 <_svfiprintf_r>:
 800b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	4698      	mov	r8, r3
 800b9ae:	898b      	ldrh	r3, [r1, #12]
 800b9b0:	061b      	lsls	r3, r3, #24
 800b9b2:	b09d      	sub	sp, #116	; 0x74
 800b9b4:	4607      	mov	r7, r0
 800b9b6:	460d      	mov	r5, r1
 800b9b8:	4614      	mov	r4, r2
 800b9ba:	d50e      	bpl.n	800b9da <_svfiprintf_r+0x32>
 800b9bc:	690b      	ldr	r3, [r1, #16]
 800b9be:	b963      	cbnz	r3, 800b9da <_svfiprintf_r+0x32>
 800b9c0:	2140      	movs	r1, #64	; 0x40
 800b9c2:	f7ff feff 	bl	800b7c4 <_malloc_r>
 800b9c6:	6028      	str	r0, [r5, #0]
 800b9c8:	6128      	str	r0, [r5, #16]
 800b9ca:	b920      	cbnz	r0, 800b9d6 <_svfiprintf_r+0x2e>
 800b9cc:	230c      	movs	r3, #12
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	e0d1      	b.n	800bb7a <_svfiprintf_r+0x1d2>
 800b9d6:	2340      	movs	r3, #64	; 0x40
 800b9d8:	616b      	str	r3, [r5, #20]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9de:	2320      	movs	r3, #32
 800b9e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9e8:	2330      	movs	r3, #48	; 0x30
 800b9ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb94 <_svfiprintf_r+0x1ec>
 800b9ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9f2:	f04f 0901 	mov.w	r9, #1
 800b9f6:	4623      	mov	r3, r4
 800b9f8:	469a      	mov	sl, r3
 800b9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9fe:	b10a      	cbz	r2, 800ba04 <_svfiprintf_r+0x5c>
 800ba00:	2a25      	cmp	r2, #37	; 0x25
 800ba02:	d1f9      	bne.n	800b9f8 <_svfiprintf_r+0x50>
 800ba04:	ebba 0b04 	subs.w	fp, sl, r4
 800ba08:	d00b      	beq.n	800ba22 <_svfiprintf_r+0x7a>
 800ba0a:	465b      	mov	r3, fp
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4638      	mov	r0, r7
 800ba12:	f7ff ff6d 	bl	800b8f0 <__ssputs_r>
 800ba16:	3001      	adds	r0, #1
 800ba18:	f000 80aa 	beq.w	800bb70 <_svfiprintf_r+0x1c8>
 800ba1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba1e:	445a      	add	r2, fp
 800ba20:	9209      	str	r2, [sp, #36]	; 0x24
 800ba22:	f89a 3000 	ldrb.w	r3, [sl]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 80a2 	beq.w	800bb70 <_svfiprintf_r+0x1c8>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba36:	f10a 0a01 	add.w	sl, sl, #1
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	9307      	str	r3, [sp, #28]
 800ba3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba42:	931a      	str	r3, [sp, #104]	; 0x68
 800ba44:	4654      	mov	r4, sl
 800ba46:	2205      	movs	r2, #5
 800ba48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4c:	4851      	ldr	r0, [pc, #324]	; (800bb94 <_svfiprintf_r+0x1ec>)
 800ba4e:	f7f4 fbc7 	bl	80001e0 <memchr>
 800ba52:	9a04      	ldr	r2, [sp, #16]
 800ba54:	b9d8      	cbnz	r0, 800ba8e <_svfiprintf_r+0xe6>
 800ba56:	06d0      	lsls	r0, r2, #27
 800ba58:	bf44      	itt	mi
 800ba5a:	2320      	movmi	r3, #32
 800ba5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba60:	0711      	lsls	r1, r2, #28
 800ba62:	bf44      	itt	mi
 800ba64:	232b      	movmi	r3, #43	; 0x2b
 800ba66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba70:	d015      	beq.n	800ba9e <_svfiprintf_r+0xf6>
 800ba72:	9a07      	ldr	r2, [sp, #28]
 800ba74:	4654      	mov	r4, sl
 800ba76:	2000      	movs	r0, #0
 800ba78:	f04f 0c0a 	mov.w	ip, #10
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba82:	3b30      	subs	r3, #48	; 0x30
 800ba84:	2b09      	cmp	r3, #9
 800ba86:	d94e      	bls.n	800bb26 <_svfiprintf_r+0x17e>
 800ba88:	b1b0      	cbz	r0, 800bab8 <_svfiprintf_r+0x110>
 800ba8a:	9207      	str	r2, [sp, #28]
 800ba8c:	e014      	b.n	800bab8 <_svfiprintf_r+0x110>
 800ba8e:	eba0 0308 	sub.w	r3, r0, r8
 800ba92:	fa09 f303 	lsl.w	r3, r9, r3
 800ba96:	4313      	orrs	r3, r2
 800ba98:	9304      	str	r3, [sp, #16]
 800ba9a:	46a2      	mov	sl, r4
 800ba9c:	e7d2      	b.n	800ba44 <_svfiprintf_r+0x9c>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	1d19      	adds	r1, r3, #4
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	9103      	str	r1, [sp, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bfbb      	ittet	lt
 800baaa:	425b      	neglt	r3, r3
 800baac:	f042 0202 	orrlt.w	r2, r2, #2
 800bab0:	9307      	strge	r3, [sp, #28]
 800bab2:	9307      	strlt	r3, [sp, #28]
 800bab4:	bfb8      	it	lt
 800bab6:	9204      	strlt	r2, [sp, #16]
 800bab8:	7823      	ldrb	r3, [r4, #0]
 800baba:	2b2e      	cmp	r3, #46	; 0x2e
 800babc:	d10c      	bne.n	800bad8 <_svfiprintf_r+0x130>
 800babe:	7863      	ldrb	r3, [r4, #1]
 800bac0:	2b2a      	cmp	r3, #42	; 0x2a
 800bac2:	d135      	bne.n	800bb30 <_svfiprintf_r+0x188>
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	1d1a      	adds	r2, r3, #4
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	9203      	str	r2, [sp, #12]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	bfb8      	it	lt
 800bad0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bad4:	3402      	adds	r4, #2
 800bad6:	9305      	str	r3, [sp, #20]
 800bad8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bba4 <_svfiprintf_r+0x1fc>
 800badc:	7821      	ldrb	r1, [r4, #0]
 800bade:	2203      	movs	r2, #3
 800bae0:	4650      	mov	r0, sl
 800bae2:	f7f4 fb7d 	bl	80001e0 <memchr>
 800bae6:	b140      	cbz	r0, 800bafa <_svfiprintf_r+0x152>
 800bae8:	2340      	movs	r3, #64	; 0x40
 800baea:	eba0 000a 	sub.w	r0, r0, sl
 800baee:	fa03 f000 	lsl.w	r0, r3, r0
 800baf2:	9b04      	ldr	r3, [sp, #16]
 800baf4:	4303      	orrs	r3, r0
 800baf6:	3401      	adds	r4, #1
 800baf8:	9304      	str	r3, [sp, #16]
 800bafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafe:	4826      	ldr	r0, [pc, #152]	; (800bb98 <_svfiprintf_r+0x1f0>)
 800bb00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb04:	2206      	movs	r2, #6
 800bb06:	f7f4 fb6b 	bl	80001e0 <memchr>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d038      	beq.n	800bb80 <_svfiprintf_r+0x1d8>
 800bb0e:	4b23      	ldr	r3, [pc, #140]	; (800bb9c <_svfiprintf_r+0x1f4>)
 800bb10:	bb1b      	cbnz	r3, 800bb5a <_svfiprintf_r+0x1b2>
 800bb12:	9b03      	ldr	r3, [sp, #12]
 800bb14:	3307      	adds	r3, #7
 800bb16:	f023 0307 	bic.w	r3, r3, #7
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	9303      	str	r3, [sp, #12]
 800bb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb20:	4433      	add	r3, r6
 800bb22:	9309      	str	r3, [sp, #36]	; 0x24
 800bb24:	e767      	b.n	800b9f6 <_svfiprintf_r+0x4e>
 800bb26:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	2001      	movs	r0, #1
 800bb2e:	e7a5      	b.n	800ba7c <_svfiprintf_r+0xd4>
 800bb30:	2300      	movs	r3, #0
 800bb32:	3401      	adds	r4, #1
 800bb34:	9305      	str	r3, [sp, #20]
 800bb36:	4619      	mov	r1, r3
 800bb38:	f04f 0c0a 	mov.w	ip, #10
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb42:	3a30      	subs	r2, #48	; 0x30
 800bb44:	2a09      	cmp	r2, #9
 800bb46:	d903      	bls.n	800bb50 <_svfiprintf_r+0x1a8>
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d0c5      	beq.n	800bad8 <_svfiprintf_r+0x130>
 800bb4c:	9105      	str	r1, [sp, #20]
 800bb4e:	e7c3      	b.n	800bad8 <_svfiprintf_r+0x130>
 800bb50:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb54:	4604      	mov	r4, r0
 800bb56:	2301      	movs	r3, #1
 800bb58:	e7f0      	b.n	800bb3c <_svfiprintf_r+0x194>
 800bb5a:	ab03      	add	r3, sp, #12
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	462a      	mov	r2, r5
 800bb60:	4b0f      	ldr	r3, [pc, #60]	; (800bba0 <_svfiprintf_r+0x1f8>)
 800bb62:	a904      	add	r1, sp, #16
 800bb64:	4638      	mov	r0, r7
 800bb66:	f3af 8000 	nop.w
 800bb6a:	1c42      	adds	r2, r0, #1
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	d1d6      	bne.n	800bb1e <_svfiprintf_r+0x176>
 800bb70:	89ab      	ldrh	r3, [r5, #12]
 800bb72:	065b      	lsls	r3, r3, #25
 800bb74:	f53f af2c 	bmi.w	800b9d0 <_svfiprintf_r+0x28>
 800bb78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb7a:	b01d      	add	sp, #116	; 0x74
 800bb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb80:	ab03      	add	r3, sp, #12
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	462a      	mov	r2, r5
 800bb86:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <_svfiprintf_r+0x1f8>)
 800bb88:	a904      	add	r1, sp, #16
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	f000 f87a 	bl	800bc84 <_printf_i>
 800bb90:	e7eb      	b.n	800bb6a <_svfiprintf_r+0x1c2>
 800bb92:	bf00      	nop
 800bb94:	0800c4e4 	.word	0x0800c4e4
 800bb98:	0800c4ee 	.word	0x0800c4ee
 800bb9c:	00000000 	.word	0x00000000
 800bba0:	0800b8f1 	.word	0x0800b8f1
 800bba4:	0800c4ea 	.word	0x0800c4ea

0800bba8 <_printf_common>:
 800bba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbac:	4616      	mov	r6, r2
 800bbae:	4699      	mov	r9, r3
 800bbb0:	688a      	ldr	r2, [r1, #8]
 800bbb2:	690b      	ldr	r3, [r1, #16]
 800bbb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	bfb8      	it	lt
 800bbbc:	4613      	movlt	r3, r2
 800bbbe:	6033      	str	r3, [r6, #0]
 800bbc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbc4:	4607      	mov	r7, r0
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	b10a      	cbz	r2, 800bbce <_printf_common+0x26>
 800bbca:	3301      	adds	r3, #1
 800bbcc:	6033      	str	r3, [r6, #0]
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	0699      	lsls	r1, r3, #26
 800bbd2:	bf42      	ittt	mi
 800bbd4:	6833      	ldrmi	r3, [r6, #0]
 800bbd6:	3302      	addmi	r3, #2
 800bbd8:	6033      	strmi	r3, [r6, #0]
 800bbda:	6825      	ldr	r5, [r4, #0]
 800bbdc:	f015 0506 	ands.w	r5, r5, #6
 800bbe0:	d106      	bne.n	800bbf0 <_printf_common+0x48>
 800bbe2:	f104 0a19 	add.w	sl, r4, #25
 800bbe6:	68e3      	ldr	r3, [r4, #12]
 800bbe8:	6832      	ldr	r2, [r6, #0]
 800bbea:	1a9b      	subs	r3, r3, r2
 800bbec:	42ab      	cmp	r3, r5
 800bbee:	dc26      	bgt.n	800bc3e <_printf_common+0x96>
 800bbf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbf4:	1e13      	subs	r3, r2, #0
 800bbf6:	6822      	ldr	r2, [r4, #0]
 800bbf8:	bf18      	it	ne
 800bbfa:	2301      	movne	r3, #1
 800bbfc:	0692      	lsls	r2, r2, #26
 800bbfe:	d42b      	bmi.n	800bc58 <_printf_common+0xb0>
 800bc00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc04:	4649      	mov	r1, r9
 800bc06:	4638      	mov	r0, r7
 800bc08:	47c0      	blx	r8
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	d01e      	beq.n	800bc4c <_printf_common+0xa4>
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	68e5      	ldr	r5, [r4, #12]
 800bc12:	6832      	ldr	r2, [r6, #0]
 800bc14:	f003 0306 	and.w	r3, r3, #6
 800bc18:	2b04      	cmp	r3, #4
 800bc1a:	bf08      	it	eq
 800bc1c:	1aad      	subeq	r5, r5, r2
 800bc1e:	68a3      	ldr	r3, [r4, #8]
 800bc20:	6922      	ldr	r2, [r4, #16]
 800bc22:	bf0c      	ite	eq
 800bc24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc28:	2500      	movne	r5, #0
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	bfc4      	itt	gt
 800bc2e:	1a9b      	subgt	r3, r3, r2
 800bc30:	18ed      	addgt	r5, r5, r3
 800bc32:	2600      	movs	r6, #0
 800bc34:	341a      	adds	r4, #26
 800bc36:	42b5      	cmp	r5, r6
 800bc38:	d11a      	bne.n	800bc70 <_printf_common+0xc8>
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	e008      	b.n	800bc50 <_printf_common+0xa8>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	4652      	mov	r2, sl
 800bc42:	4649      	mov	r1, r9
 800bc44:	4638      	mov	r0, r7
 800bc46:	47c0      	blx	r8
 800bc48:	3001      	adds	r0, #1
 800bc4a:	d103      	bne.n	800bc54 <_printf_common+0xac>
 800bc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc54:	3501      	adds	r5, #1
 800bc56:	e7c6      	b.n	800bbe6 <_printf_common+0x3e>
 800bc58:	18e1      	adds	r1, r4, r3
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	2030      	movs	r0, #48	; 0x30
 800bc5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc62:	4422      	add	r2, r4
 800bc64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc6c:	3302      	adds	r3, #2
 800bc6e:	e7c7      	b.n	800bc00 <_printf_common+0x58>
 800bc70:	2301      	movs	r3, #1
 800bc72:	4622      	mov	r2, r4
 800bc74:	4649      	mov	r1, r9
 800bc76:	4638      	mov	r0, r7
 800bc78:	47c0      	blx	r8
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	d0e6      	beq.n	800bc4c <_printf_common+0xa4>
 800bc7e:	3601      	adds	r6, #1
 800bc80:	e7d9      	b.n	800bc36 <_printf_common+0x8e>
	...

0800bc84 <_printf_i>:
 800bc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc88:	460c      	mov	r4, r1
 800bc8a:	4691      	mov	r9, r2
 800bc8c:	7e27      	ldrb	r7, [r4, #24]
 800bc8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bc90:	2f78      	cmp	r7, #120	; 0x78
 800bc92:	4680      	mov	r8, r0
 800bc94:	469a      	mov	sl, r3
 800bc96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc9a:	d807      	bhi.n	800bcac <_printf_i+0x28>
 800bc9c:	2f62      	cmp	r7, #98	; 0x62
 800bc9e:	d80a      	bhi.n	800bcb6 <_printf_i+0x32>
 800bca0:	2f00      	cmp	r7, #0
 800bca2:	f000 80d8 	beq.w	800be56 <_printf_i+0x1d2>
 800bca6:	2f58      	cmp	r7, #88	; 0x58
 800bca8:	f000 80a3 	beq.w	800bdf2 <_printf_i+0x16e>
 800bcac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bcb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bcb4:	e03a      	b.n	800bd2c <_printf_i+0xa8>
 800bcb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bcba:	2b15      	cmp	r3, #21
 800bcbc:	d8f6      	bhi.n	800bcac <_printf_i+0x28>
 800bcbe:	a001      	add	r0, pc, #4	; (adr r0, 800bcc4 <_printf_i+0x40>)
 800bcc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bcc4:	0800bd1d 	.word	0x0800bd1d
 800bcc8:	0800bd31 	.word	0x0800bd31
 800bccc:	0800bcad 	.word	0x0800bcad
 800bcd0:	0800bcad 	.word	0x0800bcad
 800bcd4:	0800bcad 	.word	0x0800bcad
 800bcd8:	0800bcad 	.word	0x0800bcad
 800bcdc:	0800bd31 	.word	0x0800bd31
 800bce0:	0800bcad 	.word	0x0800bcad
 800bce4:	0800bcad 	.word	0x0800bcad
 800bce8:	0800bcad 	.word	0x0800bcad
 800bcec:	0800bcad 	.word	0x0800bcad
 800bcf0:	0800be3d 	.word	0x0800be3d
 800bcf4:	0800bd61 	.word	0x0800bd61
 800bcf8:	0800be1f 	.word	0x0800be1f
 800bcfc:	0800bcad 	.word	0x0800bcad
 800bd00:	0800bcad 	.word	0x0800bcad
 800bd04:	0800be5f 	.word	0x0800be5f
 800bd08:	0800bcad 	.word	0x0800bcad
 800bd0c:	0800bd61 	.word	0x0800bd61
 800bd10:	0800bcad 	.word	0x0800bcad
 800bd14:	0800bcad 	.word	0x0800bcad
 800bd18:	0800be27 	.word	0x0800be27
 800bd1c:	680b      	ldr	r3, [r1, #0]
 800bd1e:	1d1a      	adds	r2, r3, #4
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	600a      	str	r2, [r1, #0]
 800bd24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e0a3      	b.n	800be78 <_printf_i+0x1f4>
 800bd30:	6825      	ldr	r5, [r4, #0]
 800bd32:	6808      	ldr	r0, [r1, #0]
 800bd34:	062e      	lsls	r6, r5, #24
 800bd36:	f100 0304 	add.w	r3, r0, #4
 800bd3a:	d50a      	bpl.n	800bd52 <_printf_i+0xce>
 800bd3c:	6805      	ldr	r5, [r0, #0]
 800bd3e:	600b      	str	r3, [r1, #0]
 800bd40:	2d00      	cmp	r5, #0
 800bd42:	da03      	bge.n	800bd4c <_printf_i+0xc8>
 800bd44:	232d      	movs	r3, #45	; 0x2d
 800bd46:	426d      	negs	r5, r5
 800bd48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd4c:	485e      	ldr	r0, [pc, #376]	; (800bec8 <_printf_i+0x244>)
 800bd4e:	230a      	movs	r3, #10
 800bd50:	e019      	b.n	800bd86 <_printf_i+0x102>
 800bd52:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bd56:	6805      	ldr	r5, [r0, #0]
 800bd58:	600b      	str	r3, [r1, #0]
 800bd5a:	bf18      	it	ne
 800bd5c:	b22d      	sxthne	r5, r5
 800bd5e:	e7ef      	b.n	800bd40 <_printf_i+0xbc>
 800bd60:	680b      	ldr	r3, [r1, #0]
 800bd62:	6825      	ldr	r5, [r4, #0]
 800bd64:	1d18      	adds	r0, r3, #4
 800bd66:	6008      	str	r0, [r1, #0]
 800bd68:	0628      	lsls	r0, r5, #24
 800bd6a:	d501      	bpl.n	800bd70 <_printf_i+0xec>
 800bd6c:	681d      	ldr	r5, [r3, #0]
 800bd6e:	e002      	b.n	800bd76 <_printf_i+0xf2>
 800bd70:	0669      	lsls	r1, r5, #25
 800bd72:	d5fb      	bpl.n	800bd6c <_printf_i+0xe8>
 800bd74:	881d      	ldrh	r5, [r3, #0]
 800bd76:	4854      	ldr	r0, [pc, #336]	; (800bec8 <_printf_i+0x244>)
 800bd78:	2f6f      	cmp	r7, #111	; 0x6f
 800bd7a:	bf0c      	ite	eq
 800bd7c:	2308      	moveq	r3, #8
 800bd7e:	230a      	movne	r3, #10
 800bd80:	2100      	movs	r1, #0
 800bd82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd86:	6866      	ldr	r6, [r4, #4]
 800bd88:	60a6      	str	r6, [r4, #8]
 800bd8a:	2e00      	cmp	r6, #0
 800bd8c:	bfa2      	ittt	ge
 800bd8e:	6821      	ldrge	r1, [r4, #0]
 800bd90:	f021 0104 	bicge.w	r1, r1, #4
 800bd94:	6021      	strge	r1, [r4, #0]
 800bd96:	b90d      	cbnz	r5, 800bd9c <_printf_i+0x118>
 800bd98:	2e00      	cmp	r6, #0
 800bd9a:	d04d      	beq.n	800be38 <_printf_i+0x1b4>
 800bd9c:	4616      	mov	r6, r2
 800bd9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800bda2:	fb03 5711 	mls	r7, r3, r1, r5
 800bda6:	5dc7      	ldrb	r7, [r0, r7]
 800bda8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bdac:	462f      	mov	r7, r5
 800bdae:	42bb      	cmp	r3, r7
 800bdb0:	460d      	mov	r5, r1
 800bdb2:	d9f4      	bls.n	800bd9e <_printf_i+0x11a>
 800bdb4:	2b08      	cmp	r3, #8
 800bdb6:	d10b      	bne.n	800bdd0 <_printf_i+0x14c>
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	07df      	lsls	r7, r3, #31
 800bdbc:	d508      	bpl.n	800bdd0 <_printf_i+0x14c>
 800bdbe:	6923      	ldr	r3, [r4, #16]
 800bdc0:	6861      	ldr	r1, [r4, #4]
 800bdc2:	4299      	cmp	r1, r3
 800bdc4:	bfde      	ittt	le
 800bdc6:	2330      	movle	r3, #48	; 0x30
 800bdc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bdcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bdd0:	1b92      	subs	r2, r2, r6
 800bdd2:	6122      	str	r2, [r4, #16]
 800bdd4:	f8cd a000 	str.w	sl, [sp]
 800bdd8:	464b      	mov	r3, r9
 800bdda:	aa03      	add	r2, sp, #12
 800bddc:	4621      	mov	r1, r4
 800bdde:	4640      	mov	r0, r8
 800bde0:	f7ff fee2 	bl	800bba8 <_printf_common>
 800bde4:	3001      	adds	r0, #1
 800bde6:	d14c      	bne.n	800be82 <_printf_i+0x1fe>
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdec:	b004      	add	sp, #16
 800bdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf2:	4835      	ldr	r0, [pc, #212]	; (800bec8 <_printf_i+0x244>)
 800bdf4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bdf8:	6823      	ldr	r3, [r4, #0]
 800bdfa:	680e      	ldr	r6, [r1, #0]
 800bdfc:	061f      	lsls	r7, r3, #24
 800bdfe:	f856 5b04 	ldr.w	r5, [r6], #4
 800be02:	600e      	str	r6, [r1, #0]
 800be04:	d514      	bpl.n	800be30 <_printf_i+0x1ac>
 800be06:	07d9      	lsls	r1, r3, #31
 800be08:	bf44      	itt	mi
 800be0a:	f043 0320 	orrmi.w	r3, r3, #32
 800be0e:	6023      	strmi	r3, [r4, #0]
 800be10:	b91d      	cbnz	r5, 800be1a <_printf_i+0x196>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	f023 0320 	bic.w	r3, r3, #32
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	2310      	movs	r3, #16
 800be1c:	e7b0      	b.n	800bd80 <_printf_i+0xfc>
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	f043 0320 	orr.w	r3, r3, #32
 800be24:	6023      	str	r3, [r4, #0]
 800be26:	2378      	movs	r3, #120	; 0x78
 800be28:	4828      	ldr	r0, [pc, #160]	; (800becc <_printf_i+0x248>)
 800be2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be2e:	e7e3      	b.n	800bdf8 <_printf_i+0x174>
 800be30:	065e      	lsls	r6, r3, #25
 800be32:	bf48      	it	mi
 800be34:	b2ad      	uxthmi	r5, r5
 800be36:	e7e6      	b.n	800be06 <_printf_i+0x182>
 800be38:	4616      	mov	r6, r2
 800be3a:	e7bb      	b.n	800bdb4 <_printf_i+0x130>
 800be3c:	680b      	ldr	r3, [r1, #0]
 800be3e:	6826      	ldr	r6, [r4, #0]
 800be40:	6960      	ldr	r0, [r4, #20]
 800be42:	1d1d      	adds	r5, r3, #4
 800be44:	600d      	str	r5, [r1, #0]
 800be46:	0635      	lsls	r5, r6, #24
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	d501      	bpl.n	800be50 <_printf_i+0x1cc>
 800be4c:	6018      	str	r0, [r3, #0]
 800be4e:	e002      	b.n	800be56 <_printf_i+0x1d2>
 800be50:	0671      	lsls	r1, r6, #25
 800be52:	d5fb      	bpl.n	800be4c <_printf_i+0x1c8>
 800be54:	8018      	strh	r0, [r3, #0]
 800be56:	2300      	movs	r3, #0
 800be58:	6123      	str	r3, [r4, #16]
 800be5a:	4616      	mov	r6, r2
 800be5c:	e7ba      	b.n	800bdd4 <_printf_i+0x150>
 800be5e:	680b      	ldr	r3, [r1, #0]
 800be60:	1d1a      	adds	r2, r3, #4
 800be62:	600a      	str	r2, [r1, #0]
 800be64:	681e      	ldr	r6, [r3, #0]
 800be66:	6862      	ldr	r2, [r4, #4]
 800be68:	2100      	movs	r1, #0
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7f4 f9b8 	bl	80001e0 <memchr>
 800be70:	b108      	cbz	r0, 800be76 <_printf_i+0x1f2>
 800be72:	1b80      	subs	r0, r0, r6
 800be74:	6060      	str	r0, [r4, #4]
 800be76:	6863      	ldr	r3, [r4, #4]
 800be78:	6123      	str	r3, [r4, #16]
 800be7a:	2300      	movs	r3, #0
 800be7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be80:	e7a8      	b.n	800bdd4 <_printf_i+0x150>
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	4632      	mov	r2, r6
 800be86:	4649      	mov	r1, r9
 800be88:	4640      	mov	r0, r8
 800be8a:	47d0      	blx	sl
 800be8c:	3001      	adds	r0, #1
 800be8e:	d0ab      	beq.n	800bde8 <_printf_i+0x164>
 800be90:	6823      	ldr	r3, [r4, #0]
 800be92:	079b      	lsls	r3, r3, #30
 800be94:	d413      	bmi.n	800bebe <_printf_i+0x23a>
 800be96:	68e0      	ldr	r0, [r4, #12]
 800be98:	9b03      	ldr	r3, [sp, #12]
 800be9a:	4298      	cmp	r0, r3
 800be9c:	bfb8      	it	lt
 800be9e:	4618      	movlt	r0, r3
 800bea0:	e7a4      	b.n	800bdec <_printf_i+0x168>
 800bea2:	2301      	movs	r3, #1
 800bea4:	4632      	mov	r2, r6
 800bea6:	4649      	mov	r1, r9
 800bea8:	4640      	mov	r0, r8
 800beaa:	47d0      	blx	sl
 800beac:	3001      	adds	r0, #1
 800beae:	d09b      	beq.n	800bde8 <_printf_i+0x164>
 800beb0:	3501      	adds	r5, #1
 800beb2:	68e3      	ldr	r3, [r4, #12]
 800beb4:	9903      	ldr	r1, [sp, #12]
 800beb6:	1a5b      	subs	r3, r3, r1
 800beb8:	42ab      	cmp	r3, r5
 800beba:	dcf2      	bgt.n	800bea2 <_printf_i+0x21e>
 800bebc:	e7eb      	b.n	800be96 <_printf_i+0x212>
 800bebe:	2500      	movs	r5, #0
 800bec0:	f104 0619 	add.w	r6, r4, #25
 800bec4:	e7f5      	b.n	800beb2 <_printf_i+0x22e>
 800bec6:	bf00      	nop
 800bec8:	0800c4f5 	.word	0x0800c4f5
 800becc:	0800c506 	.word	0x0800c506

0800bed0 <__retarget_lock_acquire_recursive>:
 800bed0:	4770      	bx	lr

0800bed2 <__retarget_lock_release_recursive>:
 800bed2:	4770      	bx	lr

0800bed4 <memmove>:
 800bed4:	4288      	cmp	r0, r1
 800bed6:	b510      	push	{r4, lr}
 800bed8:	eb01 0402 	add.w	r4, r1, r2
 800bedc:	d902      	bls.n	800bee4 <memmove+0x10>
 800bede:	4284      	cmp	r4, r0
 800bee0:	4623      	mov	r3, r4
 800bee2:	d807      	bhi.n	800bef4 <memmove+0x20>
 800bee4:	1e43      	subs	r3, r0, #1
 800bee6:	42a1      	cmp	r1, r4
 800bee8:	d008      	beq.n	800befc <memmove+0x28>
 800beea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bef2:	e7f8      	b.n	800bee6 <memmove+0x12>
 800bef4:	4402      	add	r2, r0
 800bef6:	4601      	mov	r1, r0
 800bef8:	428a      	cmp	r2, r1
 800befa:	d100      	bne.n	800befe <memmove+0x2a>
 800befc:	bd10      	pop	{r4, pc}
 800befe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf06:	e7f7      	b.n	800bef8 <memmove+0x24>

0800bf08 <_realloc_r>:
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0a:	4607      	mov	r7, r0
 800bf0c:	4614      	mov	r4, r2
 800bf0e:	460e      	mov	r6, r1
 800bf10:	b921      	cbnz	r1, 800bf1c <_realloc_r+0x14>
 800bf12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf16:	4611      	mov	r1, r2
 800bf18:	f7ff bc54 	b.w	800b7c4 <_malloc_r>
 800bf1c:	b922      	cbnz	r2, 800bf28 <_realloc_r+0x20>
 800bf1e:	f7ff fc01 	bl	800b724 <_free_r>
 800bf22:	4625      	mov	r5, r4
 800bf24:	4628      	mov	r0, r5
 800bf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf28:	f000 f814 	bl	800bf54 <_malloc_usable_size_r>
 800bf2c:	42a0      	cmp	r0, r4
 800bf2e:	d20f      	bcs.n	800bf50 <_realloc_r+0x48>
 800bf30:	4621      	mov	r1, r4
 800bf32:	4638      	mov	r0, r7
 800bf34:	f7ff fc46 	bl	800b7c4 <_malloc_r>
 800bf38:	4605      	mov	r5, r0
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	d0f2      	beq.n	800bf24 <_realloc_r+0x1c>
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4622      	mov	r2, r4
 800bf42:	f7ff fbd9 	bl	800b6f8 <memcpy>
 800bf46:	4631      	mov	r1, r6
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f7ff fbeb 	bl	800b724 <_free_r>
 800bf4e:	e7e9      	b.n	800bf24 <_realloc_r+0x1c>
 800bf50:	4635      	mov	r5, r6
 800bf52:	e7e7      	b.n	800bf24 <_realloc_r+0x1c>

0800bf54 <_malloc_usable_size_r>:
 800bf54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf58:	1f18      	subs	r0, r3, #4
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	bfbc      	itt	lt
 800bf5e:	580b      	ldrlt	r3, [r1, r0]
 800bf60:	18c0      	addlt	r0, r0, r3
 800bf62:	4770      	bx	lr

0800bf64 <_init>:
 800bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf66:	bf00      	nop
 800bf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf6a:	bc08      	pop	{r3}
 800bf6c:	469e      	mov	lr, r3
 800bf6e:	4770      	bx	lr

0800bf70 <_fini>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	bf00      	nop
 800bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf76:	bc08      	pop	{r3}
 800bf78:	469e      	mov	lr, r3
 800bf7a:	4770      	bx	lr
