
T6_L15_I2C_OLED_BMP280_FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c040  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a5c  0800c1e0  0800c1e0  0001c1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fc3c  0801fc3c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801fc3c  0801fc3c  0002fc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fc44  0801fc44  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fc44  0801fc44  0002fc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fc48  0801fc48  0002fc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801fc4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ea8  200001e4  0801fe30  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000308c  0801fe30  0003308c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfdb  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9e  00000000  00000000  0004c1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0004fd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  000511c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abd5  00000000  00000000  00052428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a833  00000000  00000000  0006cffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0717  00000000  00000000  00087830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00127f47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006544  00000000  00000000  0012800c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  0012e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c1c8 	.word	0x0800c1c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800c1c8 	.word	0x0800c1c8

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	; 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dmul>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006d6:	bf1d      	ittte	ne
 80006d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006dc:	ea94 0f0c 	teqne	r4, ip
 80006e0:	ea95 0f0c 	teqne	r5, ip
 80006e4:	f000 f8de 	bleq	80008a4 <__aeabi_dmul+0x1dc>
 80006e8:	442c      	add	r4, r5
 80006ea:	ea81 0603 	eor.w	r6, r1, r3
 80006ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006fa:	bf18      	it	ne
 80006fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000708:	d038      	beq.n	800077c <__aeabi_dmul+0xb4>
 800070a:	fba0 ce02 	umull	ip, lr, r0, r2
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000716:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800071a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800071e:	f04f 0600 	mov.w	r6, #0
 8000722:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000726:	f09c 0f00 	teq	ip, #0
 800072a:	bf18      	it	ne
 800072c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000730:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000734:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000738:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800073c:	d204      	bcs.n	8000748 <__aeabi_dmul+0x80>
 800073e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000742:	416d      	adcs	r5, r5
 8000744:	eb46 0606 	adc.w	r6, r6, r6
 8000748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800074c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800075c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000760:	bf88      	it	hi
 8000762:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000766:	d81e      	bhi.n	80007a6 <__aeabi_dmul+0xde>
 8000768:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800076c:	bf08      	it	eq
 800076e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000772:	f150 0000 	adcs.w	r0, r0, #0
 8000776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000780:	ea46 0101 	orr.w	r1, r6, r1
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000790:	bfc2      	ittt	gt
 8000792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800079a:	bd70      	popgt	{r4, r5, r6, pc}
 800079c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a0:	f04f 0e00 	mov.w	lr, #0
 80007a4:	3c01      	subs	r4, #1
 80007a6:	f300 80ab 	bgt.w	8000900 <__aeabi_dmul+0x238>
 80007aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ae:	bfde      	ittt	le
 80007b0:	2000      	movle	r0, #0
 80007b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007b6:	bd70      	pople	{r4, r5, r6, pc}
 80007b8:	f1c4 0400 	rsb	r4, r4, #0
 80007bc:	3c20      	subs	r4, #32
 80007be:	da35      	bge.n	800082c <__aeabi_dmul+0x164>
 80007c0:	340c      	adds	r4, #12
 80007c2:	dc1b      	bgt.n	80007fc <__aeabi_dmul+0x134>
 80007c4:	f104 0414 	add.w	r4, r4, #20
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f305 	lsl.w	r3, r0, r5
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ec:	eb42 0106 	adc.w	r1, r2, r6
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 040c 	rsb	r4, r4, #12
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f304 	lsl.w	r3, r0, r4
 8000808:	fa20 f005 	lsr.w	r0, r0, r5
 800080c:	fa01 f204 	lsl.w	r2, r1, r4
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800081c:	f141 0100 	adc.w	r1, r1, #0
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f205 	lsl.w	r2, r0, r5
 8000834:	ea4e 0e02 	orr.w	lr, lr, r2
 8000838:	fa20 f304 	lsr.w	r3, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea43 0302 	orr.w	r3, r3, r2
 8000844:	fa21 f004 	lsr.w	r0, r1, r4
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	fa21 f204 	lsr.w	r2, r1, r4
 8000850:	ea20 0002 	bic.w	r0, r0, r2
 8000854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f094 0f00 	teq	r4, #0
 8000868:	d10f      	bne.n	800088a <__aeabi_dmul+0x1c2>
 800086a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800086e:	0040      	lsls	r0, r0, #1
 8000870:	eb41 0101 	adc.w	r1, r1, r1
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3c01      	subeq	r4, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1a6>
 800087e:	ea41 0106 	orr.w	r1, r1, r6
 8000882:	f095 0f00 	teq	r5, #0
 8000886:	bf18      	it	ne
 8000888:	4770      	bxne	lr
 800088a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	eb43 0303 	adc.w	r3, r3, r3
 8000894:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3d01      	subeq	r5, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1c6>
 800089e:	ea43 0306 	orr.w	r3, r3, r6
 80008a2:	4770      	bx	lr
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ac:	bf18      	it	ne
 80008ae:	ea95 0f0c 	teqne	r5, ip
 80008b2:	d00c      	beq.n	80008ce <__aeabi_dmul+0x206>
 80008b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b8:	bf18      	it	ne
 80008ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008be:	d1d1      	bne.n	8000864 <__aeabi_dmul+0x19c>
 80008c0:	ea81 0103 	eor.w	r1, r1, r3
 80008c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d2:	bf06      	itte	eq
 80008d4:	4610      	moveq	r0, r2
 80008d6:	4619      	moveq	r1, r3
 80008d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008dc:	d019      	beq.n	8000912 <__aeabi_dmul+0x24a>
 80008de:	ea94 0f0c 	teq	r4, ip
 80008e2:	d102      	bne.n	80008ea <__aeabi_dmul+0x222>
 80008e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008e8:	d113      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	d105      	bne.n	80008fc <__aeabi_dmul+0x234>
 80008f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f4:	bf1c      	itt	ne
 80008f6:	4610      	movne	r0, r2
 80008f8:	4619      	movne	r1, r3
 80008fa:	d10a      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008fc:	ea81 0103 	eor.w	r1, r1, r3
 8000900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000904:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000908:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000916:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800091a:	bd70      	pop	{r4, r5, r6, pc}

0800091c <__aeabi_ddiv>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800092a:	bf1d      	ittte	ne
 800092c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000930:	ea94 0f0c 	teqne	r4, ip
 8000934:	ea95 0f0c 	teqne	r5, ip
 8000938:	f000 f8a7 	bleq	8000a8a <__aeabi_ddiv+0x16e>
 800093c:	eba4 0405 	sub.w	r4, r4, r5
 8000940:	ea81 0e03 	eor.w	lr, r1, r3
 8000944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000948:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800094c:	f000 8088 	beq.w	8000a60 <__aeabi_ddiv+0x144>
 8000950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000954:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800095c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000960:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800096c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000970:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000974:	429d      	cmp	r5, r3
 8000976:	bf08      	it	eq
 8000978:	4296      	cmpeq	r6, r2
 800097a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800097e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000982:	d202      	bcs.n	800098a <__aeabi_ddiv+0x6e>
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	1ab6      	subs	r6, r6, r2
 800098c:	eb65 0503 	sbc.w	r5, r5, r3
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800099a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009fc:	d018      	beq.n	8000a30 <__aeabi_ddiv+0x114>
 80009fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a1a:	d1c0      	bne.n	800099e <__aeabi_ddiv+0x82>
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a20:	d10b      	bne.n	8000a3a <__aeabi_ddiv+0x11e>
 8000a22:	ea41 0100 	orr.w	r1, r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a2e:	e7b6      	b.n	800099e <__aeabi_ddiv+0x82>
 8000a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a34:	bf04      	itt	eq
 8000a36:	4301      	orreq	r1, r0
 8000a38:	2000      	moveq	r0, #0
 8000a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a3e:	bf88      	it	hi
 8000a40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a44:	f63f aeaf 	bhi.w	80007a6 <__aeabi_dmul+0xde>
 8000a48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a4c:	bf04      	itt	eq
 8000a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a56:	f150 0000 	adcs.w	r0, r0, #0
 8000a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a6c:	bfc2      	ittt	gt
 8000a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a76:	bd70      	popgt	{r4, r5, r6, pc}
 8000a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7c:	f04f 0e00 	mov.w	lr, #0
 8000a80:	3c01      	subs	r4, #1
 8000a82:	e690      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a84:	ea45 0e06 	orr.w	lr, r5, r6
 8000a88:	e68d      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	bf08      	it	eq
 8000a94:	ea95 0f0c 	teqeq	r5, ip
 8000a98:	f43f af3b 	beq.w	8000912 <__aeabi_dmul+0x24a>
 8000a9c:	ea94 0f0c 	teq	r4, ip
 8000aa0:	d10a      	bne.n	8000ab8 <__aeabi_ddiv+0x19c>
 8000aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aa6:	f47f af34 	bne.w	8000912 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	f47f af25 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	e72c      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000ab8:	ea95 0f0c 	teq	r5, ip
 8000abc:	d106      	bne.n	8000acc <__aeabi_ddiv+0x1b0>
 8000abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac2:	f43f aefd 	beq.w	80008c0 <__aeabi_dmul+0x1f8>
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	e722      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ad6:	f47f aec5 	bne.w	8000864 <__aeabi_dmul+0x19c>
 8000ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ade:	f47f af0d 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ae6:	f47f aeeb 	bne.w	80008c0 <__aeabi_dmul+0x1f8>
 8000aea:	e712      	b.n	8000912 <__aeabi_dmul+0x24a>

08000aec <__gedf2>:
 8000aec:	f04f 3cff 	mov.w	ip, #4294967295
 8000af0:	e006      	b.n	8000b00 <__cmpdf2+0x4>
 8000af2:	bf00      	nop

08000af4 <__ledf2>:
 8000af4:	f04f 0c01 	mov.w	ip, #1
 8000af8:	e002      	b.n	8000b00 <__cmpdf2+0x4>
 8000afa:	bf00      	nop

08000afc <__cmpdf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b16:	d01b      	beq.n	8000b50 <__cmpdf2+0x54>
 8000b18:	b001      	add	sp, #4
 8000b1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b1e:	bf0c      	ite	eq
 8000b20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b24:	ea91 0f03 	teqne	r1, r3
 8000b28:	bf02      	ittt	eq
 8000b2a:	ea90 0f02 	teqeq	r0, r2
 8000b2e:	2000      	moveq	r0, #0
 8000b30:	4770      	bxeq	lr
 8000b32:	f110 0f00 	cmn.w	r0, #0
 8000b36:	ea91 0f03 	teq	r1, r3
 8000b3a:	bf58      	it	pl
 8000b3c:	4299      	cmppl	r1, r3
 8000b3e:	bf08      	it	eq
 8000b40:	4290      	cmpeq	r0, r2
 8000b42:	bf2c      	ite	cs
 8000b44:	17d8      	asrcs	r0, r3, #31
 8000b46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b4a:	f040 0001 	orr.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__cmpdf2+0x64>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d107      	bne.n	8000b70 <__cmpdf2+0x74>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d1d6      	bne.n	8000b18 <__cmpdf2+0x1c>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d0d3      	beq.n	8000b18 <__cmpdf2+0x1c>
 8000b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdrcmple>:
 8000b78:	4684      	mov	ip, r0
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	468c      	mov	ip, r1
 8000b80:	4619      	mov	r1, r3
 8000b82:	4663      	mov	r3, ip
 8000b84:	e000      	b.n	8000b88 <__aeabi_cdcmpeq>
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdcmpeq>:
 8000b88:	b501      	push	{r0, lr}
 8000b8a:	f7ff ffb7 	bl	8000afc <__cmpdf2>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	bf48      	it	mi
 8000b92:	f110 0f00 	cmnmi.w	r0, #0
 8000b96:	bd01      	pop	{r0, pc}

08000b98 <__aeabi_dcmpeq>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff fff4 	bl	8000b88 <__aeabi_cdcmpeq>
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2001      	moveq	r0, #1
 8000ba4:	2000      	movne	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmplt>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffea 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bb4:	bf34      	ite	cc
 8000bb6:	2001      	movcc	r0, #1
 8000bb8:	2000      	movcs	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_dcmple>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff ffe0 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bc8:	bf94      	ite	ls
 8000bca:	2001      	movls	r0, #1
 8000bcc:	2000      	movhi	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_dcmpge>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff ffce 	bl	8000b78 <__aeabi_cdrcmple>
 8000bdc:	bf94      	ite	ls
 8000bde:	2001      	movls	r0, #1
 8000be0:	2000      	movhi	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_dcmpgt>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffc4 	bl	8000b78 <__aeabi_cdrcmple>
 8000bf0:	bf34      	ite	cc
 8000bf2:	2001      	movcc	r0, #1
 8000bf4:	2000      	movcs	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmpun>:
 8000bfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x10>
 8000c06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c0a:	d10a      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x20>
 8000c16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0001 	mov.w	r0, #1
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2iz>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c30:	d215      	bcs.n	8000c5e <__aeabi_d2iz+0x36>
 8000c32:	d511      	bpl.n	8000c58 <__aeabi_d2iz+0x30>
 8000c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d912      	bls.n	8000c64 <__aeabi_d2iz+0x3c>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c62:	d105      	bne.n	8000c70 <__aeabi_d2iz+0x48>
 8000c64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	bf08      	it	eq
 8000c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2f>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c80:	bf24      	itt	cs
 8000c82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c8a:	d90d      	bls.n	8000ca8 <__aeabi_d2f+0x30>
 8000c8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cac:	d121      	bne.n	8000cf2 <__aeabi_d2f+0x7a>
 8000cae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cb2:	bfbc      	itt	lt
 8000cb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	4770      	bxlt	lr
 8000cba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cc2:	f1c2 0218 	rsb	r2, r2, #24
 8000cc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cce:	fa20 f002 	lsr.w	r0, r0, r2
 8000cd2:	bf18      	it	ne
 8000cd4:	f040 0001 	orrne.w	r0, r0, #1
 8000cd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ce0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ce4:	ea40 000c 	orr.w	r0, r0, ip
 8000ce8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cf0:	e7cc      	b.n	8000c8c <__aeabi_d2f+0x14>
 8000cf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cf6:	d107      	bne.n	8000d08 <__aeabi_d2f+0x90>
 8000cf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d06:	4770      	bxne	lr
 8000d08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <__aeabi_uldivmod>:
 8000d18:	b953      	cbnz	r3, 8000d30 <__aeabi_uldivmod+0x18>
 8000d1a:	b94a      	cbnz	r2, 8000d30 <__aeabi_uldivmod+0x18>
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	bf08      	it	eq
 8000d20:	2800      	cmpeq	r0, #0
 8000d22:	bf1c      	itt	ne
 8000d24:	f04f 31ff 	movne.w	r1, #4294967295
 8000d28:	f04f 30ff 	movne.w	r0, #4294967295
 8000d2c:	f000 b96e 	b.w	800100c <__aeabi_idiv0>
 8000d30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d38:	f000 f806 	bl	8000d48 <__udivmoddi4>
 8000d3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d44:	b004      	add	sp, #16
 8000d46:	4770      	bx	lr

08000d48 <__udivmoddi4>:
 8000d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d4c:	9d08      	ldr	r5, [sp, #32]
 8000d4e:	4604      	mov	r4, r0
 8000d50:	468c      	mov	ip, r1
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8083 	bne.w	8000e5e <__udivmoddi4+0x116>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	4617      	mov	r7, r2
 8000d5c:	d947      	bls.n	8000dee <__udivmoddi4+0xa6>
 8000d5e:	fab2 f282 	clz	r2, r2
 8000d62:	b142      	cbz	r2, 8000d76 <__udivmoddi4+0x2e>
 8000d64:	f1c2 0020 	rsb	r0, r2, #32
 8000d68:	fa24 f000 	lsr.w	r0, r4, r0
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	4097      	lsls	r7, r2
 8000d70:	ea40 0c01 	orr.w	ip, r0, r1
 8000d74:	4094      	lsls	r4, r2
 8000d76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d80:	fa1f fe87 	uxth.w	lr, r7
 8000d84:	fb08 c116 	mls	r1, r8, r6, ip
 8000d88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d90:	4299      	cmp	r1, r3
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x60>
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 8119 	bcs.w	8000fd0 <__udivmoddi4+0x288>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 8116 	bls.w	8000fd0 <__udivmoddi4+0x288>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	443b      	add	r3, r7
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x8c>
 8000dc0:	193c      	adds	r4, r7, r4
 8000dc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc6:	f080 8105 	bcs.w	8000fd4 <__udivmoddi4+0x28c>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	f240 8102 	bls.w	8000fd4 <__udivmoddi4+0x28c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd8:	eba4 040e 	sub.w	r4, r4, lr
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa0>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	b902      	cbnz	r2, 8000df2 <__udivmoddi4+0xaa>
 8000df0:	deff      	udf	#255	; 0xff
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	d150      	bne.n	8000e9c <__udivmoddi4+0x154>
 8000dfa:	1bcb      	subs	r3, r1, r7
 8000dfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e00:	fa1f f887 	uxth.w	r8, r7
 8000e04:	2601      	movs	r6, #1
 8000e06:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e0a:	0c21      	lsrs	r1, r4, #16
 8000e0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb08 f30c 	mul.w	r3, r8, ip
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0xe4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0xe2>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	f200 80e9 	bhi.w	8000ffc <__udivmoddi4+0x2b4>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1ac9      	subs	r1, r1, r3
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x10c>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x10a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80d9 	bhi.w	8001004 <__udivmoddi4+0x2bc>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e7bf      	b.n	8000dde <__udivmoddi4+0x96>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d909      	bls.n	8000e76 <__udivmoddi4+0x12e>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	f000 80b1 	beq.w	8000fca <__udivmoddi4+0x282>
 8000e68:	2600      	movs	r6, #0
 8000e6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6e:	4630      	mov	r0, r6
 8000e70:	4631      	mov	r1, r6
 8000e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e76:	fab3 f683 	clz	r6, r3
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	d14a      	bne.n	8000f14 <__udivmoddi4+0x1cc>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d302      	bcc.n	8000e88 <__udivmoddi4+0x140>
 8000e82:	4282      	cmp	r2, r0
 8000e84:	f200 80b8 	bhi.w	8000ff8 <__udivmoddi4+0x2b0>
 8000e88:	1a84      	subs	r4, r0, r2
 8000e8a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8e:	2001      	movs	r0, #1
 8000e90:	468c      	mov	ip, r1
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	d0a8      	beq.n	8000de8 <__udivmoddi4+0xa0>
 8000e96:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e9a:	e7a5      	b.n	8000de8 <__udivmoddi4+0xa0>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea4:	4097      	lsls	r7, r2
 8000ea6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eaa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eae:	40d9      	lsrs	r1, r3
 8000eb0:	4330      	orrs	r0, r6
 8000eb2:	0c03      	lsrs	r3, r0, #16
 8000eb4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb8:	fa1f f887 	uxth.w	r8, r7
 8000ebc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ec0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec4:	fb06 f108 	mul.w	r1, r6, r8
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	fa04 f402 	lsl.w	r4, r4, r2
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x19c>
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed6:	f080 808d 	bcs.w	8000ff4 <__udivmoddi4+0x2ac>
 8000eda:	4299      	cmp	r1, r3
 8000edc:	f240 808a 	bls.w	8000ff4 <__udivmoddi4+0x2ac>
 8000ee0:	3e02      	subs	r6, #2
 8000ee2:	443b      	add	r3, r7
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b281      	uxth	r1, r0
 8000ee8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ef0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef4:	fb00 f308 	mul.w	r3, r0, r8
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d907      	bls.n	8000f0c <__udivmoddi4+0x1c4>
 8000efc:	1879      	adds	r1, r7, r1
 8000efe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f02:	d273      	bcs.n	8000fec <__udivmoddi4+0x2a4>
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d971      	bls.n	8000fec <__udivmoddi4+0x2a4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	4439      	add	r1, r7
 8000f0c:	1acb      	subs	r3, r1, r3
 8000f0e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f12:	e778      	b.n	8000e06 <__udivmoddi4+0xbe>
 8000f14:	f1c6 0c20 	rsb	ip, r6, #32
 8000f18:	fa03 f406 	lsl.w	r4, r3, r6
 8000f1c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f20:	431c      	orrs	r4, r3
 8000f22:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f26:	fa01 f306 	lsl.w	r3, r1, r6
 8000f2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f32:	431f      	orrs	r7, r3
 8000f34:	0c3b      	lsrs	r3, r7, #16
 8000f36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3a:	fa1f f884 	uxth.w	r8, r4
 8000f3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f42:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f46:	fb09 fa08 	mul.w	sl, r9, r8
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f50:	fa00 f306 	lsl.w	r3, r0, r6
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x220>
 8000f56:	1861      	adds	r1, r4, r1
 8000f58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f5c:	d248      	bcs.n	8000ff0 <__udivmoddi4+0x2a8>
 8000f5e:	458a      	cmp	sl, r1
 8000f60:	d946      	bls.n	8000ff0 <__udivmoddi4+0x2a8>
 8000f62:	f1a9 0902 	sub.w	r9, r9, #2
 8000f66:	4421      	add	r1, r4
 8000f68:	eba1 010a 	sub.w	r1, r1, sl
 8000f6c:	b2bf      	uxth	r7, r7
 8000f6e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f72:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f76:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f7a:	fb00 f808 	mul.w	r8, r0, r8
 8000f7e:	45b8      	cmp	r8, r7
 8000f80:	d907      	bls.n	8000f92 <__udivmoddi4+0x24a>
 8000f82:	19e7      	adds	r7, r4, r7
 8000f84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f88:	d22e      	bcs.n	8000fe8 <__udivmoddi4+0x2a0>
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d92c      	bls.n	8000fe8 <__udivmoddi4+0x2a0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	4427      	add	r7, r4
 8000f92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f96:	eba7 0708 	sub.w	r7, r7, r8
 8000f9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9e:	454f      	cmp	r7, r9
 8000fa0:	46c6      	mov	lr, r8
 8000fa2:	4649      	mov	r1, r9
 8000fa4:	d31a      	bcc.n	8000fdc <__udivmoddi4+0x294>
 8000fa6:	d017      	beq.n	8000fd8 <__udivmoddi4+0x290>
 8000fa8:	b15d      	cbz	r5, 8000fc2 <__udivmoddi4+0x27a>
 8000faa:	ebb3 020e 	subs.w	r2, r3, lr
 8000fae:	eb67 0701 	sbc.w	r7, r7, r1
 8000fb2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb6:	40f2      	lsrs	r2, r6
 8000fb8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fbc:	40f7      	lsrs	r7, r6
 8000fbe:	e9c5 2700 	strd	r2, r7, [r5]
 8000fc2:	2600      	movs	r6, #0
 8000fc4:	4631      	mov	r1, r6
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	462e      	mov	r6, r5
 8000fcc:	4628      	mov	r0, r5
 8000fce:	e70b      	b.n	8000de8 <__udivmoddi4+0xa0>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0x60>
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	e6fd      	b.n	8000dd4 <__udivmoddi4+0x8c>
 8000fd8:	4543      	cmp	r3, r8
 8000fda:	d2e5      	bcs.n	8000fa8 <__udivmoddi4+0x260>
 8000fdc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fe0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	e7df      	b.n	8000fa8 <__udivmoddi4+0x260>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e7d2      	b.n	8000f92 <__udivmoddi4+0x24a>
 8000fec:	4660      	mov	r0, ip
 8000fee:	e78d      	b.n	8000f0c <__udivmoddi4+0x1c4>
 8000ff0:	4681      	mov	r9, r0
 8000ff2:	e7b9      	b.n	8000f68 <__udivmoddi4+0x220>
 8000ff4:	4666      	mov	r6, ip
 8000ff6:	e775      	b.n	8000ee4 <__udivmoddi4+0x19c>
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	e74a      	b.n	8000e92 <__udivmoddi4+0x14a>
 8000ffc:	f1ac 0c02 	sub.w	ip, ip, #2
 8001000:	4439      	add	r1, r7
 8001002:	e713      	b.n	8000e2c <__udivmoddi4+0xe4>
 8001004:	3802      	subs	r0, #2
 8001006:	443c      	add	r4, r7
 8001008:	e724      	b.n	8000e54 <__udivmoddi4+0x10c>
 800100a:	bf00      	nop

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	font = font_t;
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <GFX_SetFont+0x1c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000060c 	.word	0x2000060c

08001030 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af02      	add	r7, sp, #8
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	460b      	mov	r3, r1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	4613      	mov	r3, r2
 8001044:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b7e      	cmp	r3, #126	; 0x7e
 800104a:	f200 80a3 	bhi.w	8001194 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]
 8001052:	e096      	b.n	8001182 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8001054:	4b51      	ldr	r3, [pc, #324]	; (800119c <GFX_DrawChar+0x16c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	3b20      	subs	r3, #32
 800105c:	494f      	ldr	r1, [pc, #316]	; (800119c <GFX_DrawChar+0x16c>)
 800105e:	6809      	ldr	r1, [r1, #0]
 8001060:	3101      	adds	r1, #1
 8001062:	7809      	ldrb	r1, [r1, #0]
 8001064:	fb01 f103 	mul.w	r1, r1, r3
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	440b      	add	r3, r1
 800106c:	3302      	adds	r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001074:	2300      	movs	r3, #0
 8001076:	757b      	strb	r3, [r7, #21]
 8001078:	e078      	b.n	800116c <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 800107a:	7dbb      	ldrb	r3, [r7, #22]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d032      	beq.n	80010ea <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001084:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <GFX_DrawChar+0x170>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d113      	bne.n	80010b4 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	b29a      	uxth	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b29b      	uxth	r3, r3
 8001098:	b218      	sxth	r0, r3
 800109a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	79ba      	ldrb	r2, [r7, #6]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f000 fa6f 	bl	8001590 <SSD1306_DrawPixel>
 80010b2:	e052      	b.n	800115a <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	4a3a      	ldr	r2, [pc, #232]	; (80011a0 <GFX_DrawChar+0x170>)
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	fb02 f203 	mul.w	r2, r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	18d0      	adds	r0, r2, r3
 80010c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010c6:	4a36      	ldr	r2, [pc, #216]	; (80011a0 <GFX_DrawChar+0x170>)
 80010c8:	7812      	ldrb	r2, [r2, #0]
 80010ca:	fb02 f203 	mul.w	r2, r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	18d1      	adds	r1, r2, r3
 80010d2:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <GFX_DrawChar+0x170>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <GFX_DrawChar+0x170>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b29c      	uxth	r4, r3
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	4623      	mov	r3, r4
 80010e4:	f000 f960 	bl	80013a8 <GFX_DrawFillRectangle>
 80010e8:	e037      	b.n	800115a <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 80010ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d133      	bne.n	800115a <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <GFX_DrawChar+0x170>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d114      	bne.n	8001124 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	b29b      	uxth	r3, r3
 8001102:	4413      	add	r3, r2
 8001104:	b29b      	uxth	r3, r3
 8001106:	b218      	sxth	r0, r3
 8001108:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800110c:	b29a      	uxth	r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	b29b      	uxth	r3, r3
 8001112:	4413      	add	r3, r2
 8001114:	b29b      	uxth	r3, r3
 8001116:	b21b      	sxth	r3, r3
 8001118:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800111c:	4619      	mov	r1, r3
 800111e:	f000 fa37 	bl	8001590 <SSD1306_DrawPixel>
 8001122:	e01a      	b.n	800115a <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <GFX_DrawChar+0x170>)
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	fb02 f203 	mul.w	r2, r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	18d0      	adds	r0, r2, r3
 8001132:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <GFX_DrawChar+0x170>)
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	fb02 f203 	mul.w	r2, r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	18d1      	adds	r1, r2, r3
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <GFX_DrawChar+0x170>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <GFX_DrawChar+0x170>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b29c      	uxth	r4, r3
 800114e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4623      	mov	r3, r4
 8001156:	f000 f927 	bl	80013a8 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800115a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	3301      	adds	r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	757b      	strb	r3, [r7, #21]
 8001166:	7dbb      	ldrb	r3, [r7, #22]
 8001168:	085b      	lsrs	r3, r3, #1
 800116a:	75bb      	strb	r3, [r7, #22]
 800116c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <GFX_DrawChar+0x16c>)
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4293      	cmp	r3, r2
 8001178:	f6ff af7f 	blt.w	800107a <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	3301      	adds	r3, #1
 8001180:	75fb      	strb	r3, [r7, #23]
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <GFX_DrawChar+0x16c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	7dfa      	ldrb	r2, [r7, #23]
 800118c:	429a      	cmp	r2, r3
 800118e:	f4ff af61 	bcc.w	8001054 <GFX_DrawChar+0x24>
 8001192:	e000      	b.n	8001196 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001194:	bf00      	nop
            }
        }
    }
}
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	2000060c 	.word	0x2000060c
 80011a0:	20000000 	.word	0x20000000

080011a4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80011bc:	e03e      	b.n	800123c <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 80011be:	78f9      	ldrb	r1, [r7, #3]
 80011c0:	7cfa      	ldrb	r2, [r7, #19]
 80011c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	460b      	mov	r3, r1
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff ff2f 	bl	8001030 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <GFX_DrawString+0xb0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <GFX_DrawString+0xb4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	fb03 f302 	mul.w	r3, r3, r2
 80011e4:	3301      	adds	r3, #1
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4413      	add	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 80011ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d120      	bne.n	8001236 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	74bb      	strb	r3, [r7, #18]
 80011f8:	e012      	b.n	8001220 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	3b01      	subs	r3, #1
 8001200:	b29b      	uxth	r3, r3
 8001202:	b218      	sxth	r0, r3
 8001204:	7cbb      	ldrb	r3, [r7, #18]
 8001206:	b29a      	uxth	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	b29b      	uxth	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	b29b      	uxth	r3, r3
 8001210:	b21b      	sxth	r3, r3
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	f000 f9bb 	bl	8001590 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800121a:	7cbb      	ldrb	r3, [r7, #18]
 800121c:	3301      	adds	r3, #1
 800121e:	74bb      	strb	r3, [r7, #18]
 8001220:	7cba      	ldrb	r2, [r7, #18]
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <GFX_DrawString+0xb0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <GFX_DrawString+0xb4>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	fb03 f301 	mul.w	r3, r3, r1
 8001232:	429a      	cmp	r2, r3
 8001234:	dbe1      	blt.n	80011fa <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ba      	bne.n	80011be <GFX_DrawString+0x1a>
	}
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000060c 	.word	0x2000060c
 8001258:	20000000 	.word	0x20000000

0800125c <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001274:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1acb      	subs	r3, r1, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	bfb8      	it	lt
 8001282:	425b      	neglt	r3, r3
 8001284:	429a      	cmp	r2, r3
 8001286:	bfcc      	ite	gt
 8001288:	2301      	movgt	r3, #1
 800128a:	2300      	movle	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001290:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00b      	beq.n	80012b0 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	623b      	str	r3, [r7, #32]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dd0b      	ble.n	80012d0 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bfb8      	it	lt
 80012e8:	425b      	neglt	r3, r3
 80012ea:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80012ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012f0:	0fda      	lsrs	r2, r3, #31
 80012f2:	4413      	add	r3, r2
 80012f4:	105b      	asrs	r3, r3, #1
 80012f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	da02      	bge.n	8001306 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001300:	2301      	movs	r3, #1
 8001302:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001304:	e030      	b.n	8001368 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8001306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800130c:	e02c      	b.n	8001368 <GFX_WriteLine+0x10c>
	        if (steep) {
 800130e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001312:	2b00      	cmp	r3, #0
 8001314:	d009      	beq.n	800132a <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	b21b      	sxth	r3, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	b211      	sxth	r1, r2
 800131e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f934 	bl	8001590 <SSD1306_DrawPixel>
 8001328:	e008      	b.n	800133c <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	b21b      	sxth	r3, r3
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	b211      	sxth	r1, r2
 8001332:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f92a 	bl	8001590 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 800133c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800133e:	8abb      	ldrh	r3, [r7, #20]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001346:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800134a:	2b00      	cmp	r3, #0
 800134c:	da09      	bge.n	8001362 <GFX_WriteLine+0x106>
	            y_start += ystep;
 800134e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	4413      	add	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001358:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800135a:	8afb      	ldrh	r3, [r7, #22]
 800135c:	4413      	add	r3, r2
 800135e:	b29b      	uxth	r3, r3
 8001360:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3301      	adds	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	ddce      	ble.n	800130e <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3730      	adds	r7, #48	; 0x30
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af02      	add	r7, sp, #8
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	1e5a      	subs	r2, r3, #1
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff ff5e 	bl	800125c <GFX_WriteLine>
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	4611      	mov	r1, r2
 80013b4:	461a      	mov	r2, r3
 80013b6:	460b      	mov	r3, r1
 80013b8:	80fb      	strh	r3, [r7, #6]
 80013ba:	4613      	mov	r3, r2
 80013bc:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e009      	b.n	80013d8 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80013c4:	88ba      	ldrh	r2, [r7, #4]
 80013c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ca:	68b9      	ldr	r1, [r7, #8]
 80013cc:	6978      	ldr	r0, [r7, #20]
 80013ce:	f7ff ffd4 	bl	800137a <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	88fa      	ldrh	r2, [r7, #6]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dbef      	blt.n	80013c4 <GFX_DrawFillRectangle+0x1c>
    }

}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS << 1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <SSD1306_Command+0x30>)
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	2301      	movs	r3, #1
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	2200      	movs	r2, #0
 8001410:	2178      	movs	r1, #120	; 0x78
 8001412:	f003 f861 	bl	80044d8 <HAL_I2C_Mem_Write>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000610 	.word	0x20000610

08001424 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af02      	add	r7, sp, #8
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
#ifdef SSD1306_USE_DMA
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <SSD1306_Data+0x3c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d10a      	bne.n	8001456 <SSD1306_Data+0x32>
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS << 1), 0x40, 1, Data, Size);
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <SSD1306_Data+0x3c>)
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	2240      	movs	r2, #64	; 0x40
 8001450:	2178      	movs	r1, #120	; 0x78
 8001452:	f003 fb61 	bl	8004b18 <HAL_I2C_Mem_Write_DMA>
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS << 1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
#endif

}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000610 	.word	0x20000610

08001464 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 800146c:	4a28      	ldr	r2, [pc, #160]	; (8001510 <SSD1306_Init+0xac>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001472:	20ae      	movs	r0, #174	; 0xae
 8001474:	f7ff ffbc 	bl	80013f0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001478:	20d5      	movs	r0, #213	; 0xd5
 800147a:	f7ff ffb9 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0x80);
 800147e:	2080      	movs	r0, #128	; 0x80
 8001480:	f7ff ffb6 	bl	80013f0 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT-1);
 8001484:	203f      	movs	r0, #63	; 0x3f
 8001486:	f7ff ffb3 	bl	80013f0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 800148a:	20d3      	movs	r0, #211	; 0xd3
 800148c:	f7ff ffb0 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0x0);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff ffad 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8001496:	2040      	movs	r0, #64	; 0x40
 8001498:	f7ff ffaa 	bl	80013f0 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 800149c:	208d      	movs	r0, #141	; 0x8d
 800149e:	f7ff ffa7 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0x14);
 80014a2:	2014      	movs	r0, #20
 80014a4:	f7ff ffa4 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(SSD1306_MEMORYMODE);
 80014a8:	2020      	movs	r0, #32
 80014aa:	f7ff ffa1 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0x00);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff ff9e 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80014b4:	20a1      	movs	r0, #161	; 0xa1
 80014b6:	f7ff ff9b 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80014ba:	20c8      	movs	r0, #200	; 0xc8
 80014bc:	f7ff ff98 	bl	80013f0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80014c0:	20da      	movs	r0, #218	; 0xda
 80014c2:	f7ff ff95 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0x12);
 80014c6:	2012      	movs	r0, #18
 80014c8:	f7ff ff92 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80014cc:	2081      	movs	r0, #129	; 0x81
 80014ce:	f7ff ff8f 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0xFF);
 80014d2:	20ff      	movs	r0, #255	; 0xff
 80014d4:	f7ff ff8c 	bl	80013f0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80014d8:	20d9      	movs	r0, #217	; 0xd9
 80014da:	f7ff ff89 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80014de:	20f1      	movs	r0, #241	; 0xf1
 80014e0:	f7ff ff86 	bl	80013f0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT);
 80014e4:	20db      	movs	r0, #219	; 0xdb
 80014e6:	f7ff ff83 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0x40);
 80014ea:	2040      	movs	r0, #64	; 0x40
 80014ec:	f7ff ff80 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME);
 80014f0:	20a4      	movs	r0, #164	; 0xa4
 80014f2:	f7ff ff7d 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);
 80014f6:	20a6      	movs	r0, #166	; 0xa6
 80014f8:	f7ff ff7a 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80014fc:	202e      	movs	r0, #46	; 0x2e
 80014fe:	f7ff ff77 	bl	80013f0 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON);
 8001502:	20af      	movs	r0, #175	; 0xaf
 8001504:	f7ff ff74 	bl	80013f0 <SSD1306_Command>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000610 	.word	0x20000610

08001514 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001518:	2022      	movs	r0, #34	; 0x22
 800151a:	f7ff ff69 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0);
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff ff66 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001524:	20ff      	movs	r0, #255	; 0xff
 8001526:	f7ff ff63 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 800152a:	2021      	movs	r0, #33	; 0x21
 800152c:	f7ff ff60 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(0);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff ff5d 	bl	80013f0 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH-1);
 8001536:	207f      	movs	r0, #127	; 0x7f
 8001538:	f7ff ff5a 	bl	80013f0 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 800153c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <SSD1306_Display+0x38>)
 8001542:	f7ff ff6f 	bl	8001424 <SSD1306_Data>
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000200 	.word	0x20000200

08001550 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <SSD1306_Clear+0x22>
 8001560:	2b01      	cmp	r3, #1
 8001562:	d10d      	bne.n	8001580 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 8001564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001568:	21ff      	movs	r1, #255	; 0xff
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <SSD1306_Clear+0x3c>)
 800156c:	f007 fde0 	bl	8009130 <memset>
		break;
 8001570:	e007      	b.n	8001582 <SSD1306_Clear+0x32>
	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8001572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001576:	2100      	movs	r1, #0
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <SSD1306_Clear+0x3c>)
 800157a:	f007 fdd9 	bl	8009130 <memset>
		break;
 800157e:	e000      	b.n	8001582 <SSD1306_Clear+0x32>
	default:
		break;
 8001580:	bf00      	nop
	}
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000200 	.word	0x20000200

08001590 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	460b      	mov	r3, r1
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	70fb      	strb	r3, [r7, #3]
	if ((x <0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80015a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db79      	blt.n	800169e <SSD1306_DrawPixel+0x10e>
 80015aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ae:	2b7f      	cmp	r3, #127	; 0x7f
 80015b0:	dc75      	bgt.n	800169e <SSD1306_DrawPixel+0x10e>
 80015b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db71      	blt.n	800169e <SSD1306_DrawPixel+0x10e>
 80015ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015be:	2b3f      	cmp	r3, #63	; 0x3f
 80015c0:	dc6d      	bgt.n	800169e <SSD1306_DrawPixel+0x10e>
		return;

	switch (Color)
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d049      	beq.n	800165c <SSD1306_DrawPixel+0xcc>
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	dc69      	bgt.n	80016a0 <SSD1306_DrawPixel+0x110>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d022      	beq.n	8001616 <SSD1306_DrawPixel+0x86>
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d165      	bne.n	80016a0 <SSD1306_DrawPixel+0x110>
	{
		case SSD1306_WHITE:
	      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 80015d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da00      	bge.n	80015e2 <SSD1306_DrawPixel+0x52>
 80015e0:	3307      	adds	r3, #7
 80015e2:	10db      	asrs	r3, r3, #3
 80015e4:	b218      	sxth	r0, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	01db      	lsls	r3, r3, #7
 80015ea:	4413      	add	r3, r2
 80015ec:	4a2f      	ldr	r2, [pc, #188]	; (80016ac <SSD1306_DrawPixel+0x11c>)
 80015ee:	5cd3      	ldrb	r3, [r2, r3]
 80015f0:	b25a      	sxtb	r2, r3
 80015f2:	88bb      	ldrh	r3, [r7, #4]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b259      	sxtb	r1, r3
 8001604:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001608:	4603      	mov	r3, r0
 800160a:	01db      	lsls	r3, r3, #7
 800160c:	4413      	add	r3, r2
 800160e:	b2c9      	uxtb	r1, r1
 8001610:	4a26      	ldr	r2, [pc, #152]	; (80016ac <SSD1306_DrawPixel+0x11c>)
 8001612:	54d1      	strb	r1, [r2, r3]
	      break;
 8001614:	e044      	b.n	80016a0 <SSD1306_DrawPixel+0x110>
	    case SSD1306_BLACK:
	      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001616:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800161a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	da00      	bge.n	8001624 <SSD1306_DrawPixel+0x94>
 8001622:	3307      	adds	r3, #7
 8001624:	10db      	asrs	r3, r3, #3
 8001626:	b218      	sxth	r0, r3
 8001628:	4603      	mov	r3, r0
 800162a:	01db      	lsls	r3, r3, #7
 800162c:	4413      	add	r3, r2
 800162e:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <SSD1306_DrawPixel+0x11c>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	b25a      	sxtb	r2, r3
 8001634:	88bb      	ldrh	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	b25b      	sxtb	r3, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	b25b      	sxtb	r3, r3
 8001646:	4013      	ands	r3, r2
 8001648:	b259      	sxtb	r1, r3
 800164a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800164e:	4603      	mov	r3, r0
 8001650:	01db      	lsls	r3, r3, #7
 8001652:	4413      	add	r3, r2
 8001654:	b2c9      	uxtb	r1, r1
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <SSD1306_DrawPixel+0x11c>)
 8001658:	54d1      	strb	r1, [r2, r3]
	      break;
 800165a:	e021      	b.n	80016a0 <SSD1306_DrawPixel+0x110>
	    case SSD1306_INVERSE:
	      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 800165c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001660:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	da00      	bge.n	800166a <SSD1306_DrawPixel+0xda>
 8001668:	3307      	adds	r3, #7
 800166a:	10db      	asrs	r3, r3, #3
 800166c:	b218      	sxth	r0, r3
 800166e:	4603      	mov	r3, r0
 8001670:	01db      	lsls	r3, r3, #7
 8001672:	4413      	add	r3, r2
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <SSD1306_DrawPixel+0x11c>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	b25a      	sxtb	r2, r3
 800167a:	88bb      	ldrh	r3, [r7, #4]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	b25b      	sxtb	r3, r3
 8001688:	4053      	eors	r3, r2
 800168a:	b259      	sxtb	r1, r3
 800168c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001690:	4603      	mov	r3, r0
 8001692:	01db      	lsls	r3, r3, #7
 8001694:	4413      	add	r3, r2
 8001696:	b2c9      	uxtb	r1, r1
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <SSD1306_DrawPixel+0x11c>)
 800169a:	54d1      	strb	r1, [r2, r3]
	      break;
 800169c:	e000      	b.n	80016a0 <SSD1306_DrawPixel+0x110>
		return;
 800169e:	bf00      	nop
	    }

}
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000200 	.word	0x20000200

080016b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_ADC1_Init+0x9c>)
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <MX_ADC1_Init+0xa0>)
 80016c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_ADC1_Init+0x9c>)
 80016ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_ADC1_Init+0x9c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_ADC1_Init+0x9c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_ADC1_Init+0x9c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_ADC1_Init+0x9c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_ADC1_Init+0x9c>)
 80016ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_ADC1_Init+0x9c>)
 80016f4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_ADC1_Init+0x9c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_ADC1_Init+0x9c>)
 8001702:	2201      	movs	r2, #1
 8001704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_ADC1_Init+0x9c>)
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_ADC1_Init+0x9c>)
 8001710:	2201      	movs	r2, #1
 8001712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <MX_ADC1_Init+0x9c>)
 8001716:	f001 f9f3 	bl	8002b00 <HAL_ADC_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001720:	f000 ff1c 	bl	800255c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001724:	2300      	movs	r3, #0
 8001726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001730:	463b      	mov	r3, r7
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_ADC1_Init+0x9c>)
 8001736:	f001 fc75 	bl	8003024 <HAL_ADC_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001740:	f000 ff0c 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000614 	.word	0x20000614
 8001750:	40012000 	.word	0x40012000

08001754 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2f      	ldr	r2, [pc, #188]	; (8001830 <HAL_ADC_MspInit+0xdc>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d157      	bne.n	8001826 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_ADC_MspInit+0xe0>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <HAL_ADC_MspInit+0xe0>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_ADC_MspInit+0xe0>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_ADC_MspInit+0xe0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a26      	ldr	r2, [pc, #152]	; (8001834 <HAL_ADC_MspInit+0xe0>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_ADC_MspInit+0xe0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ae:	2301      	movs	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b2:	2303      	movs	r3, #3
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	481d      	ldr	r0, [pc, #116]	; (8001838 <HAL_ADC_MspInit+0xe4>)
 80017c2:	f002 fba7 	bl	8003f14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <HAL_ADC_MspInit+0xe8>)
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_ADC_MspInit+0xec>)
 80017ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_ADC_MspInit+0xe8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_ADC_MspInit+0xe8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_ADC_MspInit+0xe8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_ADC_MspInit+0xe8>)
 80017e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_ADC_MspInit+0xe8>)
 80017e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_ADC_MspInit+0xe8>)
 80017f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_ADC_MspInit+0xe8>)
 80017f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_ADC_MspInit+0xe8>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_ADC_MspInit+0xe8>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800180a:	480c      	ldr	r0, [pc, #48]	; (800183c <HAL_ADC_MspInit+0xe8>)
 800180c:	f001 ffd6 	bl	80037bc <HAL_DMA_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001816:	f000 fea1 	bl	800255c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_ADC_MspInit+0xe8>)
 800181e:	639a      	str	r2, [r3, #56]	; 0x38
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_ADC_MspInit+0xe8>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	; 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40012000 	.word	0x40012000
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000
 800183c:	2000065c 	.word	0x2000065c
 8001840:	40026410 	.word	0x40026410

08001844 <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af04      	add	r7, sp, #16
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	791b      	ldrb	r3, [r3, #4]
 8001858:	b29b      	uxth	r3, r3
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	b299      	uxth	r1, r3
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	b29a      	uxth	r2, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	2301      	movs	r3, #1
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	f107 030f 	add.w	r3, r7, #15
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	f002 ff2a 	bl	80046cc <HAL_I2C_Mem_Read>

	return Value;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af04      	add	r7, sp, #16
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	70fb      	strb	r3, [r7, #3]
 800188e:	4613      	mov	r3, r2
 8001890:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	b29b      	uxth	r3, r3
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	b299      	uxth	r1, r3
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	1cbb      	adds	r3, r7, #2
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	f002 fe10 	bl	80044d8 <HAL_I2C_Mem_Write>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	791b      	ldrb	r3, [r3, #4]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	b299      	uxth	r1, r3
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	2302      	movs	r3, #2
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2301      	movs	r3, #1
 80018f0:	f002 feec 	bl	80046cc <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 80018f4:	7b7b      	ldrb	r3, [r7, #13]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	7b3b      	ldrb	r3, [r7, #12]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	b21b      	sxth	r3, r3
 8001902:	b29b      	uxth	r3, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af04      	add	r7, sp, #16
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	791b      	ldrb	r3, [r3, #4]
 8001920:	b29b      	uxth	r3, r3
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b299      	uxth	r1, r3
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	b29a      	uxth	r2, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	2303      	movs	r3, #3
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2301      	movs	r3, #1
 800193c:	f002 fec6 	bl	80046cc <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 8001940:	7b3b      	ldrb	r3, [r7, #12]
 8001942:	041a      	lsls	r2, r3, #16
 8001944:	7b7b      	ldrb	r3, [r7, #13]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	4313      	orrs	r3, r2
 800194a:	7bba      	ldrb	r2, [r7, #14]
 800194c:	4313      	orrs	r3, r2
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d901      	bls.n	800196c <BMP280_SetMode+0x16>
 8001968:	2303      	movs	r3, #3
 800196a:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800196c:	21f4      	movs	r1, #244	; 0xf4
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff68 	bl	8001844 <Read8>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 8001980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	b25a      	sxtb	r2, r3
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4313      	orrs	r3, r2
 8001990:	b25b      	sxtb	r3, r3
 8001992:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	461a      	mov	r2, r3
 8001998:	21f4      	movs	r1, #244	; 0xf4
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ff71 	bl	8001882 <Write8>
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d901      	bls.n	80019be <BMP280_SetPressureOversampling+0x16>
 80019ba:	2305      	movs	r3, #5
 80019bc:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80019be:	21f4      	movs	r1, #244	; 0xf4
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff3f 	bl	8001844 <Read8>
 80019c6:	4603      	mov	r3, r0
 80019c8:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	f023 031c 	bic.w	r3, r3, #28
 80019d0:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	f003 031c 	and.w	r3, r3, #28
 80019dc:	b25a      	sxtb	r2, r3
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	461a      	mov	r2, r3
 80019ec:	21f4      	movs	r1, #244	; 0xf4
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff47 	bl	8001882 <Write8>
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d901      	bls.n	8001a12 <BMP280_SetTemperatureOversampling+0x16>
 8001a0e:	2305      	movs	r3, #5
 8001a10:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001a12:	21f4      	movs	r1, #244	; 0xf4
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff15 	bl	8001844 <Read8>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	015b      	lsls	r3, r3, #5
 8001a2a:	b25a      	sxtb	r2, r3
 8001a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b25b      	sxtb	r3, r3
 8001a34:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	21f4      	movs	r1, #244	; 0xf4
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff20 	bl	8001882 <Write8>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 8001a52:	21fa      	movs	r1, #250	; 0xfa
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff59 	bl	800190c <Read24>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	111b      	asrs	r3, r3, #4
 8001a62:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001a64:	68fb      	ldr	r3, [r7, #12]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 8001a76:	21f7      	movs	r1, #247	; 0xf7
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff47 	bl	800190c <Read24>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	111b      	asrs	r3, r3, #4
 8001a86:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001a88:	68fb      	ldr	r3, [r7, #12]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffd4 	bl	8001a4a <BMP280_ReadTemperatureRaw>
 8001aa2:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	10da      	asrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	8b5b      	ldrh	r3, [r3, #26]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	12db      	asrs	r3, r3, #11
 8001abc:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	111b      	asrs	r3, r3, #4
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	8b52      	ldrh	r2, [r2, #26]
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	1112      	asrs	r2, r2, #4
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	8b49      	ldrh	r1, [r1, #26]
 8001ad0:	1a52      	subs	r2, r2, r1
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	139b      	asrs	r3, r3, #14
 8001ae4:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	441a      	add	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1a      	ldr	r2, [r3, #32]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3380      	adds	r3, #128	; 0x80
 8001afc:	121b      	asrs	r3, r3, #8
 8001afe:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 8001b00:	68b8      	ldr	r0, [r7, #8]
 8001b02:	f7fe fd77 	bl	80005f4 <__aeabi_i2d>
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <BMP280_ReadTemperature+0x98>)
 8001b0c:	f7fe ff06 	bl	800091c <__aeabi_ddiv>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff f8ae 	bl	8000c78 <__aeabi_d2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	ee07 3a90 	vmov	s15, r3
}
 8001b22:	eeb0 0a67 	vmov.f32	s0, s15
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40590000 	.word	0x40590000

08001b30 <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7ff ffa9 	bl	8001a94 <BMP280_ReadTemperature>
 8001b42:	eef0 7a40 	vmov.f32	s15, s0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	105b      	asrs	r3, r3, #1
 8001b52:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001b56:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	109b      	asrs	r3, r3, #2
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	1092      	asrs	r2, r2, #2
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	12db      	asrs	r3, r3, #11
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	fb03 f302 	mul.w	r3, r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4413      	add	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	109a      	asrs	r2, r3, #2
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	4413      	add	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	109b      	asrs	r3, r3, #2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	1092      	asrs	r2, r2, #2
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	135b      	asrs	r3, r3, #13
 8001bae:	fb03 f301 	mul.w	r3, r3, r1
 8001bb2:	10da      	asrs	r2, r3, #3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fb03 f301 	mul.w	r3, r3, r1
 8001bc2:	105b      	asrs	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	149b      	asrs	r3, r3, #18
 8001bc8:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	8b92      	ldrh	r2, [r2, #28]
 8001bd4:	fb02 f303 	mul.w	r3, r2, r3
 8001bd8:	13db      	asrs	r3, r3, #15
 8001bda:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 8001be2:	2301      	movs	r3, #1
 8001be4:	e054      	b.n	8001c90 <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f7ff ff41 	bl	8001a6e <BMP280_ReadPressureRaw>
 8001bec:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f5c3 1280 	rsb	r2, r3, #1048576	; 0x100000
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	131b      	asrs	r3, r3, #12
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f640 4235 	movw	r2, #3125	; 0xc35
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db06      	blt.n	8001c18 <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005a      	lsls	r2, r3, #1
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e005      	b.n	8001c24 <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	08db      	lsrs	r3, r3, #3
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	08d2      	lsrs	r2, r2, #3
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	0b5b      	lsrs	r3, r3, #13
 8001c3a:	fb03 f301 	mul.w	r3, r3, r1
 8001c3e:	131b      	asrs	r3, r3, #12
 8001c40:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c4e:	fb03 f302 	mul.w	r3, r3, r2
 8001c52:	135b      	asrs	r3, r3, #13
 8001c54:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001c62:	4413      	add	r3, r2
 8001c64:	111a      	asrs	r2, r3, #4
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4413      	add	r3, r2
 8001c6a:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 8001c6c:	69f8      	ldr	r0, [r7, #28]
 8001c6e:	f7fe fcb1 	bl	80005d4 <__aeabi_ui2d>
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <BMP280_ReadPressureAndTemperature+0x168>)
 8001c78:	f7fe fe50 	bl	800091c <__aeabi_ddiv>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7fe fff8 	bl	8000c78 <__aeabi_d2f>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	601a      	str	r2, [r3, #0]

	return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40590000 	.word	0x40590000

08001c9c <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001cb6:	21d0      	movs	r1, #208	; 0xd0
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7ff fdc3 	bl	8001844 <Read8>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
 8001cc4:	2b58      	cmp	r3, #88	; 0x58
 8001cc6:	d001      	beq.n	8001ccc <BMP280_Init+0x30>
	{
		return 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e06c      	b.n	8001da6 <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001ccc:	2188      	movs	r1, #136	; 0x88
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7ff fdf6 	bl	80018c0 <Read16>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001cdc:	218a      	movs	r1, #138	; 0x8a
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7ff fdee 	bl	80018c0 <Read16>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001cec:	218c      	movs	r1, #140	; 0x8c
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff fde6 	bl	80018c0 <Read16>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001cfc:	218e      	movs	r1, #142	; 0x8e
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f7ff fdde 	bl	80018c0 <Read16>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001d0c:	2190      	movs	r1, #144	; 0x90
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7ff fdd6 	bl	80018c0 <Read16>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001d1c:	2192      	movs	r1, #146	; 0x92
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff fdce 	bl	80018c0 <Read16>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001d2c:	2194      	movs	r1, #148	; 0x94
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7ff fdc6 	bl	80018c0 <Read16>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001d3c:	2196      	movs	r1, #150	; 0x96
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f7ff fdbe 	bl	80018c0 <Read16>
 8001d44:	4603      	mov	r3, r0
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8001d4c:	2198      	movs	r1, #152	; 0x98
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f7ff fdb6 	bl	80018c0 <Read16>
 8001d54:	4603      	mov	r3, r0
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001d5c:	219a      	movs	r1, #154	; 0x9a
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f7ff fdae 	bl	80018c0 <Read16>
 8001d64:	4603      	mov	r3, r0
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001d6c:	219c      	movs	r1, #156	; 0x9c
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fda6 	bl	80018c0 <Read16>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001d7c:	219e      	movs	r1, #158	; 0x9e
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7ff fd9e 	bl	80018c0 <Read16>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001d8c:	2105      	movs	r1, #5
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff fe34 	bl	80019fc <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001d94:	2105      	movs	r1, #5
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7ff fe06 	bl	80019a8 <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fdd9 	bl	8001956 <BMP280_SetMode>

	return 0;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <MX_DMA_Init+0x4c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <MX_DMA_Init+0x4c>)
 8001dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <MX_DMA_Init+0x4c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_DMA_Init+0x4c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <MX_DMA_Init+0x4c>)
 8001ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_DMA_Init+0x4c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]

}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a2c      	ldr	r2, [pc, #176]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <MX_GPIO_Init+0xd0>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2120      	movs	r1, #32
 8001e8a:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <MX_GPIO_Init+0xd4>)
 8001e8c:	f002 f9c6 	bl	800421c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <MX_GPIO_Init+0xd8>)
 8001ea8:	f002 f834 	bl	8003f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001eac:	2320      	movs	r3, #32
 8001eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <MX_GPIO_Init+0xd4>)
 8001ec4:	f002 f826 	bl	8003f14 <HAL_GPIO_Init>

}
 8001ec8:	bf00      	nop
 8001eca:	3728      	adds	r7, #40	; 0x28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40020800 	.word	0x40020800

08001edc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001ee2:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <MX_I2C1_Init+0x54>)
 8001ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001ee8:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <MX_I2C1_Init+0x58>)
 8001eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001f1a:	f002 f999 	bl	8004250 <HAL_I2C_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f24:	f000 fb1a 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	2000071c 	.word	0x2000071c
 8001f30:	40005400 	.word	0x40005400
 8001f34:	00061a80 	.word	0x00061a80

08001f38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a30      	ldr	r2, [pc, #192]	; (8002018 <HAL_I2C_MspInit+0xe0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d159      	bne.n	800200e <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	; (800201c <HAL_I2C_MspInit+0xe4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a2e      	ldr	r2, [pc, #184]	; (800201c <HAL_I2C_MspInit+0xe4>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <HAL_I2C_MspInit+0xe4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f7c:	2312      	movs	r3, #18
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4823      	ldr	r0, [pc, #140]	; (8002020 <HAL_I2C_MspInit+0xe8>)
 8001f94:	f001 ffbe 	bl	8003f14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	4b1f      	ldr	r3, [pc, #124]	; (800201c <HAL_I2C_MspInit+0xe4>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	4a1e      	ldr	r2, [pc, #120]	; (800201c <HAL_I2C_MspInit+0xe4>)
 8001fa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_I2C_MspInit+0xe4>)
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_I2C_MspInit+0xf0>)
 8001fb8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001ff2:	480c      	ldr	r0, [pc, #48]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8001ff4:	f001 fbe2 	bl	80037bc <HAL_DMA_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001ffe:	f000 faad 	bl	800255c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_I2C_MspInit+0xec>)
 8002006:	635a      	str	r2, [r3, #52]	; 0x34
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_I2C_MspInit+0xec>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	; 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40005400 	.word	0x40005400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020400 	.word	0x40020400
 8002024:	200006bc 	.word	0x200006bc
 8002028:	40026028 	.word	0x40026028

0800202c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002032:	f000 fcf3 	bl	8002a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002036:	f000 f8eb 	bl	8002210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800203a:	f7ff fee1 	bl	8001e00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800203e:	f000 fc51 	bl	80028e4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002042:	f7ff feb5 	bl	8001db0 <MX_DMA_Init>
  MX_I2C1_Init();
 8002046:	f7ff ff49 	bl	8001edc <MX_I2C1_Init>
  MX_ADC1_Init();
 800204a:	f7ff fb31 	bl	80016b0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800204e:	f000 fbdd 	bl	800280c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002052:	f000 f947 	bl	80022e4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init(&hi2c1);
 8002056:	485d      	ldr	r0, [pc, #372]	; (80021cc <main+0x1a0>)
 8002058:	f7ff fa04 	bl	8001464 <SSD1306_Init>

  HAL_TIM_Base_Start(&htim2);
 800205c:	485c      	ldr	r0, [pc, #368]	; (80021d0 <main+0x1a4>)
 800205e:	f005 fba9 	bl	80077b4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&AdcMicrophone,FFT_SAMPLES);
 8002062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002066:	495b      	ldr	r1, [pc, #364]	; (80021d4 <main+0x1a8>)
 8002068:	485b      	ldr	r0, [pc, #364]	; (80021d8 <main+0x1ac>)
 800206a:	f000 fecd 	bl	8002e08 <HAL_ADC_Start_DMA>

  arm_rfft_fast_init_f32(&FFTHandler, FFT_SAMPLES);
 800206e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002072:	485a      	ldr	r0, [pc, #360]	; (80021dc <main+0x1b0>)
 8002074:	f006 f85e 	bl	8008134 <arm_rfft_fast_init_f32>

  BMP280_Init(&Bmp280, &hi2c1, BMP280_ADDRESS);
 8002078:	2276      	movs	r2, #118	; 0x76
 800207a:	4954      	ldr	r1, [pc, #336]	; (80021cc <main+0x1a0>)
 800207c:	4858      	ldr	r0, [pc, #352]	; (80021e0 <main+0x1b4>)
 800207e:	f7ff fe0d 	bl	8001c9c <BMP280_Init>

  GFX_SetFont(font_8x5);
 8002082:	4858      	ldr	r0, [pc, #352]	; (80021e4 <main+0x1b8>)
 8002084:	f7fe ffc4 	bl	8001010 <GFX_SetFont>
  SSD1306_Clear(BLACK);
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff fa61 	bl	8001550 <SSD1306_Clear>
  SSD1306_Display();
 800208e:	f7ff fa41 	bl	8001514 <SSD1306_Display>

  SoftTimerBMP = HAL_GetTick();
 8002092:	f000 fd29 	bl	8002ae8 <HAL_GetTick>
 8002096:	4603      	mov	r3, r0
 8002098:	4a53      	ldr	r2, [pc, #332]	; (80021e8 <main+0x1bc>)
 800209a:	6013      	str	r3, [r2, #0]
  SoftTimerOLED= HAL_GetTick();
 800209c:	f000 fd24 	bl	8002ae8 <HAL_GetTick>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a52      	ldr	r2, [pc, #328]	; (80021ec <main+0x1c0>)
 80020a4:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  //
	  //FFT
	  //
	  if(SamplesReady == 1)
 80020a6:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <main+0x1c4>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d11c      	bne.n	80020ea <main+0xbe>
	  {
		  SamplesReady = 0;
 80020b0:	4b4f      	ldr	r3, [pc, #316]	; (80021f0 <main+0x1c4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
		  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	e010      	b.n	80020de <main+0xb2>
		  {
			  FFTInBuffer[i] = (float)AdcMicrophone[i];
 80020bc:	4a45      	ldr	r2, [pc, #276]	; (80021d4 <main+0x1a8>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020cc:	4a49      	ldr	r2, [pc, #292]	; (80021f4 <main+0x1c8>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	edc3 7a00 	vstr	s15, [r3]
		  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3301      	adds	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e4:	d3ea      	bcc.n	80020bc <main+0x90>
		  }

		  CalculateFFT();
 80020e6:	f000 f953 	bl	8002390 <CalculateFFT>
	  }
	  //
	  //BMP280
	  //
	  if((HAL_GetTick() - SoftTimerBMP) > 10)
 80020ea:	f000 fcfd 	bl	8002ae8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <main+0x1bc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b0a      	cmp	r3, #10
 80020f8:	d910      	bls.n	800211c <main+0xf0>
	  {
		  SoftTimerBMP = HAL_GetTick();
 80020fa:	f000 fcf5 	bl	8002ae8 <HAL_GetTick>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a39      	ldr	r2, [pc, #228]	; (80021e8 <main+0x1bc>)
 8002102:	6013      	str	r3, [r2, #0]
		  if(Bmp280.bmp_i2c->State == HAL_I2C_STATE_READY)
 8002104:	4b36      	ldr	r3, [pc, #216]	; (80021e0 <main+0x1b4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b20      	cmp	r3, #32
 8002110:	d104      	bne.n	800211c <main+0xf0>
		  {
			  BMP280_ReadPressureAndTemperature(&Bmp280, &Pressure, &Temp);
 8002112:	4a39      	ldr	r2, [pc, #228]	; (80021f8 <main+0x1cc>)
 8002114:	4939      	ldr	r1, [pc, #228]	; (80021fc <main+0x1d0>)
 8002116:	4832      	ldr	r0, [pc, #200]	; (80021e0 <main+0x1b4>)
 8002118:	f7ff fd0a 	bl	8001b30 <BMP280_ReadPressureAndTemperature>
		  }
	  }
	  //
	  //OLED
	  //
	  if((HAL_GetTick() - SoftTimerOLED) > 100)
 800211c:	f000 fce4 	bl	8002ae8 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	4b32      	ldr	r3, [pc, #200]	; (80021ec <main+0x1c0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	; 0x64
 800212a:	d9bc      	bls.n	80020a6 <main+0x7a>
	  {
		  SSD1306_Clear(BLACK);
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff fa0f 	bl	8001550 <SSD1306_Clear>
		  SoftTimerOLED = HAL_GetTick();
 8002132:	f000 fcd9 	bl	8002ae8 <HAL_GetTick>
 8002136:	4603      	mov	r3, r0
 8002138:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <main+0x1c0>)
 800213a:	6013      	str	r3, [r2, #0]
		  sprintf(Message, "Press: %.2f hPa", Pressure);
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <main+0x1d0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa69 	bl	8000618 <__aeabi_f2d>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	492d      	ldr	r1, [pc, #180]	; (8002200 <main+0x1d4>)
 800214c:	482d      	ldr	r0, [pc, #180]	; (8002204 <main+0x1d8>)
 800214e:	f007 fc61 	bl	8009a14 <siprintf>
		  GFX_DrawString(0,0,Message,WHITE,0);
 8002152:	2300      	movs	r3, #0
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2301      	movs	r3, #1
 8002158:	4a2a      	ldr	r2, [pc, #168]	; (8002204 <main+0x1d8>)
 800215a:	2100      	movs	r1, #0
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff f821 	bl	80011a4 <GFX_DrawString>

		  sprintf(Message, "Temp: %.2f C", Temp);
 8002162:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <main+0x1cc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fa56 	bl	8000618 <__aeabi_f2d>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4925      	ldr	r1, [pc, #148]	; (8002208 <main+0x1dc>)
 8002172:	4824      	ldr	r0, [pc, #144]	; (8002204 <main+0x1d8>)
 8002174:	f007 fc4e 	bl	8009a14 <siprintf>
		  GFX_DrawString(0,10,Message,WHITE,0);
 8002178:	2300      	movs	r3, #0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2301      	movs	r3, #1
 800217e:	4a21      	ldr	r2, [pc, #132]	; (8002204 <main+0x1d8>)
 8002180:	210a      	movs	r1, #10
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff f80e 	bl	80011a4 <GFX_DrawString>

		  for(uint8_t i = 0; i < 10; i++)
 8002188:	2300      	movs	r3, #0
 800218a:	70fb      	strb	r3, [r7, #3]
 800218c:	e018      	b.n	80021c0 <main+0x194>
		  {
			  GFX_DrawFillRectangle(10+(i*11), 64-OutFreqArray[i], 10, OutFreqArray[i], WHITE);
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	f103 000a 	add.w	r0, r3, #10
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	4a1a      	ldr	r2, [pc, #104]	; (800220c <main+0x1e0>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	4a18      	ldr	r2, [pc, #96]	; (800220c <main+0x1e0>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2201      	movs	r2, #1
 80021b2:	9200      	str	r2, [sp, #0]
 80021b4:	220a      	movs	r2, #10
 80021b6:	f7ff f8f7 	bl	80013a8 <GFX_DrawFillRectangle>
		  for(uint8_t i = 0; i < 10; i++)
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	3301      	adds	r3, #1
 80021be:	70fb      	strb	r3, [r7, #3]
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	2b09      	cmp	r3, #9
 80021c4:	d9e3      	bls.n	800218e <main+0x162>
		  }
		  SSD1306_Display();
 80021c6:	f7ff f9a5 	bl	8001514 <SSD1306_Display>
	  if(SamplesReady == 1)
 80021ca:	e76c      	b.n	80020a6 <main+0x7a>
 80021cc:	2000071c 	.word	0x2000071c
 80021d0:	20002fec 	.word	0x20002fec
 80021d4:	20001794 	.word	0x20001794
 80021d8:	20000614 	.word	0x20000614
 80021dc:	2000177c 	.word	0x2000177c
 80021e0:	20002fb8 	.word	0x20002fb8
 80021e4:	0800c200 	.word	0x0800c200
 80021e8:	20000770 	.word	0x20000770
 80021ec:	20000774 	.word	0x20000774
 80021f0:	20001fb4 	.word	0x20001fb4
 80021f4:	20001fb8 	.word	0x20001fb8
 80021f8:	20001778 	.word	0x20001778
 80021fc:	20002fdc 	.word	0x20002fdc
 8002200:	0800c1e0 	.word	0x0800c1e0
 8002204:	20001f94 	.word	0x20001f94
 8002208:	0800c1f0 	.word	0x0800c1f0
 800220c:	20002fe0 	.word	0x20002fe0

08002210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b094      	sub	sp, #80	; 0x50
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002216:	f107 0320 	add.w	r3, r7, #32
 800221a:	2230      	movs	r2, #48	; 0x30
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f006 ff86 	bl	8009130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <SystemClock_Config+0xcc>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	4a27      	ldr	r2, [pc, #156]	; (80022dc <SystemClock_Config+0xcc>)
 800223e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <SystemClock_Config+0xcc>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002250:	2300      	movs	r3, #0
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <SystemClock_Config+0xd0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <SystemClock_Config+0xd0>)
 800225a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <SystemClock_Config+0xd0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800226c:	2302      	movs	r3, #2
 800226e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002270:	2301      	movs	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002274:	2310      	movs	r3, #16
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002278:	2302      	movs	r3, #2
 800227a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800227c:	2300      	movs	r3, #0
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002280:	2310      	movs	r3, #16
 8002282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002284:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800228a:	2304      	movs	r3, #4
 800228c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800228e:	2304      	movs	r3, #4
 8002290:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002292:	f107 0320 	add.w	r3, r7, #32
 8002296:	4618      	mov	r0, r3
 8002298:	f004 fdc8 	bl	8006e2c <HAL_RCC_OscConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80022a2:	f000 f95b 	bl	800255c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a6:	230f      	movs	r3, #15
 80022a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022aa:	2302      	movs	r3, #2
 80022ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	2102      	movs	r1, #2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 f82a 	bl	800731c <HAL_RCC_ClockConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022ce:	f000 f945 	bl	800255c <Error_Handler>
  }
}
 80022d2:	bf00      	nop
 80022d4:	3750      	adds	r7, #80	; 0x50
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40007000 	.word	0x40007000

080022e4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	201f      	movs	r0, #31
 80022ee:	f001 fa2e 	bl	800374e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022f2:	201f      	movs	r0, #31
 80022f4:	f001 fa47 	bl	8003786 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2100      	movs	r1, #0
 80022fc:	200c      	movs	r0, #12
 80022fe:	f001 fa26 	bl	800374e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002302:	200c      	movs	r0, #12
 8002304:	f001 fa3f 	bl	8003786 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2038      	movs	r0, #56	; 0x38
 800230e:	f001 fa1e 	bl	800374e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002312:	2038      	movs	r0, #56	; 0x38
 8002314:	f001 fa37 	bl	8003786 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	2012      	movs	r0, #18
 800231e:	f001 fa16 	bl	800374e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002322:	2012      	movs	r0, #18
 8002324:	f001 fa2f 	bl	8003786 <HAL_NVIC_EnableIRQ>
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a05      	ldr	r2, [pc, #20]	; (8002350 <HAL_ADC_ConvCpltCallback+0x24>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d102      	bne.n	8002344 <HAL_ADC_ConvCpltCallback+0x18>
		SamplesReady = 1;
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_ADC_ConvCpltCallback+0x28>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
	}
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40012000 	.word	0x40012000
 8002354:	20001fb4 	.word	0x20001fb4

08002358 <complexABS>:

float complexABS(float real,float compl)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002362:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8002366:	edd7 7a01 	vldr	s15, [r7, #4]
 800236a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800236e:	edd7 7a00 	vldr	s15, [r7]
 8002372:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	f009 fdab 	bl	800bed8 <sqrtf>
 8002382:	eef0 7a40 	vmov.f32	s15, s0
}
 8002386:	eeb0 0a67 	vmov.f32	s0, s15
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <CalculateFFT>:

void CalculateFFT()
{
 8002390:	b580      	push	{r7, lr}
 8002392:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
	arm_rfft_fast_f32(&FFTHandler,FFTInBuffer,FFTOutBuffer, 0);
 800239a:	2300      	movs	r3, #0
 800239c:	4a6b      	ldr	r2, [pc, #428]	; (800254c <CalculateFFT+0x1bc>)
 800239e:	496c      	ldr	r1, [pc, #432]	; (8002550 <CalculateFFT+0x1c0>)
 80023a0:	486c      	ldr	r0, [pc, #432]	; (8002554 <CalculateFFT+0x1c4>)
 80023a2:	f005 ff4b 	bl	800823c <arm_rfft_fast_f32>

	int Freqs[FFT_SAMPLES];
	int FreqPoint = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80023ac:	f102 020c 	add.w	r2, r2, #12
 80023b0:	6013      	str	r3, [r2, #0]
	int Offset = 65; // variable noise floor offset
 80023b2:	2341      	movs	r3, #65	; 0x41
 80023b4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80023b8:	f102 0204 	add.w	r2, r2, #4
 80023bc:	6013      	str	r3, [r2, #0]

	//calculate abs values and linear-to-db
	for (int i = 0; i < FFT_SAMPLES; i = i+2)
 80023be:	2300      	movs	r3, #0
 80023c0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80023c4:	f102 0208 	add.w	r2, r2, #8
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e067      	b.n	800249c <CalculateFFT+0x10c>
		{
			Freqs[FreqPoint] = (int)(20*log10f(complexABS(FFTOutBuffer[i], FFTOutBuffer[i+1]))) - Offset;
 80023cc:	4a5f      	ldr	r2, [pc, #380]	; (800254c <CalculateFFT+0x1bc>)
 80023ce:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80023d2:	f103 0308 	add.w	r3, r3, #8
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80023e4:	f103 0308 	add.w	r3, r3, #8
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	4a57      	ldr	r2, [pc, #348]	; (800254c <CalculateFFT+0x1bc>)
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	ed93 7a00 	vldr	s14, [r3]
 80023f6:	eef0 0a47 	vmov.f32	s1, s14
 80023fa:	eeb0 0a67 	vmov.f32	s0, s15
 80023fe:	f7ff ffab 	bl	8002358 <complexABS>
 8002402:	eef0 7a40 	vmov.f32	s15, s0
 8002406:	eeb0 0a67 	vmov.f32	s0, s15
 800240a:	f009 fd2f 	bl	800be6c <log10f>
 800240e:	eef0 7a40 	vmov.f32	s15, s0
 8002412:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241e:	ee17 2a90 	vmov	r2, s15
 8002422:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002426:	f103 0304 	add.w	r3, r3, #4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	1ad1      	subs	r1, r2, r3
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	3b0c      	subs	r3, #12
 8002434:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002438:	f102 020c 	add.w	r2, r2, #12
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			if(Freqs[FreqPoint] < 0)
 8002442:	f107 0310 	add.w	r3, r7, #16
 8002446:	3b0c      	subs	r3, #12
 8002448:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800244c:	f102 020c 	add.w	r2, r2, #12
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002456:	2b00      	cmp	r3, #0
 8002458:	da0a      	bge.n	8002470 <CalculateFFT+0xe0>
			{
				Freqs[FreqPoint] = 0;
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	3b0c      	subs	r3, #12
 8002460:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002464:	f102 020c 	add.w	r2, r2, #12
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	2100      	movs	r1, #0
 800246c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			FreqPoint++;
 8002470:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002474:	f103 030c 	add.w	r3, r3, #12
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3301      	adds	r3, #1
 800247c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002480:	f102 020c 	add.w	r2, r2, #12
 8002484:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < FFT_SAMPLES; i = i+2)
 8002486:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800248a:	f103 0308 	add.w	r3, r3, #8
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3302      	adds	r3, #2
 8002492:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002496:	f102 0208 	add.w	r2, r2, #8
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80024a0:	f103 0308 	add.w	r3, r3, #8
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024aa:	db8f      	blt.n	80023cc <CalculateFFT+0x3c>
		}
	OutFreqArray[0] = (uint8_t)Freqs[1]; // 22 Hz
 80024ac:	f107 0310 	add.w	r3, r7, #16
 80024b0:	3b0c      	subs	r3, #12
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <CalculateFFT+0x1c8>)
 80024b8:	701a      	strb	r2, [r3, #0]
	OutFreqArray[1] = (uint8_t)Freqs[2]; // 63 Hz
 80024ba:	f107 0310 	add.w	r3, r7, #16
 80024be:	3b0c      	subs	r3, #12
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <CalculateFFT+0x1c8>)
 80024c6:	705a      	strb	r2, [r3, #1]
	OutFreqArray[2] = (uint8_t)Freqs[3]; // 125 Hz
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	3b0c      	subs	r3, #12
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <CalculateFFT+0x1c8>)
 80024d4:	709a      	strb	r2, [r3, #2]
	OutFreqArray[3] = (uint8_t)Freqs[6]; // 250 Hz
 80024d6:	f107 0310 	add.w	r3, r7, #16
 80024da:	3b0c      	subs	r3, #12
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <CalculateFFT+0x1c8>)
 80024e2:	70da      	strb	r2, [r3, #3]
	OutFreqArray[4] = (uint8_t)Freqs[12]; // 500 Hz
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	3b0c      	subs	r3, #12
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <CalculateFFT+0x1c8>)
 80024f0:	711a      	strb	r2, [r3, #4]
	OutFreqArray[5] = (uint8_t)Freqs[23]; // 1000 Hz
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	3b0c      	subs	r3, #12
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <CalculateFFT+0x1c8>)
 80024fe:	715a      	strb	r2, [r3, #5]
	OutFreqArray[6] = (uint8_t)Freqs[51]; // 2200 Hz
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	3b0c      	subs	r3, #12
 8002506:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <CalculateFFT+0x1c8>)
 800250e:	719a      	strb	r2, [r3, #6]
	OutFreqArray[7] = (uint8_t)Freqs[104]; // 4500 Hz
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	3b0c      	subs	r3, #12
 8002516:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <CalculateFFT+0x1c8>)
 800251e:	71da      	strb	r2, [r3, #7]
	OutFreqArray[8] = (uint8_t)Freqs[207]; // 9000 Hz
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	3b0c      	subs	r3, #12
 8002526:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <CalculateFFT+0x1c8>)
 800252e:	721a      	strb	r2, [r3, #8]
	OutFreqArray[9] = (uint8_t)Freqs[344]; // 15000 Hz
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	3b0c      	subs	r3, #12
 8002536:	f8d3 3560 	ldr.w	r3, [r3, #1376]	; 0x560
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <CalculateFFT+0x1c8>)
 800253e:	725a      	strb	r2, [r3, #9]

}
 8002540:	bf00      	nop
 8002542:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000778 	.word	0x20000778
 8002550:	20001fb8 	.word	0x20001fb8
 8002554:	2000177c 	.word	0x2000177c
 8002558:	20002fe0 	.word	0x20002fe0

0800255c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002560:	b672      	cpsid	i
}
 8002562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002564:	e7fe      	b.n	8002564 <Error_Handler+0x8>
	...

08002568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_MspInit+0x4c>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <HAL_MspInit+0x4c>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_MspInit+0x4c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_MspInit+0x4c>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <HAL_MspInit+0x4c>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_MspInit+0x4c>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025a6:	2007      	movs	r0, #7
 80025a8:	f001 f8c6 	bl	8003738 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800

080025b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <NMI_Handler+0x4>

080025be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c2:	e7fe      	b.n	80025c2 <HardFault_Handler+0x4>

080025c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <MemManage_Handler+0x4>

080025ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ce:	e7fe      	b.n	80025ce <BusFault_Handler+0x4>

080025d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <UsageFault_Handler+0x4>

080025d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002604:	f000 fa5c 	bl	8002ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <DMA1_Stream1_IRQHandler+0x10>)
 8002612:	f001 f9fb 	bl	8003a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200006bc 	.word	0x200006bc

08002620 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <ADC_IRQHandler+0x10>)
 8002626:	f000 faae 	bl	8002b86 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000614 	.word	0x20000614

08002634 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <I2C1_EV_IRQHandler+0x10>)
 800263a:	f002 fbcf 	bl	8004ddc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000071c 	.word	0x2000071c

08002648 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <DMA2_Stream0_IRQHandler+0x10>)
 800264e:	f001 f9dd 	bl	8003a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000065c 	.word	0x2000065c

0800265c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
	return 1;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_kill>:

int _kill(int pid, int sig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002676:	f006 fd31 	bl	80090dc <__errno>
 800267a:	4603      	mov	r3, r0
 800267c:	2216      	movs	r2, #22
 800267e:	601a      	str	r2, [r3, #0]
	return -1;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_exit>:

void _exit (int status)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ffe7 	bl	800266c <_kill>
	while (1) {}		/* Make sure we hang here */
 800269e:	e7fe      	b.n	800269e <_exit+0x12>

080026a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e00a      	b.n	80026c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026b2:	f3af 8000 	nop.w
 80026b6:	4601      	mov	r1, r0
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	60ba      	str	r2, [r7, #8]
 80026be:	b2ca      	uxtb	r2, r1
 80026c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dbf0      	blt.n	80026b2 <_read+0x12>
	}

return len;
 80026d0:	687b      	ldr	r3, [r7, #4]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e009      	b.n	8002700 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	60ba      	str	r2, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3301      	adds	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	dbf1      	blt.n	80026ec <_write+0x12>
	}
	return len;
 8002708:	687b      	ldr	r3, [r7, #4]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <_close>:

int _close(int file)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
	return -1;
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800273a:	605a      	str	r2, [r3, #4]
	return 0;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <_isatty>:

int _isatty(int file)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
	return 1;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
	return 0;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <_sbrk+0x5c>)
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <_sbrk+0x60>)
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <_sbrk+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <_sbrk+0x64>)
 800279a:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <_sbrk+0x68>)
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d207      	bcs.n	80027bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ac:	f006 fc96 	bl	80090dc <__errno>
 80027b0:	4603      	mov	r3, r0
 80027b2:	220c      	movs	r2, #12
 80027b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	e009      	b.n	80027d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <_sbrk+0x64>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <_sbrk+0x64>)
 80027cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ce:	68fb      	ldr	r3, [r7, #12]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20020000 	.word	0x20020000
 80027dc:	00000400 	.word	0x00000400
 80027e0:	20000600 	.word	0x20000600
 80027e4:	20003090 	.word	0x20003090

080027e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <SystemInit+0x20>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <SystemInit+0x20>)
 80027f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002812:	f107 0308 	add.w	r3, r7, #8
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002820:	463b      	mov	r3, r7
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <MX_TIM2_Init+0x94>)
 800282a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800282e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <MX_TIM2_Init+0x94>)
 8002832:	2202      	movs	r2, #2
 8002834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <MX_TIM2_Init+0x94>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 634;
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <MX_TIM2_Init+0x94>)
 800283e:	f240 227a 	movw	r2, #634	; 0x27a
 8002842:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <MX_TIM2_Init+0x94>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <MX_TIM2_Init+0x94>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002850:	4813      	ldr	r0, [pc, #76]	; (80028a0 <MX_TIM2_Init+0x94>)
 8002852:	f004 ff5f 	bl	8007714 <HAL_TIM_Base_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800285c:	f7ff fe7e 	bl	800255c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	4619      	mov	r1, r3
 800286c:	480c      	ldr	r0, [pc, #48]	; (80028a0 <MX_TIM2_Init+0x94>)
 800286e:	f004 fffb 	bl	8007868 <HAL_TIM_ConfigClockSource>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002878:	f7ff fe70 	bl	800255c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800287c:	2320      	movs	r3, #32
 800287e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002884:	463b      	mov	r3, r7
 8002886:	4619      	mov	r1, r3
 8002888:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_TIM2_Init+0x94>)
 800288a:	f005 f9cf 	bl	8007c2c <HAL_TIMEx_MasterConfigSynchronization>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002894:	f7ff fe62 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20002fec 	.word	0x20002fec

080028a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b4:	d10d      	bne.n	80028d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_TIM_Base_MspInit+0x3c>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <HAL_TIM_Base_MspInit+0x3c>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_TIM_Base_MspInit+0x3c>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <MX_USART2_UART_Init+0x50>)
 80028ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 80028f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 800291c:	f005 f9f4 	bl	8007d08 <HAL_UART_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002926:	f7ff fe19 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20003034 	.word	0x20003034
 8002934:	40004400 	.word	0x40004400

08002938 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_UART_MspInit+0x84>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12b      	bne.n	80029b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_UART_MspInit+0x88>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <HAL_UART_MspInit+0x88>)
 8002964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_UART_MspInit+0x88>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_UART_MspInit+0x88>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <HAL_UART_MspInit+0x88>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_UART_MspInit+0x88>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002992:	230c      	movs	r3, #12
 8002994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029a2:	2307      	movs	r3, #7
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	4805      	ldr	r0, [pc, #20]	; (80029c4 <HAL_UART_MspInit+0x8c>)
 80029ae:	f001 fab1 	bl	8003f14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029b2:	bf00      	nop
 80029b4:	3728      	adds	r7, #40	; 0x28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40004400 	.word	0x40004400
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020000 	.word	0x40020000

080029c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029cc:	480d      	ldr	r0, [pc, #52]	; (8002a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029ce:	490e      	ldr	r1, [pc, #56]	; (8002a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029d0:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d4:	e002      	b.n	80029dc <LoopCopyDataInit>

080029d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029da:	3304      	adds	r3, #4

080029dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e0:	d3f9      	bcc.n	80029d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029e4:	4c0b      	ldr	r4, [pc, #44]	; (8002a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e8:	e001      	b.n	80029ee <LoopFillZerobss>

080029ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ec:	3204      	adds	r2, #4

080029ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f0:	d3fb      	bcc.n	80029ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029f2:	f7ff fef9 	bl	80027e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f6:	f006 fb77 	bl	80090e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fa:	f7ff fb17 	bl	800202c <main>
  bx  lr    
 80029fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a08:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002a0c:	0801fc4c 	.word	0x0801fc4c
  ldr r2, =_sbss
 8002a10:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002a14:	2000308c 	.word	0x2000308c

08002a18 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <DMA1_Stream0_IRQHandler>
	...

08002a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_Init+0x40>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <HAL_Init+0x40>)
 8002a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_Init+0x40>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <HAL_Init+0x40>)
 8002a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_Init+0x40>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <HAL_Init+0x40>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a44:	2003      	movs	r0, #3
 8002a46:	f000 fe77 	bl	8003738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f000 f808 	bl	8002a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a50:	f7ff fd8a 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023c00 	.word	0x40023c00

08002a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_InitTick+0x54>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_InitTick+0x58>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fe8f 	bl	80037a2 <HAL_SYSTICK_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00e      	b.n	8002aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b0f      	cmp	r3, #15
 8002a92:	d80a      	bhi.n	8002aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a94:	2200      	movs	r2, #0
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f000 fe57 	bl	800374e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa0:	4a06      	ldr	r2, [pc, #24]	; (8002abc <HAL_InitTick+0x5c>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000004 	.word	0x20000004
 8002ab8:	2000000c 	.word	0x2000000c
 8002abc:	20000008 	.word	0x20000008

08002ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_IncTick+0x20>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_IncTick+0x24>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_IncTick+0x24>)
 8002ad2:	6013      	str	r3, [r2, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	2000000c 	.word	0x2000000c
 8002ae4:	20003078 	.word	0x20003078

08002ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_GetTick+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20003078 	.word	0x20003078

08002b00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e033      	b.n	8002b7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe fe18 	bl	8001754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d118      	bne.n	8002b70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b46:	f023 0302 	bic.w	r3, r3, #2
 8002b4a:	f043 0202 	orr.w	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fb98 	bl	8003288 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f023 0303 	bic.w	r3, r3, #3
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b6e:	e001      	b.n	8002b74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	bf0c      	ite	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	2300      	movne	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d049      	beq.n	8002c5c <HAL_ADC_IRQHandler+0xd6>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d046      	beq.n	8002c5c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d12b      	bne.n	8002c4c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d127      	bne.n	8002c4c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d119      	bne.n	8002c4c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0220 	bic.w	r2, r2, #32
 8002c26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fb6d 	bl	800232c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0212 	mvn.w	r2, #18
 8002c5a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf0c      	ite	eq
 8002c6a:	2301      	moveq	r3, #1
 8002c6c:	2300      	movne	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d057      	beq.n	8002d3e <HAL_ADC_IRQHandler+0x1b8>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d054      	beq.n	8002d3e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d139      	bne.n	8002d2e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d12b      	bne.n	8002d2e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d124      	bne.n	8002d2e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d11d      	bne.n	8002d2e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d119      	bne.n	8002d2e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d08:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d105      	bne.n	8002d2e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fc28 	bl	8003584 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 020c 	mvn.w	r2, #12
 8002d3c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d017      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x21a>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d014      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d10d      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f933 	bl	8002ffc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f06f 0201 	mvn.w	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x27a>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f06f 0220 	mvn.w	r2, #32
 8002dee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f90d 	bl	8003010 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f06f 0220 	mvn.w	r2, #32
 8002dfe:	601a      	str	r2, [r3, #0]
  }
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Start_DMA+0x1e>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e0ce      	b.n	8002fc4 <HAL_ADC_Start_DMA+0x1bc>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d018      	beq.n	8002e6e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4c:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <HAL_ADC_Start_DMA+0x1c4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5f      	ldr	r2, [pc, #380]	; (8002fd0 <HAL_ADC_Start_DMA+0x1c8>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9a      	lsrs	r2, r3, #18
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f9      	bne.n	8002e62 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7c:	d107      	bne.n	8002e8e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	f040 8086 	bne.w	8002faa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002edc:	d106      	bne.n	8002eec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f023 0206 	bic.w	r2, r3, #6
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
 8002eea:	e002      	b.n	8002ef2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002efa:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <HAL_ADC_Start_DMA+0x1cc>)
 8002efc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4a35      	ldr	r2, [pc, #212]	; (8002fd8 <HAL_ADC_Start_DMA+0x1d0>)
 8002f04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <HAL_ADC_Start_DMA+0x1d4>)
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	4a33      	ldr	r2, [pc, #204]	; (8002fe0 <HAL_ADC_Start_DMA+0x1d8>)
 8002f14:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f2e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	334c      	adds	r3, #76	; 0x4c
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f000 fce2 	bl	8003918 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d129      	bne.n	8002fc2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	e020      	b.n	8002fc2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <HAL_ADC_Start_DMA+0x1dc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d11b      	bne.n	8002fc2 <HAL_ADC_Start_DMA+0x1ba>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d114      	bne.n	8002fc2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e00b      	b.n	8002fc2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f043 0210 	orr.w	r2, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f043 0201 	orr.w	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	431bde83 	.word	0x431bde83
 8002fd4:	40012300 	.word	0x40012300
 8002fd8:	08003481 	.word	0x08003481
 8002fdc:	0800353b 	.word	0x0800353b
 8002fe0:	08003557 	.word	0x08003557
 8002fe4:	40012000 	.word	0x40012000

08002fe8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1c>
 800303c:	2302      	movs	r3, #2
 800303e:	e113      	b.n	8003268 <HAL_ADC_ConfigChannel+0x244>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b09      	cmp	r3, #9
 800304e:	d925      	bls.n	800309c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68d9      	ldr	r1, [r3, #12]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	3b1e      	subs	r3, #30
 8003066:	2207      	movs	r2, #7
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43da      	mvns	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	400a      	ands	r2, r1
 8003074:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68d9      	ldr	r1, [r3, #12]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	4603      	mov	r3, r0
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4403      	add	r3, r0
 800308e:	3b1e      	subs	r3, #30
 8003090:	409a      	lsls	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	e022      	b.n	80030e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6919      	ldr	r1, [r3, #16]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	2207      	movs	r2, #7
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	400a      	ands	r2, r1
 80030be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6919      	ldr	r1, [r3, #16]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4403      	add	r3, r0
 80030d8:	409a      	lsls	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d824      	bhi.n	8003134 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3b05      	subs	r3, #5
 80030fc:	221f      	movs	r2, #31
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	400a      	ands	r2, r1
 800310a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	3b05      	subs	r3, #5
 8003126:	fa00 f203 	lsl.w	r2, r0, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	635a      	str	r2, [r3, #52]	; 0x34
 8003132:	e04c      	b.n	80031ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d824      	bhi.n	8003186 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	3b23      	subs	r3, #35	; 0x23
 800314e:	221f      	movs	r2, #31
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43da      	mvns	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	400a      	ands	r2, r1
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	4618      	mov	r0, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3b23      	subs	r3, #35	; 0x23
 8003178:	fa00 f203 	lsl.w	r2, r0, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
 8003184:	e023      	b.n	80031ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	3b41      	subs	r3, #65	; 0x41
 8003198:	221f      	movs	r2, #31
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	400a      	ands	r2, r1
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4618      	mov	r0, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	3b41      	subs	r3, #65	; 0x41
 80031c2:	fa00 f203 	lsl.w	r2, r0, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <HAL_ADC_ConfigChannel+0x250>)
 80031d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a28      	ldr	r2, [pc, #160]	; (8003278 <HAL_ADC_ConfigChannel+0x254>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10f      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1d8>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b12      	cmp	r3, #18
 80031e2:	d10b      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <HAL_ADC_ConfigChannel+0x254>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d12b      	bne.n	800325e <HAL_ADC_ConfigChannel+0x23a>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_ADC_ConfigChannel+0x258>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d003      	beq.n	8003218 <HAL_ADC_ConfigChannel+0x1f4>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b11      	cmp	r3, #17
 8003216:	d122      	bne.n	800325e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a11      	ldr	r2, [pc, #68]	; (800327c <HAL_ADC_ConfigChannel+0x258>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d111      	bne.n	800325e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_ADC_ConfigChannel+0x25c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a11      	ldr	r2, [pc, #68]	; (8003284 <HAL_ADC_ConfigChannel+0x260>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0c9a      	lsrs	r2, r3, #18
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003250:	e002      	b.n	8003258 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3b01      	subs	r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f9      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40012300 	.word	0x40012300
 8003278:	40012000 	.word	0x40012000
 800327c:	10000012 	.word	0x10000012
 8003280:	20000004 	.word	0x20000004
 8003284:	431bde83 	.word	0x431bde83

08003288 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003290:	4b79      	ldr	r3, [pc, #484]	; (8003478 <ADC_Init+0x1f0>)
 8003292:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	021a      	lsls	r2, r3, #8
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6899      	ldr	r1, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	4a58      	ldr	r2, [pc, #352]	; (800347c <ADC_Init+0x1f4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d022      	beq.n	8003366 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800332e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6899      	ldr	r1, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	e00f      	b.n	8003386 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003384:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0202 	bic.w	r2, r2, #2
 8003394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6899      	ldr	r1, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7e1b      	ldrb	r3, [r3, #24]
 80033a0:	005a      	lsls	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01b      	beq.n	80033ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	3b01      	subs	r3, #1
 80033e0:	035a      	lsls	r2, r3, #13
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	e007      	b.n	80033fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	3b01      	subs	r3, #1
 8003418:	051a      	lsls	r2, r3, #20
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800343e:	025a      	lsls	r2, r3, #9
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6899      	ldr	r1, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	029a      	lsls	r2, r3, #10
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40012300 	.word	0x40012300
 800347c:	0f000001 	.word	0x0f000001

08003480 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003496:	2b00      	cmp	r3, #0
 8003498:	d13c      	bne.n	8003514 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d12b      	bne.n	800350c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d127      	bne.n	800350c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d006      	beq.n	80034d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d119      	bne.n	800350c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0220 	bic.w	r2, r2, #32
 80034e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f043 0201 	orr.w	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7fe ff0d 	bl	800232c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003512:	e00e      	b.n	8003532 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff fd75 	bl	8003010 <HAL_ADC_ErrorCallback>
}
 8003526:	e004      	b.n	8003532 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f7ff fd4d 	bl	8002fe8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f043 0204 	orr.w	r2, r3, #4
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7ff fd4a 	bl	8003010 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <__NVIC_SetPriorityGrouping+0x44>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b4:	4013      	ands	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ca:	4a04      	ldr	r2, [pc, #16]	; (80035dc <__NVIC_SetPriorityGrouping+0x44>)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	60d3      	str	r3, [r2, #12]
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <__NVIC_GetPriorityGrouping+0x18>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	f003 0307 	and.w	r3, r3, #7
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	2b00      	cmp	r3, #0
 800360c:	db0b      	blt.n	8003626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	f003 021f 	and.w	r2, r3, #31
 8003614:	4907      	ldr	r1, [pc, #28]	; (8003634 <__NVIC_EnableIRQ+0x38>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2001      	movs	r0, #1
 800361e:	fa00 f202 	lsl.w	r2, r0, r2
 8003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000e100 	.word	0xe000e100

08003638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	6039      	str	r1, [r7, #0]
 8003642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003648:	2b00      	cmp	r3, #0
 800364a:	db0a      	blt.n	8003662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	490c      	ldr	r1, [pc, #48]	; (8003684 <__NVIC_SetPriority+0x4c>)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	0112      	lsls	r2, r2, #4
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	440b      	add	r3, r1
 800365c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003660:	e00a      	b.n	8003678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4908      	ldr	r1, [pc, #32]	; (8003688 <__NVIC_SetPriority+0x50>)
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	3b04      	subs	r3, #4
 8003670:	0112      	lsls	r2, r2, #4
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	440b      	add	r3, r1
 8003676:	761a      	strb	r2, [r3, #24]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000e100 	.word	0xe000e100
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f1c3 0307 	rsb	r3, r3, #7
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	bf28      	it	cs
 80036aa:	2304      	movcs	r3, #4
 80036ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d902      	bls.n	80036bc <NVIC_EncodePriority+0x30>
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3b03      	subs	r3, #3
 80036ba:	e000      	b.n	80036be <NVIC_EncodePriority+0x32>
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43da      	mvns	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	401a      	ands	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d4:	f04f 31ff 	mov.w	r1, #4294967295
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	43d9      	mvns	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e4:	4313      	orrs	r3, r2
         );
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3724      	adds	r7, #36	; 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003704:	d301      	bcc.n	800370a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003706:	2301      	movs	r3, #1
 8003708:	e00f      	b.n	800372a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <SysTick_Config+0x40>)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003712:	210f      	movs	r1, #15
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	f7ff ff8e 	bl	8003638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <SysTick_Config+0x40>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <SysTick_Config+0x40>)
 8003724:	2207      	movs	r2, #7
 8003726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	e000e010 	.word	0xe000e010

08003738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff29 	bl	8003598 <__NVIC_SetPriorityGrouping>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	4603      	mov	r3, r0
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003760:	f7ff ff3e 	bl	80035e0 <__NVIC_GetPriorityGrouping>
 8003764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	6978      	ldr	r0, [r7, #20]
 800376c:	f7ff ff8e 	bl	800368c <NVIC_EncodePriority>
 8003770:	4602      	mov	r2, r0
 8003772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff5d 	bl	8003638 <__NVIC_SetPriority>
}
 800377e:	bf00      	nop
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	4603      	mov	r3, r0
 800378e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ff31 	bl	80035fc <__NVIC_EnableIRQ>
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ffa2 	bl	80036f4 <SysTick_Config>
 80037b0:	4603      	mov	r3, r0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037c8:	f7ff f98e 	bl	8002ae8 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e099      	b.n	800390c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f8:	e00f      	b.n	800381a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037fa:	f7ff f975 	bl	8002ae8 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b05      	cmp	r3, #5
 8003806:	d908      	bls.n	800381a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2203      	movs	r2, #3
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e078      	b.n	800390c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e8      	bne.n	80037fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4b38      	ldr	r3, [pc, #224]	; (8003914 <HAL_DMA_Init+0x158>)
 8003834:	4013      	ands	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003846:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003852:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2b04      	cmp	r3, #4
 8003872:	d107      	bne.n	8003884 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	4313      	orrs	r3, r2
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0307 	bic.w	r3, r3, #7
 800389a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d117      	bne.n	80038de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00e      	beq.n	80038de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 faab 	bl	8003e1c <DMA_CheckFifoParam>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038da:	2301      	movs	r3, #1
 80038dc:	e016      	b.n	800390c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa62 	bl	8003db0 <DMA_CalcBaseAndBitshift>
 80038ec:	4603      	mov	r3, r0
 80038ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	223f      	movs	r2, #63	; 0x3f
 80038f6:	409a      	lsls	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	f010803f 	.word	0xf010803f

08003918 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_DMA_Start_IT+0x26>
 800393a:	2302      	movs	r3, #2
 800393c:	e040      	b.n	80039c0 <HAL_DMA_Start_IT+0xa8>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d12f      	bne.n	80039b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f9f4 	bl	8003d54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	223f      	movs	r2, #63	; 0x3f
 8003972:	409a      	lsls	r2, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0216 	orr.w	r2, r2, #22
 8003986:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0208 	orr.w	r2, r2, #8
 800399e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	e005      	b.n	80039be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039ba:	2302      	movs	r3, #2
 80039bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2280      	movs	r2, #128	; 0x80
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e00c      	b.n	8003a00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2205      	movs	r2, #5
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a18:	4b92      	ldr	r3, [pc, #584]	; (8003c64 <HAL_DMA_IRQHandler+0x258>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a92      	ldr	r2, [pc, #584]	; (8003c68 <HAL_DMA_IRQHandler+0x25c>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	0a9b      	lsrs	r3, r3, #10
 8003a24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	2208      	movs	r2, #8
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01a      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0204 	bic.w	r2, r2, #4
 8003a5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	2208      	movs	r2, #8
 8003a66:	409a      	lsls	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f043 0201 	orr.w	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d012      	beq.n	8003aae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	f043 0202 	orr.w	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d012      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	f043 0204 	orr.w	r2, r3, #4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	2210      	movs	r2, #16
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d043      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d03c      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	2210      	movs	r2, #16
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d018      	beq.n	8003b4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d108      	bne.n	8003b3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d024      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
 8003b3a:	e01f      	b.n	8003b7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01b      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
 8003b4c:	e016      	b.n	8003b7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d107      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0208 	bic.w	r2, r2, #8
 8003b6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	2220      	movs	r2, #32
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 808e 	beq.w	8003caa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8086 	beq.w	8003caa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d136      	bne.n	8003c24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0216 	bic.w	r2, r2, #22
 8003bc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x1da>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0208 	bic.w	r2, r2, #8
 8003bf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfa:	223f      	movs	r2, #63	; 0x3f
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d07d      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
        }
        return;
 8003c22:	e078      	b.n	8003d16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01c      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d108      	bne.n	8003c52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d030      	beq.n	8003caa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
 8003c50:	e02b      	b.n	8003caa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d027      	beq.n	8003caa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
 8003c62:	e022      	b.n	8003caa <HAL_DMA_IRQHandler+0x29e>
 8003c64:	20000004 	.word	0x20000004
 8003c68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0210 	bic.w	r2, r2, #16
 8003c88:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d032      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d022      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2205      	movs	r2, #5
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d307      	bcc.n	8003cf2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f2      	bne.n	8003cd6 <HAL_DMA_IRQHandler+0x2ca>
 8003cf0:	e000      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003cf2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
 8003d14:	e000      	b.n	8003d18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d16:	bf00      	nop
    }
  }
}
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop

08003d20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d2e:	b2db      	uxtb	r3, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d108      	bne.n	8003d94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d92:	e007      	b.n	8003da4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	60da      	str	r2, [r3, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	3b10      	subs	r3, #16
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <DMA_CalcBaseAndBitshift+0x64>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	091b      	lsrs	r3, r3, #4
 8003dc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <DMA_CalcBaseAndBitshift+0x68>)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d909      	bls.n	8003df2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003de6:	f023 0303 	bic.w	r3, r3, #3
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	659a      	str	r2, [r3, #88]	; 0x58
 8003df0:	e007      	b.n	8003e02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dfa:	f023 0303 	bic.w	r3, r3, #3
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	aaaaaaab 	.word	0xaaaaaaab
 8003e18:	0800c3f8 	.word	0x0800c3f8

08003e1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11f      	bne.n	8003e76 <DMA_CheckFifoParam+0x5a>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d856      	bhi.n	8003eea <DMA_CheckFifoParam+0xce>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <DMA_CheckFifoParam+0x28>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e67 	.word	0x08003e67
 8003e4c:	08003e55 	.word	0x08003e55
 8003e50:	08003eeb 	.word	0x08003eeb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d046      	beq.n	8003eee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e64:	e043      	b.n	8003eee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e6e:	d140      	bne.n	8003ef2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e74:	e03d      	b.n	8003ef2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7e:	d121      	bne.n	8003ec4 <DMA_CheckFifoParam+0xa8>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d837      	bhi.n	8003ef6 <DMA_CheckFifoParam+0xda>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <DMA_CheckFifoParam+0x70>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ea3 	.word	0x08003ea3
 8003e94:	08003e9d 	.word	0x08003e9d
 8003e98:	08003eb5 	.word	0x08003eb5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea0:	e030      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d025      	beq.n	8003efa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb2:	e022      	b.n	8003efa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ebc:	d11f      	bne.n	8003efe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ec2:	e01c      	b.n	8003efe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d903      	bls.n	8003ed2 <DMA_CheckFifoParam+0xb6>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d003      	beq.n	8003ed8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ed0:	e018      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed6:	e015      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee8:	e00b      	b.n	8003f02 <DMA_CheckFifoParam+0xe6>
      break;
 8003eea:	bf00      	nop
 8003eec:	e00a      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e008      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e006      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e004      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;
 8003efa:	bf00      	nop
 8003efc:	e002      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;   
 8003efe:	bf00      	nop
 8003f00:	e000      	b.n	8003f04 <DMA_CheckFifoParam+0xe8>
      break;
 8003f02:	bf00      	nop
    }
  } 
  
  return status; 
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop

08003f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	; 0x24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	e159      	b.n	80041e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f30:	2201      	movs	r2, #1
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	f040 8148 	bne.w	80041de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d005      	beq.n	8003f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d130      	bne.n	8003fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	2203      	movs	r2, #3
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 0201 	and.w	r2, r3, #1
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d017      	beq.n	8004004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	2203      	movs	r2, #3
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d123      	bne.n	8004058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	08da      	lsrs	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3208      	adds	r2, #8
 8004018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	220f      	movs	r2, #15
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	08da      	lsrs	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3208      	adds	r2, #8
 8004052:	69b9      	ldr	r1, [r7, #24]
 8004054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	2203      	movs	r2, #3
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0203 	and.w	r2, r3, #3
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80a2 	beq.w	80041de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	4b57      	ldr	r3, [pc, #348]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	4a56      	ldr	r2, [pc, #344]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 80040a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040a8:	6453      	str	r3, [r2, #68]	; 0x44
 80040aa:	4b54      	ldr	r3, [pc, #336]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040b6:	4a52      	ldr	r2, [pc, #328]	; (8004200 <HAL_GPIO_Init+0x2ec>)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	3302      	adds	r3, #2
 80040be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	220f      	movs	r2, #15
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a49      	ldr	r2, [pc, #292]	; (8004204 <HAL_GPIO_Init+0x2f0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d019      	beq.n	8004116 <HAL_GPIO_Init+0x202>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a48      	ldr	r2, [pc, #288]	; (8004208 <HAL_GPIO_Init+0x2f4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <HAL_GPIO_Init+0x1fe>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a47      	ldr	r2, [pc, #284]	; (800420c <HAL_GPIO_Init+0x2f8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00d      	beq.n	800410e <HAL_GPIO_Init+0x1fa>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a46      	ldr	r2, [pc, #280]	; (8004210 <HAL_GPIO_Init+0x2fc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <HAL_GPIO_Init+0x1f6>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a45      	ldr	r2, [pc, #276]	; (8004214 <HAL_GPIO_Init+0x300>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <HAL_GPIO_Init+0x1f2>
 8004102:	2304      	movs	r3, #4
 8004104:	e008      	b.n	8004118 <HAL_GPIO_Init+0x204>
 8004106:	2307      	movs	r3, #7
 8004108:	e006      	b.n	8004118 <HAL_GPIO_Init+0x204>
 800410a:	2303      	movs	r3, #3
 800410c:	e004      	b.n	8004118 <HAL_GPIO_Init+0x204>
 800410e:	2302      	movs	r3, #2
 8004110:	e002      	b.n	8004118 <HAL_GPIO_Init+0x204>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <HAL_GPIO_Init+0x204>
 8004116:	2300      	movs	r3, #0
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	f002 0203 	and.w	r2, r2, #3
 800411e:	0092      	lsls	r2, r2, #2
 8004120:	4093      	lsls	r3, r2
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004128:	4935      	ldr	r1, [pc, #212]	; (8004200 <HAL_GPIO_Init+0x2ec>)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	089b      	lsrs	r3, r3, #2
 800412e:	3302      	adds	r3, #2
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004136:	4b38      	ldr	r3, [pc, #224]	; (8004218 <HAL_GPIO_Init+0x304>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	43db      	mvns	r3, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4013      	ands	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800415a:	4a2f      	ldr	r2, [pc, #188]	; (8004218 <HAL_GPIO_Init+0x304>)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004160:	4b2d      	ldr	r3, [pc, #180]	; (8004218 <HAL_GPIO_Init+0x304>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004184:	4a24      	ldr	r2, [pc, #144]	; (8004218 <HAL_GPIO_Init+0x304>)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800418a:	4b23      	ldr	r3, [pc, #140]	; (8004218 <HAL_GPIO_Init+0x304>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ae:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <HAL_GPIO_Init+0x304>)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041b4:	4b18      	ldr	r3, [pc, #96]	; (8004218 <HAL_GPIO_Init+0x304>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041d8:	4a0f      	ldr	r2, [pc, #60]	; (8004218 <HAL_GPIO_Init+0x304>)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b0f      	cmp	r3, #15
 80041e8:	f67f aea2 	bls.w	8003f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3724      	adds	r7, #36	; 0x24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800
 8004200:	40013800 	.word	0x40013800
 8004204:	40020000 	.word	0x40020000
 8004208:	40020400 	.word	0x40020400
 800420c:	40020800 	.word	0x40020800
 8004210:	40020c00 	.word	0x40020c00
 8004214:	40021000 	.word	0x40021000
 8004218:	40013c00 	.word	0x40013c00

0800421c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]
 8004228:	4613      	mov	r3, r2
 800422a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800422c:	787b      	ldrb	r3, [r7, #1]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004238:	e003      	b.n	8004242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800423a:	887b      	ldrh	r3, [r7, #2]
 800423c:	041a      	lsls	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	619a      	str	r2, [r3, #24]
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e12b      	b.n	80044ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fe5e 	bl	8001f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042b4:	f003 fa06 	bl	80076c4 <HAL_RCC_GetPCLK1Freq>
 80042b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4a81      	ldr	r2, [pc, #516]	; (80044c4 <HAL_I2C_Init+0x274>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d807      	bhi.n	80042d4 <HAL_I2C_Init+0x84>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a80      	ldr	r2, [pc, #512]	; (80044c8 <HAL_I2C_Init+0x278>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	bf94      	ite	ls
 80042cc:	2301      	movls	r3, #1
 80042ce:	2300      	movhi	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e006      	b.n	80042e2 <HAL_I2C_Init+0x92>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a7d      	ldr	r2, [pc, #500]	; (80044cc <HAL_I2C_Init+0x27c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0e7      	b.n	80044ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a78      	ldr	r2, [pc, #480]	; (80044d0 <HAL_I2C_Init+0x280>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0c9b      	lsrs	r3, r3, #18
 80042f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a6a      	ldr	r2, [pc, #424]	; (80044c4 <HAL_I2C_Init+0x274>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d802      	bhi.n	8004324 <HAL_I2C_Init+0xd4>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3301      	adds	r3, #1
 8004322:	e009      	b.n	8004338 <HAL_I2C_Init+0xe8>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	4a69      	ldr	r2, [pc, #420]	; (80044d4 <HAL_I2C_Init+0x284>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	3301      	adds	r3, #1
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	430b      	orrs	r3, r1
 800433e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800434a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	495c      	ldr	r1, [pc, #368]	; (80044c4 <HAL_I2C_Init+0x274>)
 8004354:	428b      	cmp	r3, r1
 8004356:	d819      	bhi.n	800438c <HAL_I2C_Init+0x13c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1e59      	subs	r1, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fbb1 f3f3 	udiv	r3, r1, r3
 8004366:	1c59      	adds	r1, r3, #1
 8004368:	f640 73fc 	movw	r3, #4092	; 0xffc
 800436c:	400b      	ands	r3, r1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_I2C_Init+0x138>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1e59      	subs	r1, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004380:	3301      	adds	r3, #1
 8004382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004386:	e051      	b.n	800442c <HAL_I2C_Init+0x1dc>
 8004388:	2304      	movs	r3, #4
 800438a:	e04f      	b.n	800442c <HAL_I2C_Init+0x1dc>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d111      	bne.n	80043b8 <HAL_I2C_Init+0x168>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1e58      	subs	r0, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e012      	b.n	80043de <HAL_I2C_Init+0x18e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	0099      	lsls	r1, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x196>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e022      	b.n	800442c <HAL_I2C_Init+0x1dc>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <HAL_I2C_Init+0x1bc>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1e58      	subs	r0, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	440b      	add	r3, r1
 80043fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440a:	e00f      	b.n	800442c <HAL_I2C_Init+0x1dc>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	6809      	ldr	r1, [r1, #0]
 8004430:	4313      	orrs	r3, r2
 8004432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800445a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6911      	ldr	r1, [r2, #16]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68d2      	ldr	r2, [r2, #12]
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	430b      	orrs	r3, r1
 800446e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	000186a0 	.word	0x000186a0
 80044c8:	001e847f 	.word	0x001e847f
 80044cc:	003d08ff 	.word	0x003d08ff
 80044d0:	431bde83 	.word	0x431bde83
 80044d4:	10624dd3 	.word	0x10624dd3

080044d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	817b      	strh	r3, [r7, #10]
 80044ea:	460b      	mov	r3, r1
 80044ec:	813b      	strh	r3, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044f2:	f7fe faf9 	bl	8002ae8 <HAL_GetTick>
 80044f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b20      	cmp	r3, #32
 8004502:	f040 80d9 	bne.w	80046b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	2319      	movs	r3, #25
 800450c:	2201      	movs	r2, #1
 800450e:	496d      	ldr	r1, [pc, #436]	; (80046c4 <HAL_I2C_Mem_Write+0x1ec>)
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f002 fa61 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
 800451e:	e0cc      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_I2C_Mem_Write+0x56>
 800452a:	2302      	movs	r3, #2
 800452c:	e0c5      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d007      	beq.n	8004554 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2221      	movs	r2, #33	; 0x21
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a3a      	ldr	r2, [r7, #32]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a4d      	ldr	r2, [pc, #308]	; (80046c8 <HAL_I2C_Mem_Write+0x1f0>)
 8004594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004596:	88f8      	ldrh	r0, [r7, #6]
 8004598:	893a      	ldrh	r2, [r7, #8]
 800459a:	8979      	ldrh	r1, [r7, #10]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4603      	mov	r3, r0
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f001 fede 	bl	8006368 <I2C_RequestMemoryWrite>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d052      	beq.n	8004658 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e081      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f002 fae2 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d107      	bne.n	80045de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e06b      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b04      	cmp	r3, #4
 800461e:	d11b      	bne.n	8004658 <HAL_I2C_Mem_Write+0x180>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d017      	beq.n	8004658 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1aa      	bne.n	80045b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f002 face 	bl	8006c06 <I2C_WaitOnBTFFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00d      	beq.n	800468c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	2b04      	cmp	r3, #4
 8004676:	d107      	bne.n	8004688 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e016      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e000      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	00100002 	.word	0x00100002
 80046c8:	ffff0000 	.word	0xffff0000

080046cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	4608      	mov	r0, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	4603      	mov	r3, r0
 80046dc:	817b      	strh	r3, [r7, #10]
 80046de:	460b      	mov	r3, r1
 80046e0:	813b      	strh	r3, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046e6:	f7fe f9ff 	bl	8002ae8 <HAL_GetTick>
 80046ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	f040 8208 	bne.w	8004b0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	2319      	movs	r3, #25
 8004700:	2201      	movs	r2, #1
 8004702:	497b      	ldr	r1, [pc, #492]	; (80048f0 <HAL_I2C_Mem_Read+0x224>)
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f002 f967 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
 8004712:	e1fb      	b.n	8004b0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_I2C_Mem_Read+0x56>
 800471e:	2302      	movs	r3, #2
 8004720:	e1f4      	b.n	8004b0c <HAL_I2C_Mem_Read+0x440>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b01      	cmp	r3, #1
 8004736:	d007      	beq.n	8004748 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004756:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2222      	movs	r2, #34	; 0x22
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2240      	movs	r2, #64	; 0x40
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a5b      	ldr	r2, [pc, #364]	; (80048f4 <HAL_I2C_Mem_Read+0x228>)
 8004788:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800478a:	88f8      	ldrh	r0, [r7, #6]
 800478c:	893a      	ldrh	r2, [r7, #8]
 800478e:	8979      	ldrh	r1, [r7, #10]
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	4603      	mov	r3, r0
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f001 fe7a 	bl	8006494 <I2C_RequestMemoryRead>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e1b0      	b.n	8004b0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d113      	bne.n	80047da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b2:	2300      	movs	r3, #0
 80047b4:	623b      	str	r3, [r7, #32]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	623b      	str	r3, [r7, #32]
 80047c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e184      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d11b      	bne.n	800481a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e164      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	2b02      	cmp	r3, #2
 8004820:	d11b      	bne.n	800485a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004830:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	e144      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004870:	e138      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	2b03      	cmp	r3, #3
 8004878:	f200 80f1 	bhi.w	8004a5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004880:	2b01      	cmp	r3, #1
 8004882:	d123      	bne.n	80048cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004886:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f002 fa2f 	bl	8006cec <I2C_WaitOnRXNEFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e139      	b.n	8004b0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ca:	e10b      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d14e      	bne.n	8004972 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	2200      	movs	r2, #0
 80048dc:	4906      	ldr	r1, [pc, #24]	; (80048f8 <HAL_I2C_Mem_Read+0x22c>)
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f002 f87a 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e10e      	b.n	8004b0c <HAL_I2C_Mem_Read+0x440>
 80048ee:	bf00      	nop
 80048f0:	00100002 	.word	0x00100002
 80048f4:	ffff0000 	.word	0xffff0000
 80048f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004970:	e0b8      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	2200      	movs	r2, #0
 800497a:	4966      	ldr	r1, [pc, #408]	; (8004b14 <HAL_I2C_Mem_Read+0x448>)
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f002 f82b 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0bf      	b.n	8004b0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	2200      	movs	r2, #0
 80049d6:	494f      	ldr	r1, [pc, #316]	; (8004b14 <HAL_I2C_Mem_Read+0x448>)
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f001 fffd 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e091      	b.n	8004b0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a5c:	e042      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f002 f942 	bl	8006cec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e04c      	b.n	8004b0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d118      	bne.n	8004ae4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f47f aec2 	bne.w	8004872 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	00010004 	.word	0x00010004

08004b18 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	817b      	strh	r3, [r7, #10]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	813b      	strh	r3, [r7, #8]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b36:	f7fd ffd7 	bl	8002ae8 <HAL_GetTick>
 8004b3a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	f040 813a 	bne.w	8004dbe <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b4a:	4b9f      	ldr	r3, [pc, #636]	; (8004dc8 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	08db      	lsrs	r3, r3, #3
 8004b50:	4a9e      	ldr	r2, [pc, #632]	; (8004dcc <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	0a1a      	lsrs	r2, r3, #8
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009a      	lsls	r2, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d116      	bne.n	8004b9e <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f043 0220 	orr.w	r2, r3, #32
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e110      	b.n	8004dc0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d0db      	beq.n	8004b64 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_I2C_Mem_Write_DMA+0xa2>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e102      	b.n	8004dc0 <HAL_I2C_Mem_Write_DMA+0x2a8>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d007      	beq.n	8004be0 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2221      	movs	r2, #33	; 0x21
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2240      	movs	r2, #64	; 0x40
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4a6c      	ldr	r2, [pc, #432]	; (8004dd0 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8004c20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004c22:	897a      	ldrh	r2, [r7, #10]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004c28:	893a      	ldrh	r2, [r7, #8]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004c2e:	88fa      	ldrh	r2, [r7, #6]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80a9 	beq.w	8004d96 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02a      	beq.n	8004ca2 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c50:	4a60      	ldr	r2, [pc, #384]	; (8004dd4 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 8004c52:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c58:	4a5f      	ldr	r2, [pc, #380]	; (8004dd8 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8004c5a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c60:	2200      	movs	r2, #0
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c68:	2200      	movs	r2, #0
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c70:	2200      	movs	r2, #0
 8004c72:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	2200      	movs	r2, #0
 8004c7a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	4619      	mov	r1, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3310      	adds	r3, #16
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c92:	f7fe fe41 	bl	8003918 <HAL_DMA_Start_IT>
 8004c96:	4603      	mov	r3, r0
 8004c98:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004c9a:	7efb      	ldrb	r3, [r7, #27]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d166      	bne.n	8004d6e <HAL_I2C_Mem_Write_DMA+0x256>
 8004ca0:	e013      	b.n	8004cca <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07a      	b.n	8004dc0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004cca:	88f8      	ldrh	r0, [r7, #6]
 8004ccc:	893a      	ldrh	r2, [r7, #8]
 8004cce:	8979      	ldrh	r1, [r7, #10]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	2323      	movs	r3, #35	; 0x23
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	4603      	mov	r3, r0
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f001 fb44 	bl	8006368 <I2C_RequestMemoryWrite>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d022      	beq.n	8004d2c <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fe6c 	bl	80039c8 <HAL_DMA_Abort_IT>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e049      	b.n	8004dc0 <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d58:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d68:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e028      	b.n	8004dc0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f043 0210 	orr.w	r2, r3, #16
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e014      	b.n	8004dc0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8004dbe:	2302      	movs	r3, #2
  }
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20000004 	.word	0x20000004
 8004dcc:	14f8b589 	.word	0x14f8b589
 8004dd0:	ffff0000 	.word	0xffff0000
 8004dd4:	08006665 	.word	0x08006665
 8004dd8:	0800680f 	.word	0x0800680f

08004ddc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dfc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d003      	beq.n	8004e14 <HAL_I2C_EV_IRQHandler+0x38>
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	f040 80c1 	bne.w	8004f96 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10d      	bne.n	8004e4a <HAL_I2C_EV_IRQHandler+0x6e>
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e34:	d003      	beq.n	8004e3e <HAL_I2C_EV_IRQHandler+0x62>
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e3c:	d101      	bne.n	8004e42 <HAL_I2C_EV_IRQHandler+0x66>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_I2C_EV_IRQHandler+0x68>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	f000 8132 	beq.w	80050ae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00c      	beq.n	8004e6e <HAL_I2C_EV_IRQHandler+0x92>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	0a5b      	lsrs	r3, r3, #9
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d006      	beq.n	8004e6e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f001 ffc8 	bl	8006df6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fcd2 	bl	8005810 <I2C_Master_SB>
 8004e6c:	e092      	b.n	8004f94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	08db      	lsrs	r3, r3, #3
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_I2C_EV_IRQHandler+0xb2>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	0a5b      	lsrs	r3, r3, #9
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fd48 	bl	800591c <I2C_Master_ADD10>
 8004e8c:	e082      	b.n	8004f94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0xd2>
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	0a5b      	lsrs	r3, r3, #9
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fd62 	bl	8005970 <I2C_Master_ADDR>
 8004eac:	e072      	b.n	8004f94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	089b      	lsrs	r3, r3, #2
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d03b      	beq.n	8004f32 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec8:	f000 80f3 	beq.w	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	09db      	lsrs	r3, r3, #7
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00f      	beq.n	8004ef8 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	0a9b      	lsrs	r3, r3, #10
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d103      	bne.n	8004ef8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f94c 	bl	800518e <I2C_MasterTransmit_TXE>
 8004ef6:	e04d      	b.n	8004f94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	089b      	lsrs	r3, r3, #2
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80d6 	beq.w	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	0a5b      	lsrs	r3, r3, #9
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 80cf 	beq.w	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f14:	7bbb      	ldrb	r3, [r7, #14]
 8004f16:	2b21      	cmp	r3, #33	; 0x21
 8004f18:	d103      	bne.n	8004f22 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9d3 	bl	80052c6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f20:	e0c7      	b.n	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	f040 80c4 	bne.w	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fa41 	bl	80053b2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f30:	e0bf      	b.n	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f40:	f000 80b7 	beq.w	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	099b      	lsrs	r3, r3, #6
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00f      	beq.n	8004f70 <HAL_I2C_EV_IRQHandler+0x194>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	0a9b      	lsrs	r3, r3, #10
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d009      	beq.n	8004f70 <HAL_I2C_EV_IRQHandler+0x194>
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	089b      	lsrs	r3, r3, #2
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d103      	bne.n	8004f70 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fab6 	bl	80054da <I2C_MasterReceive_RXNE>
 8004f6e:	e011      	b.n	8004f94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	089b      	lsrs	r3, r3, #2
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 809a 	beq.w	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	0a5b      	lsrs	r3, r3, #9
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8093 	beq.w	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fb55 	bl	800563c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f92:	e08e      	b.n	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f94:	e08d      	b.n	80050b2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	e007      	b.n	8004fb8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d012      	beq.n	8004fea <HAL_I2C_EV_IRQHandler+0x20e>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	0a5b      	lsrs	r3, r3, #9
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00c      	beq.n	8004fea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004fe0:	69b9      	ldr	r1, [r7, #24]
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 ff13 	bl	8005e0e <I2C_Slave_ADDR>
 8004fe8:	e066      	b.n	80050b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_I2C_EV_IRQHandler+0x22e>
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	0a5b      	lsrs	r3, r3, #9
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 ff4e 	bl	8005ea4 <I2C_Slave_STOPF>
 8005008:	e056      	b.n	80050b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800500a:	7bbb      	ldrb	r3, [r7, #14]
 800500c:	2b21      	cmp	r3, #33	; 0x21
 800500e:	d002      	beq.n	8005016 <HAL_I2C_EV_IRQHandler+0x23a>
 8005010:	7bbb      	ldrb	r3, [r7, #14]
 8005012:	2b29      	cmp	r3, #41	; 0x29
 8005014:	d125      	bne.n	8005062 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	09db      	lsrs	r3, r3, #7
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00f      	beq.n	8005042 <HAL_I2C_EV_IRQHandler+0x266>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	0a9b      	lsrs	r3, r3, #10
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_I2C_EV_IRQHandler+0x266>
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	089b      	lsrs	r3, r3, #2
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fe29 	bl	8005c92 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005040:	e039      	b.n	80050b6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d033      	beq.n	80050b6 <HAL_I2C_EV_IRQHandler+0x2da>
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	0a5b      	lsrs	r3, r3, #9
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d02d      	beq.n	80050b6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fe56 	bl	8005d0c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005060:	e029      	b.n	80050b6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	099b      	lsrs	r3, r3, #6
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00f      	beq.n	800508e <HAL_I2C_EV_IRQHandler+0x2b2>
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	0a9b      	lsrs	r3, r3, #10
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <HAL_I2C_EV_IRQHandler+0x2b2>
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	089b      	lsrs	r3, r3, #2
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fe61 	bl	8005d4e <I2C_SlaveReceive_RXNE>
 800508c:	e014      	b.n	80050b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	089b      	lsrs	r3, r3, #2
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00e      	beq.n	80050b8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	0a5b      	lsrs	r3, r3, #9
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fe8f 	bl	8005dca <I2C_SlaveReceive_BTF>
 80050ac:	e004      	b.n	80050b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80050ae:	bf00      	nop
 80050b0:	e002      	b.n	80050b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80050b8:	3720      	adds	r7, #32
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	460b      	mov	r3, r1
 8005118:	70fb      	strb	r3, [r7, #3]
 800511a:	4613      	mov	r3, r2
 800511c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d150      	bne.n	8005256 <I2C_MasterTransmit_TXE+0xc8>
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2b21      	cmp	r3, #33	; 0x21
 80051b8:	d14d      	bne.n	8005256 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d01d      	beq.n	80051fc <I2C_MasterTransmit_TXE+0x6e>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d01a      	beq.n	80051fc <I2C_MasterTransmit_TXE+0x6e>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051cc:	d016      	beq.n	80051fc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051dc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2211      	movs	r2, #17
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff ff62 	bl	80050be <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051fa:	e060      	b.n	80052be <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800520a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d107      	bne.n	8005246 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ff7d 	bl	800513e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005244:	e03b      	b.n	80052be <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff ff35 	bl	80050be <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005254:	e033      	b.n	80052be <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b21      	cmp	r3, #33	; 0x21
 800525a:	d005      	beq.n	8005268 <I2C_MasterTransmit_TXE+0xda>
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d12d      	bne.n	80052be <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b22      	cmp	r3, #34	; 0x22
 8005266:	d12a      	bne.n	80052be <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d108      	bne.n	8005284 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005280:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005282:	e01c      	b.n	80052be <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b40      	cmp	r3, #64	; 0x40
 800528e:	d103      	bne.n	8005298 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f88e 	bl	80053b2 <I2C_MemoryTransmit_TXE_BTF>
}
 8005296:	e012      	b.n	80052be <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	781a      	ldrb	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052bc:	e7ff      	b.n	80052be <I2C_MasterTransmit_TXE+0x130>
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b21      	cmp	r3, #33	; 0x21
 80052de:	d164      	bne.n	80053aa <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d012      	beq.n	8005310 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800530e:	e04c      	b.n	80053aa <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b08      	cmp	r3, #8
 8005314:	d01d      	beq.n	8005352 <I2C_MasterTransmit_BTF+0x8c>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b20      	cmp	r3, #32
 800531a:	d01a      	beq.n	8005352 <I2C_MasterTransmit_BTF+0x8c>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005322:	d016      	beq.n	8005352 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005332:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2211      	movs	r2, #17
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff feb7 	bl	80050be <HAL_I2C_MasterTxCpltCallback>
}
 8005350:	e02b      	b.n	80053aa <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005360:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005370:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b40      	cmp	r3, #64	; 0x40
 800538a:	d107      	bne.n	800539c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff fed2 	bl	800513e <HAL_I2C_MemTxCpltCallback>
}
 800539a:	e006      	b.n	80053aa <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fe8a 	bl	80050be <HAL_I2C_MasterTxCpltCallback>
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d11d      	bne.n	8005406 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d10b      	bne.n	80053ea <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	1c9a      	adds	r2, r3, #2
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80053e8:	e073      	b.n	80054d2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	121b      	asrs	r3, r3, #8
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005404:	e065      	b.n	80054d2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540a:	2b01      	cmp	r3, #1
 800540c:	d10b      	bne.n	8005426 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005412:	b2da      	uxtb	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005424:	e055      	b.n	80054d2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542a:	2b02      	cmp	r3, #2
 800542c:	d151      	bne.n	80054d2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	2b22      	cmp	r3, #34	; 0x22
 8005432:	d10d      	bne.n	8005450 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005442:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800544e:	e040      	b.n	80054d2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d015      	beq.n	8005486 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2b21      	cmp	r3, #33	; 0x21
 800545e:	d112      	bne.n	8005486 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	781a      	ldrb	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005484:	e025      	b.n	80054d2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d120      	bne.n	80054d2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b21      	cmp	r3, #33	; 0x21
 8005494:	d11d      	bne.n	80054d2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054a4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff fe36 	bl	800513e <HAL_I2C_MemTxCpltCallback>
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b22      	cmp	r3, #34	; 0x22
 80054ec:	f040 80a2 	bne.w	8005634 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d921      	bls.n	8005542 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b03      	cmp	r3, #3
 800552c:	f040 8082 	bne.w	8005634 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005540:	e078      	b.n	8005634 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	2b02      	cmp	r3, #2
 8005548:	d074      	beq.n	8005634 <I2C_MasterReceive_RXNE+0x15a>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d002      	beq.n	8005556 <I2C_MasterReceive_RXNE+0x7c>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d16e      	bne.n	8005634 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 fb96 	bl	8006c88 <I2C_WaitOnSTOPRequestThroughIT>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d142      	bne.n	80055e8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005570:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005580:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d10a      	bne.n	80055d2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fdc1 	bl	8005152 <HAL_I2C_MemRxCpltCallback>
}
 80055d0:	e030      	b.n	8005634 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2212      	movs	r2, #18
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff fd76 	bl	80050d2 <HAL_I2C_MasterRxCpltCallback>
}
 80055e6:	e025      	b.n	8005634 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fd99 	bl	8005166 <HAL_I2C_ErrorCallback>
}
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b04      	cmp	r3, #4
 8005652:	d11b      	bne.n	800568c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005662:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800568a:	e0bd      	b.n	8005808 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b03      	cmp	r3, #3
 8005694:	d129      	bne.n	80056ea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d00a      	beq.n	80056c2 <I2C_MasterReceive_BTF+0x86>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d007      	beq.n	80056c2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056e8:	e08e      	b.n	8005808 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d176      	bne.n	80057e2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d002      	beq.n	8005700 <I2C_MasterReceive_BTF+0xc4>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d108      	bne.n	8005712 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e019      	b.n	8005746 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d002      	beq.n	800571e <I2C_MasterReceive_BTF+0xe2>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d108      	bne.n	8005730 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e00a      	b.n	8005746 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b10      	cmp	r3, #16
 8005734:	d007      	beq.n	8005746 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005744:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d10a      	bne.n	80057cc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff fcc4 	bl	8005152 <HAL_I2C_MemRxCpltCallback>
}
 80057ca:	e01d      	b.n	8005808 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2212      	movs	r2, #18
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fc79 	bl	80050d2 <HAL_I2C_MasterRxCpltCallback>
}
 80057e0:	e012      	b.n	8005808 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d117      	bne.n	8005854 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	b2db      	uxtb	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800583c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800583e:	e067      	b.n	8005910 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	b2da      	uxtb	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	611a      	str	r2, [r3, #16]
}
 8005852:	e05d      	b.n	8005910 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800585c:	d133      	bne.n	80058c6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b21      	cmp	r3, #33	; 0x21
 8005868:	d109      	bne.n	800587e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	b2db      	uxtb	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800587a:	611a      	str	r2, [r3, #16]
 800587c:	e008      	b.n	8005890 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	b2da      	uxtb	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	2b00      	cmp	r3, #0
 8005896:	d004      	beq.n	80058a2 <I2C_Master_SB+0x92>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d108      	bne.n	80058b4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d032      	beq.n	8005910 <I2C_Master_SB+0x100>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d02d      	beq.n	8005910 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c2:	605a      	str	r2, [r3, #4]
}
 80058c4:	e024      	b.n	8005910 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10e      	bne.n	80058ec <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	11db      	asrs	r3, r3, #7
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f003 0306 	and.w	r3, r3, #6
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f063 030f 	orn	r3, r3, #15
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	611a      	str	r2, [r3, #16]
}
 80058ea:	e011      	b.n	8005910 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d10d      	bne.n	8005910 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	11db      	asrs	r3, r3, #7
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f003 0306 	and.w	r3, r3, #6
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f063 030e 	orn	r3, r3, #14
 8005908:	b2da      	uxtb	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	611a      	str	r2, [r3, #16]
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005928:	b2da      	uxtb	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <I2C_Master_ADD10+0x26>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d108      	bne.n	8005954 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <I2C_Master_ADD10+0x48>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005962:	605a      	str	r2, [r3, #4]
  }
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005970:	b480      	push	{r7}
 8005972:	b091      	sub	sp, #68	; 0x44
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800597e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b22      	cmp	r3, #34	; 0x22
 8005998:	f040 8169 	bne.w	8005c6e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10f      	bne.n	80059c4 <I2C_Master_ADDR+0x54>
 80059a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d10b      	bne.n	80059c4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ac:	2300      	movs	r3, #0
 80059ae:	633b      	str	r3, [r7, #48]	; 0x30
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	633b      	str	r3, [r7, #48]	; 0x30
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	e160      	b.n	8005c86 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11d      	bne.n	8005a08 <I2C_Master_ADDR+0x98>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059d4:	d118      	bne.n	8005a08 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d6:	2300      	movs	r3, #0
 80059d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059fa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	651a      	str	r2, [r3, #80]	; 0x50
 8005a06:	e13e      	b.n	8005c86 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d113      	bne.n	8005a3a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a12:	2300      	movs	r3, #0
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e115      	b.n	8005c66 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	f040 808a 	bne.w	8005b5a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a4c:	d137      	bne.n	8005abe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6c:	d113      	bne.n	8005a96 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7e:	2300      	movs	r3, #0
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	e0e7      	b.n	8005c66 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a96:	2300      	movs	r3, #0
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	623b      	str	r3, [r7, #32]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	623b      	str	r3, [r7, #32]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	e0d3      	b.n	8005c66 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d02e      	beq.n	8005b22 <I2C_Master_ADDR+0x1b2>
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d02b      	beq.n	8005b22 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005acc:	2b12      	cmp	r3, #18
 8005ace:	d102      	bne.n	8005ad6 <I2C_Master_ADDR+0x166>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d125      	bne.n	8005b22 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d00e      	beq.n	8005afa <I2C_Master_ADDR+0x18a>
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d00b      	beq.n	8005afa <I2C_Master_ADDR+0x18a>
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d008      	beq.n	8005afa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e007      	b.n	8005b0a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b08:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	e0a1      	b.n	8005c66 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b30:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b32:	2300      	movs	r3, #0
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e085      	b.n	8005c66 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d14d      	bne.n	8005c00 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d016      	beq.n	8005b98 <I2C_Master_ADDR+0x228>
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d013      	beq.n	8005b98 <I2C_Master_ADDR+0x228>
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d010      	beq.n	8005b98 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b84:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	e007      	b.n	8005ba8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ba6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb6:	d117      	bne.n	8005be8 <I2C_Master_ADDR+0x278>
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bbe:	d00b      	beq.n	8005bd8 <I2C_Master_ADDR+0x268>
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d008      	beq.n	8005bd8 <I2C_Master_ADDR+0x268>
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d005      	beq.n	8005bd8 <I2C_Master_ADDR+0x268>
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d002      	beq.n	8005bd8 <I2C_Master_ADDR+0x268>
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d107      	bne.n	8005be8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005be6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	e032      	b.n	8005c66 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c0e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1e:	d117      	bne.n	8005c50 <I2C_Master_ADDR+0x2e0>
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c26:	d00b      	beq.n	8005c40 <I2C_Master_ADDR+0x2d0>
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d008      	beq.n	8005c40 <I2C_Master_ADDR+0x2d0>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d005      	beq.n	8005c40 <I2C_Master_ADDR+0x2d0>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d002      	beq.n	8005c40 <I2C_Master_ADDR+0x2d0>
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d107      	bne.n	8005c50 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c4e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005c6c:	e00b      	b.n	8005c86 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]
}
 8005c84:	e7ff      	b.n	8005c86 <I2C_Master_ADDR+0x316>
 8005c86:	bf00      	nop
 8005c88:	3744      	adds	r7, #68	; 0x44
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d02b      	beq.n	8005d04 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	781a      	ldrb	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d114      	bne.n	8005d04 <I2C_SlaveTransmit_TXE+0x72>
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	2b29      	cmp	r3, #41	; 0x29
 8005cde:	d111      	bne.n	8005d04 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2221      	movs	r2, #33	; 0x21
 8005cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2228      	movs	r2, #40	; 0x28
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff f9f1 	bl	80050e6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d011      	beq.n	8005d42 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d02c      	beq.n	8005dc2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d114      	bne.n	8005dc2 <I2C_SlaveReceive_RXNE+0x74>
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d9c:	d111      	bne.n	8005dc2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2222      	movs	r2, #34	; 0x22
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2228      	movs	r2, #40	; 0x28
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff f99c 	bl	80050fa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d012      	beq.n	8005e02 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e28:	2b28      	cmp	r3, #40	; 0x28
 8005e2a:	d127      	bne.n	8005e7c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	81bb      	strh	r3, [r7, #12]
 8005e5e:	e002      	b.n	8005e66 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005e6e:	89ba      	ldrh	r2, [r7, #12]
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff f94a 	bl	800510e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e7a:	e00e      	b.n	8005e9a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	60bb      	str	r3, [r7, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ec2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60bb      	str	r3, [r7, #8]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f00:	d172      	bne.n	8005fe8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b22      	cmp	r3, #34	; 0x22
 8005f06:	d002      	beq.n	8005f0e <I2C_Slave_STOPF+0x6a>
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0c:	d135      	bne.n	8005f7a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f043 0204 	orr.w	r2, r3, #4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fd feea 	bl	8003d20 <HAL_DMA_GetState>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d049      	beq.n	8005fe6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	4a69      	ldr	r2, [pc, #420]	; (80060fc <I2C_Slave_STOPF+0x258>)
 8005f58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fd fd32 	bl	80039c8 <HAL_DMA_Abort_IT>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03d      	beq.n	8005fe6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f78:	e035      	b.n	8005fe6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0204 	orr.w	r2, r3, #4
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fd feb4 	bl	8003d20 <HAL_DMA_GetState>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d014      	beq.n	8005fe8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	4a4e      	ldr	r2, [pc, #312]	; (80060fc <I2C_Slave_STOPF+0x258>)
 8005fc4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fd fcfc 	bl	80039c8 <HAL_DMA_Abort_IT>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4798      	blx	r3
 8005fe4:	e000      	b.n	8005fe8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fe6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d03e      	beq.n	8006070 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d112      	bne.n	8006026 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d112      	bne.n	800605a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	f043 0204 	orr.w	r2, r3, #4
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f843 	bl	8006104 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800607e:	e039      	b.n	80060f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b2a      	cmp	r3, #42	; 0x2a
 8006084:	d109      	bne.n	800609a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2228      	movs	r2, #40	; 0x28
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff f830 	bl	80050fa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b28      	cmp	r3, #40	; 0x28
 80060a4:	d111      	bne.n	80060ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a15      	ldr	r2, [pc, #84]	; (8006100 <I2C_Slave_STOPF+0x25c>)
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff f831 	bl	800512a <HAL_I2C_ListenCpltCallback>
}
 80060c8:	e014      	b.n	80060f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	2b22      	cmp	r3, #34	; 0x22
 80060d0:	d002      	beq.n	80060d8 <I2C_Slave_STOPF+0x234>
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b22      	cmp	r3, #34	; 0x22
 80060d6:	d10d      	bne.n	80060f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff f803 	bl	80050fa <HAL_I2C_SlaveRxCpltCallback>
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	08006889 	.word	0x08006889
 8006100:	ffff0000 	.word	0xffff0000

08006104 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006112:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800611a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	2b10      	cmp	r3, #16
 8006120:	d002      	beq.n	8006128 <I2C_ITError+0x24>
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d10a      	bne.n	800613e <I2C_ITError+0x3a>
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b22      	cmp	r3, #34	; 0x22
 800612c:	d107      	bne.n	800613e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800613c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006144:	2b28      	cmp	r3, #40	; 0x28
 8006146:	d107      	bne.n	8006158 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2228      	movs	r2, #40	; 0x28
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006156:	e015      	b.n	8006184 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006166:	d00a      	beq.n	800617e <I2C_ITError+0x7a>
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b60      	cmp	r3, #96	; 0x60
 800616c:	d007      	beq.n	800617e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800618e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006192:	d162      	bne.n	800625a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d020      	beq.n	80061f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b6:	4a6a      	ldr	r2, [pc, #424]	; (8006360 <I2C_ITError+0x25c>)
 80061b8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fd fc02 	bl	80039c8 <HAL_DMA_Abort_IT>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 8089 	beq.w	80062de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061ee:	4610      	mov	r0, r2
 80061f0:	4798      	blx	r3
 80061f2:	e074      	b.n	80062de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	4a59      	ldr	r2, [pc, #356]	; (8006360 <I2C_ITError+0x25c>)
 80061fa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	4618      	mov	r0, r3
 8006202:	f7fd fbe1 	bl	80039c8 <HAL_DMA_Abort_IT>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d068      	beq.n	80062de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d10b      	bne.n	8006232 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006254:	4610      	mov	r0, r2
 8006256:	4798      	blx	r3
 8006258:	e041      	b.n	80062de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b60      	cmp	r3, #96	; 0x60
 8006264:	d125      	bne.n	80062b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d10b      	bne.n	800629a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0201 	bic.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fe ff65 	bl	800517a <HAL_I2C_AbortCpltCallback>
 80062b0:	e015      	b.n	80062de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d10b      	bne.n	80062d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7fe ff44 	bl	8005166 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10e      	bne.n	800630c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d109      	bne.n	800630c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800631a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006322:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b04      	cmp	r3, #4
 800632e:	d113      	bne.n	8006358 <I2C_ITError+0x254>
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	2b28      	cmp	r3, #40	; 0x28
 8006334:	d110      	bne.n	8006358 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a0a      	ldr	r2, [pc, #40]	; (8006364 <I2C_ITError+0x260>)
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fe fee9 	bl	800512a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	08006889 	.word	0x08006889
 8006364:	ffff0000 	.word	0xffff0000

08006368 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af02      	add	r7, sp, #8
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	4608      	mov	r0, r1
 8006372:	4611      	mov	r1, r2
 8006374:	461a      	mov	r2, r3
 8006376:	4603      	mov	r3, r0
 8006378:	817b      	strh	r3, [r7, #10]
 800637a:	460b      	mov	r3, r1
 800637c:	813b      	strh	r3, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006390:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	2200      	movs	r2, #0
 800639a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 fb1a 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00d      	beq.n	80063c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b8:	d103      	bne.n	80063c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e05f      	b.n	8006486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063c6:	897b      	ldrh	r3, [r7, #10]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	6a3a      	ldr	r2, [r7, #32]
 80063da:	492d      	ldr	r1, [pc, #180]	; (8006490 <I2C_RequestMemoryWrite+0x128>)
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fb52 	bl	8006a86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e04c      	b.n	8006486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006404:	6a39      	ldr	r1, [r7, #32]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fbbc 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2b04      	cmp	r3, #4
 8006418:	d107      	bne.n	800642a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006428:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e02b      	b.n	8006486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d105      	bne.n	8006440 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006434:	893b      	ldrh	r3, [r7, #8]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	611a      	str	r2, [r3, #16]
 800643e:	e021      	b.n	8006484 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006440:	893b      	ldrh	r3, [r7, #8]
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	b29b      	uxth	r3, r3
 8006446:	b2da      	uxtb	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800644e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006450:	6a39      	ldr	r1, [r7, #32]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 fb96 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00d      	beq.n	800647a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	2b04      	cmp	r3, #4
 8006464:	d107      	bne.n	8006476 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006474:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e005      	b.n	8006486 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800647a:	893b      	ldrh	r3, [r7, #8]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	00010002 	.word	0x00010002

08006494 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	461a      	mov	r2, r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	817b      	strh	r3, [r7, #10]
 80064a6:	460b      	mov	r3, r1
 80064a8:	813b      	strh	r3, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fa7c 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00d      	beq.n	8006502 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f4:	d103      	bne.n	80064fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e0aa      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006502:	897b      	ldrh	r3, [r7, #10]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	4952      	ldr	r1, [pc, #328]	; (8006660 <I2C_RequestMemoryRead+0x1cc>)
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fab4 	bl	8006a86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e097      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800653e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006540:	6a39      	ldr	r1, [r7, #32]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 fb1e 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	2b04      	cmp	r3, #4
 8006554:	d107      	bne.n	8006566 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e076      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d105      	bne.n	800657c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006570:	893b      	ldrh	r3, [r7, #8]
 8006572:	b2da      	uxtb	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	611a      	str	r2, [r3, #16]
 800657a:	e021      	b.n	80065c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800657c:	893b      	ldrh	r3, [r7, #8]
 800657e:	0a1b      	lsrs	r3, r3, #8
 8006580:	b29b      	uxth	r3, r3
 8006582:	b2da      	uxtb	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800658a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658c:	6a39      	ldr	r1, [r7, #32]
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 faf8 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00d      	beq.n	80065b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d107      	bne.n	80065b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e050      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065b6:	893b      	ldrh	r3, [r7, #8]
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c2:	6a39      	ldr	r1, [r7, #32]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 fadd 	bl	8006b84 <I2C_WaitOnTXEFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00d      	beq.n	80065ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d107      	bne.n	80065e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e035      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	2200      	movs	r2, #0
 8006604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 f9e5 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00d      	beq.n	8006630 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006622:	d103      	bne.n	800662c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800662a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e013      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006630:	897b      	ldrh	r3, [r7, #10]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	b2da      	uxtb	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	6a3a      	ldr	r2, [r7, #32]
 8006644:	4906      	ldr	r1, [pc, #24]	; (8006660 <I2C_RequestMemoryRead+0x1cc>)
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fa1d 	bl	8006a86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	00010002 	.word	0x00010002

08006664 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006678:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006680:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006696:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a4:	2200      	movs	r2, #0
 80066a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	2200      	movs	r2, #0
 80066b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80066b8:	7cfb      	ldrb	r3, [r7, #19]
 80066ba:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80066be:	2b21      	cmp	r3, #33	; 0x21
 80066c0:	d007      	beq.n	80066d2 <I2C_DMAXferCplt+0x6e>
 80066c2:	7cfb      	ldrb	r3, [r7, #19]
 80066c4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80066c8:	2b22      	cmp	r3, #34	; 0x22
 80066ca:	d131      	bne.n	8006730 <I2C_DMAXferCplt+0xcc>
 80066cc:	7cbb      	ldrb	r3, [r7, #18]
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d12e      	bne.n	8006730 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2200      	movs	r2, #0
 80066e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066e8:	7cfb      	ldrb	r3, [r7, #19]
 80066ea:	2b29      	cmp	r3, #41	; 0x29
 80066ec:	d10a      	bne.n	8006704 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2221      	movs	r2, #33	; 0x21
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2228      	movs	r2, #40	; 0x28
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066fc:	6978      	ldr	r0, [r7, #20]
 80066fe:	f7fe fcf2 	bl	80050e6 <HAL_I2C_SlaveTxCpltCallback>
 8006702:	e00c      	b.n	800671e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006704:	7cfb      	ldrb	r3, [r7, #19]
 8006706:	2b2a      	cmp	r3, #42	; 0x2a
 8006708:	d109      	bne.n	800671e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2222      	movs	r2, #34	; 0x22
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2228      	movs	r2, #40	; 0x28
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006718:	6978      	ldr	r0, [r7, #20]
 800671a:	f7fe fcee 	bl	80050fa <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800672c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800672e:	e06a      	b.n	8006806 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d064      	beq.n	8006806 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b01      	cmp	r3, #1
 8006744:	d107      	bne.n	8006756 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006754:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006764:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800676c:	d009      	beq.n	8006782 <I2C_DMAXferCplt+0x11e>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b08      	cmp	r3, #8
 8006772:	d006      	beq.n	8006782 <I2C_DMAXferCplt+0x11e>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800677a:	d002      	beq.n	8006782 <I2C_DMAXferCplt+0x11e>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b20      	cmp	r3, #32
 8006780:	d107      	bne.n	8006792 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006790:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067a0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067b0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2200      	movs	r2, #0
 80067b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80067c0:	6978      	ldr	r0, [r7, #20]
 80067c2:	f7fe fcd0 	bl	8005166 <HAL_I2C_ErrorCallback>
}
 80067c6:	e01e      	b.n	8006806 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b40      	cmp	r3, #64	; 0x40
 80067da:	d10a      	bne.n	80067f2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2200      	movs	r2, #0
 80067e8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80067ea:	6978      	ldr	r0, [r7, #20]
 80067ec:	f7fe fcb1 	bl	8005152 <HAL_I2C_MemRxCpltCallback>
}
 80067f0:	e009      	b.n	8006806 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2212      	movs	r2, #18
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006800:	6978      	ldr	r0, [r7, #20]
 8006802:	f7fe fc66 	bl	80050d2 <HAL_I2C_MasterRxCpltCallback>
}
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	2200      	movs	r2, #0
 800682a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	2200      	movs	r2, #0
 800683a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fd fa7d 	bl	8003d3c <HAL_DMA_GetError>
 8006842:	4603      	mov	r3, r0
 8006844:	2b02      	cmp	r3, #2
 8006846:	d01b      	beq.n	8006880 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006856:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2220      	movs	r2, #32
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f043 0210 	orr.w	r2, r3, #16
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7fe fc73 	bl	8005166 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80068a2:	4b4b      	ldr	r3, [pc, #300]	; (80069d0 <I2C_DMAAbort+0x148>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	08db      	lsrs	r3, r3, #3
 80068a8:	4a4a      	ldr	r2, [pc, #296]	; (80069d4 <I2C_DMAAbort+0x14c>)
 80068aa:	fba2 2303 	umull	r2, r3, r2, r3
 80068ae:	0a1a      	lsrs	r2, r3, #8
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	00da      	lsls	r2, r3, #3
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80068ce:	e00a      	b.n	80068e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e4:	d0ea      	beq.n	80068bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f2:	2200      	movs	r2, #0
 80068f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	2200      	movs	r2, #0
 8006904:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006914:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2200      	movs	r2, #0
 800691a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006928:	2200      	movs	r2, #0
 800692a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	2200      	movs	r2, #0
 800693a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0201 	bic.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b60      	cmp	r3, #96	; 0x60
 8006956:	d10e      	bne.n	8006976 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2200      	movs	r2, #0
 800696c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800696e:	6978      	ldr	r0, [r7, #20]
 8006970:	f7fe fc03 	bl	800517a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006974:	e027      	b.n	80069c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006976:	7cfb      	ldrb	r3, [r7, #19]
 8006978:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800697c:	2b28      	cmp	r3, #40	; 0x28
 800697e:	d117      	bne.n	80069b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800699e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2200      	movs	r2, #0
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2228      	movs	r2, #40	; 0x28
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ae:	e007      	b.n	80069c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80069c0:	6978      	ldr	r0, [r7, #20]
 80069c2:	f7fe fbd0 	bl	8005166 <HAL_I2C_ErrorCallback>
}
 80069c6:	bf00      	nop
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20000004 	.word	0x20000004
 80069d4:	14f8b589 	.word	0x14f8b589

080069d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069e8:	e025      	b.n	8006a36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d021      	beq.n	8006a36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f2:	f7fc f879 	bl	8002ae8 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d302      	bcc.n	8006a08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d116      	bne.n	8006a36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	f043 0220 	orr.w	r2, r3, #32
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e023      	b.n	8006a7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	0c1b      	lsrs	r3, r3, #16
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d10d      	bne.n	8006a5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	43da      	mvns	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	e00c      	b.n	8006a76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	43da      	mvns	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4013      	ands	r3, r2
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	bf0c      	ite	eq
 8006a6e:	2301      	moveq	r3, #1
 8006a70:	2300      	movne	r3, #0
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d0b6      	beq.n	80069ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
 8006a92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a94:	e051      	b.n	8006b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa4:	d123      	bne.n	8006aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ab4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006abe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f043 0204 	orr.w	r2, r3, #4
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e046      	b.n	8006b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d021      	beq.n	8006b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af6:	f7fb fff7 	bl	8002ae8 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d302      	bcc.n	8006b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d116      	bne.n	8006b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f043 0220 	orr.w	r2, r3, #32
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e020      	b.n	8006b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	0c1b      	lsrs	r3, r3, #16
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d10c      	bne.n	8006b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	43da      	mvns	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	bf14      	ite	ne
 8006b56:	2301      	movne	r3, #1
 8006b58:	2300      	moveq	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	e00b      	b.n	8006b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	43da      	mvns	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	bf14      	ite	ne
 8006b70:	2301      	movne	r3, #1
 8006b72:	2300      	moveq	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d18d      	bne.n	8006a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b90:	e02d      	b.n	8006bee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f900 	bl	8006d98 <I2C_IsAcknowledgeFailed>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e02d      	b.n	8006bfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba8:	d021      	beq.n	8006bee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006baa:	f7fb ff9d 	bl	8002ae8 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d302      	bcc.n	8006bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d116      	bne.n	8006bee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f043 0220 	orr.w	r2, r3, #32
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e007      	b.n	8006bfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf8:	2b80      	cmp	r3, #128	; 0x80
 8006bfa:	d1ca      	bne.n	8006b92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c12:	e02d      	b.n	8006c70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 f8bf 	bl	8006d98 <I2C_IsAcknowledgeFailed>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e02d      	b.n	8006c80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2a:	d021      	beq.n	8006c70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2c:	f7fb ff5c 	bl	8002ae8 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d116      	bne.n	8006c70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	f043 0220 	orr.w	r2, r3, #32
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e007      	b.n	8006c80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d1ca      	bne.n	8006c14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c94:	4b13      	ldr	r3, [pc, #76]	; (8006ce4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	08db      	lsrs	r3, r3, #3
 8006c9a:	4a13      	ldr	r2, [pc, #76]	; (8006ce8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca0:	0a1a      	lsrs	r2, r3, #8
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d107      	bne.n	8006cc6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	f043 0220 	orr.w	r2, r3, #32
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e008      	b.n	8006cd8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd4:	d0e9      	beq.n	8006caa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	20000004 	.word	0x20000004
 8006ce8:	14f8b589 	.word	0x14f8b589

08006cec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cf8:	e042      	b.n	8006d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d119      	bne.n	8006d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0210 	mvn.w	r2, #16
 8006d10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e029      	b.n	8006d90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3c:	f7fb fed4 	bl	8002ae8 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d302      	bcc.n	8006d52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d116      	bne.n	8006d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e007      	b.n	8006d90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	d1b5      	bne.n	8006cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dae:	d11b      	bne.n	8006de8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006db8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	f043 0204 	orr.w	r2, r3, #4
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e02:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e06:	d103      	bne.n	8006e10 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e0e:	e007      	b.n	8006e20 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e18:	d102      	bne.n	8006e20 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e264      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d075      	beq.n	8006f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e4a:	4ba3      	ldr	r3, [pc, #652]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 030c 	and.w	r3, r3, #12
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d00c      	beq.n	8006e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e56:	4ba0      	ldr	r3, [pc, #640]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e5e:	2b08      	cmp	r3, #8
 8006e60:	d112      	bne.n	8006e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e62:	4b9d      	ldr	r3, [pc, #628]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e6e:	d10b      	bne.n	8006e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e70:	4b99      	ldr	r3, [pc, #612]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d05b      	beq.n	8006f34 <HAL_RCC_OscConfig+0x108>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d157      	bne.n	8006f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e23f      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e90:	d106      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x74>
 8006e92:	4b91      	ldr	r3, [pc, #580]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a90      	ldr	r2, [pc, #576]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	e01d      	b.n	8006edc <HAL_RCC_OscConfig+0xb0>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ea8:	d10c      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x98>
 8006eaa:	4b8b      	ldr	r3, [pc, #556]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a8a      	ldr	r2, [pc, #552]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4b88      	ldr	r3, [pc, #544]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a87      	ldr	r2, [pc, #540]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	e00b      	b.n	8006edc <HAL_RCC_OscConfig+0xb0>
 8006ec4:	4b84      	ldr	r3, [pc, #528]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a83      	ldr	r2, [pc, #524]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4b81      	ldr	r3, [pc, #516]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a80      	ldr	r2, [pc, #512]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d013      	beq.n	8006f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee4:	f7fb fe00 	bl	8002ae8 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006eec:	f7fb fdfc 	bl	8002ae8 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b64      	cmp	r3, #100	; 0x64
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e204      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efe:	4b76      	ldr	r3, [pc, #472]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0xc0>
 8006f0a:	e014      	b.n	8006f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0c:	f7fb fdec 	bl	8002ae8 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f14:	f7fb fde8 	bl	8002ae8 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b64      	cmp	r3, #100	; 0x64
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e1f0      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f26:	4b6c      	ldr	r3, [pc, #432]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f0      	bne.n	8006f14 <HAL_RCC_OscConfig+0xe8>
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d063      	beq.n	800700a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f42:	4b65      	ldr	r3, [pc, #404]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 030c 	and.w	r3, r3, #12
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f4e:	4b62      	ldr	r3, [pc, #392]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f56:	2b08      	cmp	r3, #8
 8006f58:	d11c      	bne.n	8006f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f5a:	4b5f      	ldr	r3, [pc, #380]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d116      	bne.n	8006f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f66:	4b5c      	ldr	r3, [pc, #368]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_RCC_OscConfig+0x152>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d001      	beq.n	8006f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e1c4      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f7e:	4b56      	ldr	r3, [pc, #344]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4952      	ldr	r1, [pc, #328]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f92:	e03a      	b.n	800700a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d020      	beq.n	8006fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f9c:	4b4f      	ldr	r3, [pc, #316]	; (80070dc <HAL_RCC_OscConfig+0x2b0>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa2:	f7fb fda1 	bl	8002ae8 <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006faa:	f7fb fd9d 	bl	8002ae8 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e1a5      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fbc:	4b46      	ldr	r3, [pc, #280]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc8:	4b43      	ldr	r3, [pc, #268]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	4940      	ldr	r1, [pc, #256]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]
 8006fdc:	e015      	b.n	800700a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fde:	4b3f      	ldr	r3, [pc, #252]	; (80070dc <HAL_RCC_OscConfig+0x2b0>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fb fd80 	bl	8002ae8 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fec:	f7fb fd7c 	bl	8002ae8 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e184      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ffe:	4b36      	ldr	r3, [pc, #216]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d030      	beq.n	8007078 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d016      	beq.n	800704c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800701e:	4b30      	ldr	r3, [pc, #192]	; (80070e0 <HAL_RCC_OscConfig+0x2b4>)
 8007020:	2201      	movs	r2, #1
 8007022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007024:	f7fb fd60 	bl	8002ae8 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800702c:	f7fb fd5c 	bl	8002ae8 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e164      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800703e:	4b26      	ldr	r3, [pc, #152]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 8007040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <HAL_RCC_OscConfig+0x200>
 800704a:	e015      	b.n	8007078 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800704c:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <HAL_RCC_OscConfig+0x2b4>)
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007052:	f7fb fd49 	bl	8002ae8 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800705a:	f7fb fd45 	bl	8002ae8 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e14d      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 800706e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f0      	bne.n	800705a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80a0 	beq.w	80071c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007086:	2300      	movs	r3, #0
 8007088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800708a:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10f      	bne.n	80070b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007096:	2300      	movs	r3, #0
 8007098:	60bb      	str	r3, [r7, #8]
 800709a:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	4a0e      	ldr	r2, [pc, #56]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 80070a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a4:	6413      	str	r3, [r2, #64]	; 0x40
 80070a6:	4b0c      	ldr	r3, [pc, #48]	; (80070d8 <HAL_RCC_OscConfig+0x2ac>)
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ae:	60bb      	str	r3, [r7, #8]
 80070b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070b2:	2301      	movs	r3, #1
 80070b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <HAL_RCC_OscConfig+0x2b8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d121      	bne.n	8007106 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070c2:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <HAL_RCC_OscConfig+0x2b8>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a07      	ldr	r2, [pc, #28]	; (80070e4 <HAL_RCC_OscConfig+0x2b8>)
 80070c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070ce:	f7fb fd0b 	bl	8002ae8 <HAL_GetTick>
 80070d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d4:	e011      	b.n	80070fa <HAL_RCC_OscConfig+0x2ce>
 80070d6:	bf00      	nop
 80070d8:	40023800 	.word	0x40023800
 80070dc:	42470000 	.word	0x42470000
 80070e0:	42470e80 	.word	0x42470e80
 80070e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e8:	f7fb fcfe 	bl	8002ae8 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e106      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fa:	4b85      	ldr	r3, [pc, #532]	; (8007310 <HAL_RCC_OscConfig+0x4e4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d106      	bne.n	800711c <HAL_RCC_OscConfig+0x2f0>
 800710e:	4b81      	ldr	r3, [pc, #516]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 8007110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007112:	4a80      	ldr	r2, [pc, #512]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	6713      	str	r3, [r2, #112]	; 0x70
 800711a:	e01c      	b.n	8007156 <HAL_RCC_OscConfig+0x32a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	2b05      	cmp	r3, #5
 8007122:	d10c      	bne.n	800713e <HAL_RCC_OscConfig+0x312>
 8007124:	4b7b      	ldr	r3, [pc, #492]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 8007126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007128:	4a7a      	ldr	r2, [pc, #488]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 800712a:	f043 0304 	orr.w	r3, r3, #4
 800712e:	6713      	str	r3, [r2, #112]	; 0x70
 8007130:	4b78      	ldr	r3, [pc, #480]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 8007132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007134:	4a77      	ldr	r2, [pc, #476]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 8007136:	f043 0301 	orr.w	r3, r3, #1
 800713a:	6713      	str	r3, [r2, #112]	; 0x70
 800713c:	e00b      	b.n	8007156 <HAL_RCC_OscConfig+0x32a>
 800713e:	4b75      	ldr	r3, [pc, #468]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 8007140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007142:	4a74      	ldr	r2, [pc, #464]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	6713      	str	r3, [r2, #112]	; 0x70
 800714a:	4b72      	ldr	r3, [pc, #456]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 800714c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714e:	4a71      	ldr	r2, [pc, #452]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 8007150:	f023 0304 	bic.w	r3, r3, #4
 8007154:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d015      	beq.n	800718a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715e:	f7fb fcc3 	bl	8002ae8 <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007164:	e00a      	b.n	800717c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007166:	f7fb fcbf 	bl	8002ae8 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	f241 3288 	movw	r2, #5000	; 0x1388
 8007174:	4293      	cmp	r3, r2
 8007176:	d901      	bls.n	800717c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e0c5      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800717c:	4b65      	ldr	r3, [pc, #404]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 800717e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0ee      	beq.n	8007166 <HAL_RCC_OscConfig+0x33a>
 8007188:	e014      	b.n	80071b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800718a:	f7fb fcad 	bl	8002ae8 <HAL_GetTick>
 800718e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007190:	e00a      	b.n	80071a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007192:	f7fb fca9 	bl	8002ae8 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e0af      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071a8:	4b5a      	ldr	r3, [pc, #360]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 80071aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1ee      	bne.n	8007192 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d105      	bne.n	80071c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071ba:	4b56      	ldr	r3, [pc, #344]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	4a55      	ldr	r2, [pc, #340]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 80071c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 809b 	beq.w	8007306 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071d0:	4b50      	ldr	r3, [pc, #320]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 030c 	and.w	r3, r3, #12
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d05c      	beq.n	8007296 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d141      	bne.n	8007268 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071e4:	4b4c      	ldr	r3, [pc, #304]	; (8007318 <HAL_RCC_OscConfig+0x4ec>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ea:	f7fb fc7d 	bl	8002ae8 <HAL_GetTick>
 80071ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071f0:	e008      	b.n	8007204 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071f2:	f7fb fc79 	bl	8002ae8 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e081      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007204:	4b43      	ldr	r3, [pc, #268]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1f0      	bne.n	80071f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	431a      	orrs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	019b      	lsls	r3, r3, #6
 8007220:	431a      	orrs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	3b01      	subs	r3, #1
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	061b      	lsls	r3, r3, #24
 8007234:	4937      	ldr	r1, [pc, #220]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 8007236:	4313      	orrs	r3, r2
 8007238:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800723a:	4b37      	ldr	r3, [pc, #220]	; (8007318 <HAL_RCC_OscConfig+0x4ec>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007240:	f7fb fc52 	bl	8002ae8 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007248:	f7fb fc4e 	bl	8002ae8 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e056      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800725a:	4b2e      	ldr	r3, [pc, #184]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f0      	beq.n	8007248 <HAL_RCC_OscConfig+0x41c>
 8007266:	e04e      	b.n	8007306 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007268:	4b2b      	ldr	r3, [pc, #172]	; (8007318 <HAL_RCC_OscConfig+0x4ec>)
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800726e:	f7fb fc3b 	bl	8002ae8 <HAL_GetTick>
 8007272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007274:	e008      	b.n	8007288 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007276:	f7fb fc37 	bl	8002ae8 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d901      	bls.n	8007288 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e03f      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007288:	4b22      	ldr	r3, [pc, #136]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f0      	bne.n	8007276 <HAL_RCC_OscConfig+0x44a>
 8007294:	e037      	b.n	8007306 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e032      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072a2:	4b1c      	ldr	r3, [pc, #112]	; (8007314 <HAL_RCC_OscConfig+0x4e8>)
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d028      	beq.n	8007302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d121      	bne.n	8007302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d11a      	bne.n	8007302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072d2:	4013      	ands	r3, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072da:	4293      	cmp	r3, r2
 80072dc:	d111      	bne.n	8007302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	085b      	lsrs	r3, r3, #1
 80072ea:	3b01      	subs	r3, #1
 80072ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d107      	bne.n	8007302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072fe:	429a      	cmp	r2, r3
 8007300:	d001      	beq.n	8007306 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40007000 	.word	0x40007000
 8007314:	40023800 	.word	0x40023800
 8007318:	42470060 	.word	0x42470060

0800731c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e0cc      	b.n	80074ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007330:	4b68      	ldr	r3, [pc, #416]	; (80074d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	d90c      	bls.n	8007358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800733e:	4b65      	ldr	r3, [pc, #404]	; (80074d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007346:	4b63      	ldr	r3, [pc, #396]	; (80074d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d001      	beq.n	8007358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e0b8      	b.n	80074ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d020      	beq.n	80073a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007370:	4b59      	ldr	r3, [pc, #356]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	4a58      	ldr	r2, [pc, #352]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800737a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007388:	4b53      	ldr	r3, [pc, #332]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	4a52      	ldr	r2, [pc, #328]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 800738e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007394:	4b50      	ldr	r3, [pc, #320]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	494d      	ldr	r1, [pc, #308]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d044      	beq.n	800743c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d107      	bne.n	80073ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ba:	4b47      	ldr	r3, [pc, #284]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d119      	bne.n	80073fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e07f      	b.n	80074ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d003      	beq.n	80073da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d107      	bne.n	80073ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073da:	4b3f      	ldr	r3, [pc, #252]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e06f      	b.n	80074ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073ea:	4b3b      	ldr	r3, [pc, #236]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e067      	b.n	80074ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073fa:	4b37      	ldr	r3, [pc, #220]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f023 0203 	bic.w	r2, r3, #3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	4934      	ldr	r1, [pc, #208]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007408:	4313      	orrs	r3, r2
 800740a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800740c:	f7fb fb6c 	bl	8002ae8 <HAL_GetTick>
 8007410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007412:	e00a      	b.n	800742a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007414:	f7fb fb68 	bl	8002ae8 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007422:	4293      	cmp	r3, r2
 8007424:	d901      	bls.n	800742a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e04f      	b.n	80074ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800742a:	4b2b      	ldr	r3, [pc, #172]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f003 020c 	and.w	r2, r3, #12
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	429a      	cmp	r2, r3
 800743a:	d1eb      	bne.n	8007414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800743c:	4b25      	ldr	r3, [pc, #148]	; (80074d4 <HAL_RCC_ClockConfig+0x1b8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d20c      	bcs.n	8007464 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800744a:	4b22      	ldr	r3, [pc, #136]	; (80074d4 <HAL_RCC_ClockConfig+0x1b8>)
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007452:	4b20      	ldr	r3, [pc, #128]	; (80074d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d001      	beq.n	8007464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e032      	b.n	80074ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007470:	4b19      	ldr	r3, [pc, #100]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	4916      	ldr	r1, [pc, #88]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 800747e:	4313      	orrs	r3, r2
 8007480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0308 	and.w	r3, r3, #8
 800748a:	2b00      	cmp	r3, #0
 800748c:	d009      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800748e:	4b12      	ldr	r3, [pc, #72]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	490e      	ldr	r1, [pc, #56]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074a2:	f000 f821 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 80074a6:	4602      	mov	r2, r0
 80074a8:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	091b      	lsrs	r3, r3, #4
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	490a      	ldr	r1, [pc, #40]	; (80074dc <HAL_RCC_ClockConfig+0x1c0>)
 80074b4:	5ccb      	ldrb	r3, [r1, r3]
 80074b6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ba:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <HAL_RCC_ClockConfig+0x1c4>)
 80074bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <HAL_RCC_ClockConfig+0x1c8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fb facc 	bl	8002a60 <HAL_InitTick>

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40023c00 	.word	0x40023c00
 80074d8:	40023800 	.word	0x40023800
 80074dc:	0800c3e0 	.word	0x0800c3e0
 80074e0:	20000004 	.word	0x20000004
 80074e4:	20000008 	.word	0x20000008

080074e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	607b      	str	r3, [r7, #4]
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	2300      	movs	r3, #0
 80074fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007500:	4b67      	ldr	r3, [pc, #412]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 030c 	and.w	r3, r3, #12
 8007508:	2b08      	cmp	r3, #8
 800750a:	d00d      	beq.n	8007528 <HAL_RCC_GetSysClockFreq+0x40>
 800750c:	2b08      	cmp	r3, #8
 800750e:	f200 80bd 	bhi.w	800768c <HAL_RCC_GetSysClockFreq+0x1a4>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <HAL_RCC_GetSysClockFreq+0x34>
 8007516:	2b04      	cmp	r3, #4
 8007518:	d003      	beq.n	8007522 <HAL_RCC_GetSysClockFreq+0x3a>
 800751a:	e0b7      	b.n	800768c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800751c:	4b61      	ldr	r3, [pc, #388]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800751e:	60bb      	str	r3, [r7, #8]
       break;
 8007520:	e0b7      	b.n	8007692 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007522:	4b61      	ldr	r3, [pc, #388]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007524:	60bb      	str	r3, [r7, #8]
      break;
 8007526:	e0b4      	b.n	8007692 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007528:	4b5d      	ldr	r3, [pc, #372]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007530:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007532:	4b5b      	ldr	r3, [pc, #364]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d04d      	beq.n	80075da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800753e:	4b58      	ldr	r3, [pc, #352]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	099b      	lsrs	r3, r3, #6
 8007544:	461a      	mov	r2, r3
 8007546:	f04f 0300 	mov.w	r3, #0
 800754a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800754e:	f04f 0100 	mov.w	r1, #0
 8007552:	ea02 0800 	and.w	r8, r2, r0
 8007556:	ea03 0901 	and.w	r9, r3, r1
 800755a:	4640      	mov	r0, r8
 800755c:	4649      	mov	r1, r9
 800755e:	f04f 0200 	mov.w	r2, #0
 8007562:	f04f 0300 	mov.w	r3, #0
 8007566:	014b      	lsls	r3, r1, #5
 8007568:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800756c:	0142      	lsls	r2, r0, #5
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	ebb0 0008 	subs.w	r0, r0, r8
 8007576:	eb61 0109 	sbc.w	r1, r1, r9
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	018b      	lsls	r3, r1, #6
 8007584:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007588:	0182      	lsls	r2, r0, #6
 800758a:	1a12      	subs	r2, r2, r0
 800758c:	eb63 0301 	sbc.w	r3, r3, r1
 8007590:	f04f 0000 	mov.w	r0, #0
 8007594:	f04f 0100 	mov.w	r1, #0
 8007598:	00d9      	lsls	r1, r3, #3
 800759a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800759e:	00d0      	lsls	r0, r2, #3
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	eb12 0208 	adds.w	r2, r2, r8
 80075a8:	eb43 0309 	adc.w	r3, r3, r9
 80075ac:	f04f 0000 	mov.w	r0, #0
 80075b0:	f04f 0100 	mov.w	r1, #0
 80075b4:	0259      	lsls	r1, r3, #9
 80075b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80075ba:	0250      	lsls	r0, r2, #9
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4610      	mov	r0, r2
 80075c2:	4619      	mov	r1, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	461a      	mov	r2, r3
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	f7f9 fba4 	bl	8000d18 <__aeabi_uldivmod>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4613      	mov	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e04a      	b.n	8007670 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075da:	4b31      	ldr	r3, [pc, #196]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	099b      	lsrs	r3, r3, #6
 80075e0:	461a      	mov	r2, r3
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80075ea:	f04f 0100 	mov.w	r1, #0
 80075ee:	ea02 0400 	and.w	r4, r2, r0
 80075f2:	ea03 0501 	and.w	r5, r3, r1
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	f04f 0300 	mov.w	r3, #0
 8007602:	014b      	lsls	r3, r1, #5
 8007604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007608:	0142      	lsls	r2, r0, #5
 800760a:	4610      	mov	r0, r2
 800760c:	4619      	mov	r1, r3
 800760e:	1b00      	subs	r0, r0, r4
 8007610:	eb61 0105 	sbc.w	r1, r1, r5
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	018b      	lsls	r3, r1, #6
 800761e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007622:	0182      	lsls	r2, r0, #6
 8007624:	1a12      	subs	r2, r2, r0
 8007626:	eb63 0301 	sbc.w	r3, r3, r1
 800762a:	f04f 0000 	mov.w	r0, #0
 800762e:	f04f 0100 	mov.w	r1, #0
 8007632:	00d9      	lsls	r1, r3, #3
 8007634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007638:	00d0      	lsls	r0, r2, #3
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	1912      	adds	r2, r2, r4
 8007640:	eb45 0303 	adc.w	r3, r5, r3
 8007644:	f04f 0000 	mov.w	r0, #0
 8007648:	f04f 0100 	mov.w	r1, #0
 800764c:	0299      	lsls	r1, r3, #10
 800764e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007652:	0290      	lsls	r0, r2, #10
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4610      	mov	r0, r2
 800765a:	4619      	mov	r1, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	461a      	mov	r2, r3
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	f7f9 fb58 	bl	8000d18 <__aeabi_uldivmod>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4613      	mov	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007670:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	0c1b      	lsrs	r3, r3, #16
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	3301      	adds	r3, #1
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	fbb2 f3f3 	udiv	r3, r2, r3
 8007688:	60bb      	str	r3, [r7, #8]
      break;
 800768a:	e002      	b.n	8007692 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800768c:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800768e:	60bb      	str	r3, [r7, #8]
      break;
 8007690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007692:	68bb      	ldr	r3, [r7, #8]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800769e:	bf00      	nop
 80076a0:	40023800 	.word	0x40023800
 80076a4:	00f42400 	.word	0x00f42400
 80076a8:	007a1200 	.word	0x007a1200

080076ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076b0:	4b03      	ldr	r3, [pc, #12]	; (80076c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80076b2:	681b      	ldr	r3, [r3, #0]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	20000004 	.word	0x20000004

080076c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076c8:	f7ff fff0 	bl	80076ac <HAL_RCC_GetHCLKFreq>
 80076cc:	4602      	mov	r2, r0
 80076ce:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	0a9b      	lsrs	r3, r3, #10
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	4903      	ldr	r1, [pc, #12]	; (80076e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076da:	5ccb      	ldrb	r3, [r1, r3]
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40023800 	.word	0x40023800
 80076e8:	0800c3f0 	.word	0x0800c3f0

080076ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80076f0:	f7ff ffdc 	bl	80076ac <HAL_RCC_GetHCLKFreq>
 80076f4:	4602      	mov	r2, r0
 80076f6:	4b05      	ldr	r3, [pc, #20]	; (800770c <HAL_RCC_GetPCLK2Freq+0x20>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	0b5b      	lsrs	r3, r3, #13
 80076fc:	f003 0307 	and.w	r3, r3, #7
 8007700:	4903      	ldr	r1, [pc, #12]	; (8007710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007702:	5ccb      	ldrb	r3, [r1, r3]
 8007704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007708:	4618      	mov	r0, r3
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40023800 	.word	0x40023800
 8007710:	0800c3f0 	.word	0x0800c3f0

08007714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e041      	b.n	80077aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7fb f8b2 	bl	80028a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3304      	adds	r3, #4
 8007750:	4619      	mov	r1, r3
 8007752:	4610      	mov	r0, r2
 8007754:	f000 f950 	bl	80079f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d001      	beq.n	80077cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e03c      	b.n	8007846 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1e      	ldr	r2, [pc, #120]	; (8007854 <HAL_TIM_Base_Start+0xa0>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d018      	beq.n	8007810 <HAL_TIM_Base_Start+0x5c>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e6:	d013      	beq.n	8007810 <HAL_TIM_Base_Start+0x5c>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a1a      	ldr	r2, [pc, #104]	; (8007858 <HAL_TIM_Base_Start+0xa4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00e      	beq.n	8007810 <HAL_TIM_Base_Start+0x5c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a19      	ldr	r2, [pc, #100]	; (800785c <HAL_TIM_Base_Start+0xa8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d009      	beq.n	8007810 <HAL_TIM_Base_Start+0x5c>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a17      	ldr	r2, [pc, #92]	; (8007860 <HAL_TIM_Base_Start+0xac>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d004      	beq.n	8007810 <HAL_TIM_Base_Start+0x5c>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a16      	ldr	r2, [pc, #88]	; (8007864 <HAL_TIM_Base_Start+0xb0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d111      	bne.n	8007834 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b06      	cmp	r3, #6
 8007820:	d010      	beq.n	8007844 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0201 	orr.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007832:	e007      	b.n	8007844 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	40010000 	.word	0x40010000
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800
 8007860:	40000c00 	.word	0x40000c00
 8007864:	40014000 	.word	0x40014000

08007868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_TIM_ConfigClockSource+0x1c>
 8007880:	2302      	movs	r3, #2
 8007882:	e0b4      	b.n	80079ee <HAL_TIM_ConfigClockSource+0x186>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078bc:	d03e      	beq.n	800793c <HAL_TIM_ConfigClockSource+0xd4>
 80078be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c2:	f200 8087 	bhi.w	80079d4 <HAL_TIM_ConfigClockSource+0x16c>
 80078c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ca:	f000 8086 	beq.w	80079da <HAL_TIM_ConfigClockSource+0x172>
 80078ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d2:	d87f      	bhi.n	80079d4 <HAL_TIM_ConfigClockSource+0x16c>
 80078d4:	2b70      	cmp	r3, #112	; 0x70
 80078d6:	d01a      	beq.n	800790e <HAL_TIM_ConfigClockSource+0xa6>
 80078d8:	2b70      	cmp	r3, #112	; 0x70
 80078da:	d87b      	bhi.n	80079d4 <HAL_TIM_ConfigClockSource+0x16c>
 80078dc:	2b60      	cmp	r3, #96	; 0x60
 80078de:	d050      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x11a>
 80078e0:	2b60      	cmp	r3, #96	; 0x60
 80078e2:	d877      	bhi.n	80079d4 <HAL_TIM_ConfigClockSource+0x16c>
 80078e4:	2b50      	cmp	r3, #80	; 0x50
 80078e6:	d03c      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0xfa>
 80078e8:	2b50      	cmp	r3, #80	; 0x50
 80078ea:	d873      	bhi.n	80079d4 <HAL_TIM_ConfigClockSource+0x16c>
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	d058      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0x13a>
 80078f0:	2b40      	cmp	r3, #64	; 0x40
 80078f2:	d86f      	bhi.n	80079d4 <HAL_TIM_ConfigClockSource+0x16c>
 80078f4:	2b30      	cmp	r3, #48	; 0x30
 80078f6:	d064      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0x15a>
 80078f8:	2b30      	cmp	r3, #48	; 0x30
 80078fa:	d86b      	bhi.n	80079d4 <HAL_TIM_ConfigClockSource+0x16c>
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d060      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007900:	2b20      	cmp	r3, #32
 8007902:	d867      	bhi.n	80079d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d05c      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007908:	2b10      	cmp	r3, #16
 800790a:	d05a      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0x15a>
 800790c:	e062      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	6899      	ldr	r1, [r3, #8]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f000 f965 	bl	8007bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	609a      	str	r2, [r3, #8]
      break;
 800793a:	e04f      	b.n	80079dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	6899      	ldr	r1, [r3, #8]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f000 f94e 	bl	8007bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800795e:	609a      	str	r2, [r3, #8]
      break;
 8007960:	e03c      	b.n	80079dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	6859      	ldr	r1, [r3, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	461a      	mov	r2, r3
 8007970:	f000 f8c2 	bl	8007af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2150      	movs	r1, #80	; 0x50
 800797a:	4618      	mov	r0, r3
 800797c:	f000 f91b 	bl	8007bb6 <TIM_ITRx_SetConfig>
      break;
 8007980:	e02c      	b.n	80079dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6818      	ldr	r0, [r3, #0]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6859      	ldr	r1, [r3, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	461a      	mov	r2, r3
 8007990:	f000 f8e1 	bl	8007b56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2160      	movs	r1, #96	; 0x60
 800799a:	4618      	mov	r0, r3
 800799c:	f000 f90b 	bl	8007bb6 <TIM_ITRx_SetConfig>
      break;
 80079a0:	e01c      	b.n	80079dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6859      	ldr	r1, [r3, #4]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f000 f8a2 	bl	8007af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2140      	movs	r1, #64	; 0x40
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f8fb 	bl	8007bb6 <TIM_ITRx_SetConfig>
      break;
 80079c0:	e00c      	b.n	80079dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f000 f8f2 	bl	8007bb6 <TIM_ITRx_SetConfig>
      break;
 80079d2:	e003      	b.n	80079dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	73fb      	strb	r3, [r7, #15]
      break;
 80079d8:	e000      	b.n	80079dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a34      	ldr	r2, [pc, #208]	; (8007adc <TIM_Base_SetConfig+0xe4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00f      	beq.n	8007a30 <TIM_Base_SetConfig+0x38>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a16:	d00b      	beq.n	8007a30 <TIM_Base_SetConfig+0x38>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a31      	ldr	r2, [pc, #196]	; (8007ae0 <TIM_Base_SetConfig+0xe8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d007      	beq.n	8007a30 <TIM_Base_SetConfig+0x38>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a30      	ldr	r2, [pc, #192]	; (8007ae4 <TIM_Base_SetConfig+0xec>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_Base_SetConfig+0x38>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a2f      	ldr	r2, [pc, #188]	; (8007ae8 <TIM_Base_SetConfig+0xf0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d108      	bne.n	8007a42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a25      	ldr	r2, [pc, #148]	; (8007adc <TIM_Base_SetConfig+0xe4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d01b      	beq.n	8007a82 <TIM_Base_SetConfig+0x8a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a50:	d017      	beq.n	8007a82 <TIM_Base_SetConfig+0x8a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a22      	ldr	r2, [pc, #136]	; (8007ae0 <TIM_Base_SetConfig+0xe8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d013      	beq.n	8007a82 <TIM_Base_SetConfig+0x8a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a21      	ldr	r2, [pc, #132]	; (8007ae4 <TIM_Base_SetConfig+0xec>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d00f      	beq.n	8007a82 <TIM_Base_SetConfig+0x8a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a20      	ldr	r2, [pc, #128]	; (8007ae8 <TIM_Base_SetConfig+0xf0>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00b      	beq.n	8007a82 <TIM_Base_SetConfig+0x8a>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a1f      	ldr	r2, [pc, #124]	; (8007aec <TIM_Base_SetConfig+0xf4>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d007      	beq.n	8007a82 <TIM_Base_SetConfig+0x8a>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <TIM_Base_SetConfig+0xf8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d003      	beq.n	8007a82 <TIM_Base_SetConfig+0x8a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a1d      	ldr	r2, [pc, #116]	; (8007af4 <TIM_Base_SetConfig+0xfc>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d108      	bne.n	8007a94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a08      	ldr	r2, [pc, #32]	; (8007adc <TIM_Base_SetConfig+0xe4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d103      	bne.n	8007ac8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	615a      	str	r2, [r3, #20]
}
 8007ace:	bf00      	nop
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40010000 	.word	0x40010000
 8007ae0:	40000400 	.word	0x40000400
 8007ae4:	40000800 	.word	0x40000800
 8007ae8:	40000c00 	.word	0x40000c00
 8007aec:	40014000 	.word	0x40014000
 8007af0:	40014400 	.word	0x40014400
 8007af4:	40014800 	.word	0x40014800

08007af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	f023 0201 	bic.w	r2, r3, #1
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f023 030a 	bic.w	r3, r3, #10
 8007b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	621a      	str	r2, [r3, #32]
}
 8007b4a:	bf00      	nop
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b087      	sub	sp, #28
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	f023 0210 	bic.w	r2, r3, #16
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	031b      	lsls	r3, r3, #12
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f043 0307 	orr.w	r3, r3, #7
 8007bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	609a      	str	r2, [r3, #8]
}
 8007be0:	bf00      	nop
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	021a      	lsls	r2, r3, #8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	609a      	str	r2, [r3, #8]
}
 8007c20:	bf00      	nop
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d101      	bne.n	8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c40:	2302      	movs	r3, #2
 8007c42:	e050      	b.n	8007ce6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a1c      	ldr	r2, [pc, #112]	; (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d018      	beq.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c90:	d013      	beq.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a18      	ldr	r2, [pc, #96]	; (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00e      	beq.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a16      	ldr	r2, [pc, #88]	; (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d009      	beq.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a15      	ldr	r2, [pc, #84]	; (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d004      	beq.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d10c      	bne.n	8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40014000 	.word	0x40014000

08007d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e03f      	b.n	8007d9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7fa fe02 	bl	8002938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2224      	movs	r2, #36	; 0x24
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f829 	bl	8007da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695a      	ldr	r2, [r3, #20]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da8:	b09f      	sub	sp, #124	; 0x7c
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dba:	68d9      	ldr	r1, [r3, #12]
 8007dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	ea40 0301 	orr.w	r3, r0, r1
 8007dc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007de8:	f021 010c 	bic.w	r1, r1, #12
 8007dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007df2:	430b      	orrs	r3, r1
 8007df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e02:	6999      	ldr	r1, [r3, #24]
 8007e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	ea40 0301 	orr.w	r3, r0, r1
 8007e0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	4bc5      	ldr	r3, [pc, #788]	; (8008128 <UART_SetConfig+0x384>)
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d004      	beq.n	8007e22 <UART_SetConfig+0x7e>
 8007e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	4bc3      	ldr	r3, [pc, #780]	; (800812c <UART_SetConfig+0x388>)
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d103      	bne.n	8007e2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e22:	f7ff fc63 	bl	80076ec <HAL_RCC_GetPCLK2Freq>
 8007e26:	6778      	str	r0, [r7, #116]	; 0x74
 8007e28:	e002      	b.n	8007e30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e2a:	f7ff fc4b 	bl	80076c4 <HAL_RCC_GetPCLK1Freq>
 8007e2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e38:	f040 80b6 	bne.w	8007fa8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e3e:	461c      	mov	r4, r3
 8007e40:	f04f 0500 	mov.w	r5, #0
 8007e44:	4622      	mov	r2, r4
 8007e46:	462b      	mov	r3, r5
 8007e48:	1891      	adds	r1, r2, r2
 8007e4a:	6439      	str	r1, [r7, #64]	; 0x40
 8007e4c:	415b      	adcs	r3, r3
 8007e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e54:	1912      	adds	r2, r2, r4
 8007e56:	eb45 0303 	adc.w	r3, r5, r3
 8007e5a:	f04f 0000 	mov.w	r0, #0
 8007e5e:	f04f 0100 	mov.w	r1, #0
 8007e62:	00d9      	lsls	r1, r3, #3
 8007e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e68:	00d0      	lsls	r0, r2, #3
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	1911      	adds	r1, r2, r4
 8007e70:	6639      	str	r1, [r7, #96]	; 0x60
 8007e72:	416b      	adcs	r3, r5
 8007e74:	667b      	str	r3, [r7, #100]	; 0x64
 8007e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f04f 0300 	mov.w	r3, #0
 8007e80:	1891      	adds	r1, r2, r2
 8007e82:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e84:	415b      	adcs	r3, r3
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007e90:	f7f8 ff42 	bl	8000d18 <__aeabi_uldivmod>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4ba5      	ldr	r3, [pc, #660]	; (8008130 <UART_SetConfig+0x38c>)
 8007e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e9e:	095b      	lsrs	r3, r3, #5
 8007ea0:	011e      	lsls	r6, r3, #4
 8007ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ea4:	461c      	mov	r4, r3
 8007ea6:	f04f 0500 	mov.w	r5, #0
 8007eaa:	4622      	mov	r2, r4
 8007eac:	462b      	mov	r3, r5
 8007eae:	1891      	adds	r1, r2, r2
 8007eb0:	6339      	str	r1, [r7, #48]	; 0x30
 8007eb2:	415b      	adcs	r3, r3
 8007eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007eb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007eba:	1912      	adds	r2, r2, r4
 8007ebc:	eb45 0303 	adc.w	r3, r5, r3
 8007ec0:	f04f 0000 	mov.w	r0, #0
 8007ec4:	f04f 0100 	mov.w	r1, #0
 8007ec8:	00d9      	lsls	r1, r3, #3
 8007eca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ece:	00d0      	lsls	r0, r2, #3
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	1911      	adds	r1, r2, r4
 8007ed6:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ed8:	416b      	adcs	r3, r5
 8007eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	1891      	adds	r1, r2, r2
 8007ee8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007eea:	415b      	adcs	r3, r3
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ef2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007ef6:	f7f8 ff0f 	bl	8000d18 <__aeabi_uldivmod>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4b8c      	ldr	r3, [pc, #560]	; (8008130 <UART_SetConfig+0x38c>)
 8007f00:	fba3 1302 	umull	r1, r3, r3, r2
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	2164      	movs	r1, #100	; 0x64
 8007f08:	fb01 f303 	mul.w	r3, r1, r3
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	3332      	adds	r3, #50	; 0x32
 8007f12:	4a87      	ldr	r2, [pc, #540]	; (8008130 <UART_SetConfig+0x38c>)
 8007f14:	fba2 2303 	umull	r2, r3, r2, r3
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f20:	441e      	add	r6, r3
 8007f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f24:	4618      	mov	r0, r3
 8007f26:	f04f 0100 	mov.w	r1, #0
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	1894      	adds	r4, r2, r2
 8007f30:	623c      	str	r4, [r7, #32]
 8007f32:	415b      	adcs	r3, r3
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
 8007f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f3a:	1812      	adds	r2, r2, r0
 8007f3c:	eb41 0303 	adc.w	r3, r1, r3
 8007f40:	f04f 0400 	mov.w	r4, #0
 8007f44:	f04f 0500 	mov.w	r5, #0
 8007f48:	00dd      	lsls	r5, r3, #3
 8007f4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f4e:	00d4      	lsls	r4, r2, #3
 8007f50:	4622      	mov	r2, r4
 8007f52:	462b      	mov	r3, r5
 8007f54:	1814      	adds	r4, r2, r0
 8007f56:	653c      	str	r4, [r7, #80]	; 0x50
 8007f58:	414b      	adcs	r3, r1
 8007f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	461a      	mov	r2, r3
 8007f62:	f04f 0300 	mov.w	r3, #0
 8007f66:	1891      	adds	r1, r2, r2
 8007f68:	61b9      	str	r1, [r7, #24]
 8007f6a:	415b      	adcs	r3, r3
 8007f6c:	61fb      	str	r3, [r7, #28]
 8007f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f76:	f7f8 fecf 	bl	8000d18 <__aeabi_uldivmod>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4b6c      	ldr	r3, [pc, #432]	; (8008130 <UART_SetConfig+0x38c>)
 8007f80:	fba3 1302 	umull	r1, r3, r3, r2
 8007f84:	095b      	lsrs	r3, r3, #5
 8007f86:	2164      	movs	r1, #100	; 0x64
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	3332      	adds	r3, #50	; 0x32
 8007f92:	4a67      	ldr	r2, [pc, #412]	; (8008130 <UART_SetConfig+0x38c>)
 8007f94:	fba2 2303 	umull	r2, r3, r2, r3
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	f003 0207 	and.w	r2, r3, #7
 8007f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4432      	add	r2, r6
 8007fa4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fa6:	e0b9      	b.n	800811c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007faa:	461c      	mov	r4, r3
 8007fac:	f04f 0500 	mov.w	r5, #0
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	462b      	mov	r3, r5
 8007fb4:	1891      	adds	r1, r2, r2
 8007fb6:	6139      	str	r1, [r7, #16]
 8007fb8:	415b      	adcs	r3, r3
 8007fba:	617b      	str	r3, [r7, #20]
 8007fbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fc0:	1912      	adds	r2, r2, r4
 8007fc2:	eb45 0303 	adc.w	r3, r5, r3
 8007fc6:	f04f 0000 	mov.w	r0, #0
 8007fca:	f04f 0100 	mov.w	r1, #0
 8007fce:	00d9      	lsls	r1, r3, #3
 8007fd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fd4:	00d0      	lsls	r0, r2, #3
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	eb12 0804 	adds.w	r8, r2, r4
 8007fde:	eb43 0905 	adc.w	r9, r3, r5
 8007fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f04f 0100 	mov.w	r1, #0
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	008b      	lsls	r3, r1, #2
 8007ff6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ffa:	0082      	lsls	r2, r0, #2
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	4649      	mov	r1, r9
 8008000:	f7f8 fe8a 	bl	8000d18 <__aeabi_uldivmod>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4b49      	ldr	r3, [pc, #292]	; (8008130 <UART_SetConfig+0x38c>)
 800800a:	fba3 2302 	umull	r2, r3, r3, r2
 800800e:	095b      	lsrs	r3, r3, #5
 8008010:	011e      	lsls	r6, r3, #4
 8008012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008014:	4618      	mov	r0, r3
 8008016:	f04f 0100 	mov.w	r1, #0
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	1894      	adds	r4, r2, r2
 8008020:	60bc      	str	r4, [r7, #8]
 8008022:	415b      	adcs	r3, r3
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800802a:	1812      	adds	r2, r2, r0
 800802c:	eb41 0303 	adc.w	r3, r1, r3
 8008030:	f04f 0400 	mov.w	r4, #0
 8008034:	f04f 0500 	mov.w	r5, #0
 8008038:	00dd      	lsls	r5, r3, #3
 800803a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800803e:	00d4      	lsls	r4, r2, #3
 8008040:	4622      	mov	r2, r4
 8008042:	462b      	mov	r3, r5
 8008044:	1814      	adds	r4, r2, r0
 8008046:	64bc      	str	r4, [r7, #72]	; 0x48
 8008048:	414b      	adcs	r3, r1
 800804a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800804c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	4618      	mov	r0, r3
 8008052:	f04f 0100 	mov.w	r1, #0
 8008056:	f04f 0200 	mov.w	r2, #0
 800805a:	f04f 0300 	mov.w	r3, #0
 800805e:	008b      	lsls	r3, r1, #2
 8008060:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008064:	0082      	lsls	r2, r0, #2
 8008066:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800806a:	f7f8 fe55 	bl	8000d18 <__aeabi_uldivmod>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	4b2f      	ldr	r3, [pc, #188]	; (8008130 <UART_SetConfig+0x38c>)
 8008074:	fba3 1302 	umull	r1, r3, r3, r2
 8008078:	095b      	lsrs	r3, r3, #5
 800807a:	2164      	movs	r1, #100	; 0x64
 800807c:	fb01 f303 	mul.w	r3, r1, r3
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	3332      	adds	r3, #50	; 0x32
 8008086:	4a2a      	ldr	r2, [pc, #168]	; (8008130 <UART_SetConfig+0x38c>)
 8008088:	fba2 2303 	umull	r2, r3, r2, r3
 800808c:	095b      	lsrs	r3, r3, #5
 800808e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008092:	441e      	add	r6, r3
 8008094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008096:	4618      	mov	r0, r3
 8008098:	f04f 0100 	mov.w	r1, #0
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	1894      	adds	r4, r2, r2
 80080a2:	603c      	str	r4, [r7, #0]
 80080a4:	415b      	adcs	r3, r3
 80080a6:	607b      	str	r3, [r7, #4]
 80080a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ac:	1812      	adds	r2, r2, r0
 80080ae:	eb41 0303 	adc.w	r3, r1, r3
 80080b2:	f04f 0400 	mov.w	r4, #0
 80080b6:	f04f 0500 	mov.w	r5, #0
 80080ba:	00dd      	lsls	r5, r3, #3
 80080bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080c0:	00d4      	lsls	r4, r2, #3
 80080c2:	4622      	mov	r2, r4
 80080c4:	462b      	mov	r3, r5
 80080c6:	eb12 0a00 	adds.w	sl, r2, r0
 80080ca:	eb43 0b01 	adc.w	fp, r3, r1
 80080ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f04f 0100 	mov.w	r1, #0
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	f04f 0300 	mov.w	r3, #0
 80080e0:	008b      	lsls	r3, r1, #2
 80080e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80080e6:	0082      	lsls	r2, r0, #2
 80080e8:	4650      	mov	r0, sl
 80080ea:	4659      	mov	r1, fp
 80080ec:	f7f8 fe14 	bl	8000d18 <__aeabi_uldivmod>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4b0e      	ldr	r3, [pc, #56]	; (8008130 <UART_SetConfig+0x38c>)
 80080f6:	fba3 1302 	umull	r1, r3, r3, r2
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	2164      	movs	r1, #100	; 0x64
 80080fe:	fb01 f303 	mul.w	r3, r1, r3
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	3332      	adds	r3, #50	; 0x32
 8008108:	4a09      	ldr	r2, [pc, #36]	; (8008130 <UART_SetConfig+0x38c>)
 800810a:	fba2 2303 	umull	r2, r3, r2, r3
 800810e:	095b      	lsrs	r3, r3, #5
 8008110:	f003 020f 	and.w	r2, r3, #15
 8008114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4432      	add	r2, r6
 800811a:	609a      	str	r2, [r3, #8]
}
 800811c:	bf00      	nop
 800811e:	377c      	adds	r7, #124	; 0x7c
 8008120:	46bd      	mov	sp, r7
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	bf00      	nop
 8008128:	40011000 	.word	0x40011000
 800812c:	40011400 	.word	0x40011400
 8008130:	51eb851f 	.word	0x51eb851f

08008134 <arm_rfft_fast_init_f32>:
 8008134:	084b      	lsrs	r3, r1, #1
 8008136:	2b80      	cmp	r3, #128	; 0x80
 8008138:	b410      	push	{r4}
 800813a:	8201      	strh	r1, [r0, #16]
 800813c:	8003      	strh	r3, [r0, #0]
 800813e:	d047      	beq.n	80081d0 <arm_rfft_fast_init_f32+0x9c>
 8008140:	d917      	bls.n	8008172 <arm_rfft_fast_init_f32+0x3e>
 8008142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008146:	d03d      	beq.n	80081c4 <arm_rfft_fast_init_f32+0x90>
 8008148:	d929      	bls.n	800819e <arm_rfft_fast_init_f32+0x6a>
 800814a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800814e:	d020      	beq.n	8008192 <arm_rfft_fast_init_f32+0x5e>
 8008150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008154:	d113      	bne.n	800817e <arm_rfft_fast_init_f32+0x4a>
 8008156:	4921      	ldr	r1, [pc, #132]	; (80081dc <arm_rfft_fast_init_f32+0xa8>)
 8008158:	4a21      	ldr	r2, [pc, #132]	; (80081e0 <arm_rfft_fast_init_f32+0xac>)
 800815a:	4b22      	ldr	r3, [pc, #136]	; (80081e4 <arm_rfft_fast_init_f32+0xb0>)
 800815c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008160:	8184      	strh	r4, [r0, #12]
 8008162:	6081      	str	r1, [r0, #8]
 8008164:	6042      	str	r2, [r0, #4]
 8008166:	6143      	str	r3, [r0, #20]
 8008168:	2000      	movs	r0, #0
 800816a:	b240      	sxtb	r0, r0
 800816c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	2b20      	cmp	r3, #32
 8008174:	d01c      	beq.n	80081b0 <arm_rfft_fast_init_f32+0x7c>
 8008176:	2b40      	cmp	r3, #64	; 0x40
 8008178:	d006      	beq.n	8008188 <arm_rfft_fast_init_f32+0x54>
 800817a:	2b10      	cmp	r3, #16
 800817c:	d01d      	beq.n	80081ba <arm_rfft_fast_init_f32+0x86>
 800817e:	20ff      	movs	r0, #255	; 0xff
 8008180:	b240      	sxtb	r0, r0
 8008182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	2438      	movs	r4, #56	; 0x38
 800818a:	4917      	ldr	r1, [pc, #92]	; (80081e8 <arm_rfft_fast_init_f32+0xb4>)
 800818c:	4a17      	ldr	r2, [pc, #92]	; (80081ec <arm_rfft_fast_init_f32+0xb8>)
 800818e:	4b18      	ldr	r3, [pc, #96]	; (80081f0 <arm_rfft_fast_init_f32+0xbc>)
 8008190:	e7e6      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 8008192:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8008196:	4917      	ldr	r1, [pc, #92]	; (80081f4 <arm_rfft_fast_init_f32+0xc0>)
 8008198:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <arm_rfft_fast_init_f32+0xc4>)
 800819a:	4b18      	ldr	r3, [pc, #96]	; (80081fc <arm_rfft_fast_init_f32+0xc8>)
 800819c:	e7e0      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 800819e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a2:	d1ec      	bne.n	800817e <arm_rfft_fast_init_f32+0x4a>
 80081a4:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80081a8:	4915      	ldr	r1, [pc, #84]	; (8008200 <arm_rfft_fast_init_f32+0xcc>)
 80081aa:	4a16      	ldr	r2, [pc, #88]	; (8008204 <arm_rfft_fast_init_f32+0xd0>)
 80081ac:	4b16      	ldr	r3, [pc, #88]	; (8008208 <arm_rfft_fast_init_f32+0xd4>)
 80081ae:	e7d7      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 80081b0:	2430      	movs	r4, #48	; 0x30
 80081b2:	4916      	ldr	r1, [pc, #88]	; (800820c <arm_rfft_fast_init_f32+0xd8>)
 80081b4:	4a16      	ldr	r2, [pc, #88]	; (8008210 <arm_rfft_fast_init_f32+0xdc>)
 80081b6:	4b17      	ldr	r3, [pc, #92]	; (8008214 <arm_rfft_fast_init_f32+0xe0>)
 80081b8:	e7d2      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 80081ba:	2414      	movs	r4, #20
 80081bc:	4916      	ldr	r1, [pc, #88]	; (8008218 <arm_rfft_fast_init_f32+0xe4>)
 80081be:	4a17      	ldr	r2, [pc, #92]	; (800821c <arm_rfft_fast_init_f32+0xe8>)
 80081c0:	4b17      	ldr	r3, [pc, #92]	; (8008220 <arm_rfft_fast_init_f32+0xec>)
 80081c2:	e7cd      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 80081c4:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80081c8:	4916      	ldr	r1, [pc, #88]	; (8008224 <arm_rfft_fast_init_f32+0xf0>)
 80081ca:	4a17      	ldr	r2, [pc, #92]	; (8008228 <arm_rfft_fast_init_f32+0xf4>)
 80081cc:	4b17      	ldr	r3, [pc, #92]	; (800822c <arm_rfft_fast_init_f32+0xf8>)
 80081ce:	e7c7      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 80081d0:	24d0      	movs	r4, #208	; 0xd0
 80081d2:	4917      	ldr	r1, [pc, #92]	; (8008230 <arm_rfft_fast_init_f32+0xfc>)
 80081d4:	4a17      	ldr	r2, [pc, #92]	; (8008234 <arm_rfft_fast_init_f32+0x100>)
 80081d6:	4b18      	ldr	r3, [pc, #96]	; (8008238 <arm_rfft_fast_init_f32+0x104>)
 80081d8:	e7c2      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 80081da:	bf00      	nop
 80081dc:	0801b208 	.word	0x0801b208
 80081e0:	0800c400 	.word	0x0800c400
 80081e4:	08012570 	.word	0x08012570
 80081e8:	08010500 	.word	0x08010500
 80081ec:	0801cfc8 	.word	0x0801cfc8
 80081f0:	0801f4b8 	.word	0x0801f4b8
 80081f4:	08018ef0 	.word	0x08018ef0
 80081f8:	08016df0 	.word	0x08016df0
 80081fc:	08010570 	.word	0x08010570
 8008200:	0801f148 	.word	0x0801f148
 8008204:	08016570 	.word	0x08016570
 8008208:	0801d1c8 	.word	0x0801d1c8
 800820c:	08019da8 	.word	0x08019da8
 8008210:	08018df0 	.word	0x08018df0
 8008214:	08010400 	.word	0x08010400
 8008218:	08019d00 	.word	0x08019d00
 800821c:	08016d70 	.word	0x08016d70
 8008220:	08019d28 	.word	0x08019d28
 8008224:	0801d9c8 	.word	0x0801d9c8
 8008228:	0801a208 	.word	0x0801a208
 800822c:	0801dd48 	.word	0x0801dd48
 8008230:	0801f6b8 	.word	0x0801f6b8
 8008234:	08019e08 	.word	0x08019e08
 8008238:	0801ed48 	.word	0x0801ed48

0800823c <arm_rfft_fast_f32>:
 800823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008240:	8a06      	ldrh	r6, [r0, #16]
 8008242:	0876      	lsrs	r6, r6, #1
 8008244:	4607      	mov	r7, r0
 8008246:	4615      	mov	r5, r2
 8008248:	8006      	strh	r6, [r0, #0]
 800824a:	460c      	mov	r4, r1
 800824c:	2b00      	cmp	r3, #0
 800824e:	d15c      	bne.n	800830a <arm_rfft_fast_f32+0xce>
 8008250:	461a      	mov	r2, r3
 8008252:	2301      	movs	r3, #1
 8008254:	f000 fbe6 	bl	8008a24 <arm_cfft_f32>
 8008258:	edd4 7a00 	vldr	s15, [r4]
 800825c:	ed94 7a01 	vldr	s14, [r4, #4]
 8008260:	883e      	ldrh	r6, [r7, #0]
 8008262:	6978      	ldr	r0, [r7, #20]
 8008264:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008268:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800826c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8008270:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008274:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008278:	3e01      	subs	r6, #1
 800827a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800827e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008282:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8008286:	ed85 7a00 	vstr	s14, [r5]
 800828a:	edc5 7a01 	vstr	s15, [r5, #4]
 800828e:	3010      	adds	r0, #16
 8008290:	f105 0210 	add.w	r2, r5, #16
 8008294:	3b08      	subs	r3, #8
 8008296:	f104 0110 	add.w	r1, r4, #16
 800829a:	ed51 4a02 	vldr	s9, [r1, #-8]
 800829e:	ed93 5a02 	vldr	s10, [r3, #8]
 80082a2:	ed11 7a01 	vldr	s14, [r1, #-4]
 80082a6:	ed10 6a02 	vldr	s12, [r0, #-8]
 80082aa:	edd3 5a03 	vldr	s11, [r3, #12]
 80082ae:	ed50 6a01 	vldr	s13, [r0, #-4]
 80082b2:	ee75 7a64 	vsub.f32	s15, s10, s9
 80082b6:	ee35 4a87 	vadd.f32	s8, s11, s14
 80082ba:	ee35 5a24 	vadd.f32	s10, s10, s9
 80082be:	ee77 5a65 	vsub.f32	s11, s14, s11
 80082c2:	ee66 4a27 	vmul.f32	s9, s12, s15
 80082c6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80082ca:	ee34 5a85 	vadd.f32	s10, s9, s10
 80082ce:	ee26 6a04 	vmul.f32	s12, s12, s8
 80082d2:	ee66 6a84 	vmul.f32	s13, s13, s8
 80082d6:	ee77 7a25 	vadd.f32	s15, s14, s11
 80082da:	ee76 6a85 	vadd.f32	s13, s13, s10
 80082de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80082e2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80082e6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80082ea:	3e01      	subs	r6, #1
 80082ec:	ed42 6a02 	vstr	s13, [r2, #-8]
 80082f0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80082f4:	f1a3 0308 	sub.w	r3, r3, #8
 80082f8:	f101 0108 	add.w	r1, r1, #8
 80082fc:	f100 0008 	add.w	r0, r0, #8
 8008300:	f102 0208 	add.w	r2, r2, #8
 8008304:	d1c9      	bne.n	800829a <arm_rfft_fast_f32+0x5e>
 8008306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800830a:	edd1 7a00 	vldr	s15, [r1]
 800830e:	edd1 6a01 	vldr	s13, [r1, #4]
 8008312:	6941      	ldr	r1, [r0, #20]
 8008314:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008318:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800831c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8008320:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008324:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008328:	3e01      	subs	r6, #1
 800832a:	ed82 7a00 	vstr	s14, [r2]
 800832e:	edc2 7a01 	vstr	s15, [r2, #4]
 8008332:	00f0      	lsls	r0, r6, #3
 8008334:	b3ee      	cbz	r6, 80083b2 <arm_rfft_fast_f32+0x176>
 8008336:	3808      	subs	r0, #8
 8008338:	f101 0e10 	add.w	lr, r1, #16
 800833c:	4420      	add	r0, r4
 800833e:	f104 0110 	add.w	r1, r4, #16
 8008342:	f102 0c10 	add.w	ip, r2, #16
 8008346:	ed90 7a02 	vldr	s14, [r0, #8]
 800834a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800834e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8008352:	ed90 4a03 	vldr	s8, [r0, #12]
 8008356:	ed11 5a01 	vldr	s10, [r1, #-4]
 800835a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800835e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8008362:	ee74 4a05 	vadd.f32	s9, s8, s10
 8008366:	ee26 3a27 	vmul.f32	s6, s12, s15
 800836a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800836e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008372:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8008376:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800837a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800837e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008382:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8008386:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800838a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800838e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008392:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008396:	3e01      	subs	r6, #1
 8008398:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800839c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80083a0:	f1a0 0008 	sub.w	r0, r0, #8
 80083a4:	f101 0108 	add.w	r1, r1, #8
 80083a8:	f10e 0e08 	add.w	lr, lr, #8
 80083ac:	f10c 0c08 	add.w	ip, ip, #8
 80083b0:	d1c9      	bne.n	8008346 <arm_rfft_fast_f32+0x10a>
 80083b2:	4638      	mov	r0, r7
 80083b4:	4629      	mov	r1, r5
 80083b6:	461a      	mov	r2, r3
 80083b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083bc:	2301      	movs	r3, #1
 80083be:	f000 bb31 	b.w	8008a24 <arm_cfft_f32>
 80083c2:	bf00      	nop

080083c4 <arm_cfft_radix8by2_f32>:
 80083c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c8:	ed2d 8b08 	vpush	{d8-d11}
 80083cc:	f8b0 e000 	ldrh.w	lr, [r0]
 80083d0:	6842      	ldr	r2, [r0, #4]
 80083d2:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80083d6:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80083da:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80083de:	4607      	mov	r7, r0
 80083e0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80083e4:	f000 80af 	beq.w	8008546 <arm_cfft_radix8by2_f32+0x182>
 80083e8:	3310      	adds	r3, #16
 80083ea:	18ce      	adds	r6, r1, r3
 80083ec:	3210      	adds	r2, #16
 80083ee:	4443      	add	r3, r8
 80083f0:	f101 0510 	add.w	r5, r1, #16
 80083f4:	f108 0410 	add.w	r4, r8, #16
 80083f8:	ed54 1a04 	vldr	s3, [r4, #-16]
 80083fc:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008400:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008404:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008408:	ed13 5a01 	vldr	s10, [r3, #-4]
 800840c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008410:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008414:	ed16 2a04 	vldr	s4, [r6, #-16]
 8008418:	ed56 2a03 	vldr	s5, [r6, #-12]
 800841c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8008420:	ed15 7a01 	vldr	s14, [r5, #-4]
 8008424:	ed15 3a04 	vldr	s6, [r5, #-16]
 8008428:	ed54 7a01 	vldr	s15, [r4, #-4]
 800842c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8008430:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008434:	ed55 4a02 	vldr	s9, [r5, #-8]
 8008438:	ee73 ba21 	vadd.f32	s23, s6, s3
 800843c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8008440:	ee37 aa27 	vadd.f32	s20, s14, s15
 8008444:	ee72 9a04 	vadd.f32	s19, s4, s8
 8008448:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800844c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008450:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008454:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8008458:	ed45 ba04 	vstr	s23, [r5, #-16]
 800845c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008460:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008464:	ed05 aa01 	vstr	s20, [r5, #-4]
 8008468:	ed06 8a01 	vstr	s16, [r6, #-4]
 800846c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008470:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008474:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008478:	ee76 6a66 	vsub.f32	s13, s12, s13
 800847c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008480:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008484:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008488:	ee33 3a61 	vsub.f32	s6, s6, s3
 800848c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008490:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008494:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008498:	ee63 1a22 	vmul.f32	s3, s6, s5
 800849c:	ee24 4a22 	vmul.f32	s8, s8, s5
 80084a0:	ee23 3a06 	vmul.f32	s6, s6, s12
 80084a4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80084a8:	ee23 6a86 	vmul.f32	s12, s7, s12
 80084ac:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80084b0:	ee36 6a04 	vadd.f32	s12, s12, s8
 80084b4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80084b8:	ee72 3a63 	vsub.f32	s7, s4, s7
 80084bc:	ee71 2a88 	vadd.f32	s5, s3, s16
 80084c0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80084c4:	ed44 2a04 	vstr	s5, [r4, #-16]
 80084c8:	ed43 3a04 	vstr	s7, [r3, #-16]
 80084cc:	ed03 6a03 	vstr	s12, [r3, #-12]
 80084d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80084d8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80084dc:	ed52 5a02 	vldr	s11, [r2, #-8]
 80084e0:	ee35 6a41 	vsub.f32	s12, s10, s2
 80084e4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80084e8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80084ec:	ee26 5a87 	vmul.f32	s10, s13, s14
 80084f0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80084f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80084f8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80084fc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008500:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008504:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008508:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800850c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008510:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008514:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008518:	f1be 0e01 	subs.w	lr, lr, #1
 800851c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8008520:	f105 0510 	add.w	r5, r5, #16
 8008524:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008528:	f106 0610 	add.w	r6, r6, #16
 800852c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8008530:	ed03 7a01 	vstr	s14, [r3, #-4]
 8008534:	f102 0210 	add.w	r2, r2, #16
 8008538:	f104 0410 	add.w	r4, r4, #16
 800853c:	f103 0310 	add.w	r3, r3, #16
 8008540:	f47f af5a 	bne.w	80083f8 <arm_cfft_radix8by2_f32+0x34>
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	fa1f f48c 	uxth.w	r4, ip
 800854a:	4608      	mov	r0, r1
 800854c:	2302      	movs	r3, #2
 800854e:	4621      	mov	r1, r4
 8008550:	f000 fae2 	bl	8008b18 <arm_radix8_butterfly_f32>
 8008554:	ecbd 8b08 	vpop	{d8-d11}
 8008558:	4640      	mov	r0, r8
 800855a:	4621      	mov	r1, r4
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	2302      	movs	r3, #2
 8008560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008564:	f000 bad8 	b.w	8008b18 <arm_radix8_butterfly_f32>

08008568 <arm_cfft_radix8by4_f32>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	ed2d 8b0a 	vpush	{d8-d12}
 8008570:	8802      	ldrh	r2, [r0, #0]
 8008572:	ed91 6a00 	vldr	s12, [r1]
 8008576:	b08f      	sub	sp, #60	; 0x3c
 8008578:	460f      	mov	r7, r1
 800857a:	0852      	lsrs	r2, r2, #1
 800857c:	0093      	lsls	r3, r2, #2
 800857e:	900c      	str	r0, [sp, #48]	; 0x30
 8008580:	9103      	str	r1, [sp, #12]
 8008582:	6841      	ldr	r1, [r0, #4]
 8008584:	ed97 7a01 	vldr	s14, [r7, #4]
 8008588:	4638      	mov	r0, r7
 800858a:	4418      	add	r0, r3
 800858c:	4606      	mov	r6, r0
 800858e:	9009      	str	r0, [sp, #36]	; 0x24
 8008590:	4418      	add	r0, r3
 8008592:	edd0 6a00 	vldr	s13, [r0]
 8008596:	edd6 3a00 	vldr	s7, [r6]
 800859a:	edd6 2a01 	vldr	s5, [r6, #4]
 800859e:	edd0 7a01 	vldr	s15, [r0, #4]
 80085a2:	900a      	str	r0, [sp, #40]	; 0x28
 80085a4:	ee76 5a26 	vadd.f32	s11, s12, s13
 80085a8:	4604      	mov	r4, r0
 80085aa:	4625      	mov	r5, r4
 80085ac:	441c      	add	r4, r3
 80085ae:	ed94 4a00 	vldr	s8, [r4]
 80085b2:	ed94 5a01 	vldr	s10, [r4, #4]
 80085b6:	9401      	str	r4, [sp, #4]
 80085b8:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80085bc:	4630      	mov	r0, r6
 80085be:	ee74 4a24 	vadd.f32	s9, s8, s9
 80085c2:	463e      	mov	r6, r7
 80085c4:	ee14 ea90 	vmov	lr, s9
 80085c8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80085cc:	f846 eb08 	str.w	lr, [r6], #8
 80085d0:	ee37 6a27 	vadd.f32	s12, s14, s15
 80085d4:	edd0 4a01 	vldr	s9, [r0, #4]
 80085d8:	9604      	str	r6, [sp, #16]
 80085da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085de:	9e01      	ldr	r6, [sp, #4]
 80085e0:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80085e4:	ed96 2a01 	vldr	s4, [r6, #4]
 80085e8:	ee36 7a24 	vadd.f32	s14, s12, s9
 80085ec:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80085f0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80085f4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80085f8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80085fc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008600:	ee73 3a45 	vsub.f32	s7, s6, s10
 8008604:	4604      	mov	r4, r0
 8008606:	ee36 6a45 	vsub.f32	s12, s12, s10
 800860a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800860e:	46a3      	mov	fp, r4
 8008610:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008614:	ee34 5a84 	vadd.f32	s10, s9, s8
 8008618:	ee13 8a90 	vmov	r8, s7
 800861c:	46a4      	mov	ip, r4
 800861e:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8008622:	ed87 7a01 	vstr	s14, [r7, #4]
 8008626:	f84b 8b08 	str.w	r8, [fp], #8
 800862a:	f1ac 0704 	sub.w	r7, ip, #4
 800862e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8008632:	f101 0c08 	add.w	ip, r1, #8
 8008636:	462c      	mov	r4, r5
 8008638:	f8cd c014 	str.w	ip, [sp, #20]
 800863c:	ee15 ca90 	vmov	ip, s11
 8008640:	f844 cb08 	str.w	ip, [r4], #8
 8008644:	9407      	str	r4, [sp, #28]
 8008646:	f101 0410 	add.w	r4, r1, #16
 800864a:	ed85 6a01 	vstr	s12, [r5, #4]
 800864e:	0852      	lsrs	r2, r2, #1
 8008650:	9402      	str	r4, [sp, #8]
 8008652:	462c      	mov	r4, r5
 8008654:	f101 0518 	add.w	r5, r1, #24
 8008658:	920b      	str	r2, [sp, #44]	; 0x2c
 800865a:	46b2      	mov	sl, r6
 800865c:	9506      	str	r5, [sp, #24]
 800865e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008662:	3a02      	subs	r2, #2
 8008664:	ee16 5a90 	vmov	r5, s13
 8008668:	46b6      	mov	lr, r6
 800866a:	4630      	mov	r0, r6
 800866c:	0852      	lsrs	r2, r2, #1
 800866e:	f84a 5b08 	str.w	r5, [sl], #8
 8008672:	f1a0 0604 	sub.w	r6, r0, #4
 8008676:	edce 7a01 	vstr	s15, [lr, #4]
 800867a:	9208      	str	r2, [sp, #32]
 800867c:	f000 8130 	beq.w	80088e0 <arm_cfft_radix8by4_f32+0x378>
 8008680:	4691      	mov	r9, r2
 8008682:	9a03      	ldr	r2, [sp, #12]
 8008684:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008688:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800868c:	3b08      	subs	r3, #8
 800868e:	f102 0510 	add.w	r5, r2, #16
 8008692:	f101 0c20 	add.w	ip, r1, #32
 8008696:	f1a4 020c 	sub.w	r2, r4, #12
 800869a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800869e:	4433      	add	r3, r6
 80086a0:	3410      	adds	r4, #16
 80086a2:	4650      	mov	r0, sl
 80086a4:	4659      	mov	r1, fp
 80086a6:	ed55 3a02 	vldr	s7, [r5, #-8]
 80086aa:	ed14 5a02 	vldr	s10, [r4, #-8]
 80086ae:	ed91 7a00 	vldr	s14, [r1]
 80086b2:	edd0 7a00 	vldr	s15, [r0]
 80086b6:	ed15 4a01 	vldr	s8, [r5, #-4]
 80086ba:	ed54 5a01 	vldr	s11, [r4, #-4]
 80086be:	edd0 6a01 	vldr	s13, [r0, #4]
 80086c2:	ed91 6a01 	vldr	s12, [r1, #4]
 80086c6:	ee33 8a85 	vadd.f32	s16, s7, s10
 80086ca:	ee34 0a25 	vadd.f32	s0, s8, s11
 80086ce:	ee78 4a07 	vadd.f32	s9, s16, s14
 80086d2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80086d6:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80086da:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80086de:	ed45 4a02 	vstr	s9, [r5, #-8]
 80086e2:	edd1 4a01 	vldr	s9, [r1, #4]
 80086e6:	ed90 4a01 	vldr	s8, [r0, #4]
 80086ea:	ee70 4a24 	vadd.f32	s9, s0, s9
 80086ee:	ee76 aa05 	vadd.f32	s21, s12, s10
 80086f2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80086f6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80086fa:	ed45 4a01 	vstr	s9, [r5, #-4]
 80086fe:	edd6 1a00 	vldr	s3, [r6]
 8008702:	edd7 0a00 	vldr	s1, [r7]
 8008706:	ed92 4a02 	vldr	s8, [r2, #8]
 800870a:	edd3 3a02 	vldr	s7, [r3, #8]
 800870e:	ed93 2a01 	vldr	s4, [r3, #4]
 8008712:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008716:	edd2 2a01 	vldr	s5, [r2, #4]
 800871a:	ed57 9a01 	vldr	s19, [r7, #-4]
 800871e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8008722:	ee39 3a81 	vadd.f32	s6, s19, s2
 8008726:	ee74 8a84 	vadd.f32	s17, s9, s8
 800872a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800872e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8008732:	ee7a aae6 	vsub.f32	s21, s21, s13
 8008736:	ee18 aa90 	vmov	sl, s17
 800873a:	f847 a908 	str.w	sl, [r7], #-8
 800873e:	edd2 8a01 	vldr	s17, [r2, #4]
 8008742:	ed93 9a01 	vldr	s18, [r3, #4]
 8008746:	ee73 8a28 	vadd.f32	s17, s6, s17
 800874a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800874e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008752:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008756:	edc7 8a01 	vstr	s17, [r7, #4]
 800875a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800875e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008762:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008766:	ee6a ba28 	vmul.f32	s23, s20, s17
 800876a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800876e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008772:	ee30 9a81 	vadd.f32	s18, s1, s2
 8008776:	ee79 9a82 	vadd.f32	s19, s19, s4
 800877a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800877e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008782:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008786:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800878a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800878e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008792:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008796:	ee1c aa10 	vmov	sl, s24
 800879a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800879e:	f841 ab08 	str.w	sl, [r1], #8
 80087a2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80087a6:	ee3b bacb 	vsub.f32	s22, s23, s22
 80087aa:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80087ae:	ee33 3a62 	vsub.f32	s6, s6, s5
 80087b2:	ed01 aa01 	vstr	s20, [r1, #-4]
 80087b6:	edc2 8a01 	vstr	s17, [r2, #4]
 80087ba:	ed82 ba02 	vstr	s22, [r2, #8]
 80087be:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80087c2:	ee74 3a63 	vsub.f32	s7, s8, s7
 80087c6:	ee38 8a47 	vsub.f32	s16, s16, s14
 80087ca:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80087ce:	ee30 0a46 	vsub.f32	s0, s0, s12
 80087d2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80087d6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80087da:	ee30 0a66 	vsub.f32	s0, s0, s13
 80087de:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80087e2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80087e6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80087ea:	ee60 9a04 	vmul.f32	s19, s0, s8
 80087ee:	ee28 8a04 	vmul.f32	s16, s16, s8
 80087f2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80087f6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80087fa:	ee39 4a68 	vsub.f32	s8, s18, s17
 80087fe:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008802:	ee14 aa10 	vmov	sl, s8
 8008806:	ee30 0a48 	vsub.f32	s0, s0, s16
 800880a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800880e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8008812:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008816:	ed04 0a01 	vstr	s0, [r4, #-4]
 800881a:	f846 a908 	str.w	sl, [r6], #-8
 800881e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008822:	ee35 7a87 	vadd.f32	s14, s11, s14
 8008826:	edc6 3a01 	vstr	s7, [r6, #4]
 800882a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800882e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008832:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8008836:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800883a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800883e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008842:	ee72 2a62 	vsub.f32	s5, s4, s5
 8008846:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800884a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800884e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008852:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008856:	ee66 6a86 	vmul.f32	s13, s13, s12
 800885a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800885e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008862:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008866:	ee21 1a07 	vmul.f32	s2, s2, s14
 800886a:	ee15 aa90 	vmov	sl, s11
 800886e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008872:	f840 ab08 	str.w	sl, [r0], #8
 8008876:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800887a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800887e:	f1b9 0901 	subs.w	r9, r9, #1
 8008882:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008886:	f105 0508 	add.w	r5, r5, #8
 800888a:	ed83 1a02 	vstr	s2, [r3, #8]
 800888e:	edc3 2a01 	vstr	s5, [r3, #4]
 8008892:	f108 0808 	add.w	r8, r8, #8
 8008896:	f1a2 0208 	sub.w	r2, r2, #8
 800889a:	f10c 0c10 	add.w	ip, ip, #16
 800889e:	f104 0408 	add.w	r4, r4, #8
 80088a2:	f10e 0e18 	add.w	lr, lr, #24
 80088a6:	f1a3 0308 	sub.w	r3, r3, #8
 80088aa:	f47f aefc 	bne.w	80086a6 <arm_cfft_radix8by4_f32+0x13e>
 80088ae:	9908      	ldr	r1, [sp, #32]
 80088b0:	9802      	ldr	r0, [sp, #8]
 80088b2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80088b6:	00cb      	lsls	r3, r1, #3
 80088b8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80088bc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80088c0:	9102      	str	r1, [sp, #8]
 80088c2:	9904      	ldr	r1, [sp, #16]
 80088c4:	4419      	add	r1, r3
 80088c6:	9104      	str	r1, [sp, #16]
 80088c8:	9905      	ldr	r1, [sp, #20]
 80088ca:	4419      	add	r1, r3
 80088cc:	9105      	str	r1, [sp, #20]
 80088ce:	9907      	ldr	r1, [sp, #28]
 80088d0:	449b      	add	fp, r3
 80088d2:	4419      	add	r1, r3
 80088d4:	449a      	add	sl, r3
 80088d6:	9b06      	ldr	r3, [sp, #24]
 80088d8:	9107      	str	r1, [sp, #28]
 80088da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088de:	9306      	str	r3, [sp, #24]
 80088e0:	9a04      	ldr	r2, [sp, #16]
 80088e2:	9807      	ldr	r0, [sp, #28]
 80088e4:	edd2 3a00 	vldr	s7, [r2]
 80088e8:	ed90 4a00 	vldr	s8, [r0]
 80088ec:	eddb 7a00 	vldr	s15, [fp]
 80088f0:	ed9a 3a00 	vldr	s6, [sl]
 80088f4:	edd2 4a01 	vldr	s9, [r2, #4]
 80088f8:	ed90 7a01 	vldr	s14, [r0, #4]
 80088fc:	ed9b 2a01 	vldr	s4, [fp, #4]
 8008900:	edda 5a01 	vldr	s11, [sl, #4]
 8008904:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8008908:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800890a:	ee73 6a84 	vadd.f32	s13, s7, s8
 800890e:	ee34 6a87 	vadd.f32	s12, s9, s14
 8008912:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8008916:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800891a:	ee33 5a05 	vadd.f32	s10, s6, s10
 800891e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8008922:	ed82 5a00 	vstr	s10, [r2]
 8008926:	ed9b 5a01 	vldr	s10, [fp, #4]
 800892a:	edda 4a01 	vldr	s9, [sl, #4]
 800892e:	ee36 5a05 	vadd.f32	s10, s12, s10
 8008932:	ee72 3a04 	vadd.f32	s7, s4, s8
 8008936:	ee35 5a24 	vadd.f32	s10, s10, s9
 800893a:	ee77 4a67 	vsub.f32	s9, s14, s15
 800893e:	ed82 5a01 	vstr	s10, [r2, #4]
 8008942:	9a05      	ldr	r2, [sp, #20]
 8008944:	ee34 5a83 	vadd.f32	s10, s9, s6
 8008948:	edd2 1a00 	vldr	s3, [r2]
 800894c:	edd2 2a01 	vldr	s5, [r2, #4]
 8008950:	9a02      	ldr	r2, [sp, #8]
 8008952:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8008956:	ee36 6a42 	vsub.f32	s12, s12, s4
 800895a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800895e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008962:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008966:	ee25 5a21 	vmul.f32	s10, s10, s3
 800896a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800896e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008972:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008976:	edcb 2a00 	vstr	s5, [fp]
 800897a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800897e:	edd2 3a01 	vldr	s7, [r2, #4]
 8008982:	ed92 5a00 	vldr	s10, [r2]
 8008986:	9a06      	ldr	r2, [sp, #24]
 8008988:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800898c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8008990:	ee66 4a85 	vmul.f32	s9, s13, s10
 8008994:	ee26 5a05 	vmul.f32	s10, s12, s10
 8008998:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800899c:	ee26 6a23 	vmul.f32	s12, s12, s7
 80089a0:	ee75 6a66 	vsub.f32	s13, s10, s13
 80089a4:	ee34 6a86 	vadd.f32	s12, s9, s12
 80089a8:	ee34 4a42 	vsub.f32	s8, s8, s4
 80089ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089b0:	edc0 6a01 	vstr	s13, [r0, #4]
 80089b4:	ed80 6a00 	vstr	s12, [r0]
 80089b8:	ed92 6a01 	vldr	s12, [r2, #4]
 80089bc:	9803      	ldr	r0, [sp, #12]
 80089be:	ee77 7a43 	vsub.f32	s15, s14, s6
 80089c2:	ee75 5a84 	vadd.f32	s11, s11, s8
 80089c6:	ed92 7a00 	vldr	s14, [r2]
 80089ca:	ee65 6a87 	vmul.f32	s13, s11, s14
 80089ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80089d2:	ee65 5a86 	vmul.f32	s11, s11, s12
 80089d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80089da:	ee77 5a65 	vsub.f32	s11, s14, s11
 80089de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e2:	edca 5a01 	vstr	s11, [sl, #4]
 80089e6:	edca 7a00 	vstr	s15, [sl]
 80089ea:	6872      	ldr	r2, [r6, #4]
 80089ec:	4621      	mov	r1, r4
 80089ee:	2304      	movs	r3, #4
 80089f0:	f000 f892 	bl	8008b18 <arm_radix8_butterfly_f32>
 80089f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089f6:	6872      	ldr	r2, [r6, #4]
 80089f8:	4621      	mov	r1, r4
 80089fa:	2304      	movs	r3, #4
 80089fc:	f000 f88c 	bl	8008b18 <arm_radix8_butterfly_f32>
 8008a00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a02:	6872      	ldr	r2, [r6, #4]
 8008a04:	4621      	mov	r1, r4
 8008a06:	2304      	movs	r3, #4
 8008a08:	f000 f886 	bl	8008b18 <arm_radix8_butterfly_f32>
 8008a0c:	9801      	ldr	r0, [sp, #4]
 8008a0e:	6872      	ldr	r2, [r6, #4]
 8008a10:	4621      	mov	r1, r4
 8008a12:	2304      	movs	r3, #4
 8008a14:	b00f      	add	sp, #60	; 0x3c
 8008a16:	ecbd 8b0a 	vpop	{d8-d12}
 8008a1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1e:	f000 b87b 	b.w	8008b18 <arm_radix8_butterfly_f32>
 8008a22:	bf00      	nop

08008a24 <arm_cfft_f32>:
 8008a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a28:	2a01      	cmp	r2, #1
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	4617      	mov	r7, r2
 8008a2e:	460c      	mov	r4, r1
 8008a30:	4698      	mov	r8, r3
 8008a32:	8805      	ldrh	r5, [r0, #0]
 8008a34:	d054      	beq.n	8008ae0 <arm_cfft_f32+0xbc>
 8008a36:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008a3a:	d04c      	beq.n	8008ad6 <arm_cfft_f32+0xb2>
 8008a3c:	d916      	bls.n	8008a6c <arm_cfft_f32+0x48>
 8008a3e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008a42:	d01a      	beq.n	8008a7a <arm_cfft_f32+0x56>
 8008a44:	d95c      	bls.n	8008b00 <arm_cfft_f32+0xdc>
 8008a46:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008a4a:	d044      	beq.n	8008ad6 <arm_cfft_f32+0xb2>
 8008a4c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008a50:	d105      	bne.n	8008a5e <arm_cfft_f32+0x3a>
 8008a52:	4620      	mov	r0, r4
 8008a54:	4629      	mov	r1, r5
 8008a56:	6872      	ldr	r2, [r6, #4]
 8008a58:	2301      	movs	r3, #1
 8008a5a:	f000 f85d 	bl	8008b18 <arm_radix8_butterfly_f32>
 8008a5e:	f1b8 0f00 	cmp.w	r8, #0
 8008a62:	d111      	bne.n	8008a88 <arm_cfft_f32+0x64>
 8008a64:	2f01      	cmp	r7, #1
 8008a66:	d016      	beq.n	8008a96 <arm_cfft_f32+0x72>
 8008a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a6c:	2d20      	cmp	r5, #32
 8008a6e:	d032      	beq.n	8008ad6 <arm_cfft_f32+0xb2>
 8008a70:	d94a      	bls.n	8008b08 <arm_cfft_f32+0xe4>
 8008a72:	2d40      	cmp	r5, #64	; 0x40
 8008a74:	d0ed      	beq.n	8008a52 <arm_cfft_f32+0x2e>
 8008a76:	2d80      	cmp	r5, #128	; 0x80
 8008a78:	d1f1      	bne.n	8008a5e <arm_cfft_f32+0x3a>
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	f7ff fca1 	bl	80083c4 <arm_cfft_radix8by2_f32>
 8008a82:	f1b8 0f00 	cmp.w	r8, #0
 8008a86:	d0ed      	beq.n	8008a64 <arm_cfft_f32+0x40>
 8008a88:	4620      	mov	r0, r4
 8008a8a:	89b1      	ldrh	r1, [r6, #12]
 8008a8c:	68b2      	ldr	r2, [r6, #8]
 8008a8e:	f7f7 fba7 	bl	80001e0 <arm_bitreversal_32>
 8008a92:	2f01      	cmp	r7, #1
 8008a94:	d1e8      	bne.n	8008a68 <arm_cfft_f32+0x44>
 8008a96:	ee07 5a90 	vmov	s15, r5
 8008a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008aa2:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8008aa6:	2d00      	cmp	r5, #0
 8008aa8:	d0de      	beq.n	8008a68 <arm_cfft_f32+0x44>
 8008aaa:	f104 0108 	add.w	r1, r4, #8
 8008aae:	2300      	movs	r3, #0
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	429d      	cmp	r5, r3
 8008ab4:	f101 0108 	add.w	r1, r1, #8
 8008ab8:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008abc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008ac0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008ac4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008ac8:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008acc:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008ad0:	d1ee      	bne.n	8008ab0 <arm_cfft_f32+0x8c>
 8008ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	4621      	mov	r1, r4
 8008ada:	f7ff fd45 	bl	8008568 <arm_cfft_radix8by4_f32>
 8008ade:	e7be      	b.n	8008a5e <arm_cfft_f32+0x3a>
 8008ae0:	b1ad      	cbz	r5, 8008b0e <arm_cfft_f32+0xea>
 8008ae2:	f101 030c 	add.w	r3, r1, #12
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008aec:	3201      	adds	r2, #1
 8008aee:	eef1 7a67 	vneg.f32	s15, s15
 8008af2:	4295      	cmp	r5, r2
 8008af4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008af8:	f103 0308 	add.w	r3, r3, #8
 8008afc:	d1f4      	bne.n	8008ae8 <arm_cfft_f32+0xc4>
 8008afe:	e79a      	b.n	8008a36 <arm_cfft_f32+0x12>
 8008b00:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008b04:	d0a5      	beq.n	8008a52 <arm_cfft_f32+0x2e>
 8008b06:	e7aa      	b.n	8008a5e <arm_cfft_f32+0x3a>
 8008b08:	2d10      	cmp	r5, #16
 8008b0a:	d0b6      	beq.n	8008a7a <arm_cfft_f32+0x56>
 8008b0c:	e7a7      	b.n	8008a5e <arm_cfft_f32+0x3a>
 8008b0e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008b12:	d894      	bhi.n	8008a3e <arm_cfft_f32+0x1a>
 8008b14:	e7aa      	b.n	8008a6c <arm_cfft_f32+0x48>
 8008b16:	bf00      	nop

08008b18 <arm_radix8_butterfly_f32>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	ed2d 8b10 	vpush	{d8-d15}
 8008b20:	b09d      	sub	sp, #116	; 0x74
 8008b22:	461c      	mov	r4, r3
 8008b24:	ed9f bac8 	vldr	s22, [pc, #800]	; 8008e48 <arm_radix8_butterfly_f32+0x330>
 8008b28:	921a      	str	r2, [sp, #104]	; 0x68
 8008b2a:	1d03      	adds	r3, r0, #4
 8008b2c:	4682      	mov	sl, r0
 8008b2e:	4689      	mov	r9, r1
 8008b30:	468b      	mov	fp, r1
 8008b32:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b34:	9400      	str	r4, [sp, #0]
 8008b36:	469e      	mov	lr, r3
 8008b38:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008b3c:	005a      	lsls	r2, r3, #1
 8008b3e:	18d6      	adds	r6, r2, r3
 8008b40:	18f5      	adds	r5, r6, r3
 8008b42:	9203      	str	r2, [sp, #12]
 8008b44:	195a      	adds	r2, r3, r5
 8008b46:	18d0      	adds	r0, r2, r3
 8008b48:	00df      	lsls	r7, r3, #3
 8008b4a:	1819      	adds	r1, r3, r0
 8008b4c:	463c      	mov	r4, r7
 8008b4e:	9701      	str	r7, [sp, #4]
 8008b50:	4457      	add	r7, sl
 8008b52:	930c      	str	r3, [sp, #48]	; 0x30
 8008b54:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8008b58:	011b      	lsls	r3, r3, #4
 8008b5a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8008b5e:	eb07 0c04 	add.w	ip, r7, r4
 8008b62:	9c00      	ldr	r4, [sp, #0]
 8008b64:	9302      	str	r3, [sp, #8]
 8008b66:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8008b6a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8008b6e:	3204      	adds	r2, #4
 8008b70:	3104      	adds	r1, #4
 8008b72:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8008b76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b7a:	f04f 0800 	mov.w	r8, #0
 8008b7e:	eddc 7a00 	vldr	s15, [ip]
 8008b82:	edd7 6a00 	vldr	s13, [r7]
 8008b86:	edd6 3a00 	vldr	s7, [r6]
 8008b8a:	ed5e aa01 	vldr	s21, [lr, #-4]
 8008b8e:	edd5 4a00 	vldr	s9, [r5]
 8008b92:	ed90 2a00 	vldr	s4, [r0]
 8008b96:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008b9a:	ed51 0a01 	vldr	s1, [r1, #-4]
 8008b9e:	ee77 8a82 	vadd.f32	s17, s15, s4
 8008ba2:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8008ba6:	ee76 1a87 	vadd.f32	s3, s13, s14
 8008baa:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8008bae:	ee31 6a84 	vadd.f32	s12, s3, s8
 8008bb2:	ee33 5a28 	vadd.f32	s10, s6, s17
 8008bb6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008bba:	ee75 6a06 	vadd.f32	s13, s10, s12
 8008bbe:	ee35 5a46 	vsub.f32	s10, s10, s12
 8008bc2:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8008bc6:	ed85 5a00 	vstr	s10, [r5]
 8008bca:	ed96 1a01 	vldr	s2, [r6, #4]
 8008bce:	edd7 5a01 	vldr	s11, [r7, #4]
 8008bd2:	ed92 aa00 	vldr	s20, [r2]
 8008bd6:	ed91 6a00 	vldr	s12, [r1]
 8008bda:	ed9e 9a00 	vldr	s18, [lr]
 8008bde:	ed95 5a01 	vldr	s10, [r5, #4]
 8008be2:	eddc 6a01 	vldr	s13, [ip, #4]
 8008be6:	edd0 9a01 	vldr	s19, [r0, #4]
 8008bea:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8008bee:	ee71 2a46 	vsub.f32	s5, s2, s12
 8008bf2:	ee75 3aca 	vsub.f32	s7, s11, s20
 8008bf6:	ee37 0a60 	vsub.f32	s0, s14, s1
 8008bfa:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8008bfe:	ee37 7a20 	vadd.f32	s14, s14, s1
 8008c02:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8008c06:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8008c0a:	ee79 3a05 	vadd.f32	s7, s18, s10
 8008c0e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8008c12:	ee39 5a45 	vsub.f32	s10, s18, s10
 8008c16:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8008c1a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8008c1e:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8008c22:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008c26:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008c2a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8008c2e:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8008c32:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008c36:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008c3a:	ee36 0a88 	vadd.f32	s0, s13, s16
 8008c3e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8008c42:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008c46:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8008c4a:	ee75 6a62 	vsub.f32	s13, s10, s5
 8008c4e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8008c52:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008c56:	ee33 1a89 	vadd.f32	s2, s7, s18
 8008c5a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8008c5e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8008c62:	ee75 4a22 	vadd.f32	s9, s10, s5
 8008c66:	ee32 5a27 	vadd.f32	s10, s4, s15
 8008c6a:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008c6e:	ee33 8a06 	vadd.f32	s16, s6, s12
 8008c72:	ee75 2a87 	vadd.f32	s5, s11, s14
 8008c76:	ee31 9a28 	vadd.f32	s18, s2, s17
 8008c7a:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008c7e:	ee74 0a61 	vsub.f32	s1, s8, s3
 8008c82:	ee33 2a80 	vadd.f32	s4, s7, s0
 8008c86:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008c8a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8008c8e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008c92:	ee31 1a68 	vsub.f32	s2, s2, s17
 8008c96:	ee34 4a21 	vadd.f32	s8, s8, s3
 8008c9a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8008c9e:	ee74 4a85 	vadd.f32	s9, s9, s10
 8008ca2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008ca6:	44d8      	add	r8, fp
 8008ca8:	45c1      	cmp	r9, r8
 8008caa:	ed8e 9a00 	vstr	s18, [lr]
 8008cae:	ed85 1a01 	vstr	s2, [r5, #4]
 8008cb2:	449e      	add	lr, r3
 8008cb4:	ed8c 8a00 	vstr	s16, [ip]
 8008cb8:	441d      	add	r5, r3
 8008cba:	ed80 6a00 	vstr	s12, [r0]
 8008cbe:	edcc 0a01 	vstr	s1, [ip, #4]
 8008cc2:	ed80 4a01 	vstr	s8, [r0, #4]
 8008cc6:	449c      	add	ip, r3
 8008cc8:	ed87 2a00 	vstr	s4, [r7]
 8008ccc:	4418      	add	r0, r3
 8008cce:	ed41 3a01 	vstr	s7, [r1, #-4]
 8008cd2:	ed42 2a01 	vstr	s5, [r2, #-4]
 8008cd6:	ed86 7a00 	vstr	s14, [r6]
 8008cda:	ed87 3a01 	vstr	s6, [r7, #4]
 8008cde:	edc1 4a00 	vstr	s9, [r1]
 8008ce2:	441f      	add	r7, r3
 8008ce4:	edc2 5a00 	vstr	s11, [r2]
 8008ce8:	4419      	add	r1, r3
 8008cea:	edc6 6a01 	vstr	s13, [r6, #4]
 8008cee:	441a      	add	r2, r3
 8008cf0:	441e      	add	r6, r3
 8008cf2:	f63f af44 	bhi.w	8008b7e <arm_radix8_butterfly_f32+0x66>
 8008cf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cf8:	2907      	cmp	r1, #7
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f240 81e9 	bls.w	80090d2 <arm_radix8_butterfly_f32+0x5ba>
 8008d00:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8008d04:	193e      	adds	r6, r7, r4
 8008d06:	1935      	adds	r5, r6, r4
 8008d08:	9c03      	ldr	r4, [sp, #12]
 8008d0a:	9000      	str	r0, [sp, #0]
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	3201      	adds	r2, #1
 8008d10:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008d14:	9900      	ldr	r1, [sp, #0]
 8008d16:	1828      	adds	r0, r5, r0
 8008d18:	eb00 0e01 	add.w	lr, r0, r1
 8008d1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d1e:	440a      	add	r2, r1
 8008d20:	eb04 0c01 	add.w	ip, r4, r1
 8008d24:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8008d28:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8008d2c:	9a00      	ldr	r2, [sp, #0]
 8008d2e:	940f      	str	r4, [sp, #60]	; 0x3c
 8008d30:	00ed      	lsls	r5, r5, #3
 8008d32:	9511      	str	r5, [sp, #68]	; 0x44
 8008d34:	00d5      	lsls	r5, r2, #3
 8008d36:	950d      	str	r5, [sp, #52]	; 0x34
 8008d38:	9d01      	ldr	r5, [sp, #4]
 8008d3a:	3508      	adds	r5, #8
 8008d3c:	9516      	str	r5, [sp, #88]	; 0x58
 8008d3e:	9d02      	ldr	r5, [sp, #8]
 8008d40:	3508      	adds	r5, #8
 8008d42:	0114      	lsls	r4, r2, #4
 8008d44:	9517      	str	r5, [sp, #92]	; 0x5c
 8008d46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d48:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008d4a:	940e      	str	r4, [sp, #56]	; 0x38
 8008d4c:	00c0      	lsls	r0, r0, #3
 8008d4e:	9010      	str	r0, [sp, #64]	; 0x40
 8008d50:	18aa      	adds	r2, r5, r2
 8008d52:	9207      	str	r2, [sp, #28]
 8008d54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008d58:	18aa      	adds	r2, r5, r2
 8008d5a:	9208      	str	r2, [sp, #32]
 8008d5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d5e:	18aa      	adds	r2, r5, r2
 8008d60:	9209      	str	r2, [sp, #36]	; 0x24
 8008d62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008d66:	f10e 0204 	add.w	r2, lr, #4
 8008d6a:	920a      	str	r2, [sp, #40]	; 0x28
 8008d6c:	00c9      	lsls	r1, r1, #3
 8008d6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d70:	310c      	adds	r1, #12
 8008d72:	00f6      	lsls	r6, r6, #3
 8008d74:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8008d78:	9114      	str	r1, [sp, #80]	; 0x50
 8008d7a:	18a9      	adds	r1, r5, r2
 8008d7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d7e:	9612      	str	r6, [sp, #72]	; 0x48
 8008d80:	00ff      	lsls	r7, r7, #3
 8008d82:	19ae      	adds	r6, r5, r6
 8008d84:	3008      	adds	r0, #8
 8008d86:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8008d8a:	9606      	str	r6, [sp, #24]
 8008d8c:	9019      	str	r0, [sp, #100]	; 0x64
 8008d8e:	18aa      	adds	r2, r5, r2
 8008d90:	0164      	lsls	r4, r4, #5
 8008d92:	19ee      	adds	r6, r5, r7
 8008d94:	f10c 000c 	add.w	r0, ip, #12
 8008d98:	9713      	str	r7, [sp, #76]	; 0x4c
 8008d9a:	9604      	str	r6, [sp, #16]
 8008d9c:	9015      	str	r0, [sp, #84]	; 0x54
 8008d9e:	9103      	str	r1, [sp, #12]
 8008da0:	9205      	str	r2, [sp, #20]
 8008da2:	f104 0208 	add.w	r2, r4, #8
 8008da6:	9218      	str	r2, [sp, #96]	; 0x60
 8008da8:	f04f 0801 	mov.w	r8, #1
 8008dac:	2200      	movs	r2, #0
 8008dae:	f102 0108 	add.w	r1, r2, #8
 8008db2:	460f      	mov	r7, r1
 8008db4:	910b      	str	r1, [sp, #44]	; 0x2c
 8008db6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008db8:	188e      	adds	r6, r1, r2
 8008dba:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008dbc:	188d      	adds	r5, r1, r2
 8008dbe:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008dc0:	188c      	adds	r4, r1, r2
 8008dc2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008dc4:	1888      	adds	r0, r1, r2
 8008dc6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008dc8:	eb01 0c02 	add.w	ip, r1, r2
 8008dcc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008dce:	440a      	add	r2, r1
 8008dd0:	9903      	ldr	r1, [sp, #12]
 8008dd2:	edd1 fa00 	vldr	s31, [r1]
 8008dd6:	9905      	ldr	r1, [sp, #20]
 8008dd8:	ed91 fa00 	vldr	s30, [r1]
 8008ddc:	9904      	ldr	r1, [sp, #16]
 8008dde:	edd1 ea00 	vldr	s29, [r1]
 8008de2:	9906      	ldr	r1, [sp, #24]
 8008de4:	ed91 ea00 	vldr	s28, [r1]
 8008de8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dea:	edd1 da00 	vldr	s27, [r1]
 8008dee:	9908      	ldr	r1, [sp, #32]
 8008df0:	ed91 da00 	vldr	s26, [r1]
 8008df4:	9907      	ldr	r1, [sp, #28]
 8008df6:	edd1 ca00 	vldr	s25, [r1]
 8008dfa:	9903      	ldr	r1, [sp, #12]
 8008dfc:	ed91 ca01 	vldr	s24, [r1, #4]
 8008e00:	9905      	ldr	r1, [sp, #20]
 8008e02:	edd1 ba01 	vldr	s23, [r1, #4]
 8008e06:	9904      	ldr	r1, [sp, #16]
 8008e08:	edd1 aa01 	vldr	s21, [r1, #4]
 8008e0c:	9906      	ldr	r1, [sp, #24]
 8008e0e:	ed91 aa01 	vldr	s20, [r1, #4]
 8008e12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e14:	edd1 7a01 	vldr	s15, [r1, #4]
 8008e18:	9908      	ldr	r1, [sp, #32]
 8008e1a:	edcd 7a00 	vstr	s15, [sp]
 8008e1e:	edd1 7a01 	vldr	s15, [r1, #4]
 8008e22:	9907      	ldr	r1, [sp, #28]
 8008e24:	edcd 7a01 	vstr	s15, [sp, #4]
 8008e28:	edd1 7a01 	vldr	s15, [r1, #4]
 8008e2c:	eb0a 0e07 	add.w	lr, sl, r7
 8008e30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008e32:	edcd 7a02 	vstr	s15, [sp, #8]
 8008e36:	eb0c 010a 	add.w	r1, ip, sl
 8008e3a:	4456      	add	r6, sl
 8008e3c:	4455      	add	r5, sl
 8008e3e:	4454      	add	r4, sl
 8008e40:	4450      	add	r0, sl
 8008e42:	4452      	add	r2, sl
 8008e44:	46c4      	mov	ip, r8
 8008e46:	e001      	b.n	8008e4c <arm_radix8_butterfly_f32+0x334>
 8008e48:	3f3504f3 	.word	0x3f3504f3
 8008e4c:	ed96 5a00 	vldr	s10, [r6]
 8008e50:	ed52 9a01 	vldr	s19, [r2, #-4]
 8008e54:	ed11 6a01 	vldr	s12, [r1, #-4]
 8008e58:	edd0 7a00 	vldr	s15, [r0]
 8008e5c:	ed17 7a01 	vldr	s14, [r7, #-4]
 8008e60:	edde 3a00 	vldr	s7, [lr]
 8008e64:	ed94 3a00 	vldr	s6, [r4]
 8008e68:	ed95 2a00 	vldr	s4, [r5]
 8008e6c:	ed9e 0a01 	vldr	s0, [lr, #4]
 8008e70:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008e74:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008e78:	ee33 4a29 	vadd.f32	s8, s6, s19
 8008e7c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008e80:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008e84:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008e88:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008e8c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008e90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e94:	ed8e 6a00 	vstr	s12, [lr]
 8008e98:	edd0 8a01 	vldr	s17, [r0, #4]
 8008e9c:	ed95 9a01 	vldr	s18, [r5, #4]
 8008ea0:	edd1 2a00 	vldr	s5, [r1]
 8008ea4:	ed97 7a00 	vldr	s14, [r7]
 8008ea8:	edd4 0a01 	vldr	s1, [r4, #4]
 8008eac:	ed96 6a01 	vldr	s12, [r6, #4]
 8008eb0:	edd2 5a00 	vldr	s11, [r2]
 8008eb4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008eb8:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008ebc:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008ec0:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8008ec4:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008ec8:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008ecc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008ed0:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008ed4:	ee75 8a69 	vsub.f32	s17, s10, s19
 8008ed8:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008edc:	ee35 5a29 	vadd.f32	s10, s10, s19
 8008ee0:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008ee4:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008ee8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8008eec:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008ef0:	ee32 9a08 	vadd.f32	s18, s4, s16
 8008ef4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008ef8:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008efc:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008f00:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008f04:	ee32 1a87 	vadd.f32	s2, s5, s14
 8008f08:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008f0c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008f10:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008f14:	ee73 0a29 	vadd.f32	s1, s6, s19
 8008f18:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008f1c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008f20:	ee32 7a64 	vsub.f32	s14, s4, s9
 8008f24:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8008f28:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008f2c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008f30:	ee75 8a85 	vadd.f32	s17, s11, s10
 8008f34:	ee74 3a22 	vadd.f32	s7, s8, s5
 8008f38:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8008f3c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008f40:	ee79 1a41 	vsub.f32	s3, s18, s2
 8008f44:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8008f48:	ee76 5a43 	vsub.f32	s11, s12, s6
 8008f4c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008f50:	ee72 4a24 	vadd.f32	s9, s4, s9
 8008f54:	ee30 4a60 	vsub.f32	s8, s0, s1
 8008f58:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8008f5c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8008f60:	ee77 9a85 	vadd.f32	s19, s15, s10
 8008f64:	ee36 6a03 	vadd.f32	s12, s12, s6
 8008f68:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008f6c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8008f70:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8008f74:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8008f78:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8008f7c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8008f80:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8008f84:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8008f88:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8008f8c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8008f90:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8008f94:	ee35 3a03 	vadd.f32	s6, s10, s6
 8008f98:	ee72 6a66 	vsub.f32	s13, s4, s13
 8008f9c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8008fa0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8008fa4:	ed9d 4a02 	vldr	s8, [sp, #8]
 8008fa8:	ed8e 1a01 	vstr	s2, [lr, #4]
 8008fac:	ee77 3a63 	vsub.f32	s7, s14, s7
 8008fb0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008fb4:	ed9d 7a01 	vldr	s14, [sp, #4]
 8008fb8:	ed86 3a00 	vstr	s6, [r6]
 8008fbc:	ee30 9a89 	vadd.f32	s18, s1, s18
 8008fc0:	ee32 2a05 	vadd.f32	s4, s4, s10
 8008fc4:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8008fc8:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8008fcc:	ee67 2a22 	vmul.f32	s5, s14, s5
 8008fd0:	ee64 1a00 	vmul.f32	s3, s8, s0
 8008fd4:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008fd8:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8008fdc:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8008fe0:	ee64 8a28 	vmul.f32	s17, s8, s17
 8008fe4:	ed9d 4a00 	vldr	s8, [sp]
 8008fe8:	edc6 6a01 	vstr	s13, [r6, #4]
 8008fec:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008ff0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8008ff4:	ee64 9a29 	vmul.f32	s19, s8, s19
 8008ff8:	ee24 4a25 	vmul.f32	s8, s8, s11
 8008ffc:	ee30 7a87 	vadd.f32	s14, s1, s14
 8009000:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009004:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8009008:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800900c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8009010:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8009014:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8009018:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800901c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8009020:	ee30 0a68 	vsub.f32	s0, s0, s17
 8009024:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8009028:	ee70 0a84 	vadd.f32	s1, s1, s8
 800902c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009030:	44dc      	add	ip, fp
 8009032:	45e1      	cmp	r9, ip
 8009034:	ed84 9a00 	vstr	s18, [r4]
 8009038:	edc4 3a01 	vstr	s7, [r4, #4]
 800903c:	449e      	add	lr, r3
 800903e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8009042:	edc2 2a00 	vstr	s5, [r2]
 8009046:	441e      	add	r6, r3
 8009048:	ed85 2a00 	vstr	s4, [r5]
 800904c:	ed85 8a01 	vstr	s16, [r5, #4]
 8009050:	441c      	add	r4, r3
 8009052:	ed47 1a01 	vstr	s3, [r7, #-4]
 8009056:	ed87 0a00 	vstr	s0, [r7]
 800905a:	441a      	add	r2, r3
 800905c:	ed41 4a01 	vstr	s9, [r1, #-4]
 8009060:	edc1 9a00 	vstr	s19, [r1]
 8009064:	441d      	add	r5, r3
 8009066:	edc0 0a00 	vstr	s1, [r0]
 800906a:	441f      	add	r7, r3
 800906c:	ed80 6a01 	vstr	s12, [r0, #4]
 8009070:	4419      	add	r1, r3
 8009072:	4418      	add	r0, r3
 8009074:	f63f aeea 	bhi.w	8008e4c <arm_radix8_butterfly_f32+0x334>
 8009078:	9a03      	ldr	r2, [sp, #12]
 800907a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800907c:	440a      	add	r2, r1
 800907e:	9203      	str	r2, [sp, #12]
 8009080:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009082:	9a05      	ldr	r2, [sp, #20]
 8009084:	440a      	add	r2, r1
 8009086:	9205      	str	r2, [sp, #20]
 8009088:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800908a:	9a04      	ldr	r2, [sp, #16]
 800908c:	440a      	add	r2, r1
 800908e:	9204      	str	r2, [sp, #16]
 8009090:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009092:	9a06      	ldr	r2, [sp, #24]
 8009094:	440a      	add	r2, r1
 8009096:	9206      	str	r2, [sp, #24]
 8009098:	9911      	ldr	r1, [sp, #68]	; 0x44
 800909a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800909c:	440a      	add	r2, r1
 800909e:	9209      	str	r2, [sp, #36]	; 0x24
 80090a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80090a2:	9a08      	ldr	r2, [sp, #32]
 80090a4:	440a      	add	r2, r1
 80090a6:	9208      	str	r2, [sp, #32]
 80090a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80090aa:	9a07      	ldr	r2, [sp, #28]
 80090ac:	440a      	add	r2, r1
 80090ae:	9207      	str	r2, [sp, #28]
 80090b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090b4:	f108 0801 	add.w	r8, r8, #1
 80090b8:	3208      	adds	r2, #8
 80090ba:	4588      	cmp	r8, r1
 80090bc:	920a      	str	r2, [sp, #40]	; 0x28
 80090be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090c0:	f47f ae75 	bne.w	8008dae <arm_radix8_butterfly_f32+0x296>
 80090c4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	46c3      	mov	fp, r8
 80090cc:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80090d0:	e532      	b.n	8008b38 <arm_radix8_butterfly_f32+0x20>
 80090d2:	b01d      	add	sp, #116	; 0x74
 80090d4:	ecbd 8b10 	vpop	{d8-d15}
 80090d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090dc <__errno>:
 80090dc:	4b01      	ldr	r3, [pc, #4]	; (80090e4 <__errno+0x8>)
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000010 	.word	0x20000010

080090e8 <__libc_init_array>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	4d0d      	ldr	r5, [pc, #52]	; (8009120 <__libc_init_array+0x38>)
 80090ec:	4c0d      	ldr	r4, [pc, #52]	; (8009124 <__libc_init_array+0x3c>)
 80090ee:	1b64      	subs	r4, r4, r5
 80090f0:	10a4      	asrs	r4, r4, #2
 80090f2:	2600      	movs	r6, #0
 80090f4:	42a6      	cmp	r6, r4
 80090f6:	d109      	bne.n	800910c <__libc_init_array+0x24>
 80090f8:	4d0b      	ldr	r5, [pc, #44]	; (8009128 <__libc_init_array+0x40>)
 80090fa:	4c0c      	ldr	r4, [pc, #48]	; (800912c <__libc_init_array+0x44>)
 80090fc:	f003 f864 	bl	800c1c8 <_init>
 8009100:	1b64      	subs	r4, r4, r5
 8009102:	10a4      	asrs	r4, r4, #2
 8009104:	2600      	movs	r6, #0
 8009106:	42a6      	cmp	r6, r4
 8009108:	d105      	bne.n	8009116 <__libc_init_array+0x2e>
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009110:	4798      	blx	r3
 8009112:	3601      	adds	r6, #1
 8009114:	e7ee      	b.n	80090f4 <__libc_init_array+0xc>
 8009116:	f855 3b04 	ldr.w	r3, [r5], #4
 800911a:	4798      	blx	r3
 800911c:	3601      	adds	r6, #1
 800911e:	e7f2      	b.n	8009106 <__libc_init_array+0x1e>
 8009120:	0801fc44 	.word	0x0801fc44
 8009124:	0801fc44 	.word	0x0801fc44
 8009128:	0801fc44 	.word	0x0801fc44
 800912c:	0801fc48 	.word	0x0801fc48

08009130 <memset>:
 8009130:	4402      	add	r2, r0
 8009132:	4603      	mov	r3, r0
 8009134:	4293      	cmp	r3, r2
 8009136:	d100      	bne.n	800913a <memset+0xa>
 8009138:	4770      	bx	lr
 800913a:	f803 1b01 	strb.w	r1, [r3], #1
 800913e:	e7f9      	b.n	8009134 <memset+0x4>

08009140 <__cvt>:
 8009140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	ec55 4b10 	vmov	r4, r5, d0
 8009148:	2d00      	cmp	r5, #0
 800914a:	460e      	mov	r6, r1
 800914c:	4619      	mov	r1, r3
 800914e:	462b      	mov	r3, r5
 8009150:	bfbb      	ittet	lt
 8009152:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009156:	461d      	movlt	r5, r3
 8009158:	2300      	movge	r3, #0
 800915a:	232d      	movlt	r3, #45	; 0x2d
 800915c:	700b      	strb	r3, [r1, #0]
 800915e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009160:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009164:	4691      	mov	r9, r2
 8009166:	f023 0820 	bic.w	r8, r3, #32
 800916a:	bfbc      	itt	lt
 800916c:	4622      	movlt	r2, r4
 800916e:	4614      	movlt	r4, r2
 8009170:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009174:	d005      	beq.n	8009182 <__cvt+0x42>
 8009176:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800917a:	d100      	bne.n	800917e <__cvt+0x3e>
 800917c:	3601      	adds	r6, #1
 800917e:	2102      	movs	r1, #2
 8009180:	e000      	b.n	8009184 <__cvt+0x44>
 8009182:	2103      	movs	r1, #3
 8009184:	ab03      	add	r3, sp, #12
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	ab02      	add	r3, sp, #8
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	ec45 4b10 	vmov	d0, r4, r5
 8009190:	4653      	mov	r3, sl
 8009192:	4632      	mov	r2, r6
 8009194:	f000 fcec 	bl	8009b70 <_dtoa_r>
 8009198:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800919c:	4607      	mov	r7, r0
 800919e:	d102      	bne.n	80091a6 <__cvt+0x66>
 80091a0:	f019 0f01 	tst.w	r9, #1
 80091a4:	d022      	beq.n	80091ec <__cvt+0xac>
 80091a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091aa:	eb07 0906 	add.w	r9, r7, r6
 80091ae:	d110      	bne.n	80091d2 <__cvt+0x92>
 80091b0:	783b      	ldrb	r3, [r7, #0]
 80091b2:	2b30      	cmp	r3, #48	; 0x30
 80091b4:	d10a      	bne.n	80091cc <__cvt+0x8c>
 80091b6:	2200      	movs	r2, #0
 80091b8:	2300      	movs	r3, #0
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	f7f7 fceb 	bl	8000b98 <__aeabi_dcmpeq>
 80091c2:	b918      	cbnz	r0, 80091cc <__cvt+0x8c>
 80091c4:	f1c6 0601 	rsb	r6, r6, #1
 80091c8:	f8ca 6000 	str.w	r6, [sl]
 80091cc:	f8da 3000 	ldr.w	r3, [sl]
 80091d0:	4499      	add	r9, r3
 80091d2:	2200      	movs	r2, #0
 80091d4:	2300      	movs	r3, #0
 80091d6:	4620      	mov	r0, r4
 80091d8:	4629      	mov	r1, r5
 80091da:	f7f7 fcdd 	bl	8000b98 <__aeabi_dcmpeq>
 80091de:	b108      	cbz	r0, 80091e4 <__cvt+0xa4>
 80091e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80091e4:	2230      	movs	r2, #48	; 0x30
 80091e6:	9b03      	ldr	r3, [sp, #12]
 80091e8:	454b      	cmp	r3, r9
 80091ea:	d307      	bcc.n	80091fc <__cvt+0xbc>
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091f0:	1bdb      	subs	r3, r3, r7
 80091f2:	4638      	mov	r0, r7
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	b004      	add	sp, #16
 80091f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fc:	1c59      	adds	r1, r3, #1
 80091fe:	9103      	str	r1, [sp, #12]
 8009200:	701a      	strb	r2, [r3, #0]
 8009202:	e7f0      	b.n	80091e6 <__cvt+0xa6>

08009204 <__exponent>:
 8009204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009206:	4603      	mov	r3, r0
 8009208:	2900      	cmp	r1, #0
 800920a:	bfb8      	it	lt
 800920c:	4249      	neglt	r1, r1
 800920e:	f803 2b02 	strb.w	r2, [r3], #2
 8009212:	bfb4      	ite	lt
 8009214:	222d      	movlt	r2, #45	; 0x2d
 8009216:	222b      	movge	r2, #43	; 0x2b
 8009218:	2909      	cmp	r1, #9
 800921a:	7042      	strb	r2, [r0, #1]
 800921c:	dd2a      	ble.n	8009274 <__exponent+0x70>
 800921e:	f10d 0407 	add.w	r4, sp, #7
 8009222:	46a4      	mov	ip, r4
 8009224:	270a      	movs	r7, #10
 8009226:	46a6      	mov	lr, r4
 8009228:	460a      	mov	r2, r1
 800922a:	fb91 f6f7 	sdiv	r6, r1, r7
 800922e:	fb07 1516 	mls	r5, r7, r6, r1
 8009232:	3530      	adds	r5, #48	; 0x30
 8009234:	2a63      	cmp	r2, #99	; 0x63
 8009236:	f104 34ff 	add.w	r4, r4, #4294967295
 800923a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800923e:	4631      	mov	r1, r6
 8009240:	dcf1      	bgt.n	8009226 <__exponent+0x22>
 8009242:	3130      	adds	r1, #48	; 0x30
 8009244:	f1ae 0502 	sub.w	r5, lr, #2
 8009248:	f804 1c01 	strb.w	r1, [r4, #-1]
 800924c:	1c44      	adds	r4, r0, #1
 800924e:	4629      	mov	r1, r5
 8009250:	4561      	cmp	r1, ip
 8009252:	d30a      	bcc.n	800926a <__exponent+0x66>
 8009254:	f10d 0209 	add.w	r2, sp, #9
 8009258:	eba2 020e 	sub.w	r2, r2, lr
 800925c:	4565      	cmp	r5, ip
 800925e:	bf88      	it	hi
 8009260:	2200      	movhi	r2, #0
 8009262:	4413      	add	r3, r2
 8009264:	1a18      	subs	r0, r3, r0
 8009266:	b003      	add	sp, #12
 8009268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800926a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800926e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009272:	e7ed      	b.n	8009250 <__exponent+0x4c>
 8009274:	2330      	movs	r3, #48	; 0x30
 8009276:	3130      	adds	r1, #48	; 0x30
 8009278:	7083      	strb	r3, [r0, #2]
 800927a:	70c1      	strb	r1, [r0, #3]
 800927c:	1d03      	adds	r3, r0, #4
 800927e:	e7f1      	b.n	8009264 <__exponent+0x60>

08009280 <_printf_float>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	ed2d 8b02 	vpush	{d8}
 8009288:	b08d      	sub	sp, #52	; 0x34
 800928a:	460c      	mov	r4, r1
 800928c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009290:	4616      	mov	r6, r2
 8009292:	461f      	mov	r7, r3
 8009294:	4605      	mov	r5, r0
 8009296:	f001 fa57 	bl	800a748 <_localeconv_r>
 800929a:	f8d0 a000 	ldr.w	sl, [r0]
 800929e:	4650      	mov	r0, sl
 80092a0:	f7f6 fffe 	bl	80002a0 <strlen>
 80092a4:	2300      	movs	r3, #0
 80092a6:	930a      	str	r3, [sp, #40]	; 0x28
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	9305      	str	r3, [sp, #20]
 80092ac:	f8d8 3000 	ldr.w	r3, [r8]
 80092b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80092b4:	3307      	adds	r3, #7
 80092b6:	f023 0307 	bic.w	r3, r3, #7
 80092ba:	f103 0208 	add.w	r2, r3, #8
 80092be:	f8c8 2000 	str.w	r2, [r8]
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80092ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80092ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092d2:	9307      	str	r3, [sp, #28]
 80092d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80092d8:	ee08 0a10 	vmov	s16, r0
 80092dc:	4b9f      	ldr	r3, [pc, #636]	; (800955c <_printf_float+0x2dc>)
 80092de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092e2:	f04f 32ff 	mov.w	r2, #4294967295
 80092e6:	f7f7 fc89 	bl	8000bfc <__aeabi_dcmpun>
 80092ea:	bb88      	cbnz	r0, 8009350 <_printf_float+0xd0>
 80092ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092f0:	4b9a      	ldr	r3, [pc, #616]	; (800955c <_printf_float+0x2dc>)
 80092f2:	f04f 32ff 	mov.w	r2, #4294967295
 80092f6:	f7f7 fc63 	bl	8000bc0 <__aeabi_dcmple>
 80092fa:	bb48      	cbnz	r0, 8009350 <_printf_float+0xd0>
 80092fc:	2200      	movs	r2, #0
 80092fe:	2300      	movs	r3, #0
 8009300:	4640      	mov	r0, r8
 8009302:	4649      	mov	r1, r9
 8009304:	f7f7 fc52 	bl	8000bac <__aeabi_dcmplt>
 8009308:	b110      	cbz	r0, 8009310 <_printf_float+0x90>
 800930a:	232d      	movs	r3, #45	; 0x2d
 800930c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009310:	4b93      	ldr	r3, [pc, #588]	; (8009560 <_printf_float+0x2e0>)
 8009312:	4894      	ldr	r0, [pc, #592]	; (8009564 <_printf_float+0x2e4>)
 8009314:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009318:	bf94      	ite	ls
 800931a:	4698      	movls	r8, r3
 800931c:	4680      	movhi	r8, r0
 800931e:	2303      	movs	r3, #3
 8009320:	6123      	str	r3, [r4, #16]
 8009322:	9b05      	ldr	r3, [sp, #20]
 8009324:	f023 0204 	bic.w	r2, r3, #4
 8009328:	6022      	str	r2, [r4, #0]
 800932a:	f04f 0900 	mov.w	r9, #0
 800932e:	9700      	str	r7, [sp, #0]
 8009330:	4633      	mov	r3, r6
 8009332:	aa0b      	add	r2, sp, #44	; 0x2c
 8009334:	4621      	mov	r1, r4
 8009336:	4628      	mov	r0, r5
 8009338:	f000 f9d8 	bl	80096ec <_printf_common>
 800933c:	3001      	adds	r0, #1
 800933e:	f040 8090 	bne.w	8009462 <_printf_float+0x1e2>
 8009342:	f04f 30ff 	mov.w	r0, #4294967295
 8009346:	b00d      	add	sp, #52	; 0x34
 8009348:	ecbd 8b02 	vpop	{d8}
 800934c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009350:	4642      	mov	r2, r8
 8009352:	464b      	mov	r3, r9
 8009354:	4640      	mov	r0, r8
 8009356:	4649      	mov	r1, r9
 8009358:	f7f7 fc50 	bl	8000bfc <__aeabi_dcmpun>
 800935c:	b140      	cbz	r0, 8009370 <_printf_float+0xf0>
 800935e:	464b      	mov	r3, r9
 8009360:	2b00      	cmp	r3, #0
 8009362:	bfbc      	itt	lt
 8009364:	232d      	movlt	r3, #45	; 0x2d
 8009366:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800936a:	487f      	ldr	r0, [pc, #508]	; (8009568 <_printf_float+0x2e8>)
 800936c:	4b7f      	ldr	r3, [pc, #508]	; (800956c <_printf_float+0x2ec>)
 800936e:	e7d1      	b.n	8009314 <_printf_float+0x94>
 8009370:	6863      	ldr	r3, [r4, #4]
 8009372:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009376:	9206      	str	r2, [sp, #24]
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	d13f      	bne.n	80093fc <_printf_float+0x17c>
 800937c:	2306      	movs	r3, #6
 800937e:	6063      	str	r3, [r4, #4]
 8009380:	9b05      	ldr	r3, [sp, #20]
 8009382:	6861      	ldr	r1, [r4, #4]
 8009384:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009388:	2300      	movs	r3, #0
 800938a:	9303      	str	r3, [sp, #12]
 800938c:	ab0a      	add	r3, sp, #40	; 0x28
 800938e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009392:	ab09      	add	r3, sp, #36	; 0x24
 8009394:	ec49 8b10 	vmov	d0, r8, r9
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	6022      	str	r2, [r4, #0]
 800939c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80093a0:	4628      	mov	r0, r5
 80093a2:	f7ff fecd 	bl	8009140 <__cvt>
 80093a6:	9b06      	ldr	r3, [sp, #24]
 80093a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093aa:	2b47      	cmp	r3, #71	; 0x47
 80093ac:	4680      	mov	r8, r0
 80093ae:	d108      	bne.n	80093c2 <_printf_float+0x142>
 80093b0:	1cc8      	adds	r0, r1, #3
 80093b2:	db02      	blt.n	80093ba <_printf_float+0x13a>
 80093b4:	6863      	ldr	r3, [r4, #4]
 80093b6:	4299      	cmp	r1, r3
 80093b8:	dd41      	ble.n	800943e <_printf_float+0x1be>
 80093ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80093be:	fa5f fb8b 	uxtb.w	fp, fp
 80093c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093c6:	d820      	bhi.n	800940a <_printf_float+0x18a>
 80093c8:	3901      	subs	r1, #1
 80093ca:	465a      	mov	r2, fp
 80093cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80093d0:	9109      	str	r1, [sp, #36]	; 0x24
 80093d2:	f7ff ff17 	bl	8009204 <__exponent>
 80093d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093d8:	1813      	adds	r3, r2, r0
 80093da:	2a01      	cmp	r2, #1
 80093dc:	4681      	mov	r9, r0
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	dc02      	bgt.n	80093e8 <_printf_float+0x168>
 80093e2:	6822      	ldr	r2, [r4, #0]
 80093e4:	07d2      	lsls	r2, r2, #31
 80093e6:	d501      	bpl.n	80093ec <_printf_float+0x16c>
 80093e8:	3301      	adds	r3, #1
 80093ea:	6123      	str	r3, [r4, #16]
 80093ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d09c      	beq.n	800932e <_printf_float+0xae>
 80093f4:	232d      	movs	r3, #45	; 0x2d
 80093f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fa:	e798      	b.n	800932e <_printf_float+0xae>
 80093fc:	9a06      	ldr	r2, [sp, #24]
 80093fe:	2a47      	cmp	r2, #71	; 0x47
 8009400:	d1be      	bne.n	8009380 <_printf_float+0x100>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1bc      	bne.n	8009380 <_printf_float+0x100>
 8009406:	2301      	movs	r3, #1
 8009408:	e7b9      	b.n	800937e <_printf_float+0xfe>
 800940a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800940e:	d118      	bne.n	8009442 <_printf_float+0x1c2>
 8009410:	2900      	cmp	r1, #0
 8009412:	6863      	ldr	r3, [r4, #4]
 8009414:	dd0b      	ble.n	800942e <_printf_float+0x1ae>
 8009416:	6121      	str	r1, [r4, #16]
 8009418:	b913      	cbnz	r3, 8009420 <_printf_float+0x1a0>
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	07d0      	lsls	r0, r2, #31
 800941e:	d502      	bpl.n	8009426 <_printf_float+0x1a6>
 8009420:	3301      	adds	r3, #1
 8009422:	440b      	add	r3, r1
 8009424:	6123      	str	r3, [r4, #16]
 8009426:	65a1      	str	r1, [r4, #88]	; 0x58
 8009428:	f04f 0900 	mov.w	r9, #0
 800942c:	e7de      	b.n	80093ec <_printf_float+0x16c>
 800942e:	b913      	cbnz	r3, 8009436 <_printf_float+0x1b6>
 8009430:	6822      	ldr	r2, [r4, #0]
 8009432:	07d2      	lsls	r2, r2, #31
 8009434:	d501      	bpl.n	800943a <_printf_float+0x1ba>
 8009436:	3302      	adds	r3, #2
 8009438:	e7f4      	b.n	8009424 <_printf_float+0x1a4>
 800943a:	2301      	movs	r3, #1
 800943c:	e7f2      	b.n	8009424 <_printf_float+0x1a4>
 800943e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009444:	4299      	cmp	r1, r3
 8009446:	db05      	blt.n	8009454 <_printf_float+0x1d4>
 8009448:	6823      	ldr	r3, [r4, #0]
 800944a:	6121      	str	r1, [r4, #16]
 800944c:	07d8      	lsls	r0, r3, #31
 800944e:	d5ea      	bpl.n	8009426 <_printf_float+0x1a6>
 8009450:	1c4b      	adds	r3, r1, #1
 8009452:	e7e7      	b.n	8009424 <_printf_float+0x1a4>
 8009454:	2900      	cmp	r1, #0
 8009456:	bfd4      	ite	le
 8009458:	f1c1 0202 	rsble	r2, r1, #2
 800945c:	2201      	movgt	r2, #1
 800945e:	4413      	add	r3, r2
 8009460:	e7e0      	b.n	8009424 <_printf_float+0x1a4>
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	055a      	lsls	r2, r3, #21
 8009466:	d407      	bmi.n	8009478 <_printf_float+0x1f8>
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	4642      	mov	r2, r8
 800946c:	4631      	mov	r1, r6
 800946e:	4628      	mov	r0, r5
 8009470:	47b8      	blx	r7
 8009472:	3001      	adds	r0, #1
 8009474:	d12c      	bne.n	80094d0 <_printf_float+0x250>
 8009476:	e764      	b.n	8009342 <_printf_float+0xc2>
 8009478:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800947c:	f240 80e0 	bls.w	8009640 <_printf_float+0x3c0>
 8009480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009484:	2200      	movs	r2, #0
 8009486:	2300      	movs	r3, #0
 8009488:	f7f7 fb86 	bl	8000b98 <__aeabi_dcmpeq>
 800948c:	2800      	cmp	r0, #0
 800948e:	d034      	beq.n	80094fa <_printf_float+0x27a>
 8009490:	4a37      	ldr	r2, [pc, #220]	; (8009570 <_printf_float+0x2f0>)
 8009492:	2301      	movs	r3, #1
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	f43f af51 	beq.w	8009342 <_printf_float+0xc2>
 80094a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094a4:	429a      	cmp	r2, r3
 80094a6:	db02      	blt.n	80094ae <_printf_float+0x22e>
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	07d8      	lsls	r0, r3, #31
 80094ac:	d510      	bpl.n	80094d0 <_printf_float+0x250>
 80094ae:	ee18 3a10 	vmov	r3, s16
 80094b2:	4652      	mov	r2, sl
 80094b4:	4631      	mov	r1, r6
 80094b6:	4628      	mov	r0, r5
 80094b8:	47b8      	blx	r7
 80094ba:	3001      	adds	r0, #1
 80094bc:	f43f af41 	beq.w	8009342 <_printf_float+0xc2>
 80094c0:	f04f 0800 	mov.w	r8, #0
 80094c4:	f104 091a 	add.w	r9, r4, #26
 80094c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ca:	3b01      	subs	r3, #1
 80094cc:	4543      	cmp	r3, r8
 80094ce:	dc09      	bgt.n	80094e4 <_printf_float+0x264>
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	079b      	lsls	r3, r3, #30
 80094d4:	f100 8105 	bmi.w	80096e2 <_printf_float+0x462>
 80094d8:	68e0      	ldr	r0, [r4, #12]
 80094da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094dc:	4298      	cmp	r0, r3
 80094de:	bfb8      	it	lt
 80094e0:	4618      	movlt	r0, r3
 80094e2:	e730      	b.n	8009346 <_printf_float+0xc6>
 80094e4:	2301      	movs	r3, #1
 80094e6:	464a      	mov	r2, r9
 80094e8:	4631      	mov	r1, r6
 80094ea:	4628      	mov	r0, r5
 80094ec:	47b8      	blx	r7
 80094ee:	3001      	adds	r0, #1
 80094f0:	f43f af27 	beq.w	8009342 <_printf_float+0xc2>
 80094f4:	f108 0801 	add.w	r8, r8, #1
 80094f8:	e7e6      	b.n	80094c8 <_printf_float+0x248>
 80094fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	dc39      	bgt.n	8009574 <_printf_float+0x2f4>
 8009500:	4a1b      	ldr	r2, [pc, #108]	; (8009570 <_printf_float+0x2f0>)
 8009502:	2301      	movs	r3, #1
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	47b8      	blx	r7
 800950a:	3001      	adds	r0, #1
 800950c:	f43f af19 	beq.w	8009342 <_printf_float+0xc2>
 8009510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009514:	4313      	orrs	r3, r2
 8009516:	d102      	bne.n	800951e <_printf_float+0x29e>
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	07d9      	lsls	r1, r3, #31
 800951c:	d5d8      	bpl.n	80094d0 <_printf_float+0x250>
 800951e:	ee18 3a10 	vmov	r3, s16
 8009522:	4652      	mov	r2, sl
 8009524:	4631      	mov	r1, r6
 8009526:	4628      	mov	r0, r5
 8009528:	47b8      	blx	r7
 800952a:	3001      	adds	r0, #1
 800952c:	f43f af09 	beq.w	8009342 <_printf_float+0xc2>
 8009530:	f04f 0900 	mov.w	r9, #0
 8009534:	f104 0a1a 	add.w	sl, r4, #26
 8009538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953a:	425b      	negs	r3, r3
 800953c:	454b      	cmp	r3, r9
 800953e:	dc01      	bgt.n	8009544 <_printf_float+0x2c4>
 8009540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009542:	e792      	b.n	800946a <_printf_float+0x1ea>
 8009544:	2301      	movs	r3, #1
 8009546:	4652      	mov	r2, sl
 8009548:	4631      	mov	r1, r6
 800954a:	4628      	mov	r0, r5
 800954c:	47b8      	blx	r7
 800954e:	3001      	adds	r0, #1
 8009550:	f43f aef7 	beq.w	8009342 <_printf_float+0xc2>
 8009554:	f109 0901 	add.w	r9, r9, #1
 8009558:	e7ee      	b.n	8009538 <_printf_float+0x2b8>
 800955a:	bf00      	nop
 800955c:	7fefffff 	.word	0x7fefffff
 8009560:	0801f85c 	.word	0x0801f85c
 8009564:	0801f860 	.word	0x0801f860
 8009568:	0801f868 	.word	0x0801f868
 800956c:	0801f864 	.word	0x0801f864
 8009570:	0801f86c 	.word	0x0801f86c
 8009574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009578:	429a      	cmp	r2, r3
 800957a:	bfa8      	it	ge
 800957c:	461a      	movge	r2, r3
 800957e:	2a00      	cmp	r2, #0
 8009580:	4691      	mov	r9, r2
 8009582:	dc37      	bgt.n	80095f4 <_printf_float+0x374>
 8009584:	f04f 0b00 	mov.w	fp, #0
 8009588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800958c:	f104 021a 	add.w	r2, r4, #26
 8009590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	eba3 0309 	sub.w	r3, r3, r9
 8009598:	455b      	cmp	r3, fp
 800959a:	dc33      	bgt.n	8009604 <_printf_float+0x384>
 800959c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095a0:	429a      	cmp	r2, r3
 80095a2:	db3b      	blt.n	800961c <_printf_float+0x39c>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	07da      	lsls	r2, r3, #31
 80095a8:	d438      	bmi.n	800961c <_printf_float+0x39c>
 80095aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ac:	9b05      	ldr	r3, [sp, #20]
 80095ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	eba2 0901 	sub.w	r9, r2, r1
 80095b6:	4599      	cmp	r9, r3
 80095b8:	bfa8      	it	ge
 80095ba:	4699      	movge	r9, r3
 80095bc:	f1b9 0f00 	cmp.w	r9, #0
 80095c0:	dc35      	bgt.n	800962e <_printf_float+0x3ae>
 80095c2:	f04f 0800 	mov.w	r8, #0
 80095c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095ca:	f104 0a1a 	add.w	sl, r4, #26
 80095ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095d2:	1a9b      	subs	r3, r3, r2
 80095d4:	eba3 0309 	sub.w	r3, r3, r9
 80095d8:	4543      	cmp	r3, r8
 80095da:	f77f af79 	ble.w	80094d0 <_printf_float+0x250>
 80095de:	2301      	movs	r3, #1
 80095e0:	4652      	mov	r2, sl
 80095e2:	4631      	mov	r1, r6
 80095e4:	4628      	mov	r0, r5
 80095e6:	47b8      	blx	r7
 80095e8:	3001      	adds	r0, #1
 80095ea:	f43f aeaa 	beq.w	8009342 <_printf_float+0xc2>
 80095ee:	f108 0801 	add.w	r8, r8, #1
 80095f2:	e7ec      	b.n	80095ce <_printf_float+0x34e>
 80095f4:	4613      	mov	r3, r2
 80095f6:	4631      	mov	r1, r6
 80095f8:	4642      	mov	r2, r8
 80095fa:	4628      	mov	r0, r5
 80095fc:	47b8      	blx	r7
 80095fe:	3001      	adds	r0, #1
 8009600:	d1c0      	bne.n	8009584 <_printf_float+0x304>
 8009602:	e69e      	b.n	8009342 <_printf_float+0xc2>
 8009604:	2301      	movs	r3, #1
 8009606:	4631      	mov	r1, r6
 8009608:	4628      	mov	r0, r5
 800960a:	9205      	str	r2, [sp, #20]
 800960c:	47b8      	blx	r7
 800960e:	3001      	adds	r0, #1
 8009610:	f43f ae97 	beq.w	8009342 <_printf_float+0xc2>
 8009614:	9a05      	ldr	r2, [sp, #20]
 8009616:	f10b 0b01 	add.w	fp, fp, #1
 800961a:	e7b9      	b.n	8009590 <_printf_float+0x310>
 800961c:	ee18 3a10 	vmov	r3, s16
 8009620:	4652      	mov	r2, sl
 8009622:	4631      	mov	r1, r6
 8009624:	4628      	mov	r0, r5
 8009626:	47b8      	blx	r7
 8009628:	3001      	adds	r0, #1
 800962a:	d1be      	bne.n	80095aa <_printf_float+0x32a>
 800962c:	e689      	b.n	8009342 <_printf_float+0xc2>
 800962e:	9a05      	ldr	r2, [sp, #20]
 8009630:	464b      	mov	r3, r9
 8009632:	4442      	add	r2, r8
 8009634:	4631      	mov	r1, r6
 8009636:	4628      	mov	r0, r5
 8009638:	47b8      	blx	r7
 800963a:	3001      	adds	r0, #1
 800963c:	d1c1      	bne.n	80095c2 <_printf_float+0x342>
 800963e:	e680      	b.n	8009342 <_printf_float+0xc2>
 8009640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009642:	2a01      	cmp	r2, #1
 8009644:	dc01      	bgt.n	800964a <_printf_float+0x3ca>
 8009646:	07db      	lsls	r3, r3, #31
 8009648:	d538      	bpl.n	80096bc <_printf_float+0x43c>
 800964a:	2301      	movs	r3, #1
 800964c:	4642      	mov	r2, r8
 800964e:	4631      	mov	r1, r6
 8009650:	4628      	mov	r0, r5
 8009652:	47b8      	blx	r7
 8009654:	3001      	adds	r0, #1
 8009656:	f43f ae74 	beq.w	8009342 <_printf_float+0xc2>
 800965a:	ee18 3a10 	vmov	r3, s16
 800965e:	4652      	mov	r2, sl
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f ae6b 	beq.w	8009342 <_printf_float+0xc2>
 800966c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009670:	2200      	movs	r2, #0
 8009672:	2300      	movs	r3, #0
 8009674:	f7f7 fa90 	bl	8000b98 <__aeabi_dcmpeq>
 8009678:	b9d8      	cbnz	r0, 80096b2 <_printf_float+0x432>
 800967a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800967c:	f108 0201 	add.w	r2, r8, #1
 8009680:	3b01      	subs	r3, #1
 8009682:	4631      	mov	r1, r6
 8009684:	4628      	mov	r0, r5
 8009686:	47b8      	blx	r7
 8009688:	3001      	adds	r0, #1
 800968a:	d10e      	bne.n	80096aa <_printf_float+0x42a>
 800968c:	e659      	b.n	8009342 <_printf_float+0xc2>
 800968e:	2301      	movs	r3, #1
 8009690:	4652      	mov	r2, sl
 8009692:	4631      	mov	r1, r6
 8009694:	4628      	mov	r0, r5
 8009696:	47b8      	blx	r7
 8009698:	3001      	adds	r0, #1
 800969a:	f43f ae52 	beq.w	8009342 <_printf_float+0xc2>
 800969e:	f108 0801 	add.w	r8, r8, #1
 80096a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a4:	3b01      	subs	r3, #1
 80096a6:	4543      	cmp	r3, r8
 80096a8:	dcf1      	bgt.n	800968e <_printf_float+0x40e>
 80096aa:	464b      	mov	r3, r9
 80096ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80096b0:	e6dc      	b.n	800946c <_printf_float+0x1ec>
 80096b2:	f04f 0800 	mov.w	r8, #0
 80096b6:	f104 0a1a 	add.w	sl, r4, #26
 80096ba:	e7f2      	b.n	80096a2 <_printf_float+0x422>
 80096bc:	2301      	movs	r3, #1
 80096be:	4642      	mov	r2, r8
 80096c0:	e7df      	b.n	8009682 <_printf_float+0x402>
 80096c2:	2301      	movs	r3, #1
 80096c4:	464a      	mov	r2, r9
 80096c6:	4631      	mov	r1, r6
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b8      	blx	r7
 80096cc:	3001      	adds	r0, #1
 80096ce:	f43f ae38 	beq.w	8009342 <_printf_float+0xc2>
 80096d2:	f108 0801 	add.w	r8, r8, #1
 80096d6:	68e3      	ldr	r3, [r4, #12]
 80096d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096da:	1a5b      	subs	r3, r3, r1
 80096dc:	4543      	cmp	r3, r8
 80096de:	dcf0      	bgt.n	80096c2 <_printf_float+0x442>
 80096e0:	e6fa      	b.n	80094d8 <_printf_float+0x258>
 80096e2:	f04f 0800 	mov.w	r8, #0
 80096e6:	f104 0919 	add.w	r9, r4, #25
 80096ea:	e7f4      	b.n	80096d6 <_printf_float+0x456>

080096ec <_printf_common>:
 80096ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f0:	4616      	mov	r6, r2
 80096f2:	4699      	mov	r9, r3
 80096f4:	688a      	ldr	r2, [r1, #8]
 80096f6:	690b      	ldr	r3, [r1, #16]
 80096f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096fc:	4293      	cmp	r3, r2
 80096fe:	bfb8      	it	lt
 8009700:	4613      	movlt	r3, r2
 8009702:	6033      	str	r3, [r6, #0]
 8009704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009708:	4607      	mov	r7, r0
 800970a:	460c      	mov	r4, r1
 800970c:	b10a      	cbz	r2, 8009712 <_printf_common+0x26>
 800970e:	3301      	adds	r3, #1
 8009710:	6033      	str	r3, [r6, #0]
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	0699      	lsls	r1, r3, #26
 8009716:	bf42      	ittt	mi
 8009718:	6833      	ldrmi	r3, [r6, #0]
 800971a:	3302      	addmi	r3, #2
 800971c:	6033      	strmi	r3, [r6, #0]
 800971e:	6825      	ldr	r5, [r4, #0]
 8009720:	f015 0506 	ands.w	r5, r5, #6
 8009724:	d106      	bne.n	8009734 <_printf_common+0x48>
 8009726:	f104 0a19 	add.w	sl, r4, #25
 800972a:	68e3      	ldr	r3, [r4, #12]
 800972c:	6832      	ldr	r2, [r6, #0]
 800972e:	1a9b      	subs	r3, r3, r2
 8009730:	42ab      	cmp	r3, r5
 8009732:	dc26      	bgt.n	8009782 <_printf_common+0x96>
 8009734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009738:	1e13      	subs	r3, r2, #0
 800973a:	6822      	ldr	r2, [r4, #0]
 800973c:	bf18      	it	ne
 800973e:	2301      	movne	r3, #1
 8009740:	0692      	lsls	r2, r2, #26
 8009742:	d42b      	bmi.n	800979c <_printf_common+0xb0>
 8009744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009748:	4649      	mov	r1, r9
 800974a:	4638      	mov	r0, r7
 800974c:	47c0      	blx	r8
 800974e:	3001      	adds	r0, #1
 8009750:	d01e      	beq.n	8009790 <_printf_common+0xa4>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	68e5      	ldr	r5, [r4, #12]
 8009756:	6832      	ldr	r2, [r6, #0]
 8009758:	f003 0306 	and.w	r3, r3, #6
 800975c:	2b04      	cmp	r3, #4
 800975e:	bf08      	it	eq
 8009760:	1aad      	subeq	r5, r5, r2
 8009762:	68a3      	ldr	r3, [r4, #8]
 8009764:	6922      	ldr	r2, [r4, #16]
 8009766:	bf0c      	ite	eq
 8009768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800976c:	2500      	movne	r5, #0
 800976e:	4293      	cmp	r3, r2
 8009770:	bfc4      	itt	gt
 8009772:	1a9b      	subgt	r3, r3, r2
 8009774:	18ed      	addgt	r5, r5, r3
 8009776:	2600      	movs	r6, #0
 8009778:	341a      	adds	r4, #26
 800977a:	42b5      	cmp	r5, r6
 800977c:	d11a      	bne.n	80097b4 <_printf_common+0xc8>
 800977e:	2000      	movs	r0, #0
 8009780:	e008      	b.n	8009794 <_printf_common+0xa8>
 8009782:	2301      	movs	r3, #1
 8009784:	4652      	mov	r2, sl
 8009786:	4649      	mov	r1, r9
 8009788:	4638      	mov	r0, r7
 800978a:	47c0      	blx	r8
 800978c:	3001      	adds	r0, #1
 800978e:	d103      	bne.n	8009798 <_printf_common+0xac>
 8009790:	f04f 30ff 	mov.w	r0, #4294967295
 8009794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009798:	3501      	adds	r5, #1
 800979a:	e7c6      	b.n	800972a <_printf_common+0x3e>
 800979c:	18e1      	adds	r1, r4, r3
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	2030      	movs	r0, #48	; 0x30
 80097a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097a6:	4422      	add	r2, r4
 80097a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097b0:	3302      	adds	r3, #2
 80097b2:	e7c7      	b.n	8009744 <_printf_common+0x58>
 80097b4:	2301      	movs	r3, #1
 80097b6:	4622      	mov	r2, r4
 80097b8:	4649      	mov	r1, r9
 80097ba:	4638      	mov	r0, r7
 80097bc:	47c0      	blx	r8
 80097be:	3001      	adds	r0, #1
 80097c0:	d0e6      	beq.n	8009790 <_printf_common+0xa4>
 80097c2:	3601      	adds	r6, #1
 80097c4:	e7d9      	b.n	800977a <_printf_common+0x8e>
	...

080097c8 <_printf_i>:
 80097c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097cc:	460c      	mov	r4, r1
 80097ce:	4691      	mov	r9, r2
 80097d0:	7e27      	ldrb	r7, [r4, #24]
 80097d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097d4:	2f78      	cmp	r7, #120	; 0x78
 80097d6:	4680      	mov	r8, r0
 80097d8:	469a      	mov	sl, r3
 80097da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097de:	d807      	bhi.n	80097f0 <_printf_i+0x28>
 80097e0:	2f62      	cmp	r7, #98	; 0x62
 80097e2:	d80a      	bhi.n	80097fa <_printf_i+0x32>
 80097e4:	2f00      	cmp	r7, #0
 80097e6:	f000 80d8 	beq.w	800999a <_printf_i+0x1d2>
 80097ea:	2f58      	cmp	r7, #88	; 0x58
 80097ec:	f000 80a3 	beq.w	8009936 <_printf_i+0x16e>
 80097f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80097f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097f8:	e03a      	b.n	8009870 <_printf_i+0xa8>
 80097fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097fe:	2b15      	cmp	r3, #21
 8009800:	d8f6      	bhi.n	80097f0 <_printf_i+0x28>
 8009802:	a001      	add	r0, pc, #4	; (adr r0, 8009808 <_printf_i+0x40>)
 8009804:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009808:	08009861 	.word	0x08009861
 800980c:	08009875 	.word	0x08009875
 8009810:	080097f1 	.word	0x080097f1
 8009814:	080097f1 	.word	0x080097f1
 8009818:	080097f1 	.word	0x080097f1
 800981c:	080097f1 	.word	0x080097f1
 8009820:	08009875 	.word	0x08009875
 8009824:	080097f1 	.word	0x080097f1
 8009828:	080097f1 	.word	0x080097f1
 800982c:	080097f1 	.word	0x080097f1
 8009830:	080097f1 	.word	0x080097f1
 8009834:	08009981 	.word	0x08009981
 8009838:	080098a5 	.word	0x080098a5
 800983c:	08009963 	.word	0x08009963
 8009840:	080097f1 	.word	0x080097f1
 8009844:	080097f1 	.word	0x080097f1
 8009848:	080099a3 	.word	0x080099a3
 800984c:	080097f1 	.word	0x080097f1
 8009850:	080098a5 	.word	0x080098a5
 8009854:	080097f1 	.word	0x080097f1
 8009858:	080097f1 	.word	0x080097f1
 800985c:	0800996b 	.word	0x0800996b
 8009860:	680b      	ldr	r3, [r1, #0]
 8009862:	1d1a      	adds	r2, r3, #4
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	600a      	str	r2, [r1, #0]
 8009868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800986c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009870:	2301      	movs	r3, #1
 8009872:	e0a3      	b.n	80099bc <_printf_i+0x1f4>
 8009874:	6825      	ldr	r5, [r4, #0]
 8009876:	6808      	ldr	r0, [r1, #0]
 8009878:	062e      	lsls	r6, r5, #24
 800987a:	f100 0304 	add.w	r3, r0, #4
 800987e:	d50a      	bpl.n	8009896 <_printf_i+0xce>
 8009880:	6805      	ldr	r5, [r0, #0]
 8009882:	600b      	str	r3, [r1, #0]
 8009884:	2d00      	cmp	r5, #0
 8009886:	da03      	bge.n	8009890 <_printf_i+0xc8>
 8009888:	232d      	movs	r3, #45	; 0x2d
 800988a:	426d      	negs	r5, r5
 800988c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009890:	485e      	ldr	r0, [pc, #376]	; (8009a0c <_printf_i+0x244>)
 8009892:	230a      	movs	r3, #10
 8009894:	e019      	b.n	80098ca <_printf_i+0x102>
 8009896:	f015 0f40 	tst.w	r5, #64	; 0x40
 800989a:	6805      	ldr	r5, [r0, #0]
 800989c:	600b      	str	r3, [r1, #0]
 800989e:	bf18      	it	ne
 80098a0:	b22d      	sxthne	r5, r5
 80098a2:	e7ef      	b.n	8009884 <_printf_i+0xbc>
 80098a4:	680b      	ldr	r3, [r1, #0]
 80098a6:	6825      	ldr	r5, [r4, #0]
 80098a8:	1d18      	adds	r0, r3, #4
 80098aa:	6008      	str	r0, [r1, #0]
 80098ac:	0628      	lsls	r0, r5, #24
 80098ae:	d501      	bpl.n	80098b4 <_printf_i+0xec>
 80098b0:	681d      	ldr	r5, [r3, #0]
 80098b2:	e002      	b.n	80098ba <_printf_i+0xf2>
 80098b4:	0669      	lsls	r1, r5, #25
 80098b6:	d5fb      	bpl.n	80098b0 <_printf_i+0xe8>
 80098b8:	881d      	ldrh	r5, [r3, #0]
 80098ba:	4854      	ldr	r0, [pc, #336]	; (8009a0c <_printf_i+0x244>)
 80098bc:	2f6f      	cmp	r7, #111	; 0x6f
 80098be:	bf0c      	ite	eq
 80098c0:	2308      	moveq	r3, #8
 80098c2:	230a      	movne	r3, #10
 80098c4:	2100      	movs	r1, #0
 80098c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098ca:	6866      	ldr	r6, [r4, #4]
 80098cc:	60a6      	str	r6, [r4, #8]
 80098ce:	2e00      	cmp	r6, #0
 80098d0:	bfa2      	ittt	ge
 80098d2:	6821      	ldrge	r1, [r4, #0]
 80098d4:	f021 0104 	bicge.w	r1, r1, #4
 80098d8:	6021      	strge	r1, [r4, #0]
 80098da:	b90d      	cbnz	r5, 80098e0 <_printf_i+0x118>
 80098dc:	2e00      	cmp	r6, #0
 80098de:	d04d      	beq.n	800997c <_printf_i+0x1b4>
 80098e0:	4616      	mov	r6, r2
 80098e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80098e6:	fb03 5711 	mls	r7, r3, r1, r5
 80098ea:	5dc7      	ldrb	r7, [r0, r7]
 80098ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098f0:	462f      	mov	r7, r5
 80098f2:	42bb      	cmp	r3, r7
 80098f4:	460d      	mov	r5, r1
 80098f6:	d9f4      	bls.n	80098e2 <_printf_i+0x11a>
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	d10b      	bne.n	8009914 <_printf_i+0x14c>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	07df      	lsls	r7, r3, #31
 8009900:	d508      	bpl.n	8009914 <_printf_i+0x14c>
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	6861      	ldr	r1, [r4, #4]
 8009906:	4299      	cmp	r1, r3
 8009908:	bfde      	ittt	le
 800990a:	2330      	movle	r3, #48	; 0x30
 800990c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009910:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009914:	1b92      	subs	r2, r2, r6
 8009916:	6122      	str	r2, [r4, #16]
 8009918:	f8cd a000 	str.w	sl, [sp]
 800991c:	464b      	mov	r3, r9
 800991e:	aa03      	add	r2, sp, #12
 8009920:	4621      	mov	r1, r4
 8009922:	4640      	mov	r0, r8
 8009924:	f7ff fee2 	bl	80096ec <_printf_common>
 8009928:	3001      	adds	r0, #1
 800992a:	d14c      	bne.n	80099c6 <_printf_i+0x1fe>
 800992c:	f04f 30ff 	mov.w	r0, #4294967295
 8009930:	b004      	add	sp, #16
 8009932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009936:	4835      	ldr	r0, [pc, #212]	; (8009a0c <_printf_i+0x244>)
 8009938:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	680e      	ldr	r6, [r1, #0]
 8009940:	061f      	lsls	r7, r3, #24
 8009942:	f856 5b04 	ldr.w	r5, [r6], #4
 8009946:	600e      	str	r6, [r1, #0]
 8009948:	d514      	bpl.n	8009974 <_printf_i+0x1ac>
 800994a:	07d9      	lsls	r1, r3, #31
 800994c:	bf44      	itt	mi
 800994e:	f043 0320 	orrmi.w	r3, r3, #32
 8009952:	6023      	strmi	r3, [r4, #0]
 8009954:	b91d      	cbnz	r5, 800995e <_printf_i+0x196>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	f023 0320 	bic.w	r3, r3, #32
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	2310      	movs	r3, #16
 8009960:	e7b0      	b.n	80098c4 <_printf_i+0xfc>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	f043 0320 	orr.w	r3, r3, #32
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	2378      	movs	r3, #120	; 0x78
 800996c:	4828      	ldr	r0, [pc, #160]	; (8009a10 <_printf_i+0x248>)
 800996e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009972:	e7e3      	b.n	800993c <_printf_i+0x174>
 8009974:	065e      	lsls	r6, r3, #25
 8009976:	bf48      	it	mi
 8009978:	b2ad      	uxthmi	r5, r5
 800997a:	e7e6      	b.n	800994a <_printf_i+0x182>
 800997c:	4616      	mov	r6, r2
 800997e:	e7bb      	b.n	80098f8 <_printf_i+0x130>
 8009980:	680b      	ldr	r3, [r1, #0]
 8009982:	6826      	ldr	r6, [r4, #0]
 8009984:	6960      	ldr	r0, [r4, #20]
 8009986:	1d1d      	adds	r5, r3, #4
 8009988:	600d      	str	r5, [r1, #0]
 800998a:	0635      	lsls	r5, r6, #24
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	d501      	bpl.n	8009994 <_printf_i+0x1cc>
 8009990:	6018      	str	r0, [r3, #0]
 8009992:	e002      	b.n	800999a <_printf_i+0x1d2>
 8009994:	0671      	lsls	r1, r6, #25
 8009996:	d5fb      	bpl.n	8009990 <_printf_i+0x1c8>
 8009998:	8018      	strh	r0, [r3, #0]
 800999a:	2300      	movs	r3, #0
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	4616      	mov	r6, r2
 80099a0:	e7ba      	b.n	8009918 <_printf_i+0x150>
 80099a2:	680b      	ldr	r3, [r1, #0]
 80099a4:	1d1a      	adds	r2, r3, #4
 80099a6:	600a      	str	r2, [r1, #0]
 80099a8:	681e      	ldr	r6, [r3, #0]
 80099aa:	6862      	ldr	r2, [r4, #4]
 80099ac:	2100      	movs	r1, #0
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7f6 fc7e 	bl	80002b0 <memchr>
 80099b4:	b108      	cbz	r0, 80099ba <_printf_i+0x1f2>
 80099b6:	1b80      	subs	r0, r0, r6
 80099b8:	6060      	str	r0, [r4, #4]
 80099ba:	6863      	ldr	r3, [r4, #4]
 80099bc:	6123      	str	r3, [r4, #16]
 80099be:	2300      	movs	r3, #0
 80099c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c4:	e7a8      	b.n	8009918 <_printf_i+0x150>
 80099c6:	6923      	ldr	r3, [r4, #16]
 80099c8:	4632      	mov	r2, r6
 80099ca:	4649      	mov	r1, r9
 80099cc:	4640      	mov	r0, r8
 80099ce:	47d0      	blx	sl
 80099d0:	3001      	adds	r0, #1
 80099d2:	d0ab      	beq.n	800992c <_printf_i+0x164>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	079b      	lsls	r3, r3, #30
 80099d8:	d413      	bmi.n	8009a02 <_printf_i+0x23a>
 80099da:	68e0      	ldr	r0, [r4, #12]
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	4298      	cmp	r0, r3
 80099e0:	bfb8      	it	lt
 80099e2:	4618      	movlt	r0, r3
 80099e4:	e7a4      	b.n	8009930 <_printf_i+0x168>
 80099e6:	2301      	movs	r3, #1
 80099e8:	4632      	mov	r2, r6
 80099ea:	4649      	mov	r1, r9
 80099ec:	4640      	mov	r0, r8
 80099ee:	47d0      	blx	sl
 80099f0:	3001      	adds	r0, #1
 80099f2:	d09b      	beq.n	800992c <_printf_i+0x164>
 80099f4:	3501      	adds	r5, #1
 80099f6:	68e3      	ldr	r3, [r4, #12]
 80099f8:	9903      	ldr	r1, [sp, #12]
 80099fa:	1a5b      	subs	r3, r3, r1
 80099fc:	42ab      	cmp	r3, r5
 80099fe:	dcf2      	bgt.n	80099e6 <_printf_i+0x21e>
 8009a00:	e7eb      	b.n	80099da <_printf_i+0x212>
 8009a02:	2500      	movs	r5, #0
 8009a04:	f104 0619 	add.w	r6, r4, #25
 8009a08:	e7f5      	b.n	80099f6 <_printf_i+0x22e>
 8009a0a:	bf00      	nop
 8009a0c:	0801f86e 	.word	0x0801f86e
 8009a10:	0801f87f 	.word	0x0801f87f

08009a14 <siprintf>:
 8009a14:	b40e      	push	{r1, r2, r3}
 8009a16:	b500      	push	{lr}
 8009a18:	b09c      	sub	sp, #112	; 0x70
 8009a1a:	ab1d      	add	r3, sp, #116	; 0x74
 8009a1c:	9002      	str	r0, [sp, #8]
 8009a1e:	9006      	str	r0, [sp, #24]
 8009a20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a24:	4809      	ldr	r0, [pc, #36]	; (8009a4c <siprintf+0x38>)
 8009a26:	9107      	str	r1, [sp, #28]
 8009a28:	9104      	str	r1, [sp, #16]
 8009a2a:	4909      	ldr	r1, [pc, #36]	; (8009a50 <siprintf+0x3c>)
 8009a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a30:	9105      	str	r1, [sp, #20]
 8009a32:	6800      	ldr	r0, [r0, #0]
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	a902      	add	r1, sp, #8
 8009a38:	f001 fb34 	bl	800b0a4 <_svfiprintf_r>
 8009a3c:	9b02      	ldr	r3, [sp, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	b01c      	add	sp, #112	; 0x70
 8009a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a48:	b003      	add	sp, #12
 8009a4a:	4770      	bx	lr
 8009a4c:	20000010 	.word	0x20000010
 8009a50:	ffff0208 	.word	0xffff0208

08009a54 <quorem>:
 8009a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a58:	6903      	ldr	r3, [r0, #16]
 8009a5a:	690c      	ldr	r4, [r1, #16]
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	4607      	mov	r7, r0
 8009a60:	f2c0 8081 	blt.w	8009b66 <quorem+0x112>
 8009a64:	3c01      	subs	r4, #1
 8009a66:	f101 0814 	add.w	r8, r1, #20
 8009a6a:	f100 0514 	add.w	r5, r0, #20
 8009a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a88:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a8c:	d331      	bcc.n	8009af2 <quorem+0x9e>
 8009a8e:	f04f 0e00 	mov.w	lr, #0
 8009a92:	4640      	mov	r0, r8
 8009a94:	46ac      	mov	ip, r5
 8009a96:	46f2      	mov	sl, lr
 8009a98:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a9c:	b293      	uxth	r3, r2
 8009a9e:	fb06 e303 	mla	r3, r6, r3, lr
 8009aa2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	ebaa 0303 	sub.w	r3, sl, r3
 8009aac:	0c12      	lsrs	r2, r2, #16
 8009aae:	f8dc a000 	ldr.w	sl, [ip]
 8009ab2:	fb06 e202 	mla	r2, r6, r2, lr
 8009ab6:	fa13 f38a 	uxtah	r3, r3, sl
 8009aba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009abe:	fa1f fa82 	uxth.w	sl, r2
 8009ac2:	f8dc 2000 	ldr.w	r2, [ip]
 8009ac6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009aca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ad4:	4581      	cmp	r9, r0
 8009ad6:	f84c 3b04 	str.w	r3, [ip], #4
 8009ada:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ade:	d2db      	bcs.n	8009a98 <quorem+0x44>
 8009ae0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ae4:	b92b      	cbnz	r3, 8009af2 <quorem+0x9e>
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	3b04      	subs	r3, #4
 8009aea:	429d      	cmp	r5, r3
 8009aec:	461a      	mov	r2, r3
 8009aee:	d32e      	bcc.n	8009b4e <quorem+0xfa>
 8009af0:	613c      	str	r4, [r7, #16]
 8009af2:	4638      	mov	r0, r7
 8009af4:	f001 f8c0 	bl	800ac78 <__mcmp>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	db24      	blt.n	8009b46 <quorem+0xf2>
 8009afc:	3601      	adds	r6, #1
 8009afe:	4628      	mov	r0, r5
 8009b00:	f04f 0c00 	mov.w	ip, #0
 8009b04:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b08:	f8d0 e000 	ldr.w	lr, [r0]
 8009b0c:	b293      	uxth	r3, r2
 8009b0e:	ebac 0303 	sub.w	r3, ip, r3
 8009b12:	0c12      	lsrs	r2, r2, #16
 8009b14:	fa13 f38e 	uxtah	r3, r3, lr
 8009b18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009b1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b26:	45c1      	cmp	r9, r8
 8009b28:	f840 3b04 	str.w	r3, [r0], #4
 8009b2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009b30:	d2e8      	bcs.n	8009b04 <quorem+0xb0>
 8009b32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b3a:	b922      	cbnz	r2, 8009b46 <quorem+0xf2>
 8009b3c:	3b04      	subs	r3, #4
 8009b3e:	429d      	cmp	r5, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	d30a      	bcc.n	8009b5a <quorem+0x106>
 8009b44:	613c      	str	r4, [r7, #16]
 8009b46:	4630      	mov	r0, r6
 8009b48:	b003      	add	sp, #12
 8009b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4e:	6812      	ldr	r2, [r2, #0]
 8009b50:	3b04      	subs	r3, #4
 8009b52:	2a00      	cmp	r2, #0
 8009b54:	d1cc      	bne.n	8009af0 <quorem+0x9c>
 8009b56:	3c01      	subs	r4, #1
 8009b58:	e7c7      	b.n	8009aea <quorem+0x96>
 8009b5a:	6812      	ldr	r2, [r2, #0]
 8009b5c:	3b04      	subs	r3, #4
 8009b5e:	2a00      	cmp	r2, #0
 8009b60:	d1f0      	bne.n	8009b44 <quorem+0xf0>
 8009b62:	3c01      	subs	r4, #1
 8009b64:	e7eb      	b.n	8009b3e <quorem+0xea>
 8009b66:	2000      	movs	r0, #0
 8009b68:	e7ee      	b.n	8009b48 <quorem+0xf4>
 8009b6a:	0000      	movs	r0, r0
 8009b6c:	0000      	movs	r0, r0
	...

08009b70 <_dtoa_r>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	ed2d 8b02 	vpush	{d8}
 8009b78:	ec57 6b10 	vmov	r6, r7, d0
 8009b7c:	b095      	sub	sp, #84	; 0x54
 8009b7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b84:	9105      	str	r1, [sp, #20]
 8009b86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b90:	b975      	cbnz	r5, 8009bb0 <_dtoa_r+0x40>
 8009b92:	2010      	movs	r0, #16
 8009b94:	f000 fddc 	bl	800a750 <malloc>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	6260      	str	r0, [r4, #36]	; 0x24
 8009b9c:	b920      	cbnz	r0, 8009ba8 <_dtoa_r+0x38>
 8009b9e:	4bb2      	ldr	r3, [pc, #712]	; (8009e68 <_dtoa_r+0x2f8>)
 8009ba0:	21ea      	movs	r1, #234	; 0xea
 8009ba2:	48b2      	ldr	r0, [pc, #712]	; (8009e6c <_dtoa_r+0x2fc>)
 8009ba4:	f001 fb8e 	bl	800b2c4 <__assert_func>
 8009ba8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bac:	6005      	str	r5, [r0, #0]
 8009bae:	60c5      	str	r5, [r0, #12]
 8009bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bb2:	6819      	ldr	r1, [r3, #0]
 8009bb4:	b151      	cbz	r1, 8009bcc <_dtoa_r+0x5c>
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	604a      	str	r2, [r1, #4]
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4093      	lsls	r3, r2
 8009bbe:	608b      	str	r3, [r1, #8]
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f000 fe1b 	bl	800a7fc <_Bfree>
 8009bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	1e3b      	subs	r3, r7, #0
 8009bce:	bfb9      	ittee	lt
 8009bd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009bd4:	9303      	strlt	r3, [sp, #12]
 8009bd6:	2300      	movge	r3, #0
 8009bd8:	f8c8 3000 	strge.w	r3, [r8]
 8009bdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009be0:	4ba3      	ldr	r3, [pc, #652]	; (8009e70 <_dtoa_r+0x300>)
 8009be2:	bfbc      	itt	lt
 8009be4:	2201      	movlt	r2, #1
 8009be6:	f8c8 2000 	strlt.w	r2, [r8]
 8009bea:	ea33 0309 	bics.w	r3, r3, r9
 8009bee:	d11b      	bne.n	8009c28 <_dtoa_r+0xb8>
 8009bf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bfc:	4333      	orrs	r3, r6
 8009bfe:	f000 857a 	beq.w	800a6f6 <_dtoa_r+0xb86>
 8009c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c04:	b963      	cbnz	r3, 8009c20 <_dtoa_r+0xb0>
 8009c06:	4b9b      	ldr	r3, [pc, #620]	; (8009e74 <_dtoa_r+0x304>)
 8009c08:	e024      	b.n	8009c54 <_dtoa_r+0xe4>
 8009c0a:	4b9b      	ldr	r3, [pc, #620]	; (8009e78 <_dtoa_r+0x308>)
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	9800      	ldr	r0, [sp, #0]
 8009c16:	b015      	add	sp, #84	; 0x54
 8009c18:	ecbd 8b02 	vpop	{d8}
 8009c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c20:	4b94      	ldr	r3, [pc, #592]	; (8009e74 <_dtoa_r+0x304>)
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	3303      	adds	r3, #3
 8009c26:	e7f3      	b.n	8009c10 <_dtoa_r+0xa0>
 8009c28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	ec51 0b17 	vmov	r0, r1, d7
 8009c32:	2300      	movs	r3, #0
 8009c34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009c38:	f7f6 ffae 	bl	8000b98 <__aeabi_dcmpeq>
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	b158      	cbz	r0, 8009c58 <_dtoa_r+0xe8>
 8009c40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c42:	2301      	movs	r3, #1
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 8551 	beq.w	800a6f0 <_dtoa_r+0xb80>
 8009c4e:	488b      	ldr	r0, [pc, #556]	; (8009e7c <_dtoa_r+0x30c>)
 8009c50:	6018      	str	r0, [r3, #0]
 8009c52:	1e43      	subs	r3, r0, #1
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	e7dd      	b.n	8009c14 <_dtoa_r+0xa4>
 8009c58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009c5c:	aa12      	add	r2, sp, #72	; 0x48
 8009c5e:	a913      	add	r1, sp, #76	; 0x4c
 8009c60:	4620      	mov	r0, r4
 8009c62:	f001 f8ad 	bl	800adc0 <__d2b>
 8009c66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c6a:	4683      	mov	fp, r0
 8009c6c:	2d00      	cmp	r5, #0
 8009c6e:	d07c      	beq.n	8009d6a <_dtoa_r+0x1fa>
 8009c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009c76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009c7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009c82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009c86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c8a:	4b7d      	ldr	r3, [pc, #500]	; (8009e80 <_dtoa_r+0x310>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	4630      	mov	r0, r6
 8009c90:	4639      	mov	r1, r7
 8009c92:	f7f6 fb61 	bl	8000358 <__aeabi_dsub>
 8009c96:	a36e      	add	r3, pc, #440	; (adr r3, 8009e50 <_dtoa_r+0x2e0>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	f7f6 fd14 	bl	80006c8 <__aeabi_dmul>
 8009ca0:	a36d      	add	r3, pc, #436	; (adr r3, 8009e58 <_dtoa_r+0x2e8>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 fb59 	bl	800035c <__adddf3>
 8009caa:	4606      	mov	r6, r0
 8009cac:	4628      	mov	r0, r5
 8009cae:	460f      	mov	r7, r1
 8009cb0:	f7f6 fca0 	bl	80005f4 <__aeabi_i2d>
 8009cb4:	a36a      	add	r3, pc, #424	; (adr r3, 8009e60 <_dtoa_r+0x2f0>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f7f6 fd05 	bl	80006c8 <__aeabi_dmul>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	4639      	mov	r1, r7
 8009cc6:	f7f6 fb49 	bl	800035c <__adddf3>
 8009cca:	4606      	mov	r6, r0
 8009ccc:	460f      	mov	r7, r1
 8009cce:	f7f6 ffab 	bl	8000c28 <__aeabi_d2iz>
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	4682      	mov	sl, r0
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	4630      	mov	r0, r6
 8009cda:	4639      	mov	r1, r7
 8009cdc:	f7f6 ff66 	bl	8000bac <__aeabi_dcmplt>
 8009ce0:	b148      	cbz	r0, 8009cf6 <_dtoa_r+0x186>
 8009ce2:	4650      	mov	r0, sl
 8009ce4:	f7f6 fc86 	bl	80005f4 <__aeabi_i2d>
 8009ce8:	4632      	mov	r2, r6
 8009cea:	463b      	mov	r3, r7
 8009cec:	f7f6 ff54 	bl	8000b98 <__aeabi_dcmpeq>
 8009cf0:	b908      	cbnz	r0, 8009cf6 <_dtoa_r+0x186>
 8009cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cf6:	f1ba 0f16 	cmp.w	sl, #22
 8009cfa:	d854      	bhi.n	8009da6 <_dtoa_r+0x236>
 8009cfc:	4b61      	ldr	r3, [pc, #388]	; (8009e84 <_dtoa_r+0x314>)
 8009cfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d0a:	f7f6 ff4f 	bl	8000bac <__aeabi_dcmplt>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d04b      	beq.n	8009daa <_dtoa_r+0x23a>
 8009d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d16:	2300      	movs	r3, #0
 8009d18:	930e      	str	r3, [sp, #56]	; 0x38
 8009d1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d1c:	1b5d      	subs	r5, r3, r5
 8009d1e:	1e6b      	subs	r3, r5, #1
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	bf43      	ittte	mi
 8009d24:	2300      	movmi	r3, #0
 8009d26:	f1c5 0801 	rsbmi	r8, r5, #1
 8009d2a:	9304      	strmi	r3, [sp, #16]
 8009d2c:	f04f 0800 	movpl.w	r8, #0
 8009d30:	f1ba 0f00 	cmp.w	sl, #0
 8009d34:	db3b      	blt.n	8009dae <_dtoa_r+0x23e>
 8009d36:	9b04      	ldr	r3, [sp, #16]
 8009d38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009d3c:	4453      	add	r3, sl
 8009d3e:	9304      	str	r3, [sp, #16]
 8009d40:	2300      	movs	r3, #0
 8009d42:	9306      	str	r3, [sp, #24]
 8009d44:	9b05      	ldr	r3, [sp, #20]
 8009d46:	2b09      	cmp	r3, #9
 8009d48:	d869      	bhi.n	8009e1e <_dtoa_r+0x2ae>
 8009d4a:	2b05      	cmp	r3, #5
 8009d4c:	bfc4      	itt	gt
 8009d4e:	3b04      	subgt	r3, #4
 8009d50:	9305      	strgt	r3, [sp, #20]
 8009d52:	9b05      	ldr	r3, [sp, #20]
 8009d54:	f1a3 0302 	sub.w	r3, r3, #2
 8009d58:	bfcc      	ite	gt
 8009d5a:	2500      	movgt	r5, #0
 8009d5c:	2501      	movle	r5, #1
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d869      	bhi.n	8009e36 <_dtoa_r+0x2c6>
 8009d62:	e8df f003 	tbb	[pc, r3]
 8009d66:	4e2c      	.short	0x4e2c
 8009d68:	5a4c      	.short	0x5a4c
 8009d6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009d6e:	441d      	add	r5, r3
 8009d70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	bfc1      	itttt	gt
 8009d78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009d80:	fa09 f303 	lslgt.w	r3, r9, r3
 8009d84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d88:	bfda      	itte	le
 8009d8a:	f1c3 0320 	rsble	r3, r3, #32
 8009d8e:	fa06 f003 	lslle.w	r0, r6, r3
 8009d92:	4318      	orrgt	r0, r3
 8009d94:	f7f6 fc1e 	bl	80005d4 <__aeabi_ui2d>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009da0:	3d01      	subs	r5, #1
 8009da2:	9310      	str	r3, [sp, #64]	; 0x40
 8009da4:	e771      	b.n	8009c8a <_dtoa_r+0x11a>
 8009da6:	2301      	movs	r3, #1
 8009da8:	e7b6      	b.n	8009d18 <_dtoa_r+0x1a8>
 8009daa:	900e      	str	r0, [sp, #56]	; 0x38
 8009dac:	e7b5      	b.n	8009d1a <_dtoa_r+0x1aa>
 8009dae:	f1ca 0300 	rsb	r3, sl, #0
 8009db2:	9306      	str	r3, [sp, #24]
 8009db4:	2300      	movs	r3, #0
 8009db6:	eba8 080a 	sub.w	r8, r8, sl
 8009dba:	930d      	str	r3, [sp, #52]	; 0x34
 8009dbc:	e7c2      	b.n	8009d44 <_dtoa_r+0x1d4>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	9308      	str	r3, [sp, #32]
 8009dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	dc39      	bgt.n	8009e3c <_dtoa_r+0x2cc>
 8009dc8:	f04f 0901 	mov.w	r9, #1
 8009dcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009dd0:	464b      	mov	r3, r9
 8009dd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009dd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009dd8:	2200      	movs	r2, #0
 8009dda:	6042      	str	r2, [r0, #4]
 8009ddc:	2204      	movs	r2, #4
 8009dde:	f102 0614 	add.w	r6, r2, #20
 8009de2:	429e      	cmp	r6, r3
 8009de4:	6841      	ldr	r1, [r0, #4]
 8009de6:	d92f      	bls.n	8009e48 <_dtoa_r+0x2d8>
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 fcc7 	bl	800a77c <_Balloc>
 8009dee:	9000      	str	r0, [sp, #0]
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d14b      	bne.n	8009e8c <_dtoa_r+0x31c>
 8009df4:	4b24      	ldr	r3, [pc, #144]	; (8009e88 <_dtoa_r+0x318>)
 8009df6:	4602      	mov	r2, r0
 8009df8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009dfc:	e6d1      	b.n	8009ba2 <_dtoa_r+0x32>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e7de      	b.n	8009dc0 <_dtoa_r+0x250>
 8009e02:	2300      	movs	r3, #0
 8009e04:	9308      	str	r3, [sp, #32]
 8009e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e08:	eb0a 0903 	add.w	r9, sl, r3
 8009e0c:	f109 0301 	add.w	r3, r9, #1
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	9301      	str	r3, [sp, #4]
 8009e14:	bfb8      	it	lt
 8009e16:	2301      	movlt	r3, #1
 8009e18:	e7dd      	b.n	8009dd6 <_dtoa_r+0x266>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e7f2      	b.n	8009e04 <_dtoa_r+0x294>
 8009e1e:	2501      	movs	r5, #1
 8009e20:	2300      	movs	r3, #0
 8009e22:	9305      	str	r3, [sp, #20]
 8009e24:	9508      	str	r5, [sp, #32]
 8009e26:	f04f 39ff 	mov.w	r9, #4294967295
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e30:	2312      	movs	r3, #18
 8009e32:	9209      	str	r2, [sp, #36]	; 0x24
 8009e34:	e7cf      	b.n	8009dd6 <_dtoa_r+0x266>
 8009e36:	2301      	movs	r3, #1
 8009e38:	9308      	str	r3, [sp, #32]
 8009e3a:	e7f4      	b.n	8009e26 <_dtoa_r+0x2b6>
 8009e3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009e40:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e44:	464b      	mov	r3, r9
 8009e46:	e7c6      	b.n	8009dd6 <_dtoa_r+0x266>
 8009e48:	3101      	adds	r1, #1
 8009e4a:	6041      	str	r1, [r0, #4]
 8009e4c:	0052      	lsls	r2, r2, #1
 8009e4e:	e7c6      	b.n	8009dde <_dtoa_r+0x26e>
 8009e50:	636f4361 	.word	0x636f4361
 8009e54:	3fd287a7 	.word	0x3fd287a7
 8009e58:	8b60c8b3 	.word	0x8b60c8b3
 8009e5c:	3fc68a28 	.word	0x3fc68a28
 8009e60:	509f79fb 	.word	0x509f79fb
 8009e64:	3fd34413 	.word	0x3fd34413
 8009e68:	0801f89d 	.word	0x0801f89d
 8009e6c:	0801f8b4 	.word	0x0801f8b4
 8009e70:	7ff00000 	.word	0x7ff00000
 8009e74:	0801f899 	.word	0x0801f899
 8009e78:	0801f890 	.word	0x0801f890
 8009e7c:	0801f86d 	.word	0x0801f86d
 8009e80:	3ff80000 	.word	0x3ff80000
 8009e84:	0801f9b0 	.word	0x0801f9b0
 8009e88:	0801f913 	.word	0x0801f913
 8009e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e8e:	9a00      	ldr	r2, [sp, #0]
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	9b01      	ldr	r3, [sp, #4]
 8009e94:	2b0e      	cmp	r3, #14
 8009e96:	f200 80ad 	bhi.w	8009ff4 <_dtoa_r+0x484>
 8009e9a:	2d00      	cmp	r5, #0
 8009e9c:	f000 80aa 	beq.w	8009ff4 <_dtoa_r+0x484>
 8009ea0:	f1ba 0f00 	cmp.w	sl, #0
 8009ea4:	dd36      	ble.n	8009f14 <_dtoa_r+0x3a4>
 8009ea6:	4ac3      	ldr	r2, [pc, #780]	; (800a1b4 <_dtoa_r+0x644>)
 8009ea8:	f00a 030f 	and.w	r3, sl, #15
 8009eac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009eb0:	ed93 7b00 	vldr	d7, [r3]
 8009eb4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009eb8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009ebc:	eeb0 8a47 	vmov.f32	s16, s14
 8009ec0:	eef0 8a67 	vmov.f32	s17, s15
 8009ec4:	d016      	beq.n	8009ef4 <_dtoa_r+0x384>
 8009ec6:	4bbc      	ldr	r3, [pc, #752]	; (800a1b8 <_dtoa_r+0x648>)
 8009ec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ed0:	f7f6 fd24 	bl	800091c <__aeabi_ddiv>
 8009ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed8:	f007 070f 	and.w	r7, r7, #15
 8009edc:	2503      	movs	r5, #3
 8009ede:	4eb6      	ldr	r6, [pc, #728]	; (800a1b8 <_dtoa_r+0x648>)
 8009ee0:	b957      	cbnz	r7, 8009ef8 <_dtoa_r+0x388>
 8009ee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ee6:	ec53 2b18 	vmov	r2, r3, d8
 8009eea:	f7f6 fd17 	bl	800091c <__aeabi_ddiv>
 8009eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef2:	e029      	b.n	8009f48 <_dtoa_r+0x3d8>
 8009ef4:	2502      	movs	r5, #2
 8009ef6:	e7f2      	b.n	8009ede <_dtoa_r+0x36e>
 8009ef8:	07f9      	lsls	r1, r7, #31
 8009efa:	d508      	bpl.n	8009f0e <_dtoa_r+0x39e>
 8009efc:	ec51 0b18 	vmov	r0, r1, d8
 8009f00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f04:	f7f6 fbe0 	bl	80006c8 <__aeabi_dmul>
 8009f08:	ec41 0b18 	vmov	d8, r0, r1
 8009f0c:	3501      	adds	r5, #1
 8009f0e:	107f      	asrs	r7, r7, #1
 8009f10:	3608      	adds	r6, #8
 8009f12:	e7e5      	b.n	8009ee0 <_dtoa_r+0x370>
 8009f14:	f000 80a6 	beq.w	800a064 <_dtoa_r+0x4f4>
 8009f18:	f1ca 0600 	rsb	r6, sl, #0
 8009f1c:	4ba5      	ldr	r3, [pc, #660]	; (800a1b4 <_dtoa_r+0x644>)
 8009f1e:	4fa6      	ldr	r7, [pc, #664]	; (800a1b8 <_dtoa_r+0x648>)
 8009f20:	f006 020f 	and.w	r2, r6, #15
 8009f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f30:	f7f6 fbca 	bl	80006c8 <__aeabi_dmul>
 8009f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f38:	1136      	asrs	r6, r6, #4
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	2502      	movs	r5, #2
 8009f3e:	2e00      	cmp	r6, #0
 8009f40:	f040 8085 	bne.w	800a04e <_dtoa_r+0x4de>
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1d2      	bne.n	8009eee <_dtoa_r+0x37e>
 8009f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 808c 	beq.w	800a068 <_dtoa_r+0x4f8>
 8009f50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f54:	4b99      	ldr	r3, [pc, #612]	; (800a1bc <_dtoa_r+0x64c>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 fe26 	bl	8000bac <__aeabi_dcmplt>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	f000 8081 	beq.w	800a068 <_dtoa_r+0x4f8>
 8009f66:	9b01      	ldr	r3, [sp, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d07d      	beq.n	800a068 <_dtoa_r+0x4f8>
 8009f6c:	f1b9 0f00 	cmp.w	r9, #0
 8009f70:	dd3c      	ble.n	8009fec <_dtoa_r+0x47c>
 8009f72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009f76:	9307      	str	r3, [sp, #28]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4b91      	ldr	r3, [pc, #580]	; (800a1c0 <_dtoa_r+0x650>)
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	4639      	mov	r1, r7
 8009f80:	f7f6 fba2 	bl	80006c8 <__aeabi_dmul>
 8009f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f88:	3501      	adds	r5, #1
 8009f8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009f8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f92:	4628      	mov	r0, r5
 8009f94:	f7f6 fb2e 	bl	80005f4 <__aeabi_i2d>
 8009f98:	4632      	mov	r2, r6
 8009f9a:	463b      	mov	r3, r7
 8009f9c:	f7f6 fb94 	bl	80006c8 <__aeabi_dmul>
 8009fa0:	4b88      	ldr	r3, [pc, #544]	; (800a1c4 <_dtoa_r+0x654>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f7f6 f9da 	bl	800035c <__adddf3>
 8009fa8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fb0:	9303      	str	r3, [sp, #12]
 8009fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d15c      	bne.n	800a072 <_dtoa_r+0x502>
 8009fb8:	4b83      	ldr	r3, [pc, #524]	; (800a1c8 <_dtoa_r+0x658>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	f7f6 f9ca 	bl	8000358 <__aeabi_dsub>
 8009fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fc8:	4606      	mov	r6, r0
 8009fca:	460f      	mov	r7, r1
 8009fcc:	f7f6 fe0c 	bl	8000be8 <__aeabi_dcmpgt>
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	f040 8296 	bne.w	800a502 <_dtoa_r+0x992>
 8009fd6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fe0:	4639      	mov	r1, r7
 8009fe2:	f7f6 fde3 	bl	8000bac <__aeabi_dcmplt>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f040 8288 	bne.w	800a4fc <_dtoa_r+0x98c>
 8009fec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ff0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f2c0 8158 	blt.w	800a2ac <_dtoa_r+0x73c>
 8009ffc:	f1ba 0f0e 	cmp.w	sl, #14
 800a000:	f300 8154 	bgt.w	800a2ac <_dtoa_r+0x73c>
 800a004:	4b6b      	ldr	r3, [pc, #428]	; (800a1b4 <_dtoa_r+0x644>)
 800a006:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a00a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	2b00      	cmp	r3, #0
 800a012:	f280 80e3 	bge.w	800a1dc <_dtoa_r+0x66c>
 800a016:	9b01      	ldr	r3, [sp, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f300 80df 	bgt.w	800a1dc <_dtoa_r+0x66c>
 800a01e:	f040 826d 	bne.w	800a4fc <_dtoa_r+0x98c>
 800a022:	4b69      	ldr	r3, [pc, #420]	; (800a1c8 <_dtoa_r+0x658>)
 800a024:	2200      	movs	r2, #0
 800a026:	4640      	mov	r0, r8
 800a028:	4649      	mov	r1, r9
 800a02a:	f7f6 fb4d 	bl	80006c8 <__aeabi_dmul>
 800a02e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a032:	f7f6 fdcf 	bl	8000bd4 <__aeabi_dcmpge>
 800a036:	9e01      	ldr	r6, [sp, #4]
 800a038:	4637      	mov	r7, r6
 800a03a:	2800      	cmp	r0, #0
 800a03c:	f040 8243 	bne.w	800a4c6 <_dtoa_r+0x956>
 800a040:	9d00      	ldr	r5, [sp, #0]
 800a042:	2331      	movs	r3, #49	; 0x31
 800a044:	f805 3b01 	strb.w	r3, [r5], #1
 800a048:	f10a 0a01 	add.w	sl, sl, #1
 800a04c:	e23f      	b.n	800a4ce <_dtoa_r+0x95e>
 800a04e:	07f2      	lsls	r2, r6, #31
 800a050:	d505      	bpl.n	800a05e <_dtoa_r+0x4ee>
 800a052:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a056:	f7f6 fb37 	bl	80006c8 <__aeabi_dmul>
 800a05a:	3501      	adds	r5, #1
 800a05c:	2301      	movs	r3, #1
 800a05e:	1076      	asrs	r6, r6, #1
 800a060:	3708      	adds	r7, #8
 800a062:	e76c      	b.n	8009f3e <_dtoa_r+0x3ce>
 800a064:	2502      	movs	r5, #2
 800a066:	e76f      	b.n	8009f48 <_dtoa_r+0x3d8>
 800a068:	9b01      	ldr	r3, [sp, #4]
 800a06a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a06e:	930c      	str	r3, [sp, #48]	; 0x30
 800a070:	e78d      	b.n	8009f8e <_dtoa_r+0x41e>
 800a072:	9900      	ldr	r1, [sp, #0]
 800a074:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a078:	4b4e      	ldr	r3, [pc, #312]	; (800a1b4 <_dtoa_r+0x644>)
 800a07a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a07e:	4401      	add	r1, r0
 800a080:	9102      	str	r1, [sp, #8]
 800a082:	9908      	ldr	r1, [sp, #32]
 800a084:	eeb0 8a47 	vmov.f32	s16, s14
 800a088:	eef0 8a67 	vmov.f32	s17, s15
 800a08c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a090:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a094:	2900      	cmp	r1, #0
 800a096:	d045      	beq.n	800a124 <_dtoa_r+0x5b4>
 800a098:	494c      	ldr	r1, [pc, #304]	; (800a1cc <_dtoa_r+0x65c>)
 800a09a:	2000      	movs	r0, #0
 800a09c:	f7f6 fc3e 	bl	800091c <__aeabi_ddiv>
 800a0a0:	ec53 2b18 	vmov	r2, r3, d8
 800a0a4:	f7f6 f958 	bl	8000358 <__aeabi_dsub>
 800a0a8:	9d00      	ldr	r5, [sp, #0]
 800a0aa:	ec41 0b18 	vmov	d8, r0, r1
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	f7f6 fdb9 	bl	8000c28 <__aeabi_d2iz>
 800a0b6:	900c      	str	r0, [sp, #48]	; 0x30
 800a0b8:	f7f6 fa9c 	bl	80005f4 <__aeabi_i2d>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	f7f6 f948 	bl	8000358 <__aeabi_dsub>
 800a0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ca:	3330      	adds	r3, #48	; 0x30
 800a0cc:	f805 3b01 	strb.w	r3, [r5], #1
 800a0d0:	ec53 2b18 	vmov	r2, r3, d8
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	460f      	mov	r7, r1
 800a0d8:	f7f6 fd68 	bl	8000bac <__aeabi_dcmplt>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d165      	bne.n	800a1ac <_dtoa_r+0x63c>
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	463b      	mov	r3, r7
 800a0e4:	4935      	ldr	r1, [pc, #212]	; (800a1bc <_dtoa_r+0x64c>)
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	f7f6 f936 	bl	8000358 <__aeabi_dsub>
 800a0ec:	ec53 2b18 	vmov	r2, r3, d8
 800a0f0:	f7f6 fd5c 	bl	8000bac <__aeabi_dcmplt>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f040 80b9 	bne.w	800a26c <_dtoa_r+0x6fc>
 800a0fa:	9b02      	ldr	r3, [sp, #8]
 800a0fc:	429d      	cmp	r5, r3
 800a0fe:	f43f af75 	beq.w	8009fec <_dtoa_r+0x47c>
 800a102:	4b2f      	ldr	r3, [pc, #188]	; (800a1c0 <_dtoa_r+0x650>)
 800a104:	ec51 0b18 	vmov	r0, r1, d8
 800a108:	2200      	movs	r2, #0
 800a10a:	f7f6 fadd 	bl	80006c8 <__aeabi_dmul>
 800a10e:	4b2c      	ldr	r3, [pc, #176]	; (800a1c0 <_dtoa_r+0x650>)
 800a110:	ec41 0b18 	vmov	d8, r0, r1
 800a114:	2200      	movs	r2, #0
 800a116:	4630      	mov	r0, r6
 800a118:	4639      	mov	r1, r7
 800a11a:	f7f6 fad5 	bl	80006c8 <__aeabi_dmul>
 800a11e:	4606      	mov	r6, r0
 800a120:	460f      	mov	r7, r1
 800a122:	e7c4      	b.n	800a0ae <_dtoa_r+0x53e>
 800a124:	ec51 0b17 	vmov	r0, r1, d7
 800a128:	f7f6 face 	bl	80006c8 <__aeabi_dmul>
 800a12c:	9b02      	ldr	r3, [sp, #8]
 800a12e:	9d00      	ldr	r5, [sp, #0]
 800a130:	930c      	str	r3, [sp, #48]	; 0x30
 800a132:	ec41 0b18 	vmov	d8, r0, r1
 800a136:	4639      	mov	r1, r7
 800a138:	4630      	mov	r0, r6
 800a13a:	f7f6 fd75 	bl	8000c28 <__aeabi_d2iz>
 800a13e:	9011      	str	r0, [sp, #68]	; 0x44
 800a140:	f7f6 fa58 	bl	80005f4 <__aeabi_i2d>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4630      	mov	r0, r6
 800a14a:	4639      	mov	r1, r7
 800a14c:	f7f6 f904 	bl	8000358 <__aeabi_dsub>
 800a150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a152:	3330      	adds	r3, #48	; 0x30
 800a154:	f805 3b01 	strb.w	r3, [r5], #1
 800a158:	9b02      	ldr	r3, [sp, #8]
 800a15a:	429d      	cmp	r5, r3
 800a15c:	4606      	mov	r6, r0
 800a15e:	460f      	mov	r7, r1
 800a160:	f04f 0200 	mov.w	r2, #0
 800a164:	d134      	bne.n	800a1d0 <_dtoa_r+0x660>
 800a166:	4b19      	ldr	r3, [pc, #100]	; (800a1cc <_dtoa_r+0x65c>)
 800a168:	ec51 0b18 	vmov	r0, r1, d8
 800a16c:	f7f6 f8f6 	bl	800035c <__adddf3>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4630      	mov	r0, r6
 800a176:	4639      	mov	r1, r7
 800a178:	f7f6 fd36 	bl	8000be8 <__aeabi_dcmpgt>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d175      	bne.n	800a26c <_dtoa_r+0x6fc>
 800a180:	ec53 2b18 	vmov	r2, r3, d8
 800a184:	4911      	ldr	r1, [pc, #68]	; (800a1cc <_dtoa_r+0x65c>)
 800a186:	2000      	movs	r0, #0
 800a188:	f7f6 f8e6 	bl	8000358 <__aeabi_dsub>
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	4630      	mov	r0, r6
 800a192:	4639      	mov	r1, r7
 800a194:	f7f6 fd0a 	bl	8000bac <__aeabi_dcmplt>
 800a198:	2800      	cmp	r0, #0
 800a19a:	f43f af27 	beq.w	8009fec <_dtoa_r+0x47c>
 800a19e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1a0:	1e6b      	subs	r3, r5, #1
 800a1a2:	930c      	str	r3, [sp, #48]	; 0x30
 800a1a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1a8:	2b30      	cmp	r3, #48	; 0x30
 800a1aa:	d0f8      	beq.n	800a19e <_dtoa_r+0x62e>
 800a1ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a1b0:	e04a      	b.n	800a248 <_dtoa_r+0x6d8>
 800a1b2:	bf00      	nop
 800a1b4:	0801f9b0 	.word	0x0801f9b0
 800a1b8:	0801f988 	.word	0x0801f988
 800a1bc:	3ff00000 	.word	0x3ff00000
 800a1c0:	40240000 	.word	0x40240000
 800a1c4:	401c0000 	.word	0x401c0000
 800a1c8:	40140000 	.word	0x40140000
 800a1cc:	3fe00000 	.word	0x3fe00000
 800a1d0:	4baf      	ldr	r3, [pc, #700]	; (800a490 <_dtoa_r+0x920>)
 800a1d2:	f7f6 fa79 	bl	80006c8 <__aeabi_dmul>
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	460f      	mov	r7, r1
 800a1da:	e7ac      	b.n	800a136 <_dtoa_r+0x5c6>
 800a1dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a1e0:	9d00      	ldr	r5, [sp, #0]
 800a1e2:	4642      	mov	r2, r8
 800a1e4:	464b      	mov	r3, r9
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	f7f6 fb97 	bl	800091c <__aeabi_ddiv>
 800a1ee:	f7f6 fd1b 	bl	8000c28 <__aeabi_d2iz>
 800a1f2:	9002      	str	r0, [sp, #8]
 800a1f4:	f7f6 f9fe 	bl	80005f4 <__aeabi_i2d>
 800a1f8:	4642      	mov	r2, r8
 800a1fa:	464b      	mov	r3, r9
 800a1fc:	f7f6 fa64 	bl	80006c8 <__aeabi_dmul>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4630      	mov	r0, r6
 800a206:	4639      	mov	r1, r7
 800a208:	f7f6 f8a6 	bl	8000358 <__aeabi_dsub>
 800a20c:	9e02      	ldr	r6, [sp, #8]
 800a20e:	9f01      	ldr	r7, [sp, #4]
 800a210:	3630      	adds	r6, #48	; 0x30
 800a212:	f805 6b01 	strb.w	r6, [r5], #1
 800a216:	9e00      	ldr	r6, [sp, #0]
 800a218:	1bae      	subs	r6, r5, r6
 800a21a:	42b7      	cmp	r7, r6
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	d137      	bne.n	800a292 <_dtoa_r+0x722>
 800a222:	f7f6 f89b 	bl	800035c <__adddf3>
 800a226:	4642      	mov	r2, r8
 800a228:	464b      	mov	r3, r9
 800a22a:	4606      	mov	r6, r0
 800a22c:	460f      	mov	r7, r1
 800a22e:	f7f6 fcdb 	bl	8000be8 <__aeabi_dcmpgt>
 800a232:	b9c8      	cbnz	r0, 800a268 <_dtoa_r+0x6f8>
 800a234:	4642      	mov	r2, r8
 800a236:	464b      	mov	r3, r9
 800a238:	4630      	mov	r0, r6
 800a23a:	4639      	mov	r1, r7
 800a23c:	f7f6 fcac 	bl	8000b98 <__aeabi_dcmpeq>
 800a240:	b110      	cbz	r0, 800a248 <_dtoa_r+0x6d8>
 800a242:	9b02      	ldr	r3, [sp, #8]
 800a244:	07d9      	lsls	r1, r3, #31
 800a246:	d40f      	bmi.n	800a268 <_dtoa_r+0x6f8>
 800a248:	4620      	mov	r0, r4
 800a24a:	4659      	mov	r1, fp
 800a24c:	f000 fad6 	bl	800a7fc <_Bfree>
 800a250:	2300      	movs	r3, #0
 800a252:	702b      	strb	r3, [r5, #0]
 800a254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a256:	f10a 0001 	add.w	r0, sl, #1
 800a25a:	6018      	str	r0, [r3, #0]
 800a25c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f43f acd8 	beq.w	8009c14 <_dtoa_r+0xa4>
 800a264:	601d      	str	r5, [r3, #0]
 800a266:	e4d5      	b.n	8009c14 <_dtoa_r+0xa4>
 800a268:	f8cd a01c 	str.w	sl, [sp, #28]
 800a26c:	462b      	mov	r3, r5
 800a26e:	461d      	mov	r5, r3
 800a270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a274:	2a39      	cmp	r2, #57	; 0x39
 800a276:	d108      	bne.n	800a28a <_dtoa_r+0x71a>
 800a278:	9a00      	ldr	r2, [sp, #0]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d1f7      	bne.n	800a26e <_dtoa_r+0x6fe>
 800a27e:	9a07      	ldr	r2, [sp, #28]
 800a280:	9900      	ldr	r1, [sp, #0]
 800a282:	3201      	adds	r2, #1
 800a284:	9207      	str	r2, [sp, #28]
 800a286:	2230      	movs	r2, #48	; 0x30
 800a288:	700a      	strb	r2, [r1, #0]
 800a28a:	781a      	ldrb	r2, [r3, #0]
 800a28c:	3201      	adds	r2, #1
 800a28e:	701a      	strb	r2, [r3, #0]
 800a290:	e78c      	b.n	800a1ac <_dtoa_r+0x63c>
 800a292:	4b7f      	ldr	r3, [pc, #508]	; (800a490 <_dtoa_r+0x920>)
 800a294:	2200      	movs	r2, #0
 800a296:	f7f6 fa17 	bl	80006c8 <__aeabi_dmul>
 800a29a:	2200      	movs	r2, #0
 800a29c:	2300      	movs	r3, #0
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	f7f6 fc79 	bl	8000b98 <__aeabi_dcmpeq>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d09b      	beq.n	800a1e2 <_dtoa_r+0x672>
 800a2aa:	e7cd      	b.n	800a248 <_dtoa_r+0x6d8>
 800a2ac:	9a08      	ldr	r2, [sp, #32]
 800a2ae:	2a00      	cmp	r2, #0
 800a2b0:	f000 80c4 	beq.w	800a43c <_dtoa_r+0x8cc>
 800a2b4:	9a05      	ldr	r2, [sp, #20]
 800a2b6:	2a01      	cmp	r2, #1
 800a2b8:	f300 80a8 	bgt.w	800a40c <_dtoa_r+0x89c>
 800a2bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2be:	2a00      	cmp	r2, #0
 800a2c0:	f000 80a0 	beq.w	800a404 <_dtoa_r+0x894>
 800a2c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2c8:	9e06      	ldr	r6, [sp, #24]
 800a2ca:	4645      	mov	r5, r8
 800a2cc:	9a04      	ldr	r2, [sp, #16]
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	441a      	add	r2, r3
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	4498      	add	r8, r3
 800a2d6:	9204      	str	r2, [sp, #16]
 800a2d8:	f000 fb4c 	bl	800a974 <__i2b>
 800a2dc:	4607      	mov	r7, r0
 800a2de:	2d00      	cmp	r5, #0
 800a2e0:	dd0b      	ble.n	800a2fa <_dtoa_r+0x78a>
 800a2e2:	9b04      	ldr	r3, [sp, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	dd08      	ble.n	800a2fa <_dtoa_r+0x78a>
 800a2e8:	42ab      	cmp	r3, r5
 800a2ea:	9a04      	ldr	r2, [sp, #16]
 800a2ec:	bfa8      	it	ge
 800a2ee:	462b      	movge	r3, r5
 800a2f0:	eba8 0803 	sub.w	r8, r8, r3
 800a2f4:	1aed      	subs	r5, r5, r3
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	9304      	str	r3, [sp, #16]
 800a2fa:	9b06      	ldr	r3, [sp, #24]
 800a2fc:	b1fb      	cbz	r3, 800a33e <_dtoa_r+0x7ce>
 800a2fe:	9b08      	ldr	r3, [sp, #32]
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 809f 	beq.w	800a444 <_dtoa_r+0x8d4>
 800a306:	2e00      	cmp	r6, #0
 800a308:	dd11      	ble.n	800a32e <_dtoa_r+0x7be>
 800a30a:	4639      	mov	r1, r7
 800a30c:	4632      	mov	r2, r6
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 fbec 	bl	800aaec <__pow5mult>
 800a314:	465a      	mov	r2, fp
 800a316:	4601      	mov	r1, r0
 800a318:	4607      	mov	r7, r0
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 fb40 	bl	800a9a0 <__multiply>
 800a320:	4659      	mov	r1, fp
 800a322:	9007      	str	r0, [sp, #28]
 800a324:	4620      	mov	r0, r4
 800a326:	f000 fa69 	bl	800a7fc <_Bfree>
 800a32a:	9b07      	ldr	r3, [sp, #28]
 800a32c:	469b      	mov	fp, r3
 800a32e:	9b06      	ldr	r3, [sp, #24]
 800a330:	1b9a      	subs	r2, r3, r6
 800a332:	d004      	beq.n	800a33e <_dtoa_r+0x7ce>
 800a334:	4659      	mov	r1, fp
 800a336:	4620      	mov	r0, r4
 800a338:	f000 fbd8 	bl	800aaec <__pow5mult>
 800a33c:	4683      	mov	fp, r0
 800a33e:	2101      	movs	r1, #1
 800a340:	4620      	mov	r0, r4
 800a342:	f000 fb17 	bl	800a974 <__i2b>
 800a346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a348:	2b00      	cmp	r3, #0
 800a34a:	4606      	mov	r6, r0
 800a34c:	dd7c      	ble.n	800a448 <_dtoa_r+0x8d8>
 800a34e:	461a      	mov	r2, r3
 800a350:	4601      	mov	r1, r0
 800a352:	4620      	mov	r0, r4
 800a354:	f000 fbca 	bl	800aaec <__pow5mult>
 800a358:	9b05      	ldr	r3, [sp, #20]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	4606      	mov	r6, r0
 800a35e:	dd76      	ble.n	800a44e <_dtoa_r+0x8de>
 800a360:	2300      	movs	r3, #0
 800a362:	9306      	str	r3, [sp, #24]
 800a364:	6933      	ldr	r3, [r6, #16]
 800a366:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a36a:	6918      	ldr	r0, [r3, #16]
 800a36c:	f000 fab2 	bl	800a8d4 <__hi0bits>
 800a370:	f1c0 0020 	rsb	r0, r0, #32
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	4418      	add	r0, r3
 800a378:	f010 001f 	ands.w	r0, r0, #31
 800a37c:	f000 8086 	beq.w	800a48c <_dtoa_r+0x91c>
 800a380:	f1c0 0320 	rsb	r3, r0, #32
 800a384:	2b04      	cmp	r3, #4
 800a386:	dd7f      	ble.n	800a488 <_dtoa_r+0x918>
 800a388:	f1c0 001c 	rsb	r0, r0, #28
 800a38c:	9b04      	ldr	r3, [sp, #16]
 800a38e:	4403      	add	r3, r0
 800a390:	4480      	add	r8, r0
 800a392:	4405      	add	r5, r0
 800a394:	9304      	str	r3, [sp, #16]
 800a396:	f1b8 0f00 	cmp.w	r8, #0
 800a39a:	dd05      	ble.n	800a3a8 <_dtoa_r+0x838>
 800a39c:	4659      	mov	r1, fp
 800a39e:	4642      	mov	r2, r8
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 fbfd 	bl	800aba0 <__lshift>
 800a3a6:	4683      	mov	fp, r0
 800a3a8:	9b04      	ldr	r3, [sp, #16]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	dd05      	ble.n	800a3ba <_dtoa_r+0x84a>
 800a3ae:	4631      	mov	r1, r6
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 fbf4 	bl	800aba0 <__lshift>
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d069      	beq.n	800a494 <_dtoa_r+0x924>
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	4658      	mov	r0, fp
 800a3c4:	f000 fc58 	bl	800ac78 <__mcmp>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	da63      	bge.n	800a494 <_dtoa_r+0x924>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	4659      	mov	r1, fp
 800a3d0:	220a      	movs	r2, #10
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f000 fa34 	bl	800a840 <__multadd>
 800a3d8:	9b08      	ldr	r3, [sp, #32]
 800a3da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3de:	4683      	mov	fp, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 818f 	beq.w	800a704 <_dtoa_r+0xb94>
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	220a      	movs	r2, #10
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 fa27 	bl	800a840 <__multadd>
 800a3f2:	f1b9 0f00 	cmp.w	r9, #0
 800a3f6:	4607      	mov	r7, r0
 800a3f8:	f300 808e 	bgt.w	800a518 <_dtoa_r+0x9a8>
 800a3fc:	9b05      	ldr	r3, [sp, #20]
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	dc50      	bgt.n	800a4a4 <_dtoa_r+0x934>
 800a402:	e089      	b.n	800a518 <_dtoa_r+0x9a8>
 800a404:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a40a:	e75d      	b.n	800a2c8 <_dtoa_r+0x758>
 800a40c:	9b01      	ldr	r3, [sp, #4]
 800a40e:	1e5e      	subs	r6, r3, #1
 800a410:	9b06      	ldr	r3, [sp, #24]
 800a412:	42b3      	cmp	r3, r6
 800a414:	bfbf      	itttt	lt
 800a416:	9b06      	ldrlt	r3, [sp, #24]
 800a418:	9606      	strlt	r6, [sp, #24]
 800a41a:	1af2      	sublt	r2, r6, r3
 800a41c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a41e:	bfb6      	itet	lt
 800a420:	189b      	addlt	r3, r3, r2
 800a422:	1b9e      	subge	r6, r3, r6
 800a424:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a426:	9b01      	ldr	r3, [sp, #4]
 800a428:	bfb8      	it	lt
 800a42a:	2600      	movlt	r6, #0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bfb5      	itete	lt
 800a430:	eba8 0503 	sublt.w	r5, r8, r3
 800a434:	9b01      	ldrge	r3, [sp, #4]
 800a436:	2300      	movlt	r3, #0
 800a438:	4645      	movge	r5, r8
 800a43a:	e747      	b.n	800a2cc <_dtoa_r+0x75c>
 800a43c:	9e06      	ldr	r6, [sp, #24]
 800a43e:	9f08      	ldr	r7, [sp, #32]
 800a440:	4645      	mov	r5, r8
 800a442:	e74c      	b.n	800a2de <_dtoa_r+0x76e>
 800a444:	9a06      	ldr	r2, [sp, #24]
 800a446:	e775      	b.n	800a334 <_dtoa_r+0x7c4>
 800a448:	9b05      	ldr	r3, [sp, #20]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	dc18      	bgt.n	800a480 <_dtoa_r+0x910>
 800a44e:	9b02      	ldr	r3, [sp, #8]
 800a450:	b9b3      	cbnz	r3, 800a480 <_dtoa_r+0x910>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a458:	b9a3      	cbnz	r3, 800a484 <_dtoa_r+0x914>
 800a45a:	9b03      	ldr	r3, [sp, #12]
 800a45c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a460:	0d1b      	lsrs	r3, r3, #20
 800a462:	051b      	lsls	r3, r3, #20
 800a464:	b12b      	cbz	r3, 800a472 <_dtoa_r+0x902>
 800a466:	9b04      	ldr	r3, [sp, #16]
 800a468:	3301      	adds	r3, #1
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	f108 0801 	add.w	r8, r8, #1
 800a470:	2301      	movs	r3, #1
 800a472:	9306      	str	r3, [sp, #24]
 800a474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a476:	2b00      	cmp	r3, #0
 800a478:	f47f af74 	bne.w	800a364 <_dtoa_r+0x7f4>
 800a47c:	2001      	movs	r0, #1
 800a47e:	e779      	b.n	800a374 <_dtoa_r+0x804>
 800a480:	2300      	movs	r3, #0
 800a482:	e7f6      	b.n	800a472 <_dtoa_r+0x902>
 800a484:	9b02      	ldr	r3, [sp, #8]
 800a486:	e7f4      	b.n	800a472 <_dtoa_r+0x902>
 800a488:	d085      	beq.n	800a396 <_dtoa_r+0x826>
 800a48a:	4618      	mov	r0, r3
 800a48c:	301c      	adds	r0, #28
 800a48e:	e77d      	b.n	800a38c <_dtoa_r+0x81c>
 800a490:	40240000 	.word	0x40240000
 800a494:	9b01      	ldr	r3, [sp, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	dc38      	bgt.n	800a50c <_dtoa_r+0x99c>
 800a49a:	9b05      	ldr	r3, [sp, #20]
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	dd35      	ble.n	800a50c <_dtoa_r+0x99c>
 800a4a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a4a4:	f1b9 0f00 	cmp.w	r9, #0
 800a4a8:	d10d      	bne.n	800a4c6 <_dtoa_r+0x956>
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	464b      	mov	r3, r9
 800a4ae:	2205      	movs	r2, #5
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 f9c5 	bl	800a840 <__multadd>
 800a4b6:	4601      	mov	r1, r0
 800a4b8:	4606      	mov	r6, r0
 800a4ba:	4658      	mov	r0, fp
 800a4bc:	f000 fbdc 	bl	800ac78 <__mcmp>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	f73f adbd 	bgt.w	800a040 <_dtoa_r+0x4d0>
 800a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c8:	9d00      	ldr	r5, [sp, #0]
 800a4ca:	ea6f 0a03 	mvn.w	sl, r3
 800a4ce:	f04f 0800 	mov.w	r8, #0
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 f991 	bl	800a7fc <_Bfree>
 800a4da:	2f00      	cmp	r7, #0
 800a4dc:	f43f aeb4 	beq.w	800a248 <_dtoa_r+0x6d8>
 800a4e0:	f1b8 0f00 	cmp.w	r8, #0
 800a4e4:	d005      	beq.n	800a4f2 <_dtoa_r+0x982>
 800a4e6:	45b8      	cmp	r8, r7
 800a4e8:	d003      	beq.n	800a4f2 <_dtoa_r+0x982>
 800a4ea:	4641      	mov	r1, r8
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f000 f985 	bl	800a7fc <_Bfree>
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 f981 	bl	800a7fc <_Bfree>
 800a4fa:	e6a5      	b.n	800a248 <_dtoa_r+0x6d8>
 800a4fc:	2600      	movs	r6, #0
 800a4fe:	4637      	mov	r7, r6
 800a500:	e7e1      	b.n	800a4c6 <_dtoa_r+0x956>
 800a502:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a504:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a508:	4637      	mov	r7, r6
 800a50a:	e599      	b.n	800a040 <_dtoa_r+0x4d0>
 800a50c:	9b08      	ldr	r3, [sp, #32]
 800a50e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 80fd 	beq.w	800a712 <_dtoa_r+0xba2>
 800a518:	2d00      	cmp	r5, #0
 800a51a:	dd05      	ble.n	800a528 <_dtoa_r+0x9b8>
 800a51c:	4639      	mov	r1, r7
 800a51e:	462a      	mov	r2, r5
 800a520:	4620      	mov	r0, r4
 800a522:	f000 fb3d 	bl	800aba0 <__lshift>
 800a526:	4607      	mov	r7, r0
 800a528:	9b06      	ldr	r3, [sp, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d05c      	beq.n	800a5e8 <_dtoa_r+0xa78>
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	4620      	mov	r0, r4
 800a532:	f000 f923 	bl	800a77c <_Balloc>
 800a536:	4605      	mov	r5, r0
 800a538:	b928      	cbnz	r0, 800a546 <_dtoa_r+0x9d6>
 800a53a:	4b80      	ldr	r3, [pc, #512]	; (800a73c <_dtoa_r+0xbcc>)
 800a53c:	4602      	mov	r2, r0
 800a53e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a542:	f7ff bb2e 	b.w	8009ba2 <_dtoa_r+0x32>
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	3202      	adds	r2, #2
 800a54a:	0092      	lsls	r2, r2, #2
 800a54c:	f107 010c 	add.w	r1, r7, #12
 800a550:	300c      	adds	r0, #12
 800a552:	f000 f905 	bl	800a760 <memcpy>
 800a556:	2201      	movs	r2, #1
 800a558:	4629      	mov	r1, r5
 800a55a:	4620      	mov	r0, r4
 800a55c:	f000 fb20 	bl	800aba0 <__lshift>
 800a560:	9b00      	ldr	r3, [sp, #0]
 800a562:	3301      	adds	r3, #1
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	9b00      	ldr	r3, [sp, #0]
 800a568:	444b      	add	r3, r9
 800a56a:	9307      	str	r3, [sp, #28]
 800a56c:	9b02      	ldr	r3, [sp, #8]
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	46b8      	mov	r8, r7
 800a574:	9306      	str	r3, [sp, #24]
 800a576:	4607      	mov	r7, r0
 800a578:	9b01      	ldr	r3, [sp, #4]
 800a57a:	4631      	mov	r1, r6
 800a57c:	3b01      	subs	r3, #1
 800a57e:	4658      	mov	r0, fp
 800a580:	9302      	str	r3, [sp, #8]
 800a582:	f7ff fa67 	bl	8009a54 <quorem>
 800a586:	4603      	mov	r3, r0
 800a588:	3330      	adds	r3, #48	; 0x30
 800a58a:	9004      	str	r0, [sp, #16]
 800a58c:	4641      	mov	r1, r8
 800a58e:	4658      	mov	r0, fp
 800a590:	9308      	str	r3, [sp, #32]
 800a592:	f000 fb71 	bl	800ac78 <__mcmp>
 800a596:	463a      	mov	r2, r7
 800a598:	4681      	mov	r9, r0
 800a59a:	4631      	mov	r1, r6
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 fb87 	bl	800acb0 <__mdiff>
 800a5a2:	68c2      	ldr	r2, [r0, #12]
 800a5a4:	9b08      	ldr	r3, [sp, #32]
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	bb02      	cbnz	r2, 800a5ec <_dtoa_r+0xa7c>
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	4658      	mov	r0, fp
 800a5ae:	f000 fb63 	bl	800ac78 <__mcmp>
 800a5b2:	9b08      	ldr	r3, [sp, #32]
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a5be:	f000 f91d 	bl	800a7fc <_Bfree>
 800a5c2:	9b05      	ldr	r3, [sp, #20]
 800a5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5c6:	9d01      	ldr	r5, [sp, #4]
 800a5c8:	ea43 0102 	orr.w	r1, r3, r2
 800a5cc:	9b06      	ldr	r3, [sp, #24]
 800a5ce:	430b      	orrs	r3, r1
 800a5d0:	9b08      	ldr	r3, [sp, #32]
 800a5d2:	d10d      	bne.n	800a5f0 <_dtoa_r+0xa80>
 800a5d4:	2b39      	cmp	r3, #57	; 0x39
 800a5d6:	d029      	beq.n	800a62c <_dtoa_r+0xabc>
 800a5d8:	f1b9 0f00 	cmp.w	r9, #0
 800a5dc:	dd01      	ble.n	800a5e2 <_dtoa_r+0xa72>
 800a5de:	9b04      	ldr	r3, [sp, #16]
 800a5e0:	3331      	adds	r3, #49	; 0x31
 800a5e2:	9a02      	ldr	r2, [sp, #8]
 800a5e4:	7013      	strb	r3, [r2, #0]
 800a5e6:	e774      	b.n	800a4d2 <_dtoa_r+0x962>
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	e7b9      	b.n	800a560 <_dtoa_r+0x9f0>
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	e7e2      	b.n	800a5b6 <_dtoa_r+0xa46>
 800a5f0:	f1b9 0f00 	cmp.w	r9, #0
 800a5f4:	db06      	blt.n	800a604 <_dtoa_r+0xa94>
 800a5f6:	9905      	ldr	r1, [sp, #20]
 800a5f8:	ea41 0909 	orr.w	r9, r1, r9
 800a5fc:	9906      	ldr	r1, [sp, #24]
 800a5fe:	ea59 0101 	orrs.w	r1, r9, r1
 800a602:	d120      	bne.n	800a646 <_dtoa_r+0xad6>
 800a604:	2a00      	cmp	r2, #0
 800a606:	ddec      	ble.n	800a5e2 <_dtoa_r+0xa72>
 800a608:	4659      	mov	r1, fp
 800a60a:	2201      	movs	r2, #1
 800a60c:	4620      	mov	r0, r4
 800a60e:	9301      	str	r3, [sp, #4]
 800a610:	f000 fac6 	bl	800aba0 <__lshift>
 800a614:	4631      	mov	r1, r6
 800a616:	4683      	mov	fp, r0
 800a618:	f000 fb2e 	bl	800ac78 <__mcmp>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	9b01      	ldr	r3, [sp, #4]
 800a620:	dc02      	bgt.n	800a628 <_dtoa_r+0xab8>
 800a622:	d1de      	bne.n	800a5e2 <_dtoa_r+0xa72>
 800a624:	07da      	lsls	r2, r3, #31
 800a626:	d5dc      	bpl.n	800a5e2 <_dtoa_r+0xa72>
 800a628:	2b39      	cmp	r3, #57	; 0x39
 800a62a:	d1d8      	bne.n	800a5de <_dtoa_r+0xa6e>
 800a62c:	9a02      	ldr	r2, [sp, #8]
 800a62e:	2339      	movs	r3, #57	; 0x39
 800a630:	7013      	strb	r3, [r2, #0]
 800a632:	462b      	mov	r3, r5
 800a634:	461d      	mov	r5, r3
 800a636:	3b01      	subs	r3, #1
 800a638:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a63c:	2a39      	cmp	r2, #57	; 0x39
 800a63e:	d050      	beq.n	800a6e2 <_dtoa_r+0xb72>
 800a640:	3201      	adds	r2, #1
 800a642:	701a      	strb	r2, [r3, #0]
 800a644:	e745      	b.n	800a4d2 <_dtoa_r+0x962>
 800a646:	2a00      	cmp	r2, #0
 800a648:	dd03      	ble.n	800a652 <_dtoa_r+0xae2>
 800a64a:	2b39      	cmp	r3, #57	; 0x39
 800a64c:	d0ee      	beq.n	800a62c <_dtoa_r+0xabc>
 800a64e:	3301      	adds	r3, #1
 800a650:	e7c7      	b.n	800a5e2 <_dtoa_r+0xa72>
 800a652:	9a01      	ldr	r2, [sp, #4]
 800a654:	9907      	ldr	r1, [sp, #28]
 800a656:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a65a:	428a      	cmp	r2, r1
 800a65c:	d02a      	beq.n	800a6b4 <_dtoa_r+0xb44>
 800a65e:	4659      	mov	r1, fp
 800a660:	2300      	movs	r3, #0
 800a662:	220a      	movs	r2, #10
 800a664:	4620      	mov	r0, r4
 800a666:	f000 f8eb 	bl	800a840 <__multadd>
 800a66a:	45b8      	cmp	r8, r7
 800a66c:	4683      	mov	fp, r0
 800a66e:	f04f 0300 	mov.w	r3, #0
 800a672:	f04f 020a 	mov.w	r2, #10
 800a676:	4641      	mov	r1, r8
 800a678:	4620      	mov	r0, r4
 800a67a:	d107      	bne.n	800a68c <_dtoa_r+0xb1c>
 800a67c:	f000 f8e0 	bl	800a840 <__multadd>
 800a680:	4680      	mov	r8, r0
 800a682:	4607      	mov	r7, r0
 800a684:	9b01      	ldr	r3, [sp, #4]
 800a686:	3301      	adds	r3, #1
 800a688:	9301      	str	r3, [sp, #4]
 800a68a:	e775      	b.n	800a578 <_dtoa_r+0xa08>
 800a68c:	f000 f8d8 	bl	800a840 <__multadd>
 800a690:	4639      	mov	r1, r7
 800a692:	4680      	mov	r8, r0
 800a694:	2300      	movs	r3, #0
 800a696:	220a      	movs	r2, #10
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 f8d1 	bl	800a840 <__multadd>
 800a69e:	4607      	mov	r7, r0
 800a6a0:	e7f0      	b.n	800a684 <_dtoa_r+0xb14>
 800a6a2:	f1b9 0f00 	cmp.w	r9, #0
 800a6a6:	9a00      	ldr	r2, [sp, #0]
 800a6a8:	bfcc      	ite	gt
 800a6aa:	464d      	movgt	r5, r9
 800a6ac:	2501      	movle	r5, #1
 800a6ae:	4415      	add	r5, r2
 800a6b0:	f04f 0800 	mov.w	r8, #0
 800a6b4:	4659      	mov	r1, fp
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	9301      	str	r3, [sp, #4]
 800a6bc:	f000 fa70 	bl	800aba0 <__lshift>
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	4683      	mov	fp, r0
 800a6c4:	f000 fad8 	bl	800ac78 <__mcmp>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	dcb2      	bgt.n	800a632 <_dtoa_r+0xac2>
 800a6cc:	d102      	bne.n	800a6d4 <_dtoa_r+0xb64>
 800a6ce:	9b01      	ldr	r3, [sp, #4]
 800a6d0:	07db      	lsls	r3, r3, #31
 800a6d2:	d4ae      	bmi.n	800a632 <_dtoa_r+0xac2>
 800a6d4:	462b      	mov	r3, r5
 800a6d6:	461d      	mov	r5, r3
 800a6d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6dc:	2a30      	cmp	r2, #48	; 0x30
 800a6de:	d0fa      	beq.n	800a6d6 <_dtoa_r+0xb66>
 800a6e0:	e6f7      	b.n	800a4d2 <_dtoa_r+0x962>
 800a6e2:	9a00      	ldr	r2, [sp, #0]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d1a5      	bne.n	800a634 <_dtoa_r+0xac4>
 800a6e8:	f10a 0a01 	add.w	sl, sl, #1
 800a6ec:	2331      	movs	r3, #49	; 0x31
 800a6ee:	e779      	b.n	800a5e4 <_dtoa_r+0xa74>
 800a6f0:	4b13      	ldr	r3, [pc, #76]	; (800a740 <_dtoa_r+0xbd0>)
 800a6f2:	f7ff baaf 	b.w	8009c54 <_dtoa_r+0xe4>
 800a6f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f47f aa86 	bne.w	8009c0a <_dtoa_r+0x9a>
 800a6fe:	4b11      	ldr	r3, [pc, #68]	; (800a744 <_dtoa_r+0xbd4>)
 800a700:	f7ff baa8 	b.w	8009c54 <_dtoa_r+0xe4>
 800a704:	f1b9 0f00 	cmp.w	r9, #0
 800a708:	dc03      	bgt.n	800a712 <_dtoa_r+0xba2>
 800a70a:	9b05      	ldr	r3, [sp, #20]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	f73f aec9 	bgt.w	800a4a4 <_dtoa_r+0x934>
 800a712:	9d00      	ldr	r5, [sp, #0]
 800a714:	4631      	mov	r1, r6
 800a716:	4658      	mov	r0, fp
 800a718:	f7ff f99c 	bl	8009a54 <quorem>
 800a71c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a720:	f805 3b01 	strb.w	r3, [r5], #1
 800a724:	9a00      	ldr	r2, [sp, #0]
 800a726:	1aaa      	subs	r2, r5, r2
 800a728:	4591      	cmp	r9, r2
 800a72a:	ddba      	ble.n	800a6a2 <_dtoa_r+0xb32>
 800a72c:	4659      	mov	r1, fp
 800a72e:	2300      	movs	r3, #0
 800a730:	220a      	movs	r2, #10
 800a732:	4620      	mov	r0, r4
 800a734:	f000 f884 	bl	800a840 <__multadd>
 800a738:	4683      	mov	fp, r0
 800a73a:	e7eb      	b.n	800a714 <_dtoa_r+0xba4>
 800a73c:	0801f913 	.word	0x0801f913
 800a740:	0801f86c 	.word	0x0801f86c
 800a744:	0801f890 	.word	0x0801f890

0800a748 <_localeconv_r>:
 800a748:	4800      	ldr	r0, [pc, #0]	; (800a74c <_localeconv_r+0x4>)
 800a74a:	4770      	bx	lr
 800a74c:	20000164 	.word	0x20000164

0800a750 <malloc>:
 800a750:	4b02      	ldr	r3, [pc, #8]	; (800a75c <malloc+0xc>)
 800a752:	4601      	mov	r1, r0
 800a754:	6818      	ldr	r0, [r3, #0]
 800a756:	f000 bbef 	b.w	800af38 <_malloc_r>
 800a75a:	bf00      	nop
 800a75c:	20000010 	.word	0x20000010

0800a760 <memcpy>:
 800a760:	440a      	add	r2, r1
 800a762:	4291      	cmp	r1, r2
 800a764:	f100 33ff 	add.w	r3, r0, #4294967295
 800a768:	d100      	bne.n	800a76c <memcpy+0xc>
 800a76a:	4770      	bx	lr
 800a76c:	b510      	push	{r4, lr}
 800a76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a772:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a776:	4291      	cmp	r1, r2
 800a778:	d1f9      	bne.n	800a76e <memcpy+0xe>
 800a77a:	bd10      	pop	{r4, pc}

0800a77c <_Balloc>:
 800a77c:	b570      	push	{r4, r5, r6, lr}
 800a77e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a780:	4604      	mov	r4, r0
 800a782:	460d      	mov	r5, r1
 800a784:	b976      	cbnz	r6, 800a7a4 <_Balloc+0x28>
 800a786:	2010      	movs	r0, #16
 800a788:	f7ff ffe2 	bl	800a750 <malloc>
 800a78c:	4602      	mov	r2, r0
 800a78e:	6260      	str	r0, [r4, #36]	; 0x24
 800a790:	b920      	cbnz	r0, 800a79c <_Balloc+0x20>
 800a792:	4b18      	ldr	r3, [pc, #96]	; (800a7f4 <_Balloc+0x78>)
 800a794:	4818      	ldr	r0, [pc, #96]	; (800a7f8 <_Balloc+0x7c>)
 800a796:	2166      	movs	r1, #102	; 0x66
 800a798:	f000 fd94 	bl	800b2c4 <__assert_func>
 800a79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7a0:	6006      	str	r6, [r0, #0]
 800a7a2:	60c6      	str	r6, [r0, #12]
 800a7a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7a6:	68f3      	ldr	r3, [r6, #12]
 800a7a8:	b183      	cbz	r3, 800a7cc <_Balloc+0x50>
 800a7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7b2:	b9b8      	cbnz	r0, 800a7e4 <_Balloc+0x68>
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	fa01 f605 	lsl.w	r6, r1, r5
 800a7ba:	1d72      	adds	r2, r6, #5
 800a7bc:	0092      	lsls	r2, r2, #2
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 fb5a 	bl	800ae78 <_calloc_r>
 800a7c4:	b160      	cbz	r0, 800a7e0 <_Balloc+0x64>
 800a7c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7ca:	e00e      	b.n	800a7ea <_Balloc+0x6e>
 800a7cc:	2221      	movs	r2, #33	; 0x21
 800a7ce:	2104      	movs	r1, #4
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f000 fb51 	bl	800ae78 <_calloc_r>
 800a7d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7d8:	60f0      	str	r0, [r6, #12]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1e4      	bne.n	800a7aa <_Balloc+0x2e>
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	bd70      	pop	{r4, r5, r6, pc}
 800a7e4:	6802      	ldr	r2, [r0, #0]
 800a7e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7f0:	e7f7      	b.n	800a7e2 <_Balloc+0x66>
 800a7f2:	bf00      	nop
 800a7f4:	0801f89d 	.word	0x0801f89d
 800a7f8:	0801f924 	.word	0x0801f924

0800a7fc <_Bfree>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a800:	4605      	mov	r5, r0
 800a802:	460c      	mov	r4, r1
 800a804:	b976      	cbnz	r6, 800a824 <_Bfree+0x28>
 800a806:	2010      	movs	r0, #16
 800a808:	f7ff ffa2 	bl	800a750 <malloc>
 800a80c:	4602      	mov	r2, r0
 800a80e:	6268      	str	r0, [r5, #36]	; 0x24
 800a810:	b920      	cbnz	r0, 800a81c <_Bfree+0x20>
 800a812:	4b09      	ldr	r3, [pc, #36]	; (800a838 <_Bfree+0x3c>)
 800a814:	4809      	ldr	r0, [pc, #36]	; (800a83c <_Bfree+0x40>)
 800a816:	218a      	movs	r1, #138	; 0x8a
 800a818:	f000 fd54 	bl	800b2c4 <__assert_func>
 800a81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a820:	6006      	str	r6, [r0, #0]
 800a822:	60c6      	str	r6, [r0, #12]
 800a824:	b13c      	cbz	r4, 800a836 <_Bfree+0x3a>
 800a826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a828:	6862      	ldr	r2, [r4, #4]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a830:	6021      	str	r1, [r4, #0]
 800a832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a836:	bd70      	pop	{r4, r5, r6, pc}
 800a838:	0801f89d 	.word	0x0801f89d
 800a83c:	0801f924 	.word	0x0801f924

0800a840 <__multadd>:
 800a840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a844:	690e      	ldr	r6, [r1, #16]
 800a846:	4607      	mov	r7, r0
 800a848:	4698      	mov	r8, r3
 800a84a:	460c      	mov	r4, r1
 800a84c:	f101 0014 	add.w	r0, r1, #20
 800a850:	2300      	movs	r3, #0
 800a852:	6805      	ldr	r5, [r0, #0]
 800a854:	b2a9      	uxth	r1, r5
 800a856:	fb02 8101 	mla	r1, r2, r1, r8
 800a85a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a85e:	0c2d      	lsrs	r5, r5, #16
 800a860:	fb02 c505 	mla	r5, r2, r5, ip
 800a864:	b289      	uxth	r1, r1
 800a866:	3301      	adds	r3, #1
 800a868:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a86c:	429e      	cmp	r6, r3
 800a86e:	f840 1b04 	str.w	r1, [r0], #4
 800a872:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a876:	dcec      	bgt.n	800a852 <__multadd+0x12>
 800a878:	f1b8 0f00 	cmp.w	r8, #0
 800a87c:	d022      	beq.n	800a8c4 <__multadd+0x84>
 800a87e:	68a3      	ldr	r3, [r4, #8]
 800a880:	42b3      	cmp	r3, r6
 800a882:	dc19      	bgt.n	800a8b8 <__multadd+0x78>
 800a884:	6861      	ldr	r1, [r4, #4]
 800a886:	4638      	mov	r0, r7
 800a888:	3101      	adds	r1, #1
 800a88a:	f7ff ff77 	bl	800a77c <_Balloc>
 800a88e:	4605      	mov	r5, r0
 800a890:	b928      	cbnz	r0, 800a89e <__multadd+0x5e>
 800a892:	4602      	mov	r2, r0
 800a894:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <__multadd+0x8c>)
 800a896:	480e      	ldr	r0, [pc, #56]	; (800a8d0 <__multadd+0x90>)
 800a898:	21b5      	movs	r1, #181	; 0xb5
 800a89a:	f000 fd13 	bl	800b2c4 <__assert_func>
 800a89e:	6922      	ldr	r2, [r4, #16]
 800a8a0:	3202      	adds	r2, #2
 800a8a2:	f104 010c 	add.w	r1, r4, #12
 800a8a6:	0092      	lsls	r2, r2, #2
 800a8a8:	300c      	adds	r0, #12
 800a8aa:	f7ff ff59 	bl	800a760 <memcpy>
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7ff ffa3 	bl	800a7fc <_Bfree>
 800a8b6:	462c      	mov	r4, r5
 800a8b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a8bc:	3601      	adds	r6, #1
 800a8be:	f8c3 8014 	str.w	r8, [r3, #20]
 800a8c2:	6126      	str	r6, [r4, #16]
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ca:	bf00      	nop
 800a8cc:	0801f913 	.word	0x0801f913
 800a8d0:	0801f924 	.word	0x0801f924

0800a8d4 <__hi0bits>:
 800a8d4:	0c03      	lsrs	r3, r0, #16
 800a8d6:	041b      	lsls	r3, r3, #16
 800a8d8:	b9d3      	cbnz	r3, 800a910 <__hi0bits+0x3c>
 800a8da:	0400      	lsls	r0, r0, #16
 800a8dc:	2310      	movs	r3, #16
 800a8de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8e2:	bf04      	itt	eq
 800a8e4:	0200      	lsleq	r0, r0, #8
 800a8e6:	3308      	addeq	r3, #8
 800a8e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8ec:	bf04      	itt	eq
 800a8ee:	0100      	lsleq	r0, r0, #4
 800a8f0:	3304      	addeq	r3, #4
 800a8f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8f6:	bf04      	itt	eq
 800a8f8:	0080      	lsleq	r0, r0, #2
 800a8fa:	3302      	addeq	r3, #2
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	db05      	blt.n	800a90c <__hi0bits+0x38>
 800a900:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a904:	f103 0301 	add.w	r3, r3, #1
 800a908:	bf08      	it	eq
 800a90a:	2320      	moveq	r3, #32
 800a90c:	4618      	mov	r0, r3
 800a90e:	4770      	bx	lr
 800a910:	2300      	movs	r3, #0
 800a912:	e7e4      	b.n	800a8de <__hi0bits+0xa>

0800a914 <__lo0bits>:
 800a914:	6803      	ldr	r3, [r0, #0]
 800a916:	f013 0207 	ands.w	r2, r3, #7
 800a91a:	4601      	mov	r1, r0
 800a91c:	d00b      	beq.n	800a936 <__lo0bits+0x22>
 800a91e:	07da      	lsls	r2, r3, #31
 800a920:	d424      	bmi.n	800a96c <__lo0bits+0x58>
 800a922:	0798      	lsls	r0, r3, #30
 800a924:	bf49      	itett	mi
 800a926:	085b      	lsrmi	r3, r3, #1
 800a928:	089b      	lsrpl	r3, r3, #2
 800a92a:	2001      	movmi	r0, #1
 800a92c:	600b      	strmi	r3, [r1, #0]
 800a92e:	bf5c      	itt	pl
 800a930:	600b      	strpl	r3, [r1, #0]
 800a932:	2002      	movpl	r0, #2
 800a934:	4770      	bx	lr
 800a936:	b298      	uxth	r0, r3
 800a938:	b9b0      	cbnz	r0, 800a968 <__lo0bits+0x54>
 800a93a:	0c1b      	lsrs	r3, r3, #16
 800a93c:	2010      	movs	r0, #16
 800a93e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a942:	bf04      	itt	eq
 800a944:	0a1b      	lsreq	r3, r3, #8
 800a946:	3008      	addeq	r0, #8
 800a948:	071a      	lsls	r2, r3, #28
 800a94a:	bf04      	itt	eq
 800a94c:	091b      	lsreq	r3, r3, #4
 800a94e:	3004      	addeq	r0, #4
 800a950:	079a      	lsls	r2, r3, #30
 800a952:	bf04      	itt	eq
 800a954:	089b      	lsreq	r3, r3, #2
 800a956:	3002      	addeq	r0, #2
 800a958:	07da      	lsls	r2, r3, #31
 800a95a:	d403      	bmi.n	800a964 <__lo0bits+0x50>
 800a95c:	085b      	lsrs	r3, r3, #1
 800a95e:	f100 0001 	add.w	r0, r0, #1
 800a962:	d005      	beq.n	800a970 <__lo0bits+0x5c>
 800a964:	600b      	str	r3, [r1, #0]
 800a966:	4770      	bx	lr
 800a968:	4610      	mov	r0, r2
 800a96a:	e7e8      	b.n	800a93e <__lo0bits+0x2a>
 800a96c:	2000      	movs	r0, #0
 800a96e:	4770      	bx	lr
 800a970:	2020      	movs	r0, #32
 800a972:	4770      	bx	lr

0800a974 <__i2b>:
 800a974:	b510      	push	{r4, lr}
 800a976:	460c      	mov	r4, r1
 800a978:	2101      	movs	r1, #1
 800a97a:	f7ff feff 	bl	800a77c <_Balloc>
 800a97e:	4602      	mov	r2, r0
 800a980:	b928      	cbnz	r0, 800a98e <__i2b+0x1a>
 800a982:	4b05      	ldr	r3, [pc, #20]	; (800a998 <__i2b+0x24>)
 800a984:	4805      	ldr	r0, [pc, #20]	; (800a99c <__i2b+0x28>)
 800a986:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a98a:	f000 fc9b 	bl	800b2c4 <__assert_func>
 800a98e:	2301      	movs	r3, #1
 800a990:	6144      	str	r4, [r0, #20]
 800a992:	6103      	str	r3, [r0, #16]
 800a994:	bd10      	pop	{r4, pc}
 800a996:	bf00      	nop
 800a998:	0801f913 	.word	0x0801f913
 800a99c:	0801f924 	.word	0x0801f924

0800a9a0 <__multiply>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	4614      	mov	r4, r2
 800a9a6:	690a      	ldr	r2, [r1, #16]
 800a9a8:	6923      	ldr	r3, [r4, #16]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	bfb8      	it	lt
 800a9ae:	460b      	movlt	r3, r1
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	bfbc      	itt	lt
 800a9b4:	4625      	movlt	r5, r4
 800a9b6:	461c      	movlt	r4, r3
 800a9b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a9bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a9c0:	68ab      	ldr	r3, [r5, #8]
 800a9c2:	6869      	ldr	r1, [r5, #4]
 800a9c4:	eb0a 0709 	add.w	r7, sl, r9
 800a9c8:	42bb      	cmp	r3, r7
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	bfb8      	it	lt
 800a9ce:	3101      	addlt	r1, #1
 800a9d0:	f7ff fed4 	bl	800a77c <_Balloc>
 800a9d4:	b930      	cbnz	r0, 800a9e4 <__multiply+0x44>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	4b42      	ldr	r3, [pc, #264]	; (800aae4 <__multiply+0x144>)
 800a9da:	4843      	ldr	r0, [pc, #268]	; (800aae8 <__multiply+0x148>)
 800a9dc:	f240 115d 	movw	r1, #349	; 0x15d
 800a9e0:	f000 fc70 	bl	800b2c4 <__assert_func>
 800a9e4:	f100 0614 	add.w	r6, r0, #20
 800a9e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a9ec:	4633      	mov	r3, r6
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	4543      	cmp	r3, r8
 800a9f2:	d31e      	bcc.n	800aa32 <__multiply+0x92>
 800a9f4:	f105 0c14 	add.w	ip, r5, #20
 800a9f8:	f104 0314 	add.w	r3, r4, #20
 800a9fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800aa00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800aa04:	9202      	str	r2, [sp, #8]
 800aa06:	ebac 0205 	sub.w	r2, ip, r5
 800aa0a:	3a15      	subs	r2, #21
 800aa0c:	f022 0203 	bic.w	r2, r2, #3
 800aa10:	3204      	adds	r2, #4
 800aa12:	f105 0115 	add.w	r1, r5, #21
 800aa16:	458c      	cmp	ip, r1
 800aa18:	bf38      	it	cc
 800aa1a:	2204      	movcc	r2, #4
 800aa1c:	9201      	str	r2, [sp, #4]
 800aa1e:	9a02      	ldr	r2, [sp, #8]
 800aa20:	9303      	str	r3, [sp, #12]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d808      	bhi.n	800aa38 <__multiply+0x98>
 800aa26:	2f00      	cmp	r7, #0
 800aa28:	dc55      	bgt.n	800aad6 <__multiply+0x136>
 800aa2a:	6107      	str	r7, [r0, #16]
 800aa2c:	b005      	add	sp, #20
 800aa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa32:	f843 2b04 	str.w	r2, [r3], #4
 800aa36:	e7db      	b.n	800a9f0 <__multiply+0x50>
 800aa38:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa3c:	f1ba 0f00 	cmp.w	sl, #0
 800aa40:	d020      	beq.n	800aa84 <__multiply+0xe4>
 800aa42:	f105 0e14 	add.w	lr, r5, #20
 800aa46:	46b1      	mov	r9, r6
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aa4e:	f8d9 b000 	ldr.w	fp, [r9]
 800aa52:	b2a1      	uxth	r1, r4
 800aa54:	fa1f fb8b 	uxth.w	fp, fp
 800aa58:	fb0a b101 	mla	r1, sl, r1, fp
 800aa5c:	4411      	add	r1, r2
 800aa5e:	f8d9 2000 	ldr.w	r2, [r9]
 800aa62:	0c24      	lsrs	r4, r4, #16
 800aa64:	0c12      	lsrs	r2, r2, #16
 800aa66:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa6e:	b289      	uxth	r1, r1
 800aa70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa74:	45f4      	cmp	ip, lr
 800aa76:	f849 1b04 	str.w	r1, [r9], #4
 800aa7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa7e:	d8e4      	bhi.n	800aa4a <__multiply+0xaa>
 800aa80:	9901      	ldr	r1, [sp, #4]
 800aa82:	5072      	str	r2, [r6, r1]
 800aa84:	9a03      	ldr	r2, [sp, #12]
 800aa86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	f1b9 0f00 	cmp.w	r9, #0
 800aa90:	d01f      	beq.n	800aad2 <__multiply+0x132>
 800aa92:	6834      	ldr	r4, [r6, #0]
 800aa94:	f105 0114 	add.w	r1, r5, #20
 800aa98:	46b6      	mov	lr, r6
 800aa9a:	f04f 0a00 	mov.w	sl, #0
 800aa9e:	880a      	ldrh	r2, [r1, #0]
 800aaa0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aaa4:	fb09 b202 	mla	r2, r9, r2, fp
 800aaa8:	4492      	add	sl, r2
 800aaaa:	b2a4      	uxth	r4, r4
 800aaac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aab0:	f84e 4b04 	str.w	r4, [lr], #4
 800aab4:	f851 4b04 	ldr.w	r4, [r1], #4
 800aab8:	f8be 2000 	ldrh.w	r2, [lr]
 800aabc:	0c24      	lsrs	r4, r4, #16
 800aabe:	fb09 2404 	mla	r4, r9, r4, r2
 800aac2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aac6:	458c      	cmp	ip, r1
 800aac8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aacc:	d8e7      	bhi.n	800aa9e <__multiply+0xfe>
 800aace:	9a01      	ldr	r2, [sp, #4]
 800aad0:	50b4      	str	r4, [r6, r2]
 800aad2:	3604      	adds	r6, #4
 800aad4:	e7a3      	b.n	800aa1e <__multiply+0x7e>
 800aad6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1a5      	bne.n	800aa2a <__multiply+0x8a>
 800aade:	3f01      	subs	r7, #1
 800aae0:	e7a1      	b.n	800aa26 <__multiply+0x86>
 800aae2:	bf00      	nop
 800aae4:	0801f913 	.word	0x0801f913
 800aae8:	0801f924 	.word	0x0801f924

0800aaec <__pow5mult>:
 800aaec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf0:	4615      	mov	r5, r2
 800aaf2:	f012 0203 	ands.w	r2, r2, #3
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	460f      	mov	r7, r1
 800aafa:	d007      	beq.n	800ab0c <__pow5mult+0x20>
 800aafc:	4c25      	ldr	r4, [pc, #148]	; (800ab94 <__pow5mult+0xa8>)
 800aafe:	3a01      	subs	r2, #1
 800ab00:	2300      	movs	r3, #0
 800ab02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab06:	f7ff fe9b 	bl	800a840 <__multadd>
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	10ad      	asrs	r5, r5, #2
 800ab0e:	d03d      	beq.n	800ab8c <__pow5mult+0xa0>
 800ab10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab12:	b97c      	cbnz	r4, 800ab34 <__pow5mult+0x48>
 800ab14:	2010      	movs	r0, #16
 800ab16:	f7ff fe1b 	bl	800a750 <malloc>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	6270      	str	r0, [r6, #36]	; 0x24
 800ab1e:	b928      	cbnz	r0, 800ab2c <__pow5mult+0x40>
 800ab20:	4b1d      	ldr	r3, [pc, #116]	; (800ab98 <__pow5mult+0xac>)
 800ab22:	481e      	ldr	r0, [pc, #120]	; (800ab9c <__pow5mult+0xb0>)
 800ab24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab28:	f000 fbcc 	bl	800b2c4 <__assert_func>
 800ab2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab30:	6004      	str	r4, [r0, #0]
 800ab32:	60c4      	str	r4, [r0, #12]
 800ab34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab3c:	b94c      	cbnz	r4, 800ab52 <__pow5mult+0x66>
 800ab3e:	f240 2171 	movw	r1, #625	; 0x271
 800ab42:	4630      	mov	r0, r6
 800ab44:	f7ff ff16 	bl	800a974 <__i2b>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab4e:	4604      	mov	r4, r0
 800ab50:	6003      	str	r3, [r0, #0]
 800ab52:	f04f 0900 	mov.w	r9, #0
 800ab56:	07eb      	lsls	r3, r5, #31
 800ab58:	d50a      	bpl.n	800ab70 <__pow5mult+0x84>
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7ff ff1e 	bl	800a9a0 <__multiply>
 800ab64:	4639      	mov	r1, r7
 800ab66:	4680      	mov	r8, r0
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7ff fe47 	bl	800a7fc <_Bfree>
 800ab6e:	4647      	mov	r7, r8
 800ab70:	106d      	asrs	r5, r5, #1
 800ab72:	d00b      	beq.n	800ab8c <__pow5mult+0xa0>
 800ab74:	6820      	ldr	r0, [r4, #0]
 800ab76:	b938      	cbnz	r0, 800ab88 <__pow5mult+0x9c>
 800ab78:	4622      	mov	r2, r4
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7ff ff0f 	bl	800a9a0 <__multiply>
 800ab82:	6020      	str	r0, [r4, #0]
 800ab84:	f8c0 9000 	str.w	r9, [r0]
 800ab88:	4604      	mov	r4, r0
 800ab8a:	e7e4      	b.n	800ab56 <__pow5mult+0x6a>
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab92:	bf00      	nop
 800ab94:	0801fa78 	.word	0x0801fa78
 800ab98:	0801f89d 	.word	0x0801f89d
 800ab9c:	0801f924 	.word	0x0801f924

0800aba0 <__lshift>:
 800aba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba4:	460c      	mov	r4, r1
 800aba6:	6849      	ldr	r1, [r1, #4]
 800aba8:	6923      	ldr	r3, [r4, #16]
 800abaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abae:	68a3      	ldr	r3, [r4, #8]
 800abb0:	4607      	mov	r7, r0
 800abb2:	4691      	mov	r9, r2
 800abb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abb8:	f108 0601 	add.w	r6, r8, #1
 800abbc:	42b3      	cmp	r3, r6
 800abbe:	db0b      	blt.n	800abd8 <__lshift+0x38>
 800abc0:	4638      	mov	r0, r7
 800abc2:	f7ff fddb 	bl	800a77c <_Balloc>
 800abc6:	4605      	mov	r5, r0
 800abc8:	b948      	cbnz	r0, 800abde <__lshift+0x3e>
 800abca:	4602      	mov	r2, r0
 800abcc:	4b28      	ldr	r3, [pc, #160]	; (800ac70 <__lshift+0xd0>)
 800abce:	4829      	ldr	r0, [pc, #164]	; (800ac74 <__lshift+0xd4>)
 800abd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800abd4:	f000 fb76 	bl	800b2c4 <__assert_func>
 800abd8:	3101      	adds	r1, #1
 800abda:	005b      	lsls	r3, r3, #1
 800abdc:	e7ee      	b.n	800abbc <__lshift+0x1c>
 800abde:	2300      	movs	r3, #0
 800abe0:	f100 0114 	add.w	r1, r0, #20
 800abe4:	f100 0210 	add.w	r2, r0, #16
 800abe8:	4618      	mov	r0, r3
 800abea:	4553      	cmp	r3, sl
 800abec:	db33      	blt.n	800ac56 <__lshift+0xb6>
 800abee:	6920      	ldr	r0, [r4, #16]
 800abf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abf4:	f104 0314 	add.w	r3, r4, #20
 800abf8:	f019 091f 	ands.w	r9, r9, #31
 800abfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac04:	d02b      	beq.n	800ac5e <__lshift+0xbe>
 800ac06:	f1c9 0e20 	rsb	lr, r9, #32
 800ac0a:	468a      	mov	sl, r1
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	6818      	ldr	r0, [r3, #0]
 800ac10:	fa00 f009 	lsl.w	r0, r0, r9
 800ac14:	4302      	orrs	r2, r0
 800ac16:	f84a 2b04 	str.w	r2, [sl], #4
 800ac1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac1e:	459c      	cmp	ip, r3
 800ac20:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac24:	d8f3      	bhi.n	800ac0e <__lshift+0x6e>
 800ac26:	ebac 0304 	sub.w	r3, ip, r4
 800ac2a:	3b15      	subs	r3, #21
 800ac2c:	f023 0303 	bic.w	r3, r3, #3
 800ac30:	3304      	adds	r3, #4
 800ac32:	f104 0015 	add.w	r0, r4, #21
 800ac36:	4584      	cmp	ip, r0
 800ac38:	bf38      	it	cc
 800ac3a:	2304      	movcc	r3, #4
 800ac3c:	50ca      	str	r2, [r1, r3]
 800ac3e:	b10a      	cbz	r2, 800ac44 <__lshift+0xa4>
 800ac40:	f108 0602 	add.w	r6, r8, #2
 800ac44:	3e01      	subs	r6, #1
 800ac46:	4638      	mov	r0, r7
 800ac48:	612e      	str	r6, [r5, #16]
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	f7ff fdd6 	bl	800a7fc <_Bfree>
 800ac50:	4628      	mov	r0, r5
 800ac52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac56:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	e7c5      	b.n	800abea <__lshift+0x4a>
 800ac5e:	3904      	subs	r1, #4
 800ac60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac64:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac68:	459c      	cmp	ip, r3
 800ac6a:	d8f9      	bhi.n	800ac60 <__lshift+0xc0>
 800ac6c:	e7ea      	b.n	800ac44 <__lshift+0xa4>
 800ac6e:	bf00      	nop
 800ac70:	0801f913 	.word	0x0801f913
 800ac74:	0801f924 	.word	0x0801f924

0800ac78 <__mcmp>:
 800ac78:	b530      	push	{r4, r5, lr}
 800ac7a:	6902      	ldr	r2, [r0, #16]
 800ac7c:	690c      	ldr	r4, [r1, #16]
 800ac7e:	1b12      	subs	r2, r2, r4
 800ac80:	d10e      	bne.n	800aca0 <__mcmp+0x28>
 800ac82:	f100 0314 	add.w	r3, r0, #20
 800ac86:	3114      	adds	r1, #20
 800ac88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac98:	42a5      	cmp	r5, r4
 800ac9a:	d003      	beq.n	800aca4 <__mcmp+0x2c>
 800ac9c:	d305      	bcc.n	800acaa <__mcmp+0x32>
 800ac9e:	2201      	movs	r2, #1
 800aca0:	4610      	mov	r0, r2
 800aca2:	bd30      	pop	{r4, r5, pc}
 800aca4:	4283      	cmp	r3, r0
 800aca6:	d3f3      	bcc.n	800ac90 <__mcmp+0x18>
 800aca8:	e7fa      	b.n	800aca0 <__mcmp+0x28>
 800acaa:	f04f 32ff 	mov.w	r2, #4294967295
 800acae:	e7f7      	b.n	800aca0 <__mcmp+0x28>

0800acb0 <__mdiff>:
 800acb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	460c      	mov	r4, r1
 800acb6:	4606      	mov	r6, r0
 800acb8:	4611      	mov	r1, r2
 800acba:	4620      	mov	r0, r4
 800acbc:	4617      	mov	r7, r2
 800acbe:	f7ff ffdb 	bl	800ac78 <__mcmp>
 800acc2:	1e05      	subs	r5, r0, #0
 800acc4:	d110      	bne.n	800ace8 <__mdiff+0x38>
 800acc6:	4629      	mov	r1, r5
 800acc8:	4630      	mov	r0, r6
 800acca:	f7ff fd57 	bl	800a77c <_Balloc>
 800acce:	b930      	cbnz	r0, 800acde <__mdiff+0x2e>
 800acd0:	4b39      	ldr	r3, [pc, #228]	; (800adb8 <__mdiff+0x108>)
 800acd2:	4602      	mov	r2, r0
 800acd4:	f240 2132 	movw	r1, #562	; 0x232
 800acd8:	4838      	ldr	r0, [pc, #224]	; (800adbc <__mdiff+0x10c>)
 800acda:	f000 faf3 	bl	800b2c4 <__assert_func>
 800acde:	2301      	movs	r3, #1
 800ace0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ace4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace8:	bfa4      	itt	ge
 800acea:	463b      	movge	r3, r7
 800acec:	4627      	movge	r7, r4
 800acee:	4630      	mov	r0, r6
 800acf0:	6879      	ldr	r1, [r7, #4]
 800acf2:	bfa6      	itte	ge
 800acf4:	461c      	movge	r4, r3
 800acf6:	2500      	movge	r5, #0
 800acf8:	2501      	movlt	r5, #1
 800acfa:	f7ff fd3f 	bl	800a77c <_Balloc>
 800acfe:	b920      	cbnz	r0, 800ad0a <__mdiff+0x5a>
 800ad00:	4b2d      	ldr	r3, [pc, #180]	; (800adb8 <__mdiff+0x108>)
 800ad02:	4602      	mov	r2, r0
 800ad04:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad08:	e7e6      	b.n	800acd8 <__mdiff+0x28>
 800ad0a:	693e      	ldr	r6, [r7, #16]
 800ad0c:	60c5      	str	r5, [r0, #12]
 800ad0e:	6925      	ldr	r5, [r4, #16]
 800ad10:	f107 0114 	add.w	r1, r7, #20
 800ad14:	f104 0914 	add.w	r9, r4, #20
 800ad18:	f100 0e14 	add.w	lr, r0, #20
 800ad1c:	f107 0210 	add.w	r2, r7, #16
 800ad20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ad24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ad28:	46f2      	mov	sl, lr
 800ad2a:	2700      	movs	r7, #0
 800ad2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad34:	fa1f f883 	uxth.w	r8, r3
 800ad38:	fa17 f78b 	uxtah	r7, r7, fp
 800ad3c:	0c1b      	lsrs	r3, r3, #16
 800ad3e:	eba7 0808 	sub.w	r8, r7, r8
 800ad42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad4a:	fa1f f888 	uxth.w	r8, r8
 800ad4e:	141f      	asrs	r7, r3, #16
 800ad50:	454d      	cmp	r5, r9
 800ad52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad56:	f84a 3b04 	str.w	r3, [sl], #4
 800ad5a:	d8e7      	bhi.n	800ad2c <__mdiff+0x7c>
 800ad5c:	1b2b      	subs	r3, r5, r4
 800ad5e:	3b15      	subs	r3, #21
 800ad60:	f023 0303 	bic.w	r3, r3, #3
 800ad64:	3304      	adds	r3, #4
 800ad66:	3415      	adds	r4, #21
 800ad68:	42a5      	cmp	r5, r4
 800ad6a:	bf38      	it	cc
 800ad6c:	2304      	movcc	r3, #4
 800ad6e:	4419      	add	r1, r3
 800ad70:	4473      	add	r3, lr
 800ad72:	469e      	mov	lr, r3
 800ad74:	460d      	mov	r5, r1
 800ad76:	4565      	cmp	r5, ip
 800ad78:	d30e      	bcc.n	800ad98 <__mdiff+0xe8>
 800ad7a:	f10c 0203 	add.w	r2, ip, #3
 800ad7e:	1a52      	subs	r2, r2, r1
 800ad80:	f022 0203 	bic.w	r2, r2, #3
 800ad84:	3903      	subs	r1, #3
 800ad86:	458c      	cmp	ip, r1
 800ad88:	bf38      	it	cc
 800ad8a:	2200      	movcc	r2, #0
 800ad8c:	441a      	add	r2, r3
 800ad8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad92:	b17b      	cbz	r3, 800adb4 <__mdiff+0x104>
 800ad94:	6106      	str	r6, [r0, #16]
 800ad96:	e7a5      	b.n	800ace4 <__mdiff+0x34>
 800ad98:	f855 8b04 	ldr.w	r8, [r5], #4
 800ad9c:	fa17 f488 	uxtah	r4, r7, r8
 800ada0:	1422      	asrs	r2, r4, #16
 800ada2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ada6:	b2a4      	uxth	r4, r4
 800ada8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800adac:	f84e 4b04 	str.w	r4, [lr], #4
 800adb0:	1417      	asrs	r7, r2, #16
 800adb2:	e7e0      	b.n	800ad76 <__mdiff+0xc6>
 800adb4:	3e01      	subs	r6, #1
 800adb6:	e7ea      	b.n	800ad8e <__mdiff+0xde>
 800adb8:	0801f913 	.word	0x0801f913
 800adbc:	0801f924 	.word	0x0801f924

0800adc0 <__d2b>:
 800adc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adc4:	4689      	mov	r9, r1
 800adc6:	2101      	movs	r1, #1
 800adc8:	ec57 6b10 	vmov	r6, r7, d0
 800adcc:	4690      	mov	r8, r2
 800adce:	f7ff fcd5 	bl	800a77c <_Balloc>
 800add2:	4604      	mov	r4, r0
 800add4:	b930      	cbnz	r0, 800ade4 <__d2b+0x24>
 800add6:	4602      	mov	r2, r0
 800add8:	4b25      	ldr	r3, [pc, #148]	; (800ae70 <__d2b+0xb0>)
 800adda:	4826      	ldr	r0, [pc, #152]	; (800ae74 <__d2b+0xb4>)
 800addc:	f240 310a 	movw	r1, #778	; 0x30a
 800ade0:	f000 fa70 	bl	800b2c4 <__assert_func>
 800ade4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ade8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800adec:	bb35      	cbnz	r5, 800ae3c <__d2b+0x7c>
 800adee:	2e00      	cmp	r6, #0
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	d028      	beq.n	800ae46 <__d2b+0x86>
 800adf4:	4668      	mov	r0, sp
 800adf6:	9600      	str	r6, [sp, #0]
 800adf8:	f7ff fd8c 	bl	800a914 <__lo0bits>
 800adfc:	9900      	ldr	r1, [sp, #0]
 800adfe:	b300      	cbz	r0, 800ae42 <__d2b+0x82>
 800ae00:	9a01      	ldr	r2, [sp, #4]
 800ae02:	f1c0 0320 	rsb	r3, r0, #32
 800ae06:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0a:	430b      	orrs	r3, r1
 800ae0c:	40c2      	lsrs	r2, r0
 800ae0e:	6163      	str	r3, [r4, #20]
 800ae10:	9201      	str	r2, [sp, #4]
 800ae12:	9b01      	ldr	r3, [sp, #4]
 800ae14:	61a3      	str	r3, [r4, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bf14      	ite	ne
 800ae1a:	2202      	movne	r2, #2
 800ae1c:	2201      	moveq	r2, #1
 800ae1e:	6122      	str	r2, [r4, #16]
 800ae20:	b1d5      	cbz	r5, 800ae58 <__d2b+0x98>
 800ae22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae26:	4405      	add	r5, r0
 800ae28:	f8c9 5000 	str.w	r5, [r9]
 800ae2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae30:	f8c8 0000 	str.w	r0, [r8]
 800ae34:	4620      	mov	r0, r4
 800ae36:	b003      	add	sp, #12
 800ae38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae40:	e7d5      	b.n	800adee <__d2b+0x2e>
 800ae42:	6161      	str	r1, [r4, #20]
 800ae44:	e7e5      	b.n	800ae12 <__d2b+0x52>
 800ae46:	a801      	add	r0, sp, #4
 800ae48:	f7ff fd64 	bl	800a914 <__lo0bits>
 800ae4c:	9b01      	ldr	r3, [sp, #4]
 800ae4e:	6163      	str	r3, [r4, #20]
 800ae50:	2201      	movs	r2, #1
 800ae52:	6122      	str	r2, [r4, #16]
 800ae54:	3020      	adds	r0, #32
 800ae56:	e7e3      	b.n	800ae20 <__d2b+0x60>
 800ae58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae60:	f8c9 0000 	str.w	r0, [r9]
 800ae64:	6918      	ldr	r0, [r3, #16]
 800ae66:	f7ff fd35 	bl	800a8d4 <__hi0bits>
 800ae6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae6e:	e7df      	b.n	800ae30 <__d2b+0x70>
 800ae70:	0801f913 	.word	0x0801f913
 800ae74:	0801f924 	.word	0x0801f924

0800ae78 <_calloc_r>:
 800ae78:	b513      	push	{r0, r1, r4, lr}
 800ae7a:	434a      	muls	r2, r1
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	9201      	str	r2, [sp, #4]
 800ae80:	f000 f85a 	bl	800af38 <_malloc_r>
 800ae84:	4604      	mov	r4, r0
 800ae86:	b118      	cbz	r0, 800ae90 <_calloc_r+0x18>
 800ae88:	9a01      	ldr	r2, [sp, #4]
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	f7fe f950 	bl	8009130 <memset>
 800ae90:	4620      	mov	r0, r4
 800ae92:	b002      	add	sp, #8
 800ae94:	bd10      	pop	{r4, pc}
	...

0800ae98 <_free_r>:
 800ae98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae9a:	2900      	cmp	r1, #0
 800ae9c:	d048      	beq.n	800af30 <_free_r+0x98>
 800ae9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aea2:	9001      	str	r0, [sp, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f1a1 0404 	sub.w	r4, r1, #4
 800aeaa:	bfb8      	it	lt
 800aeac:	18e4      	addlt	r4, r4, r3
 800aeae:	f000 fa65 	bl	800b37c <__malloc_lock>
 800aeb2:	4a20      	ldr	r2, [pc, #128]	; (800af34 <_free_r+0x9c>)
 800aeb4:	9801      	ldr	r0, [sp, #4]
 800aeb6:	6813      	ldr	r3, [r2, #0]
 800aeb8:	4615      	mov	r5, r2
 800aeba:	b933      	cbnz	r3, 800aeca <_free_r+0x32>
 800aebc:	6063      	str	r3, [r4, #4]
 800aebe:	6014      	str	r4, [r2, #0]
 800aec0:	b003      	add	sp, #12
 800aec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aec6:	f000 ba5f 	b.w	800b388 <__malloc_unlock>
 800aeca:	42a3      	cmp	r3, r4
 800aecc:	d90b      	bls.n	800aee6 <_free_r+0x4e>
 800aece:	6821      	ldr	r1, [r4, #0]
 800aed0:	1862      	adds	r2, r4, r1
 800aed2:	4293      	cmp	r3, r2
 800aed4:	bf04      	itt	eq
 800aed6:	681a      	ldreq	r2, [r3, #0]
 800aed8:	685b      	ldreq	r3, [r3, #4]
 800aeda:	6063      	str	r3, [r4, #4]
 800aedc:	bf04      	itt	eq
 800aede:	1852      	addeq	r2, r2, r1
 800aee0:	6022      	streq	r2, [r4, #0]
 800aee2:	602c      	str	r4, [r5, #0]
 800aee4:	e7ec      	b.n	800aec0 <_free_r+0x28>
 800aee6:	461a      	mov	r2, r3
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	b10b      	cbz	r3, 800aef0 <_free_r+0x58>
 800aeec:	42a3      	cmp	r3, r4
 800aeee:	d9fa      	bls.n	800aee6 <_free_r+0x4e>
 800aef0:	6811      	ldr	r1, [r2, #0]
 800aef2:	1855      	adds	r5, r2, r1
 800aef4:	42a5      	cmp	r5, r4
 800aef6:	d10b      	bne.n	800af10 <_free_r+0x78>
 800aef8:	6824      	ldr	r4, [r4, #0]
 800aefa:	4421      	add	r1, r4
 800aefc:	1854      	adds	r4, r2, r1
 800aefe:	42a3      	cmp	r3, r4
 800af00:	6011      	str	r1, [r2, #0]
 800af02:	d1dd      	bne.n	800aec0 <_free_r+0x28>
 800af04:	681c      	ldr	r4, [r3, #0]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	6053      	str	r3, [r2, #4]
 800af0a:	4421      	add	r1, r4
 800af0c:	6011      	str	r1, [r2, #0]
 800af0e:	e7d7      	b.n	800aec0 <_free_r+0x28>
 800af10:	d902      	bls.n	800af18 <_free_r+0x80>
 800af12:	230c      	movs	r3, #12
 800af14:	6003      	str	r3, [r0, #0]
 800af16:	e7d3      	b.n	800aec0 <_free_r+0x28>
 800af18:	6825      	ldr	r5, [r4, #0]
 800af1a:	1961      	adds	r1, r4, r5
 800af1c:	428b      	cmp	r3, r1
 800af1e:	bf04      	itt	eq
 800af20:	6819      	ldreq	r1, [r3, #0]
 800af22:	685b      	ldreq	r3, [r3, #4]
 800af24:	6063      	str	r3, [r4, #4]
 800af26:	bf04      	itt	eq
 800af28:	1949      	addeq	r1, r1, r5
 800af2a:	6021      	streq	r1, [r4, #0]
 800af2c:	6054      	str	r4, [r2, #4]
 800af2e:	e7c7      	b.n	800aec0 <_free_r+0x28>
 800af30:	b003      	add	sp, #12
 800af32:	bd30      	pop	{r4, r5, pc}
 800af34:	20000604 	.word	0x20000604

0800af38 <_malloc_r>:
 800af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3a:	1ccd      	adds	r5, r1, #3
 800af3c:	f025 0503 	bic.w	r5, r5, #3
 800af40:	3508      	adds	r5, #8
 800af42:	2d0c      	cmp	r5, #12
 800af44:	bf38      	it	cc
 800af46:	250c      	movcc	r5, #12
 800af48:	2d00      	cmp	r5, #0
 800af4a:	4606      	mov	r6, r0
 800af4c:	db01      	blt.n	800af52 <_malloc_r+0x1a>
 800af4e:	42a9      	cmp	r1, r5
 800af50:	d903      	bls.n	800af5a <_malloc_r+0x22>
 800af52:	230c      	movs	r3, #12
 800af54:	6033      	str	r3, [r6, #0]
 800af56:	2000      	movs	r0, #0
 800af58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af5a:	f000 fa0f 	bl	800b37c <__malloc_lock>
 800af5e:	4921      	ldr	r1, [pc, #132]	; (800afe4 <_malloc_r+0xac>)
 800af60:	680a      	ldr	r2, [r1, #0]
 800af62:	4614      	mov	r4, r2
 800af64:	b99c      	cbnz	r4, 800af8e <_malloc_r+0x56>
 800af66:	4f20      	ldr	r7, [pc, #128]	; (800afe8 <_malloc_r+0xb0>)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	b923      	cbnz	r3, 800af76 <_malloc_r+0x3e>
 800af6c:	4621      	mov	r1, r4
 800af6e:	4630      	mov	r0, r6
 800af70:	f000 f998 	bl	800b2a4 <_sbrk_r>
 800af74:	6038      	str	r0, [r7, #0]
 800af76:	4629      	mov	r1, r5
 800af78:	4630      	mov	r0, r6
 800af7a:	f000 f993 	bl	800b2a4 <_sbrk_r>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	d123      	bne.n	800afca <_malloc_r+0x92>
 800af82:	230c      	movs	r3, #12
 800af84:	6033      	str	r3, [r6, #0]
 800af86:	4630      	mov	r0, r6
 800af88:	f000 f9fe 	bl	800b388 <__malloc_unlock>
 800af8c:	e7e3      	b.n	800af56 <_malloc_r+0x1e>
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	1b5b      	subs	r3, r3, r5
 800af92:	d417      	bmi.n	800afc4 <_malloc_r+0x8c>
 800af94:	2b0b      	cmp	r3, #11
 800af96:	d903      	bls.n	800afa0 <_malloc_r+0x68>
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	441c      	add	r4, r3
 800af9c:	6025      	str	r5, [r4, #0]
 800af9e:	e004      	b.n	800afaa <_malloc_r+0x72>
 800afa0:	6863      	ldr	r3, [r4, #4]
 800afa2:	42a2      	cmp	r2, r4
 800afa4:	bf0c      	ite	eq
 800afa6:	600b      	streq	r3, [r1, #0]
 800afa8:	6053      	strne	r3, [r2, #4]
 800afaa:	4630      	mov	r0, r6
 800afac:	f000 f9ec 	bl	800b388 <__malloc_unlock>
 800afb0:	f104 000b 	add.w	r0, r4, #11
 800afb4:	1d23      	adds	r3, r4, #4
 800afb6:	f020 0007 	bic.w	r0, r0, #7
 800afba:	1ac2      	subs	r2, r0, r3
 800afbc:	d0cc      	beq.n	800af58 <_malloc_r+0x20>
 800afbe:	1a1b      	subs	r3, r3, r0
 800afc0:	50a3      	str	r3, [r4, r2]
 800afc2:	e7c9      	b.n	800af58 <_malloc_r+0x20>
 800afc4:	4622      	mov	r2, r4
 800afc6:	6864      	ldr	r4, [r4, #4]
 800afc8:	e7cc      	b.n	800af64 <_malloc_r+0x2c>
 800afca:	1cc4      	adds	r4, r0, #3
 800afcc:	f024 0403 	bic.w	r4, r4, #3
 800afd0:	42a0      	cmp	r0, r4
 800afd2:	d0e3      	beq.n	800af9c <_malloc_r+0x64>
 800afd4:	1a21      	subs	r1, r4, r0
 800afd6:	4630      	mov	r0, r6
 800afd8:	f000 f964 	bl	800b2a4 <_sbrk_r>
 800afdc:	3001      	adds	r0, #1
 800afde:	d1dd      	bne.n	800af9c <_malloc_r+0x64>
 800afe0:	e7cf      	b.n	800af82 <_malloc_r+0x4a>
 800afe2:	bf00      	nop
 800afe4:	20000604 	.word	0x20000604
 800afe8:	20000608 	.word	0x20000608

0800afec <__ssputs_r>:
 800afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	688e      	ldr	r6, [r1, #8]
 800aff2:	429e      	cmp	r6, r3
 800aff4:	4682      	mov	sl, r0
 800aff6:	460c      	mov	r4, r1
 800aff8:	4690      	mov	r8, r2
 800affa:	461f      	mov	r7, r3
 800affc:	d838      	bhi.n	800b070 <__ssputs_r+0x84>
 800affe:	898a      	ldrh	r2, [r1, #12]
 800b000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b004:	d032      	beq.n	800b06c <__ssputs_r+0x80>
 800b006:	6825      	ldr	r5, [r4, #0]
 800b008:	6909      	ldr	r1, [r1, #16]
 800b00a:	eba5 0901 	sub.w	r9, r5, r1
 800b00e:	6965      	ldr	r5, [r4, #20]
 800b010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b018:	3301      	adds	r3, #1
 800b01a:	444b      	add	r3, r9
 800b01c:	106d      	asrs	r5, r5, #1
 800b01e:	429d      	cmp	r5, r3
 800b020:	bf38      	it	cc
 800b022:	461d      	movcc	r5, r3
 800b024:	0553      	lsls	r3, r2, #21
 800b026:	d531      	bpl.n	800b08c <__ssputs_r+0xa0>
 800b028:	4629      	mov	r1, r5
 800b02a:	f7ff ff85 	bl	800af38 <_malloc_r>
 800b02e:	4606      	mov	r6, r0
 800b030:	b950      	cbnz	r0, 800b048 <__ssputs_r+0x5c>
 800b032:	230c      	movs	r3, #12
 800b034:	f8ca 3000 	str.w	r3, [sl]
 800b038:	89a3      	ldrh	r3, [r4, #12]
 800b03a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b03e:	81a3      	strh	r3, [r4, #12]
 800b040:	f04f 30ff 	mov.w	r0, #4294967295
 800b044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b048:	6921      	ldr	r1, [r4, #16]
 800b04a:	464a      	mov	r2, r9
 800b04c:	f7ff fb88 	bl	800a760 <memcpy>
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b05a:	81a3      	strh	r3, [r4, #12]
 800b05c:	6126      	str	r6, [r4, #16]
 800b05e:	6165      	str	r5, [r4, #20]
 800b060:	444e      	add	r6, r9
 800b062:	eba5 0509 	sub.w	r5, r5, r9
 800b066:	6026      	str	r6, [r4, #0]
 800b068:	60a5      	str	r5, [r4, #8]
 800b06a:	463e      	mov	r6, r7
 800b06c:	42be      	cmp	r6, r7
 800b06e:	d900      	bls.n	800b072 <__ssputs_r+0x86>
 800b070:	463e      	mov	r6, r7
 800b072:	4632      	mov	r2, r6
 800b074:	6820      	ldr	r0, [r4, #0]
 800b076:	4641      	mov	r1, r8
 800b078:	f000 f966 	bl	800b348 <memmove>
 800b07c:	68a3      	ldr	r3, [r4, #8]
 800b07e:	6822      	ldr	r2, [r4, #0]
 800b080:	1b9b      	subs	r3, r3, r6
 800b082:	4432      	add	r2, r6
 800b084:	60a3      	str	r3, [r4, #8]
 800b086:	6022      	str	r2, [r4, #0]
 800b088:	2000      	movs	r0, #0
 800b08a:	e7db      	b.n	800b044 <__ssputs_r+0x58>
 800b08c:	462a      	mov	r2, r5
 800b08e:	f000 f981 	bl	800b394 <_realloc_r>
 800b092:	4606      	mov	r6, r0
 800b094:	2800      	cmp	r0, #0
 800b096:	d1e1      	bne.n	800b05c <__ssputs_r+0x70>
 800b098:	6921      	ldr	r1, [r4, #16]
 800b09a:	4650      	mov	r0, sl
 800b09c:	f7ff fefc 	bl	800ae98 <_free_r>
 800b0a0:	e7c7      	b.n	800b032 <__ssputs_r+0x46>
	...

0800b0a4 <_svfiprintf_r>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	4698      	mov	r8, r3
 800b0aa:	898b      	ldrh	r3, [r1, #12]
 800b0ac:	061b      	lsls	r3, r3, #24
 800b0ae:	b09d      	sub	sp, #116	; 0x74
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	d50e      	bpl.n	800b0d6 <_svfiprintf_r+0x32>
 800b0b8:	690b      	ldr	r3, [r1, #16]
 800b0ba:	b963      	cbnz	r3, 800b0d6 <_svfiprintf_r+0x32>
 800b0bc:	2140      	movs	r1, #64	; 0x40
 800b0be:	f7ff ff3b 	bl	800af38 <_malloc_r>
 800b0c2:	6028      	str	r0, [r5, #0]
 800b0c4:	6128      	str	r0, [r5, #16]
 800b0c6:	b920      	cbnz	r0, 800b0d2 <_svfiprintf_r+0x2e>
 800b0c8:	230c      	movs	r3, #12
 800b0ca:	603b      	str	r3, [r7, #0]
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	e0d1      	b.n	800b276 <_svfiprintf_r+0x1d2>
 800b0d2:	2340      	movs	r3, #64	; 0x40
 800b0d4:	616b      	str	r3, [r5, #20]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0da:	2320      	movs	r3, #32
 800b0dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0e4:	2330      	movs	r3, #48	; 0x30
 800b0e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b290 <_svfiprintf_r+0x1ec>
 800b0ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0ee:	f04f 0901 	mov.w	r9, #1
 800b0f2:	4623      	mov	r3, r4
 800b0f4:	469a      	mov	sl, r3
 800b0f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0fa:	b10a      	cbz	r2, 800b100 <_svfiprintf_r+0x5c>
 800b0fc:	2a25      	cmp	r2, #37	; 0x25
 800b0fe:	d1f9      	bne.n	800b0f4 <_svfiprintf_r+0x50>
 800b100:	ebba 0b04 	subs.w	fp, sl, r4
 800b104:	d00b      	beq.n	800b11e <_svfiprintf_r+0x7a>
 800b106:	465b      	mov	r3, fp
 800b108:	4622      	mov	r2, r4
 800b10a:	4629      	mov	r1, r5
 800b10c:	4638      	mov	r0, r7
 800b10e:	f7ff ff6d 	bl	800afec <__ssputs_r>
 800b112:	3001      	adds	r0, #1
 800b114:	f000 80aa 	beq.w	800b26c <_svfiprintf_r+0x1c8>
 800b118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b11a:	445a      	add	r2, fp
 800b11c:	9209      	str	r2, [sp, #36]	; 0x24
 800b11e:	f89a 3000 	ldrb.w	r3, [sl]
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 80a2 	beq.w	800b26c <_svfiprintf_r+0x1c8>
 800b128:	2300      	movs	r3, #0
 800b12a:	f04f 32ff 	mov.w	r2, #4294967295
 800b12e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b132:	f10a 0a01 	add.w	sl, sl, #1
 800b136:	9304      	str	r3, [sp, #16]
 800b138:	9307      	str	r3, [sp, #28]
 800b13a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b13e:	931a      	str	r3, [sp, #104]	; 0x68
 800b140:	4654      	mov	r4, sl
 800b142:	2205      	movs	r2, #5
 800b144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b148:	4851      	ldr	r0, [pc, #324]	; (800b290 <_svfiprintf_r+0x1ec>)
 800b14a:	f7f5 f8b1 	bl	80002b0 <memchr>
 800b14e:	9a04      	ldr	r2, [sp, #16]
 800b150:	b9d8      	cbnz	r0, 800b18a <_svfiprintf_r+0xe6>
 800b152:	06d0      	lsls	r0, r2, #27
 800b154:	bf44      	itt	mi
 800b156:	2320      	movmi	r3, #32
 800b158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b15c:	0711      	lsls	r1, r2, #28
 800b15e:	bf44      	itt	mi
 800b160:	232b      	movmi	r3, #43	; 0x2b
 800b162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b166:	f89a 3000 	ldrb.w	r3, [sl]
 800b16a:	2b2a      	cmp	r3, #42	; 0x2a
 800b16c:	d015      	beq.n	800b19a <_svfiprintf_r+0xf6>
 800b16e:	9a07      	ldr	r2, [sp, #28]
 800b170:	4654      	mov	r4, sl
 800b172:	2000      	movs	r0, #0
 800b174:	f04f 0c0a 	mov.w	ip, #10
 800b178:	4621      	mov	r1, r4
 800b17a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b17e:	3b30      	subs	r3, #48	; 0x30
 800b180:	2b09      	cmp	r3, #9
 800b182:	d94e      	bls.n	800b222 <_svfiprintf_r+0x17e>
 800b184:	b1b0      	cbz	r0, 800b1b4 <_svfiprintf_r+0x110>
 800b186:	9207      	str	r2, [sp, #28]
 800b188:	e014      	b.n	800b1b4 <_svfiprintf_r+0x110>
 800b18a:	eba0 0308 	sub.w	r3, r0, r8
 800b18e:	fa09 f303 	lsl.w	r3, r9, r3
 800b192:	4313      	orrs	r3, r2
 800b194:	9304      	str	r3, [sp, #16]
 800b196:	46a2      	mov	sl, r4
 800b198:	e7d2      	b.n	800b140 <_svfiprintf_r+0x9c>
 800b19a:	9b03      	ldr	r3, [sp, #12]
 800b19c:	1d19      	adds	r1, r3, #4
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	9103      	str	r1, [sp, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	bfbb      	ittet	lt
 800b1a6:	425b      	neglt	r3, r3
 800b1a8:	f042 0202 	orrlt.w	r2, r2, #2
 800b1ac:	9307      	strge	r3, [sp, #28]
 800b1ae:	9307      	strlt	r3, [sp, #28]
 800b1b0:	bfb8      	it	lt
 800b1b2:	9204      	strlt	r2, [sp, #16]
 800b1b4:	7823      	ldrb	r3, [r4, #0]
 800b1b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b1b8:	d10c      	bne.n	800b1d4 <_svfiprintf_r+0x130>
 800b1ba:	7863      	ldrb	r3, [r4, #1]
 800b1bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1be:	d135      	bne.n	800b22c <_svfiprintf_r+0x188>
 800b1c0:	9b03      	ldr	r3, [sp, #12]
 800b1c2:	1d1a      	adds	r2, r3, #4
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	9203      	str	r2, [sp, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	bfb8      	it	lt
 800b1cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1d0:	3402      	adds	r4, #2
 800b1d2:	9305      	str	r3, [sp, #20]
 800b1d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2a0 <_svfiprintf_r+0x1fc>
 800b1d8:	7821      	ldrb	r1, [r4, #0]
 800b1da:	2203      	movs	r2, #3
 800b1dc:	4650      	mov	r0, sl
 800b1de:	f7f5 f867 	bl	80002b0 <memchr>
 800b1e2:	b140      	cbz	r0, 800b1f6 <_svfiprintf_r+0x152>
 800b1e4:	2340      	movs	r3, #64	; 0x40
 800b1e6:	eba0 000a 	sub.w	r0, r0, sl
 800b1ea:	fa03 f000 	lsl.w	r0, r3, r0
 800b1ee:	9b04      	ldr	r3, [sp, #16]
 800b1f0:	4303      	orrs	r3, r0
 800b1f2:	3401      	adds	r4, #1
 800b1f4:	9304      	str	r3, [sp, #16]
 800b1f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1fa:	4826      	ldr	r0, [pc, #152]	; (800b294 <_svfiprintf_r+0x1f0>)
 800b1fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b200:	2206      	movs	r2, #6
 800b202:	f7f5 f855 	bl	80002b0 <memchr>
 800b206:	2800      	cmp	r0, #0
 800b208:	d038      	beq.n	800b27c <_svfiprintf_r+0x1d8>
 800b20a:	4b23      	ldr	r3, [pc, #140]	; (800b298 <_svfiprintf_r+0x1f4>)
 800b20c:	bb1b      	cbnz	r3, 800b256 <_svfiprintf_r+0x1b2>
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	3307      	adds	r3, #7
 800b212:	f023 0307 	bic.w	r3, r3, #7
 800b216:	3308      	adds	r3, #8
 800b218:	9303      	str	r3, [sp, #12]
 800b21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b21c:	4433      	add	r3, r6
 800b21e:	9309      	str	r3, [sp, #36]	; 0x24
 800b220:	e767      	b.n	800b0f2 <_svfiprintf_r+0x4e>
 800b222:	fb0c 3202 	mla	r2, ip, r2, r3
 800b226:	460c      	mov	r4, r1
 800b228:	2001      	movs	r0, #1
 800b22a:	e7a5      	b.n	800b178 <_svfiprintf_r+0xd4>
 800b22c:	2300      	movs	r3, #0
 800b22e:	3401      	adds	r4, #1
 800b230:	9305      	str	r3, [sp, #20]
 800b232:	4619      	mov	r1, r3
 800b234:	f04f 0c0a 	mov.w	ip, #10
 800b238:	4620      	mov	r0, r4
 800b23a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b23e:	3a30      	subs	r2, #48	; 0x30
 800b240:	2a09      	cmp	r2, #9
 800b242:	d903      	bls.n	800b24c <_svfiprintf_r+0x1a8>
 800b244:	2b00      	cmp	r3, #0
 800b246:	d0c5      	beq.n	800b1d4 <_svfiprintf_r+0x130>
 800b248:	9105      	str	r1, [sp, #20]
 800b24a:	e7c3      	b.n	800b1d4 <_svfiprintf_r+0x130>
 800b24c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b250:	4604      	mov	r4, r0
 800b252:	2301      	movs	r3, #1
 800b254:	e7f0      	b.n	800b238 <_svfiprintf_r+0x194>
 800b256:	ab03      	add	r3, sp, #12
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	462a      	mov	r2, r5
 800b25c:	4b0f      	ldr	r3, [pc, #60]	; (800b29c <_svfiprintf_r+0x1f8>)
 800b25e:	a904      	add	r1, sp, #16
 800b260:	4638      	mov	r0, r7
 800b262:	f7fe f80d 	bl	8009280 <_printf_float>
 800b266:	1c42      	adds	r2, r0, #1
 800b268:	4606      	mov	r6, r0
 800b26a:	d1d6      	bne.n	800b21a <_svfiprintf_r+0x176>
 800b26c:	89ab      	ldrh	r3, [r5, #12]
 800b26e:	065b      	lsls	r3, r3, #25
 800b270:	f53f af2c 	bmi.w	800b0cc <_svfiprintf_r+0x28>
 800b274:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b276:	b01d      	add	sp, #116	; 0x74
 800b278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27c:	ab03      	add	r3, sp, #12
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	462a      	mov	r2, r5
 800b282:	4b06      	ldr	r3, [pc, #24]	; (800b29c <_svfiprintf_r+0x1f8>)
 800b284:	a904      	add	r1, sp, #16
 800b286:	4638      	mov	r0, r7
 800b288:	f7fe fa9e 	bl	80097c8 <_printf_i>
 800b28c:	e7eb      	b.n	800b266 <_svfiprintf_r+0x1c2>
 800b28e:	bf00      	nop
 800b290:	0801fa84 	.word	0x0801fa84
 800b294:	0801fa8e 	.word	0x0801fa8e
 800b298:	08009281 	.word	0x08009281
 800b29c:	0800afed 	.word	0x0800afed
 800b2a0:	0801fa8a 	.word	0x0801fa8a

0800b2a4 <_sbrk_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4d06      	ldr	r5, [pc, #24]	; (800b2c0 <_sbrk_r+0x1c>)
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	4608      	mov	r0, r1
 800b2ae:	602b      	str	r3, [r5, #0]
 800b2b0:	f7f7 fa64 	bl	800277c <_sbrk>
 800b2b4:	1c43      	adds	r3, r0, #1
 800b2b6:	d102      	bne.n	800b2be <_sbrk_r+0x1a>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	b103      	cbz	r3, 800b2be <_sbrk_r+0x1a>
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	bd38      	pop	{r3, r4, r5, pc}
 800b2c0:	2000307c 	.word	0x2000307c

0800b2c4 <__assert_func>:
 800b2c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2c6:	4614      	mov	r4, r2
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4b09      	ldr	r3, [pc, #36]	; (800b2f0 <__assert_func+0x2c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	68d8      	ldr	r0, [r3, #12]
 800b2d2:	b14c      	cbz	r4, 800b2e8 <__assert_func+0x24>
 800b2d4:	4b07      	ldr	r3, [pc, #28]	; (800b2f4 <__assert_func+0x30>)
 800b2d6:	9100      	str	r1, [sp, #0]
 800b2d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2dc:	4906      	ldr	r1, [pc, #24]	; (800b2f8 <__assert_func+0x34>)
 800b2de:	462b      	mov	r3, r5
 800b2e0:	f000 f80e 	bl	800b300 <fiprintf>
 800b2e4:	f000 faa4 	bl	800b830 <abort>
 800b2e8:	4b04      	ldr	r3, [pc, #16]	; (800b2fc <__assert_func+0x38>)
 800b2ea:	461c      	mov	r4, r3
 800b2ec:	e7f3      	b.n	800b2d6 <__assert_func+0x12>
 800b2ee:	bf00      	nop
 800b2f0:	20000010 	.word	0x20000010
 800b2f4:	0801fa95 	.word	0x0801fa95
 800b2f8:	0801faa2 	.word	0x0801faa2
 800b2fc:	0801fad0 	.word	0x0801fad0

0800b300 <fiprintf>:
 800b300:	b40e      	push	{r1, r2, r3}
 800b302:	b503      	push	{r0, r1, lr}
 800b304:	4601      	mov	r1, r0
 800b306:	ab03      	add	r3, sp, #12
 800b308:	4805      	ldr	r0, [pc, #20]	; (800b320 <fiprintf+0x20>)
 800b30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30e:	6800      	ldr	r0, [r0, #0]
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	f000 f88f 	bl	800b434 <_vfiprintf_r>
 800b316:	b002      	add	sp, #8
 800b318:	f85d eb04 	ldr.w	lr, [sp], #4
 800b31c:	b003      	add	sp, #12
 800b31e:	4770      	bx	lr
 800b320:	20000010 	.word	0x20000010

0800b324 <__ascii_mbtowc>:
 800b324:	b082      	sub	sp, #8
 800b326:	b901      	cbnz	r1, 800b32a <__ascii_mbtowc+0x6>
 800b328:	a901      	add	r1, sp, #4
 800b32a:	b142      	cbz	r2, 800b33e <__ascii_mbtowc+0x1a>
 800b32c:	b14b      	cbz	r3, 800b342 <__ascii_mbtowc+0x1e>
 800b32e:	7813      	ldrb	r3, [r2, #0]
 800b330:	600b      	str	r3, [r1, #0]
 800b332:	7812      	ldrb	r2, [r2, #0]
 800b334:	1e10      	subs	r0, r2, #0
 800b336:	bf18      	it	ne
 800b338:	2001      	movne	r0, #1
 800b33a:	b002      	add	sp, #8
 800b33c:	4770      	bx	lr
 800b33e:	4610      	mov	r0, r2
 800b340:	e7fb      	b.n	800b33a <__ascii_mbtowc+0x16>
 800b342:	f06f 0001 	mvn.w	r0, #1
 800b346:	e7f8      	b.n	800b33a <__ascii_mbtowc+0x16>

0800b348 <memmove>:
 800b348:	4288      	cmp	r0, r1
 800b34a:	b510      	push	{r4, lr}
 800b34c:	eb01 0402 	add.w	r4, r1, r2
 800b350:	d902      	bls.n	800b358 <memmove+0x10>
 800b352:	4284      	cmp	r4, r0
 800b354:	4623      	mov	r3, r4
 800b356:	d807      	bhi.n	800b368 <memmove+0x20>
 800b358:	1e43      	subs	r3, r0, #1
 800b35a:	42a1      	cmp	r1, r4
 800b35c:	d008      	beq.n	800b370 <memmove+0x28>
 800b35e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b362:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b366:	e7f8      	b.n	800b35a <memmove+0x12>
 800b368:	4402      	add	r2, r0
 800b36a:	4601      	mov	r1, r0
 800b36c:	428a      	cmp	r2, r1
 800b36e:	d100      	bne.n	800b372 <memmove+0x2a>
 800b370:	bd10      	pop	{r4, pc}
 800b372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b37a:	e7f7      	b.n	800b36c <memmove+0x24>

0800b37c <__malloc_lock>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__malloc_lock+0x8>)
 800b37e:	f000 bc17 	b.w	800bbb0 <__retarget_lock_acquire_recursive>
 800b382:	bf00      	nop
 800b384:	20003084 	.word	0x20003084

0800b388 <__malloc_unlock>:
 800b388:	4801      	ldr	r0, [pc, #4]	; (800b390 <__malloc_unlock+0x8>)
 800b38a:	f000 bc12 	b.w	800bbb2 <__retarget_lock_release_recursive>
 800b38e:	bf00      	nop
 800b390:	20003084 	.word	0x20003084

0800b394 <_realloc_r>:
 800b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b396:	4607      	mov	r7, r0
 800b398:	4614      	mov	r4, r2
 800b39a:	460e      	mov	r6, r1
 800b39c:	b921      	cbnz	r1, 800b3a8 <_realloc_r+0x14>
 800b39e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	f7ff bdc8 	b.w	800af38 <_malloc_r>
 800b3a8:	b922      	cbnz	r2, 800b3b4 <_realloc_r+0x20>
 800b3aa:	f7ff fd75 	bl	800ae98 <_free_r>
 800b3ae:	4625      	mov	r5, r4
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b4:	f000 fc62 	bl	800bc7c <_malloc_usable_size_r>
 800b3b8:	42a0      	cmp	r0, r4
 800b3ba:	d20f      	bcs.n	800b3dc <_realloc_r+0x48>
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4638      	mov	r0, r7
 800b3c0:	f7ff fdba 	bl	800af38 <_malloc_r>
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d0f2      	beq.n	800b3b0 <_realloc_r+0x1c>
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	f7ff f9c7 	bl	800a760 <memcpy>
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	4638      	mov	r0, r7
 800b3d6:	f7ff fd5f 	bl	800ae98 <_free_r>
 800b3da:	e7e9      	b.n	800b3b0 <_realloc_r+0x1c>
 800b3dc:	4635      	mov	r5, r6
 800b3de:	e7e7      	b.n	800b3b0 <_realloc_r+0x1c>

0800b3e0 <__sfputc_r>:
 800b3e0:	6893      	ldr	r3, [r2, #8]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	b410      	push	{r4}
 800b3e8:	6093      	str	r3, [r2, #8]
 800b3ea:	da08      	bge.n	800b3fe <__sfputc_r+0x1e>
 800b3ec:	6994      	ldr	r4, [r2, #24]
 800b3ee:	42a3      	cmp	r3, r4
 800b3f0:	db01      	blt.n	800b3f6 <__sfputc_r+0x16>
 800b3f2:	290a      	cmp	r1, #10
 800b3f4:	d103      	bne.n	800b3fe <__sfputc_r+0x1e>
 800b3f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3fa:	f000 b94b 	b.w	800b694 <__swbuf_r>
 800b3fe:	6813      	ldr	r3, [r2, #0]
 800b400:	1c58      	adds	r0, r3, #1
 800b402:	6010      	str	r0, [r2, #0]
 800b404:	7019      	strb	r1, [r3, #0]
 800b406:	4608      	mov	r0, r1
 800b408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b40c:	4770      	bx	lr

0800b40e <__sfputs_r>:
 800b40e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b410:	4606      	mov	r6, r0
 800b412:	460f      	mov	r7, r1
 800b414:	4614      	mov	r4, r2
 800b416:	18d5      	adds	r5, r2, r3
 800b418:	42ac      	cmp	r4, r5
 800b41a:	d101      	bne.n	800b420 <__sfputs_r+0x12>
 800b41c:	2000      	movs	r0, #0
 800b41e:	e007      	b.n	800b430 <__sfputs_r+0x22>
 800b420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b424:	463a      	mov	r2, r7
 800b426:	4630      	mov	r0, r6
 800b428:	f7ff ffda 	bl	800b3e0 <__sfputc_r>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d1f3      	bne.n	800b418 <__sfputs_r+0xa>
 800b430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b434 <_vfiprintf_r>:
 800b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	460d      	mov	r5, r1
 800b43a:	b09d      	sub	sp, #116	; 0x74
 800b43c:	4614      	mov	r4, r2
 800b43e:	4698      	mov	r8, r3
 800b440:	4606      	mov	r6, r0
 800b442:	b118      	cbz	r0, 800b44c <_vfiprintf_r+0x18>
 800b444:	6983      	ldr	r3, [r0, #24]
 800b446:	b90b      	cbnz	r3, 800b44c <_vfiprintf_r+0x18>
 800b448:	f000 fb14 	bl	800ba74 <__sinit>
 800b44c:	4b89      	ldr	r3, [pc, #548]	; (800b674 <_vfiprintf_r+0x240>)
 800b44e:	429d      	cmp	r5, r3
 800b450:	d11b      	bne.n	800b48a <_vfiprintf_r+0x56>
 800b452:	6875      	ldr	r5, [r6, #4]
 800b454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b456:	07d9      	lsls	r1, r3, #31
 800b458:	d405      	bmi.n	800b466 <_vfiprintf_r+0x32>
 800b45a:	89ab      	ldrh	r3, [r5, #12]
 800b45c:	059a      	lsls	r2, r3, #22
 800b45e:	d402      	bmi.n	800b466 <_vfiprintf_r+0x32>
 800b460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b462:	f000 fba5 	bl	800bbb0 <__retarget_lock_acquire_recursive>
 800b466:	89ab      	ldrh	r3, [r5, #12]
 800b468:	071b      	lsls	r3, r3, #28
 800b46a:	d501      	bpl.n	800b470 <_vfiprintf_r+0x3c>
 800b46c:	692b      	ldr	r3, [r5, #16]
 800b46e:	b9eb      	cbnz	r3, 800b4ac <_vfiprintf_r+0x78>
 800b470:	4629      	mov	r1, r5
 800b472:	4630      	mov	r0, r6
 800b474:	f000 f96e 	bl	800b754 <__swsetup_r>
 800b478:	b1c0      	cbz	r0, 800b4ac <_vfiprintf_r+0x78>
 800b47a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b47c:	07dc      	lsls	r4, r3, #31
 800b47e:	d50e      	bpl.n	800b49e <_vfiprintf_r+0x6a>
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	b01d      	add	sp, #116	; 0x74
 800b486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48a:	4b7b      	ldr	r3, [pc, #492]	; (800b678 <_vfiprintf_r+0x244>)
 800b48c:	429d      	cmp	r5, r3
 800b48e:	d101      	bne.n	800b494 <_vfiprintf_r+0x60>
 800b490:	68b5      	ldr	r5, [r6, #8]
 800b492:	e7df      	b.n	800b454 <_vfiprintf_r+0x20>
 800b494:	4b79      	ldr	r3, [pc, #484]	; (800b67c <_vfiprintf_r+0x248>)
 800b496:	429d      	cmp	r5, r3
 800b498:	bf08      	it	eq
 800b49a:	68f5      	ldreq	r5, [r6, #12]
 800b49c:	e7da      	b.n	800b454 <_vfiprintf_r+0x20>
 800b49e:	89ab      	ldrh	r3, [r5, #12]
 800b4a0:	0598      	lsls	r0, r3, #22
 800b4a2:	d4ed      	bmi.n	800b480 <_vfiprintf_r+0x4c>
 800b4a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4a6:	f000 fb84 	bl	800bbb2 <__retarget_lock_release_recursive>
 800b4aa:	e7e9      	b.n	800b480 <_vfiprintf_r+0x4c>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b0:	2320      	movs	r3, #32
 800b4b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4ba:	2330      	movs	r3, #48	; 0x30
 800b4bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b680 <_vfiprintf_r+0x24c>
 800b4c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4c4:	f04f 0901 	mov.w	r9, #1
 800b4c8:	4623      	mov	r3, r4
 800b4ca:	469a      	mov	sl, r3
 800b4cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4d0:	b10a      	cbz	r2, 800b4d6 <_vfiprintf_r+0xa2>
 800b4d2:	2a25      	cmp	r2, #37	; 0x25
 800b4d4:	d1f9      	bne.n	800b4ca <_vfiprintf_r+0x96>
 800b4d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b4da:	d00b      	beq.n	800b4f4 <_vfiprintf_r+0xc0>
 800b4dc:	465b      	mov	r3, fp
 800b4de:	4622      	mov	r2, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7ff ff93 	bl	800b40e <__sfputs_r>
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	f000 80aa 	beq.w	800b642 <_vfiprintf_r+0x20e>
 800b4ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4f0:	445a      	add	r2, fp
 800b4f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 80a2 	beq.w	800b642 <_vfiprintf_r+0x20e>
 800b4fe:	2300      	movs	r3, #0
 800b500:	f04f 32ff 	mov.w	r2, #4294967295
 800b504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b508:	f10a 0a01 	add.w	sl, sl, #1
 800b50c:	9304      	str	r3, [sp, #16]
 800b50e:	9307      	str	r3, [sp, #28]
 800b510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b514:	931a      	str	r3, [sp, #104]	; 0x68
 800b516:	4654      	mov	r4, sl
 800b518:	2205      	movs	r2, #5
 800b51a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b51e:	4858      	ldr	r0, [pc, #352]	; (800b680 <_vfiprintf_r+0x24c>)
 800b520:	f7f4 fec6 	bl	80002b0 <memchr>
 800b524:	9a04      	ldr	r2, [sp, #16]
 800b526:	b9d8      	cbnz	r0, 800b560 <_vfiprintf_r+0x12c>
 800b528:	06d1      	lsls	r1, r2, #27
 800b52a:	bf44      	itt	mi
 800b52c:	2320      	movmi	r3, #32
 800b52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b532:	0713      	lsls	r3, r2, #28
 800b534:	bf44      	itt	mi
 800b536:	232b      	movmi	r3, #43	; 0x2b
 800b538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b53c:	f89a 3000 	ldrb.w	r3, [sl]
 800b540:	2b2a      	cmp	r3, #42	; 0x2a
 800b542:	d015      	beq.n	800b570 <_vfiprintf_r+0x13c>
 800b544:	9a07      	ldr	r2, [sp, #28]
 800b546:	4654      	mov	r4, sl
 800b548:	2000      	movs	r0, #0
 800b54a:	f04f 0c0a 	mov.w	ip, #10
 800b54e:	4621      	mov	r1, r4
 800b550:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b554:	3b30      	subs	r3, #48	; 0x30
 800b556:	2b09      	cmp	r3, #9
 800b558:	d94e      	bls.n	800b5f8 <_vfiprintf_r+0x1c4>
 800b55a:	b1b0      	cbz	r0, 800b58a <_vfiprintf_r+0x156>
 800b55c:	9207      	str	r2, [sp, #28]
 800b55e:	e014      	b.n	800b58a <_vfiprintf_r+0x156>
 800b560:	eba0 0308 	sub.w	r3, r0, r8
 800b564:	fa09 f303 	lsl.w	r3, r9, r3
 800b568:	4313      	orrs	r3, r2
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	46a2      	mov	sl, r4
 800b56e:	e7d2      	b.n	800b516 <_vfiprintf_r+0xe2>
 800b570:	9b03      	ldr	r3, [sp, #12]
 800b572:	1d19      	adds	r1, r3, #4
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	9103      	str	r1, [sp, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	bfbb      	ittet	lt
 800b57c:	425b      	neglt	r3, r3
 800b57e:	f042 0202 	orrlt.w	r2, r2, #2
 800b582:	9307      	strge	r3, [sp, #28]
 800b584:	9307      	strlt	r3, [sp, #28]
 800b586:	bfb8      	it	lt
 800b588:	9204      	strlt	r2, [sp, #16]
 800b58a:	7823      	ldrb	r3, [r4, #0]
 800b58c:	2b2e      	cmp	r3, #46	; 0x2e
 800b58e:	d10c      	bne.n	800b5aa <_vfiprintf_r+0x176>
 800b590:	7863      	ldrb	r3, [r4, #1]
 800b592:	2b2a      	cmp	r3, #42	; 0x2a
 800b594:	d135      	bne.n	800b602 <_vfiprintf_r+0x1ce>
 800b596:	9b03      	ldr	r3, [sp, #12]
 800b598:	1d1a      	adds	r2, r3, #4
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	9203      	str	r2, [sp, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	bfb8      	it	lt
 800b5a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5a6:	3402      	adds	r4, #2
 800b5a8:	9305      	str	r3, [sp, #20]
 800b5aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b690 <_vfiprintf_r+0x25c>
 800b5ae:	7821      	ldrb	r1, [r4, #0]
 800b5b0:	2203      	movs	r2, #3
 800b5b2:	4650      	mov	r0, sl
 800b5b4:	f7f4 fe7c 	bl	80002b0 <memchr>
 800b5b8:	b140      	cbz	r0, 800b5cc <_vfiprintf_r+0x198>
 800b5ba:	2340      	movs	r3, #64	; 0x40
 800b5bc:	eba0 000a 	sub.w	r0, r0, sl
 800b5c0:	fa03 f000 	lsl.w	r0, r3, r0
 800b5c4:	9b04      	ldr	r3, [sp, #16]
 800b5c6:	4303      	orrs	r3, r0
 800b5c8:	3401      	adds	r4, #1
 800b5ca:	9304      	str	r3, [sp, #16]
 800b5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d0:	482c      	ldr	r0, [pc, #176]	; (800b684 <_vfiprintf_r+0x250>)
 800b5d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5d6:	2206      	movs	r2, #6
 800b5d8:	f7f4 fe6a 	bl	80002b0 <memchr>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d03f      	beq.n	800b660 <_vfiprintf_r+0x22c>
 800b5e0:	4b29      	ldr	r3, [pc, #164]	; (800b688 <_vfiprintf_r+0x254>)
 800b5e2:	bb1b      	cbnz	r3, 800b62c <_vfiprintf_r+0x1f8>
 800b5e4:	9b03      	ldr	r3, [sp, #12]
 800b5e6:	3307      	adds	r3, #7
 800b5e8:	f023 0307 	bic.w	r3, r3, #7
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	9303      	str	r3, [sp, #12]
 800b5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f2:	443b      	add	r3, r7
 800b5f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f6:	e767      	b.n	800b4c8 <_vfiprintf_r+0x94>
 800b5f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	2001      	movs	r0, #1
 800b600:	e7a5      	b.n	800b54e <_vfiprintf_r+0x11a>
 800b602:	2300      	movs	r3, #0
 800b604:	3401      	adds	r4, #1
 800b606:	9305      	str	r3, [sp, #20]
 800b608:	4619      	mov	r1, r3
 800b60a:	f04f 0c0a 	mov.w	ip, #10
 800b60e:	4620      	mov	r0, r4
 800b610:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b614:	3a30      	subs	r2, #48	; 0x30
 800b616:	2a09      	cmp	r2, #9
 800b618:	d903      	bls.n	800b622 <_vfiprintf_r+0x1ee>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d0c5      	beq.n	800b5aa <_vfiprintf_r+0x176>
 800b61e:	9105      	str	r1, [sp, #20]
 800b620:	e7c3      	b.n	800b5aa <_vfiprintf_r+0x176>
 800b622:	fb0c 2101 	mla	r1, ip, r1, r2
 800b626:	4604      	mov	r4, r0
 800b628:	2301      	movs	r3, #1
 800b62a:	e7f0      	b.n	800b60e <_vfiprintf_r+0x1da>
 800b62c:	ab03      	add	r3, sp, #12
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	462a      	mov	r2, r5
 800b632:	4b16      	ldr	r3, [pc, #88]	; (800b68c <_vfiprintf_r+0x258>)
 800b634:	a904      	add	r1, sp, #16
 800b636:	4630      	mov	r0, r6
 800b638:	f7fd fe22 	bl	8009280 <_printf_float>
 800b63c:	4607      	mov	r7, r0
 800b63e:	1c78      	adds	r0, r7, #1
 800b640:	d1d6      	bne.n	800b5f0 <_vfiprintf_r+0x1bc>
 800b642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b644:	07d9      	lsls	r1, r3, #31
 800b646:	d405      	bmi.n	800b654 <_vfiprintf_r+0x220>
 800b648:	89ab      	ldrh	r3, [r5, #12]
 800b64a:	059a      	lsls	r2, r3, #22
 800b64c:	d402      	bmi.n	800b654 <_vfiprintf_r+0x220>
 800b64e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b650:	f000 faaf 	bl	800bbb2 <__retarget_lock_release_recursive>
 800b654:	89ab      	ldrh	r3, [r5, #12]
 800b656:	065b      	lsls	r3, r3, #25
 800b658:	f53f af12 	bmi.w	800b480 <_vfiprintf_r+0x4c>
 800b65c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b65e:	e711      	b.n	800b484 <_vfiprintf_r+0x50>
 800b660:	ab03      	add	r3, sp, #12
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	462a      	mov	r2, r5
 800b666:	4b09      	ldr	r3, [pc, #36]	; (800b68c <_vfiprintf_r+0x258>)
 800b668:	a904      	add	r1, sp, #16
 800b66a:	4630      	mov	r0, r6
 800b66c:	f7fe f8ac 	bl	80097c8 <_printf_i>
 800b670:	e7e4      	b.n	800b63c <_vfiprintf_r+0x208>
 800b672:	bf00      	nop
 800b674:	0801fbfc 	.word	0x0801fbfc
 800b678:	0801fc1c 	.word	0x0801fc1c
 800b67c:	0801fbdc 	.word	0x0801fbdc
 800b680:	0801fa84 	.word	0x0801fa84
 800b684:	0801fa8e 	.word	0x0801fa8e
 800b688:	08009281 	.word	0x08009281
 800b68c:	0800b40f 	.word	0x0800b40f
 800b690:	0801fa8a 	.word	0x0801fa8a

0800b694 <__swbuf_r>:
 800b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b696:	460e      	mov	r6, r1
 800b698:	4614      	mov	r4, r2
 800b69a:	4605      	mov	r5, r0
 800b69c:	b118      	cbz	r0, 800b6a6 <__swbuf_r+0x12>
 800b69e:	6983      	ldr	r3, [r0, #24]
 800b6a0:	b90b      	cbnz	r3, 800b6a6 <__swbuf_r+0x12>
 800b6a2:	f000 f9e7 	bl	800ba74 <__sinit>
 800b6a6:	4b21      	ldr	r3, [pc, #132]	; (800b72c <__swbuf_r+0x98>)
 800b6a8:	429c      	cmp	r4, r3
 800b6aa:	d12b      	bne.n	800b704 <__swbuf_r+0x70>
 800b6ac:	686c      	ldr	r4, [r5, #4]
 800b6ae:	69a3      	ldr	r3, [r4, #24]
 800b6b0:	60a3      	str	r3, [r4, #8]
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	071a      	lsls	r2, r3, #28
 800b6b6:	d52f      	bpl.n	800b718 <__swbuf_r+0x84>
 800b6b8:	6923      	ldr	r3, [r4, #16]
 800b6ba:	b36b      	cbz	r3, 800b718 <__swbuf_r+0x84>
 800b6bc:	6923      	ldr	r3, [r4, #16]
 800b6be:	6820      	ldr	r0, [r4, #0]
 800b6c0:	1ac0      	subs	r0, r0, r3
 800b6c2:	6963      	ldr	r3, [r4, #20]
 800b6c4:	b2f6      	uxtb	r6, r6
 800b6c6:	4283      	cmp	r3, r0
 800b6c8:	4637      	mov	r7, r6
 800b6ca:	dc04      	bgt.n	800b6d6 <__swbuf_r+0x42>
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f000 f93c 	bl	800b94c <_fflush_r>
 800b6d4:	bb30      	cbnz	r0, 800b724 <__swbuf_r+0x90>
 800b6d6:	68a3      	ldr	r3, [r4, #8]
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	60a3      	str	r3, [r4, #8]
 800b6dc:	6823      	ldr	r3, [r4, #0]
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	6022      	str	r2, [r4, #0]
 800b6e2:	701e      	strb	r6, [r3, #0]
 800b6e4:	6963      	ldr	r3, [r4, #20]
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	4283      	cmp	r3, r0
 800b6ea:	d004      	beq.n	800b6f6 <__swbuf_r+0x62>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	07db      	lsls	r3, r3, #31
 800b6f0:	d506      	bpl.n	800b700 <__swbuf_r+0x6c>
 800b6f2:	2e0a      	cmp	r6, #10
 800b6f4:	d104      	bne.n	800b700 <__swbuf_r+0x6c>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	f000 f927 	bl	800b94c <_fflush_r>
 800b6fe:	b988      	cbnz	r0, 800b724 <__swbuf_r+0x90>
 800b700:	4638      	mov	r0, r7
 800b702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b704:	4b0a      	ldr	r3, [pc, #40]	; (800b730 <__swbuf_r+0x9c>)
 800b706:	429c      	cmp	r4, r3
 800b708:	d101      	bne.n	800b70e <__swbuf_r+0x7a>
 800b70a:	68ac      	ldr	r4, [r5, #8]
 800b70c:	e7cf      	b.n	800b6ae <__swbuf_r+0x1a>
 800b70e:	4b09      	ldr	r3, [pc, #36]	; (800b734 <__swbuf_r+0xa0>)
 800b710:	429c      	cmp	r4, r3
 800b712:	bf08      	it	eq
 800b714:	68ec      	ldreq	r4, [r5, #12]
 800b716:	e7ca      	b.n	800b6ae <__swbuf_r+0x1a>
 800b718:	4621      	mov	r1, r4
 800b71a:	4628      	mov	r0, r5
 800b71c:	f000 f81a 	bl	800b754 <__swsetup_r>
 800b720:	2800      	cmp	r0, #0
 800b722:	d0cb      	beq.n	800b6bc <__swbuf_r+0x28>
 800b724:	f04f 37ff 	mov.w	r7, #4294967295
 800b728:	e7ea      	b.n	800b700 <__swbuf_r+0x6c>
 800b72a:	bf00      	nop
 800b72c:	0801fbfc 	.word	0x0801fbfc
 800b730:	0801fc1c 	.word	0x0801fc1c
 800b734:	0801fbdc 	.word	0x0801fbdc

0800b738 <__ascii_wctomb>:
 800b738:	b149      	cbz	r1, 800b74e <__ascii_wctomb+0x16>
 800b73a:	2aff      	cmp	r2, #255	; 0xff
 800b73c:	bf85      	ittet	hi
 800b73e:	238a      	movhi	r3, #138	; 0x8a
 800b740:	6003      	strhi	r3, [r0, #0]
 800b742:	700a      	strbls	r2, [r1, #0]
 800b744:	f04f 30ff 	movhi.w	r0, #4294967295
 800b748:	bf98      	it	ls
 800b74a:	2001      	movls	r0, #1
 800b74c:	4770      	bx	lr
 800b74e:	4608      	mov	r0, r1
 800b750:	4770      	bx	lr
	...

0800b754 <__swsetup_r>:
 800b754:	4b32      	ldr	r3, [pc, #200]	; (800b820 <__swsetup_r+0xcc>)
 800b756:	b570      	push	{r4, r5, r6, lr}
 800b758:	681d      	ldr	r5, [r3, #0]
 800b75a:	4606      	mov	r6, r0
 800b75c:	460c      	mov	r4, r1
 800b75e:	b125      	cbz	r5, 800b76a <__swsetup_r+0x16>
 800b760:	69ab      	ldr	r3, [r5, #24]
 800b762:	b913      	cbnz	r3, 800b76a <__swsetup_r+0x16>
 800b764:	4628      	mov	r0, r5
 800b766:	f000 f985 	bl	800ba74 <__sinit>
 800b76a:	4b2e      	ldr	r3, [pc, #184]	; (800b824 <__swsetup_r+0xd0>)
 800b76c:	429c      	cmp	r4, r3
 800b76e:	d10f      	bne.n	800b790 <__swsetup_r+0x3c>
 800b770:	686c      	ldr	r4, [r5, #4]
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b778:	0719      	lsls	r1, r3, #28
 800b77a:	d42c      	bmi.n	800b7d6 <__swsetup_r+0x82>
 800b77c:	06dd      	lsls	r5, r3, #27
 800b77e:	d411      	bmi.n	800b7a4 <__swsetup_r+0x50>
 800b780:	2309      	movs	r3, #9
 800b782:	6033      	str	r3, [r6, #0]
 800b784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b788:	81a3      	strh	r3, [r4, #12]
 800b78a:	f04f 30ff 	mov.w	r0, #4294967295
 800b78e:	e03e      	b.n	800b80e <__swsetup_r+0xba>
 800b790:	4b25      	ldr	r3, [pc, #148]	; (800b828 <__swsetup_r+0xd4>)
 800b792:	429c      	cmp	r4, r3
 800b794:	d101      	bne.n	800b79a <__swsetup_r+0x46>
 800b796:	68ac      	ldr	r4, [r5, #8]
 800b798:	e7eb      	b.n	800b772 <__swsetup_r+0x1e>
 800b79a:	4b24      	ldr	r3, [pc, #144]	; (800b82c <__swsetup_r+0xd8>)
 800b79c:	429c      	cmp	r4, r3
 800b79e:	bf08      	it	eq
 800b7a0:	68ec      	ldreq	r4, [r5, #12]
 800b7a2:	e7e6      	b.n	800b772 <__swsetup_r+0x1e>
 800b7a4:	0758      	lsls	r0, r3, #29
 800b7a6:	d512      	bpl.n	800b7ce <__swsetup_r+0x7a>
 800b7a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7aa:	b141      	cbz	r1, 800b7be <__swsetup_r+0x6a>
 800b7ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7b0:	4299      	cmp	r1, r3
 800b7b2:	d002      	beq.n	800b7ba <__swsetup_r+0x66>
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f7ff fb6f 	bl	800ae98 <_free_r>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	6363      	str	r3, [r4, #52]	; 0x34
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7c4:	81a3      	strh	r3, [r4, #12]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	6063      	str	r3, [r4, #4]
 800b7ca:	6923      	ldr	r3, [r4, #16]
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	f043 0308 	orr.w	r3, r3, #8
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	6923      	ldr	r3, [r4, #16]
 800b7d8:	b94b      	cbnz	r3, 800b7ee <__swsetup_r+0x9a>
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7e4:	d003      	beq.n	800b7ee <__swsetup_r+0x9a>
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f000 fa07 	bl	800bbfc <__smakebuf_r>
 800b7ee:	89a0      	ldrh	r0, [r4, #12]
 800b7f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7f4:	f010 0301 	ands.w	r3, r0, #1
 800b7f8:	d00a      	beq.n	800b810 <__swsetup_r+0xbc>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60a3      	str	r3, [r4, #8]
 800b7fe:	6963      	ldr	r3, [r4, #20]
 800b800:	425b      	negs	r3, r3
 800b802:	61a3      	str	r3, [r4, #24]
 800b804:	6923      	ldr	r3, [r4, #16]
 800b806:	b943      	cbnz	r3, 800b81a <__swsetup_r+0xc6>
 800b808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b80c:	d1ba      	bne.n	800b784 <__swsetup_r+0x30>
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
 800b810:	0781      	lsls	r1, r0, #30
 800b812:	bf58      	it	pl
 800b814:	6963      	ldrpl	r3, [r4, #20]
 800b816:	60a3      	str	r3, [r4, #8]
 800b818:	e7f4      	b.n	800b804 <__swsetup_r+0xb0>
 800b81a:	2000      	movs	r0, #0
 800b81c:	e7f7      	b.n	800b80e <__swsetup_r+0xba>
 800b81e:	bf00      	nop
 800b820:	20000010 	.word	0x20000010
 800b824:	0801fbfc 	.word	0x0801fbfc
 800b828:	0801fc1c 	.word	0x0801fc1c
 800b82c:	0801fbdc 	.word	0x0801fbdc

0800b830 <abort>:
 800b830:	b508      	push	{r3, lr}
 800b832:	2006      	movs	r0, #6
 800b834:	f000 fa52 	bl	800bcdc <raise>
 800b838:	2001      	movs	r0, #1
 800b83a:	f7f6 ff27 	bl	800268c <_exit>
	...

0800b840 <__sflush_r>:
 800b840:	898a      	ldrh	r2, [r1, #12]
 800b842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b846:	4605      	mov	r5, r0
 800b848:	0710      	lsls	r0, r2, #28
 800b84a:	460c      	mov	r4, r1
 800b84c:	d458      	bmi.n	800b900 <__sflush_r+0xc0>
 800b84e:	684b      	ldr	r3, [r1, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	dc05      	bgt.n	800b860 <__sflush_r+0x20>
 800b854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b856:	2b00      	cmp	r3, #0
 800b858:	dc02      	bgt.n	800b860 <__sflush_r+0x20>
 800b85a:	2000      	movs	r0, #0
 800b85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b862:	2e00      	cmp	r6, #0
 800b864:	d0f9      	beq.n	800b85a <__sflush_r+0x1a>
 800b866:	2300      	movs	r3, #0
 800b868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b86c:	682f      	ldr	r7, [r5, #0]
 800b86e:	602b      	str	r3, [r5, #0]
 800b870:	d032      	beq.n	800b8d8 <__sflush_r+0x98>
 800b872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b874:	89a3      	ldrh	r3, [r4, #12]
 800b876:	075a      	lsls	r2, r3, #29
 800b878:	d505      	bpl.n	800b886 <__sflush_r+0x46>
 800b87a:	6863      	ldr	r3, [r4, #4]
 800b87c:	1ac0      	subs	r0, r0, r3
 800b87e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b880:	b10b      	cbz	r3, 800b886 <__sflush_r+0x46>
 800b882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b884:	1ac0      	subs	r0, r0, r3
 800b886:	2300      	movs	r3, #0
 800b888:	4602      	mov	r2, r0
 800b88a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b88c:	6a21      	ldr	r1, [r4, #32]
 800b88e:	4628      	mov	r0, r5
 800b890:	47b0      	blx	r6
 800b892:	1c43      	adds	r3, r0, #1
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	d106      	bne.n	800b8a6 <__sflush_r+0x66>
 800b898:	6829      	ldr	r1, [r5, #0]
 800b89a:	291d      	cmp	r1, #29
 800b89c:	d82c      	bhi.n	800b8f8 <__sflush_r+0xb8>
 800b89e:	4a2a      	ldr	r2, [pc, #168]	; (800b948 <__sflush_r+0x108>)
 800b8a0:	40ca      	lsrs	r2, r1
 800b8a2:	07d6      	lsls	r6, r2, #31
 800b8a4:	d528      	bpl.n	800b8f8 <__sflush_r+0xb8>
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	6062      	str	r2, [r4, #4]
 800b8aa:	04d9      	lsls	r1, r3, #19
 800b8ac:	6922      	ldr	r2, [r4, #16]
 800b8ae:	6022      	str	r2, [r4, #0]
 800b8b0:	d504      	bpl.n	800b8bc <__sflush_r+0x7c>
 800b8b2:	1c42      	adds	r2, r0, #1
 800b8b4:	d101      	bne.n	800b8ba <__sflush_r+0x7a>
 800b8b6:	682b      	ldr	r3, [r5, #0]
 800b8b8:	b903      	cbnz	r3, 800b8bc <__sflush_r+0x7c>
 800b8ba:	6560      	str	r0, [r4, #84]	; 0x54
 800b8bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8be:	602f      	str	r7, [r5, #0]
 800b8c0:	2900      	cmp	r1, #0
 800b8c2:	d0ca      	beq.n	800b85a <__sflush_r+0x1a>
 800b8c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8c8:	4299      	cmp	r1, r3
 800b8ca:	d002      	beq.n	800b8d2 <__sflush_r+0x92>
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f7ff fae3 	bl	800ae98 <_free_r>
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	6360      	str	r0, [r4, #52]	; 0x34
 800b8d6:	e7c1      	b.n	800b85c <__sflush_r+0x1c>
 800b8d8:	6a21      	ldr	r1, [r4, #32]
 800b8da:	2301      	movs	r3, #1
 800b8dc:	4628      	mov	r0, r5
 800b8de:	47b0      	blx	r6
 800b8e0:	1c41      	adds	r1, r0, #1
 800b8e2:	d1c7      	bne.n	800b874 <__sflush_r+0x34>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0c4      	beq.n	800b874 <__sflush_r+0x34>
 800b8ea:	2b1d      	cmp	r3, #29
 800b8ec:	d001      	beq.n	800b8f2 <__sflush_r+0xb2>
 800b8ee:	2b16      	cmp	r3, #22
 800b8f0:	d101      	bne.n	800b8f6 <__sflush_r+0xb6>
 800b8f2:	602f      	str	r7, [r5, #0]
 800b8f4:	e7b1      	b.n	800b85a <__sflush_r+0x1a>
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8fc:	81a3      	strh	r3, [r4, #12]
 800b8fe:	e7ad      	b.n	800b85c <__sflush_r+0x1c>
 800b900:	690f      	ldr	r7, [r1, #16]
 800b902:	2f00      	cmp	r7, #0
 800b904:	d0a9      	beq.n	800b85a <__sflush_r+0x1a>
 800b906:	0793      	lsls	r3, r2, #30
 800b908:	680e      	ldr	r6, [r1, #0]
 800b90a:	bf08      	it	eq
 800b90c:	694b      	ldreq	r3, [r1, #20]
 800b90e:	600f      	str	r7, [r1, #0]
 800b910:	bf18      	it	ne
 800b912:	2300      	movne	r3, #0
 800b914:	eba6 0807 	sub.w	r8, r6, r7
 800b918:	608b      	str	r3, [r1, #8]
 800b91a:	f1b8 0f00 	cmp.w	r8, #0
 800b91e:	dd9c      	ble.n	800b85a <__sflush_r+0x1a>
 800b920:	6a21      	ldr	r1, [r4, #32]
 800b922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b924:	4643      	mov	r3, r8
 800b926:	463a      	mov	r2, r7
 800b928:	4628      	mov	r0, r5
 800b92a:	47b0      	blx	r6
 800b92c:	2800      	cmp	r0, #0
 800b92e:	dc06      	bgt.n	800b93e <__sflush_r+0xfe>
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b936:	81a3      	strh	r3, [r4, #12]
 800b938:	f04f 30ff 	mov.w	r0, #4294967295
 800b93c:	e78e      	b.n	800b85c <__sflush_r+0x1c>
 800b93e:	4407      	add	r7, r0
 800b940:	eba8 0800 	sub.w	r8, r8, r0
 800b944:	e7e9      	b.n	800b91a <__sflush_r+0xda>
 800b946:	bf00      	nop
 800b948:	20400001 	.word	0x20400001

0800b94c <_fflush_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	690b      	ldr	r3, [r1, #16]
 800b950:	4605      	mov	r5, r0
 800b952:	460c      	mov	r4, r1
 800b954:	b913      	cbnz	r3, 800b95c <_fflush_r+0x10>
 800b956:	2500      	movs	r5, #0
 800b958:	4628      	mov	r0, r5
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	b118      	cbz	r0, 800b966 <_fflush_r+0x1a>
 800b95e:	6983      	ldr	r3, [r0, #24]
 800b960:	b90b      	cbnz	r3, 800b966 <_fflush_r+0x1a>
 800b962:	f000 f887 	bl	800ba74 <__sinit>
 800b966:	4b14      	ldr	r3, [pc, #80]	; (800b9b8 <_fflush_r+0x6c>)
 800b968:	429c      	cmp	r4, r3
 800b96a:	d11b      	bne.n	800b9a4 <_fflush_r+0x58>
 800b96c:	686c      	ldr	r4, [r5, #4]
 800b96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d0ef      	beq.n	800b956 <_fflush_r+0xa>
 800b976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b978:	07d0      	lsls	r0, r2, #31
 800b97a:	d404      	bmi.n	800b986 <_fflush_r+0x3a>
 800b97c:	0599      	lsls	r1, r3, #22
 800b97e:	d402      	bmi.n	800b986 <_fflush_r+0x3a>
 800b980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b982:	f000 f915 	bl	800bbb0 <__retarget_lock_acquire_recursive>
 800b986:	4628      	mov	r0, r5
 800b988:	4621      	mov	r1, r4
 800b98a:	f7ff ff59 	bl	800b840 <__sflush_r>
 800b98e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b990:	07da      	lsls	r2, r3, #31
 800b992:	4605      	mov	r5, r0
 800b994:	d4e0      	bmi.n	800b958 <_fflush_r+0xc>
 800b996:	89a3      	ldrh	r3, [r4, #12]
 800b998:	059b      	lsls	r3, r3, #22
 800b99a:	d4dd      	bmi.n	800b958 <_fflush_r+0xc>
 800b99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b99e:	f000 f908 	bl	800bbb2 <__retarget_lock_release_recursive>
 800b9a2:	e7d9      	b.n	800b958 <_fflush_r+0xc>
 800b9a4:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <_fflush_r+0x70>)
 800b9a6:	429c      	cmp	r4, r3
 800b9a8:	d101      	bne.n	800b9ae <_fflush_r+0x62>
 800b9aa:	68ac      	ldr	r4, [r5, #8]
 800b9ac:	e7df      	b.n	800b96e <_fflush_r+0x22>
 800b9ae:	4b04      	ldr	r3, [pc, #16]	; (800b9c0 <_fflush_r+0x74>)
 800b9b0:	429c      	cmp	r4, r3
 800b9b2:	bf08      	it	eq
 800b9b4:	68ec      	ldreq	r4, [r5, #12]
 800b9b6:	e7da      	b.n	800b96e <_fflush_r+0x22>
 800b9b8:	0801fbfc 	.word	0x0801fbfc
 800b9bc:	0801fc1c 	.word	0x0801fc1c
 800b9c0:	0801fbdc 	.word	0x0801fbdc

0800b9c4 <std>:
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	b510      	push	{r4, lr}
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b9ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9d2:	6083      	str	r3, [r0, #8]
 800b9d4:	8181      	strh	r1, [r0, #12]
 800b9d6:	6643      	str	r3, [r0, #100]	; 0x64
 800b9d8:	81c2      	strh	r2, [r0, #14]
 800b9da:	6183      	str	r3, [r0, #24]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	2208      	movs	r2, #8
 800b9e0:	305c      	adds	r0, #92	; 0x5c
 800b9e2:	f7fd fba5 	bl	8009130 <memset>
 800b9e6:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <std+0x38>)
 800b9e8:	6263      	str	r3, [r4, #36]	; 0x24
 800b9ea:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <std+0x3c>)
 800b9ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9ee:	4b05      	ldr	r3, [pc, #20]	; (800ba04 <std+0x40>)
 800b9f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9f2:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <std+0x44>)
 800b9f4:	6224      	str	r4, [r4, #32]
 800b9f6:	6323      	str	r3, [r4, #48]	; 0x30
 800b9f8:	bd10      	pop	{r4, pc}
 800b9fa:	bf00      	nop
 800b9fc:	0800bd15 	.word	0x0800bd15
 800ba00:	0800bd37 	.word	0x0800bd37
 800ba04:	0800bd6f 	.word	0x0800bd6f
 800ba08:	0800bd93 	.word	0x0800bd93

0800ba0c <_cleanup_r>:
 800ba0c:	4901      	ldr	r1, [pc, #4]	; (800ba14 <_cleanup_r+0x8>)
 800ba0e:	f000 b8af 	b.w	800bb70 <_fwalk_reent>
 800ba12:	bf00      	nop
 800ba14:	0800b94d 	.word	0x0800b94d

0800ba18 <__sfmoreglue>:
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	1e4a      	subs	r2, r1, #1
 800ba1c:	2568      	movs	r5, #104	; 0x68
 800ba1e:	4355      	muls	r5, r2
 800ba20:	460e      	mov	r6, r1
 800ba22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba26:	f7ff fa87 	bl	800af38 <_malloc_r>
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	b140      	cbz	r0, 800ba40 <__sfmoreglue+0x28>
 800ba2e:	2100      	movs	r1, #0
 800ba30:	e9c0 1600 	strd	r1, r6, [r0]
 800ba34:	300c      	adds	r0, #12
 800ba36:	60a0      	str	r0, [r4, #8]
 800ba38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba3c:	f7fd fb78 	bl	8009130 <memset>
 800ba40:	4620      	mov	r0, r4
 800ba42:	bd70      	pop	{r4, r5, r6, pc}

0800ba44 <__sfp_lock_acquire>:
 800ba44:	4801      	ldr	r0, [pc, #4]	; (800ba4c <__sfp_lock_acquire+0x8>)
 800ba46:	f000 b8b3 	b.w	800bbb0 <__retarget_lock_acquire_recursive>
 800ba4a:	bf00      	nop
 800ba4c:	20003088 	.word	0x20003088

0800ba50 <__sfp_lock_release>:
 800ba50:	4801      	ldr	r0, [pc, #4]	; (800ba58 <__sfp_lock_release+0x8>)
 800ba52:	f000 b8ae 	b.w	800bbb2 <__retarget_lock_release_recursive>
 800ba56:	bf00      	nop
 800ba58:	20003088 	.word	0x20003088

0800ba5c <__sinit_lock_acquire>:
 800ba5c:	4801      	ldr	r0, [pc, #4]	; (800ba64 <__sinit_lock_acquire+0x8>)
 800ba5e:	f000 b8a7 	b.w	800bbb0 <__retarget_lock_acquire_recursive>
 800ba62:	bf00      	nop
 800ba64:	20003083 	.word	0x20003083

0800ba68 <__sinit_lock_release>:
 800ba68:	4801      	ldr	r0, [pc, #4]	; (800ba70 <__sinit_lock_release+0x8>)
 800ba6a:	f000 b8a2 	b.w	800bbb2 <__retarget_lock_release_recursive>
 800ba6e:	bf00      	nop
 800ba70:	20003083 	.word	0x20003083

0800ba74 <__sinit>:
 800ba74:	b510      	push	{r4, lr}
 800ba76:	4604      	mov	r4, r0
 800ba78:	f7ff fff0 	bl	800ba5c <__sinit_lock_acquire>
 800ba7c:	69a3      	ldr	r3, [r4, #24]
 800ba7e:	b11b      	cbz	r3, 800ba88 <__sinit+0x14>
 800ba80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba84:	f7ff bff0 	b.w	800ba68 <__sinit_lock_release>
 800ba88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba8c:	6523      	str	r3, [r4, #80]	; 0x50
 800ba8e:	4b13      	ldr	r3, [pc, #76]	; (800badc <__sinit+0x68>)
 800ba90:	4a13      	ldr	r2, [pc, #76]	; (800bae0 <__sinit+0x6c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba96:	42a3      	cmp	r3, r4
 800ba98:	bf04      	itt	eq
 800ba9a:	2301      	moveq	r3, #1
 800ba9c:	61a3      	streq	r3, [r4, #24]
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 f820 	bl	800bae4 <__sfp>
 800baa4:	6060      	str	r0, [r4, #4]
 800baa6:	4620      	mov	r0, r4
 800baa8:	f000 f81c 	bl	800bae4 <__sfp>
 800baac:	60a0      	str	r0, [r4, #8]
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 f818 	bl	800bae4 <__sfp>
 800bab4:	2200      	movs	r2, #0
 800bab6:	60e0      	str	r0, [r4, #12]
 800bab8:	2104      	movs	r1, #4
 800baba:	6860      	ldr	r0, [r4, #4]
 800babc:	f7ff ff82 	bl	800b9c4 <std>
 800bac0:	68a0      	ldr	r0, [r4, #8]
 800bac2:	2201      	movs	r2, #1
 800bac4:	2109      	movs	r1, #9
 800bac6:	f7ff ff7d 	bl	800b9c4 <std>
 800baca:	68e0      	ldr	r0, [r4, #12]
 800bacc:	2202      	movs	r2, #2
 800bace:	2112      	movs	r1, #18
 800bad0:	f7ff ff78 	bl	800b9c4 <std>
 800bad4:	2301      	movs	r3, #1
 800bad6:	61a3      	str	r3, [r4, #24]
 800bad8:	e7d2      	b.n	800ba80 <__sinit+0xc>
 800bada:	bf00      	nop
 800badc:	0801f858 	.word	0x0801f858
 800bae0:	0800ba0d 	.word	0x0800ba0d

0800bae4 <__sfp>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	4607      	mov	r7, r0
 800bae8:	f7ff ffac 	bl	800ba44 <__sfp_lock_acquire>
 800baec:	4b1e      	ldr	r3, [pc, #120]	; (800bb68 <__sfp+0x84>)
 800baee:	681e      	ldr	r6, [r3, #0]
 800baf0:	69b3      	ldr	r3, [r6, #24]
 800baf2:	b913      	cbnz	r3, 800bafa <__sfp+0x16>
 800baf4:	4630      	mov	r0, r6
 800baf6:	f7ff ffbd 	bl	800ba74 <__sinit>
 800bafa:	3648      	adds	r6, #72	; 0x48
 800bafc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb00:	3b01      	subs	r3, #1
 800bb02:	d503      	bpl.n	800bb0c <__sfp+0x28>
 800bb04:	6833      	ldr	r3, [r6, #0]
 800bb06:	b30b      	cbz	r3, 800bb4c <__sfp+0x68>
 800bb08:	6836      	ldr	r6, [r6, #0]
 800bb0a:	e7f7      	b.n	800bafc <__sfp+0x18>
 800bb0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb10:	b9d5      	cbnz	r5, 800bb48 <__sfp+0x64>
 800bb12:	4b16      	ldr	r3, [pc, #88]	; (800bb6c <__sfp+0x88>)
 800bb14:	60e3      	str	r3, [r4, #12]
 800bb16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb1a:	6665      	str	r5, [r4, #100]	; 0x64
 800bb1c:	f000 f847 	bl	800bbae <__retarget_lock_init_recursive>
 800bb20:	f7ff ff96 	bl	800ba50 <__sfp_lock_release>
 800bb24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb2c:	6025      	str	r5, [r4, #0]
 800bb2e:	61a5      	str	r5, [r4, #24]
 800bb30:	2208      	movs	r2, #8
 800bb32:	4629      	mov	r1, r5
 800bb34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb38:	f7fd fafa 	bl	8009130 <memset>
 800bb3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb44:	4620      	mov	r0, r4
 800bb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb48:	3468      	adds	r4, #104	; 0x68
 800bb4a:	e7d9      	b.n	800bb00 <__sfp+0x1c>
 800bb4c:	2104      	movs	r1, #4
 800bb4e:	4638      	mov	r0, r7
 800bb50:	f7ff ff62 	bl	800ba18 <__sfmoreglue>
 800bb54:	4604      	mov	r4, r0
 800bb56:	6030      	str	r0, [r6, #0]
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d1d5      	bne.n	800bb08 <__sfp+0x24>
 800bb5c:	f7ff ff78 	bl	800ba50 <__sfp_lock_release>
 800bb60:	230c      	movs	r3, #12
 800bb62:	603b      	str	r3, [r7, #0]
 800bb64:	e7ee      	b.n	800bb44 <__sfp+0x60>
 800bb66:	bf00      	nop
 800bb68:	0801f858 	.word	0x0801f858
 800bb6c:	ffff0001 	.word	0xffff0001

0800bb70 <_fwalk_reent>:
 800bb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb74:	4606      	mov	r6, r0
 800bb76:	4688      	mov	r8, r1
 800bb78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb7c:	2700      	movs	r7, #0
 800bb7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb82:	f1b9 0901 	subs.w	r9, r9, #1
 800bb86:	d505      	bpl.n	800bb94 <_fwalk_reent+0x24>
 800bb88:	6824      	ldr	r4, [r4, #0]
 800bb8a:	2c00      	cmp	r4, #0
 800bb8c:	d1f7      	bne.n	800bb7e <_fwalk_reent+0xe>
 800bb8e:	4638      	mov	r0, r7
 800bb90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb94:	89ab      	ldrh	r3, [r5, #12]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d907      	bls.n	800bbaa <_fwalk_reent+0x3a>
 800bb9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	d003      	beq.n	800bbaa <_fwalk_reent+0x3a>
 800bba2:	4629      	mov	r1, r5
 800bba4:	4630      	mov	r0, r6
 800bba6:	47c0      	blx	r8
 800bba8:	4307      	orrs	r7, r0
 800bbaa:	3568      	adds	r5, #104	; 0x68
 800bbac:	e7e9      	b.n	800bb82 <_fwalk_reent+0x12>

0800bbae <__retarget_lock_init_recursive>:
 800bbae:	4770      	bx	lr

0800bbb0 <__retarget_lock_acquire_recursive>:
 800bbb0:	4770      	bx	lr

0800bbb2 <__retarget_lock_release_recursive>:
 800bbb2:	4770      	bx	lr

0800bbb4 <__swhatbuf_r>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	460e      	mov	r6, r1
 800bbb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbbc:	2900      	cmp	r1, #0
 800bbbe:	b096      	sub	sp, #88	; 0x58
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	461d      	mov	r5, r3
 800bbc4:	da07      	bge.n	800bbd6 <__swhatbuf_r+0x22>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	602b      	str	r3, [r5, #0]
 800bbca:	89b3      	ldrh	r3, [r6, #12]
 800bbcc:	061a      	lsls	r2, r3, #24
 800bbce:	d410      	bmi.n	800bbf2 <__swhatbuf_r+0x3e>
 800bbd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbd4:	e00e      	b.n	800bbf4 <__swhatbuf_r+0x40>
 800bbd6:	466a      	mov	r2, sp
 800bbd8:	f000 f902 	bl	800bde0 <_fstat_r>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	dbf2      	blt.n	800bbc6 <__swhatbuf_r+0x12>
 800bbe0:	9a01      	ldr	r2, [sp, #4]
 800bbe2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bbe6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bbea:	425a      	negs	r2, r3
 800bbec:	415a      	adcs	r2, r3
 800bbee:	602a      	str	r2, [r5, #0]
 800bbf0:	e7ee      	b.n	800bbd0 <__swhatbuf_r+0x1c>
 800bbf2:	2340      	movs	r3, #64	; 0x40
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	6023      	str	r3, [r4, #0]
 800bbf8:	b016      	add	sp, #88	; 0x58
 800bbfa:	bd70      	pop	{r4, r5, r6, pc}

0800bbfc <__smakebuf_r>:
 800bbfc:	898b      	ldrh	r3, [r1, #12]
 800bbfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc00:	079d      	lsls	r5, r3, #30
 800bc02:	4606      	mov	r6, r0
 800bc04:	460c      	mov	r4, r1
 800bc06:	d507      	bpl.n	800bc18 <__smakebuf_r+0x1c>
 800bc08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	6123      	str	r3, [r4, #16]
 800bc10:	2301      	movs	r3, #1
 800bc12:	6163      	str	r3, [r4, #20]
 800bc14:	b002      	add	sp, #8
 800bc16:	bd70      	pop	{r4, r5, r6, pc}
 800bc18:	ab01      	add	r3, sp, #4
 800bc1a:	466a      	mov	r2, sp
 800bc1c:	f7ff ffca 	bl	800bbb4 <__swhatbuf_r>
 800bc20:	9900      	ldr	r1, [sp, #0]
 800bc22:	4605      	mov	r5, r0
 800bc24:	4630      	mov	r0, r6
 800bc26:	f7ff f987 	bl	800af38 <_malloc_r>
 800bc2a:	b948      	cbnz	r0, 800bc40 <__smakebuf_r+0x44>
 800bc2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc30:	059a      	lsls	r2, r3, #22
 800bc32:	d4ef      	bmi.n	800bc14 <__smakebuf_r+0x18>
 800bc34:	f023 0303 	bic.w	r3, r3, #3
 800bc38:	f043 0302 	orr.w	r3, r3, #2
 800bc3c:	81a3      	strh	r3, [r4, #12]
 800bc3e:	e7e3      	b.n	800bc08 <__smakebuf_r+0xc>
 800bc40:	4b0d      	ldr	r3, [pc, #52]	; (800bc78 <__smakebuf_r+0x7c>)
 800bc42:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc44:	89a3      	ldrh	r3, [r4, #12]
 800bc46:	6020      	str	r0, [r4, #0]
 800bc48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc4c:	81a3      	strh	r3, [r4, #12]
 800bc4e:	9b00      	ldr	r3, [sp, #0]
 800bc50:	6163      	str	r3, [r4, #20]
 800bc52:	9b01      	ldr	r3, [sp, #4]
 800bc54:	6120      	str	r0, [r4, #16]
 800bc56:	b15b      	cbz	r3, 800bc70 <__smakebuf_r+0x74>
 800bc58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f000 f8d1 	bl	800be04 <_isatty_r>
 800bc62:	b128      	cbz	r0, 800bc70 <__smakebuf_r+0x74>
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	f023 0303 	bic.w	r3, r3, #3
 800bc6a:	f043 0301 	orr.w	r3, r3, #1
 800bc6e:	81a3      	strh	r3, [r4, #12]
 800bc70:	89a0      	ldrh	r0, [r4, #12]
 800bc72:	4305      	orrs	r5, r0
 800bc74:	81a5      	strh	r5, [r4, #12]
 800bc76:	e7cd      	b.n	800bc14 <__smakebuf_r+0x18>
 800bc78:	0800ba0d 	.word	0x0800ba0d

0800bc7c <_malloc_usable_size_r>:
 800bc7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc80:	1f18      	subs	r0, r3, #4
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	bfbc      	itt	lt
 800bc86:	580b      	ldrlt	r3, [r1, r0]
 800bc88:	18c0      	addlt	r0, r0, r3
 800bc8a:	4770      	bx	lr

0800bc8c <_raise_r>:
 800bc8c:	291f      	cmp	r1, #31
 800bc8e:	b538      	push	{r3, r4, r5, lr}
 800bc90:	4604      	mov	r4, r0
 800bc92:	460d      	mov	r5, r1
 800bc94:	d904      	bls.n	800bca0 <_raise_r+0x14>
 800bc96:	2316      	movs	r3, #22
 800bc98:	6003      	str	r3, [r0, #0]
 800bc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bca2:	b112      	cbz	r2, 800bcaa <_raise_r+0x1e>
 800bca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bca8:	b94b      	cbnz	r3, 800bcbe <_raise_r+0x32>
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f000 f830 	bl	800bd10 <_getpid_r>
 800bcb0:	462a      	mov	r2, r5
 800bcb2:	4601      	mov	r1, r0
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcba:	f000 b817 	b.w	800bcec <_kill_r>
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d00a      	beq.n	800bcd8 <_raise_r+0x4c>
 800bcc2:	1c59      	adds	r1, r3, #1
 800bcc4:	d103      	bne.n	800bcce <_raise_r+0x42>
 800bcc6:	2316      	movs	r3, #22
 800bcc8:	6003      	str	r3, [r0, #0]
 800bcca:	2001      	movs	r0, #1
 800bccc:	e7e7      	b.n	800bc9e <_raise_r+0x12>
 800bcce:	2400      	movs	r4, #0
 800bcd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	4798      	blx	r3
 800bcd8:	2000      	movs	r0, #0
 800bcda:	e7e0      	b.n	800bc9e <_raise_r+0x12>

0800bcdc <raise>:
 800bcdc:	4b02      	ldr	r3, [pc, #8]	; (800bce8 <raise+0xc>)
 800bcde:	4601      	mov	r1, r0
 800bce0:	6818      	ldr	r0, [r3, #0]
 800bce2:	f7ff bfd3 	b.w	800bc8c <_raise_r>
 800bce6:	bf00      	nop
 800bce8:	20000010 	.word	0x20000010

0800bcec <_kill_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	4d07      	ldr	r5, [pc, #28]	; (800bd0c <_kill_r+0x20>)
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	602b      	str	r3, [r5, #0]
 800bcfa:	f7f6 fcb7 	bl	800266c <_kill>
 800bcfe:	1c43      	adds	r3, r0, #1
 800bd00:	d102      	bne.n	800bd08 <_kill_r+0x1c>
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	b103      	cbz	r3, 800bd08 <_kill_r+0x1c>
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	bd38      	pop	{r3, r4, r5, pc}
 800bd0a:	bf00      	nop
 800bd0c:	2000307c 	.word	0x2000307c

0800bd10 <_getpid_r>:
 800bd10:	f7f6 bca4 	b.w	800265c <_getpid>

0800bd14 <__sread>:
 800bd14:	b510      	push	{r4, lr}
 800bd16:	460c      	mov	r4, r1
 800bd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd1c:	f000 f894 	bl	800be48 <_read_r>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	bfab      	itete	ge
 800bd24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd26:	89a3      	ldrhlt	r3, [r4, #12]
 800bd28:	181b      	addge	r3, r3, r0
 800bd2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd2e:	bfac      	ite	ge
 800bd30:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd32:	81a3      	strhlt	r3, [r4, #12]
 800bd34:	bd10      	pop	{r4, pc}

0800bd36 <__swrite>:
 800bd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3a:	461f      	mov	r7, r3
 800bd3c:	898b      	ldrh	r3, [r1, #12]
 800bd3e:	05db      	lsls	r3, r3, #23
 800bd40:	4605      	mov	r5, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	4616      	mov	r6, r2
 800bd46:	d505      	bpl.n	800bd54 <__swrite+0x1e>
 800bd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f000 f868 	bl	800be24 <_lseek_r>
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd5e:	81a3      	strh	r3, [r4, #12]
 800bd60:	4632      	mov	r2, r6
 800bd62:	463b      	mov	r3, r7
 800bd64:	4628      	mov	r0, r5
 800bd66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd6a:	f000 b817 	b.w	800bd9c <_write_r>

0800bd6e <__sseek>:
 800bd6e:	b510      	push	{r4, lr}
 800bd70:	460c      	mov	r4, r1
 800bd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd76:	f000 f855 	bl	800be24 <_lseek_r>
 800bd7a:	1c43      	adds	r3, r0, #1
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	bf15      	itete	ne
 800bd80:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd8a:	81a3      	strheq	r3, [r4, #12]
 800bd8c:	bf18      	it	ne
 800bd8e:	81a3      	strhne	r3, [r4, #12]
 800bd90:	bd10      	pop	{r4, pc}

0800bd92 <__sclose>:
 800bd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd96:	f000 b813 	b.w	800bdc0 <_close_r>
	...

0800bd9c <_write_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	4d07      	ldr	r5, [pc, #28]	; (800bdbc <_write_r+0x20>)
 800bda0:	4604      	mov	r4, r0
 800bda2:	4608      	mov	r0, r1
 800bda4:	4611      	mov	r1, r2
 800bda6:	2200      	movs	r2, #0
 800bda8:	602a      	str	r2, [r5, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f7f6 fc95 	bl	80026da <_write>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d102      	bne.n	800bdba <_write_r+0x1e>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b103      	cbz	r3, 800bdba <_write_r+0x1e>
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	2000307c 	.word	0x2000307c

0800bdc0 <_close_r>:
 800bdc0:	b538      	push	{r3, r4, r5, lr}
 800bdc2:	4d06      	ldr	r5, [pc, #24]	; (800bddc <_close_r+0x1c>)
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	4608      	mov	r0, r1
 800bdca:	602b      	str	r3, [r5, #0]
 800bdcc:	f7f6 fca1 	bl	8002712 <_close>
 800bdd0:	1c43      	adds	r3, r0, #1
 800bdd2:	d102      	bne.n	800bdda <_close_r+0x1a>
 800bdd4:	682b      	ldr	r3, [r5, #0]
 800bdd6:	b103      	cbz	r3, 800bdda <_close_r+0x1a>
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	bd38      	pop	{r3, r4, r5, pc}
 800bddc:	2000307c 	.word	0x2000307c

0800bde0 <_fstat_r>:
 800bde0:	b538      	push	{r3, r4, r5, lr}
 800bde2:	4d07      	ldr	r5, [pc, #28]	; (800be00 <_fstat_r+0x20>)
 800bde4:	2300      	movs	r3, #0
 800bde6:	4604      	mov	r4, r0
 800bde8:	4608      	mov	r0, r1
 800bdea:	4611      	mov	r1, r2
 800bdec:	602b      	str	r3, [r5, #0]
 800bdee:	f7f6 fc9c 	bl	800272a <_fstat>
 800bdf2:	1c43      	adds	r3, r0, #1
 800bdf4:	d102      	bne.n	800bdfc <_fstat_r+0x1c>
 800bdf6:	682b      	ldr	r3, [r5, #0]
 800bdf8:	b103      	cbz	r3, 800bdfc <_fstat_r+0x1c>
 800bdfa:	6023      	str	r3, [r4, #0]
 800bdfc:	bd38      	pop	{r3, r4, r5, pc}
 800bdfe:	bf00      	nop
 800be00:	2000307c 	.word	0x2000307c

0800be04 <_isatty_r>:
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	4d06      	ldr	r5, [pc, #24]	; (800be20 <_isatty_r+0x1c>)
 800be08:	2300      	movs	r3, #0
 800be0a:	4604      	mov	r4, r0
 800be0c:	4608      	mov	r0, r1
 800be0e:	602b      	str	r3, [r5, #0]
 800be10:	f7f6 fc9b 	bl	800274a <_isatty>
 800be14:	1c43      	adds	r3, r0, #1
 800be16:	d102      	bne.n	800be1e <_isatty_r+0x1a>
 800be18:	682b      	ldr	r3, [r5, #0]
 800be1a:	b103      	cbz	r3, 800be1e <_isatty_r+0x1a>
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
 800be20:	2000307c 	.word	0x2000307c

0800be24 <_lseek_r>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	4d07      	ldr	r5, [pc, #28]	; (800be44 <_lseek_r+0x20>)
 800be28:	4604      	mov	r4, r0
 800be2a:	4608      	mov	r0, r1
 800be2c:	4611      	mov	r1, r2
 800be2e:	2200      	movs	r2, #0
 800be30:	602a      	str	r2, [r5, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	f7f6 fc94 	bl	8002760 <_lseek>
 800be38:	1c43      	adds	r3, r0, #1
 800be3a:	d102      	bne.n	800be42 <_lseek_r+0x1e>
 800be3c:	682b      	ldr	r3, [r5, #0]
 800be3e:	b103      	cbz	r3, 800be42 <_lseek_r+0x1e>
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	bd38      	pop	{r3, r4, r5, pc}
 800be44:	2000307c 	.word	0x2000307c

0800be48 <_read_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	4d07      	ldr	r5, [pc, #28]	; (800be68 <_read_r+0x20>)
 800be4c:	4604      	mov	r4, r0
 800be4e:	4608      	mov	r0, r1
 800be50:	4611      	mov	r1, r2
 800be52:	2200      	movs	r2, #0
 800be54:	602a      	str	r2, [r5, #0]
 800be56:	461a      	mov	r2, r3
 800be58:	f7f6 fc22 	bl	80026a0 <_read>
 800be5c:	1c43      	adds	r3, r0, #1
 800be5e:	d102      	bne.n	800be66 <_read_r+0x1e>
 800be60:	682b      	ldr	r3, [r5, #0]
 800be62:	b103      	cbz	r3, 800be66 <_read_r+0x1e>
 800be64:	6023      	str	r3, [r4, #0]
 800be66:	bd38      	pop	{r3, r4, r5, pc}
 800be68:	2000307c 	.word	0x2000307c

0800be6c <log10f>:
 800be6c:	b508      	push	{r3, lr}
 800be6e:	ed2d 8b02 	vpush	{d8}
 800be72:	eeb0 8a40 	vmov.f32	s16, s0
 800be76:	f000 f855 	bl	800bf24 <__ieee754_log10f>
 800be7a:	4b14      	ldr	r3, [pc, #80]	; (800becc <log10f+0x60>)
 800be7c:	f993 3000 	ldrsb.w	r3, [r3]
 800be80:	3301      	adds	r3, #1
 800be82:	d014      	beq.n	800beae <log10f+0x42>
 800be84:	eeb4 8a48 	vcmp.f32	s16, s16
 800be88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be8c:	d60f      	bvs.n	800beae <log10f+0x42>
 800be8e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800be92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be96:	d80a      	bhi.n	800beae <log10f+0x42>
 800be98:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800be9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea0:	d108      	bne.n	800beb4 <log10f+0x48>
 800bea2:	f7fd f91b 	bl	80090dc <__errno>
 800bea6:	2322      	movs	r3, #34	; 0x22
 800bea8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800bed0 <log10f+0x64>
 800beac:	6003      	str	r3, [r0, #0]
 800beae:	ecbd 8b02 	vpop	{d8}
 800beb2:	bd08      	pop	{r3, pc}
 800beb4:	f7fd f912 	bl	80090dc <__errno>
 800beb8:	ecbd 8b02 	vpop	{d8}
 800bebc:	2321      	movs	r3, #33	; 0x21
 800bebe:	6003      	str	r3, [r0, #0]
 800bec0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bec4:	4803      	ldr	r0, [pc, #12]	; (800bed4 <log10f+0x68>)
 800bec6:	f000 b889 	b.w	800bfdc <nanf>
 800beca:	bf00      	nop
 800becc:	200001e0 	.word	0x200001e0
 800bed0:	ff800000 	.word	0xff800000
 800bed4:	0801fad0 	.word	0x0801fad0

0800bed8 <sqrtf>:
 800bed8:	b508      	push	{r3, lr}
 800beda:	ed2d 8b02 	vpush	{d8}
 800bede:	eeb0 8a40 	vmov.f32	s16, s0
 800bee2:	f000 f877 	bl	800bfd4 <__ieee754_sqrtf>
 800bee6:	4b0d      	ldr	r3, [pc, #52]	; (800bf1c <sqrtf+0x44>)
 800bee8:	f993 3000 	ldrsb.w	r3, [r3]
 800beec:	3301      	adds	r3, #1
 800beee:	d011      	beq.n	800bf14 <sqrtf+0x3c>
 800bef0:	eeb4 8a48 	vcmp.f32	s16, s16
 800bef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef8:	d60c      	bvs.n	800bf14 <sqrtf+0x3c>
 800befa:	eddf 8a09 	vldr	s17, [pc, #36]	; 800bf20 <sqrtf+0x48>
 800befe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bf02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf06:	d505      	bpl.n	800bf14 <sqrtf+0x3c>
 800bf08:	f7fd f8e8 	bl	80090dc <__errno>
 800bf0c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bf10:	2321      	movs	r3, #33	; 0x21
 800bf12:	6003      	str	r3, [r0, #0]
 800bf14:	ecbd 8b02 	vpop	{d8}
 800bf18:	bd08      	pop	{r3, pc}
 800bf1a:	bf00      	nop
 800bf1c:	200001e0 	.word	0x200001e0
 800bf20:	00000000 	.word	0x00000000

0800bf24 <__ieee754_log10f>:
 800bf24:	b508      	push	{r3, lr}
 800bf26:	ee10 2a10 	vmov	r2, s0
 800bf2a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800bf2e:	ed2d 8b02 	vpush	{d8}
 800bf32:	d108      	bne.n	800bf46 <__ieee754_log10f+0x22>
 800bf34:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800bfbc <__ieee754_log10f+0x98>
 800bf38:	eddf 7a21 	vldr	s15, [pc, #132]	; 800bfc0 <__ieee754_log10f+0x9c>
 800bf3c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bf40:	ecbd 8b02 	vpop	{d8}
 800bf44:	bd08      	pop	{r3, pc}
 800bf46:	2a00      	cmp	r2, #0
 800bf48:	da02      	bge.n	800bf50 <__ieee754_log10f+0x2c>
 800bf4a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bf4e:	e7f3      	b.n	800bf38 <__ieee754_log10f+0x14>
 800bf50:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bf54:	db02      	blt.n	800bf5c <__ieee754_log10f+0x38>
 800bf56:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bf5a:	e7f1      	b.n	800bf40 <__ieee754_log10f+0x1c>
 800bf5c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800bf60:	bfbf      	itttt	lt
 800bf62:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800bfc4 <__ieee754_log10f+0xa0>
 800bf66:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800bf6a:	f06f 0118 	mvnlt.w	r1, #24
 800bf6e:	ee17 2a90 	vmovlt	r2, s15
 800bf72:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800bf76:	bfa8      	it	ge
 800bf78:	2100      	movge	r1, #0
 800bf7a:	3b7f      	subs	r3, #127	; 0x7f
 800bf7c:	440b      	add	r3, r1
 800bf7e:	0fd9      	lsrs	r1, r3, #31
 800bf80:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800bf84:	ee07 3a90 	vmov	s15, r3
 800bf88:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800bf8c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800bf90:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800bf94:	ee00 3a10 	vmov	s0, r3
 800bf98:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800bf9c:	f000 f824 	bl	800bfe8 <__ieee754_logf>
 800bfa0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bfc8 <__ieee754_log10f+0xa4>
 800bfa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bfa8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bfcc <__ieee754_log10f+0xa8>
 800bfac:	eea8 0a27 	vfma.f32	s0, s16, s15
 800bfb0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800bfd0 <__ieee754_log10f+0xac>
 800bfb4:	eea8 0a27 	vfma.f32	s0, s16, s15
 800bfb8:	e7c2      	b.n	800bf40 <__ieee754_log10f+0x1c>
 800bfba:	bf00      	nop
 800bfbc:	cc000000 	.word	0xcc000000
 800bfc0:	00000000 	.word	0x00000000
 800bfc4:	4c000000 	.word	0x4c000000
 800bfc8:	3ede5bd9 	.word	0x3ede5bd9
 800bfcc:	355427db 	.word	0x355427db
 800bfd0:	3e9a2080 	.word	0x3e9a2080

0800bfd4 <__ieee754_sqrtf>:
 800bfd4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bfd8:	4770      	bx	lr
	...

0800bfdc <nanf>:
 800bfdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfe4 <nanf+0x8>
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	7fc00000 	.word	0x7fc00000

0800bfe8 <__ieee754_logf>:
 800bfe8:	ee10 3a10 	vmov	r3, s0
 800bfec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800bff0:	d106      	bne.n	800c000 <__ieee754_logf+0x18>
 800bff2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c188 <__ieee754_logf+0x1a0>
 800bff6:	eddf 7a65 	vldr	s15, [pc, #404]	; 800c18c <__ieee754_logf+0x1a4>
 800bffa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bffe:	4770      	bx	lr
 800c000:	2b00      	cmp	r3, #0
 800c002:	da02      	bge.n	800c00a <__ieee754_logf+0x22>
 800c004:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c008:	e7f5      	b.n	800bff6 <__ieee754_logf+0xe>
 800c00a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c00e:	db02      	blt.n	800c016 <__ieee754_logf+0x2e>
 800c010:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c014:	4770      	bx	lr
 800c016:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c01a:	bfb8      	it	lt
 800c01c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800c190 <__ieee754_logf+0x1a8>
 800c020:	485c      	ldr	r0, [pc, #368]	; (800c194 <__ieee754_logf+0x1ac>)
 800c022:	bfbe      	ittt	lt
 800c024:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c028:	f06f 0118 	mvnlt.w	r1, #24
 800c02c:	ee17 3a90 	vmovlt	r3, s15
 800c030:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800c034:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c038:	4418      	add	r0, r3
 800c03a:	bfa8      	it	ge
 800c03c:	2100      	movge	r1, #0
 800c03e:	3a7f      	subs	r2, #127	; 0x7f
 800c040:	440a      	add	r2, r1
 800c042:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800c046:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800c04a:	4319      	orrs	r1, r3
 800c04c:	ee00 1a10 	vmov	s0, r1
 800c050:	4951      	ldr	r1, [pc, #324]	; (800c198 <__ieee754_logf+0x1b0>)
 800c052:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800c056:	f103 000f 	add.w	r0, r3, #15
 800c05a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c05e:	4001      	ands	r1, r0
 800c060:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c064:	bb89      	cbnz	r1, 800c0ca <__ieee754_logf+0xe2>
 800c066:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06e:	d10f      	bne.n	800c090 <__ieee754_logf+0xa8>
 800c070:	2a00      	cmp	r2, #0
 800c072:	f000 8085 	beq.w	800c180 <__ieee754_logf+0x198>
 800c076:	ee07 2a90 	vmov	s15, r2
 800c07a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800c19c <__ieee754_logf+0x1b4>
 800c07e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800c1a0 <__ieee754_logf+0x1b8>
 800c082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c086:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c08a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800c08e:	4770      	bx	lr
 800c090:	eddf 6a44 	vldr	s13, [pc, #272]	; 800c1a4 <__ieee754_logf+0x1bc>
 800c094:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c098:	eee0 7a66 	vfms.f32	s15, s0, s13
 800c09c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c0a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0a4:	b912      	cbnz	r2, 800c0ac <__ieee754_logf+0xc4>
 800c0a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c0aa:	4770      	bx	lr
 800c0ac:	ee07 2a90 	vmov	s15, r2
 800c0b0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800c19c <__ieee754_logf+0x1b4>
 800c0b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0b8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c0bc:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c0c0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800c1a0 <__ieee754_logf+0x1b8>
 800c0c4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800c0c8:	4770      	bx	lr
 800c0ca:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c0ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c0d2:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c1a8 <__ieee754_logf+0x1c0>
 800c0d6:	eddf 4a35 	vldr	s9, [pc, #212]	; 800c1ac <__ieee754_logf+0x1c4>
 800c0da:	4935      	ldr	r1, [pc, #212]	; (800c1b0 <__ieee754_logf+0x1c8>)
 800c0dc:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800c0e0:	4419      	add	r1, r3
 800c0e2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800c0e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c0ea:	430b      	orrs	r3, r1
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	ee07 2a90 	vmov	s15, r2
 800c0f2:	ee26 5a06 	vmul.f32	s10, s12, s12
 800c0f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c0fa:	ee25 7a05 	vmul.f32	s14, s10, s10
 800c0fe:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800c1b4 <__ieee754_logf+0x1cc>
 800c102:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c106:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800c1b8 <__ieee754_logf+0x1d0>
 800c10a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c10e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c1bc <__ieee754_logf+0x1d4>
 800c112:	eee7 7a24 	vfma.f32	s15, s14, s9
 800c116:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800c1c0 <__ieee754_logf+0x1d8>
 800c11a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800c11e:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c1c4 <__ieee754_logf+0x1dc>
 800c122:	eee4 7a87 	vfma.f32	s15, s9, s14
 800c126:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c12a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c12e:	dd1c      	ble.n	800c16a <__ieee754_logf+0x182>
 800c130:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c134:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c138:	ee27 7a00 	vmul.f32	s14, s14, s0
 800c13c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c140:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c144:	b922      	cbnz	r2, 800c150 <__ieee754_logf+0x168>
 800c146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c14a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c14e:	4770      	bx	lr
 800c150:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800c19c <__ieee754_logf+0x1b4>
 800c154:	eee6 7a86 	vfma.f32	s15, s13, s12
 800c158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c15c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c160:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c1a0 <__ieee754_logf+0x1b8>
 800c164:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800c168:	4770      	bx	lr
 800c16a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c16e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c172:	2a00      	cmp	r2, #0
 800c174:	d0e9      	beq.n	800c14a <__ieee754_logf+0x162>
 800c176:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800c19c <__ieee754_logf+0x1b4>
 800c17a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c17e:	e7ed      	b.n	800c15c <__ieee754_logf+0x174>
 800c180:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800c18c <__ieee754_logf+0x1a4>
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	cc000000 	.word	0xcc000000
 800c18c:	00000000 	.word	0x00000000
 800c190:	4c000000 	.word	0x4c000000
 800c194:	004afb20 	.word	0x004afb20
 800c198:	007ffff0 	.word	0x007ffff0
 800c19c:	3717f7d1 	.word	0x3717f7d1
 800c1a0:	3f317180 	.word	0x3f317180
 800c1a4:	3eaaaaab 	.word	0x3eaaaaab
 800c1a8:	3e1cd04f 	.word	0x3e1cd04f
 800c1ac:	3e178897 	.word	0x3e178897
 800c1b0:	ffcf5c30 	.word	0xffcf5c30
 800c1b4:	3e638e29 	.word	0x3e638e29
 800c1b8:	3ecccccd 	.word	0x3ecccccd
 800c1bc:	3e3a3325 	.word	0x3e3a3325
 800c1c0:	3e924925 	.word	0x3e924925
 800c1c4:	3f2aaaab 	.word	0x3f2aaaab

0800c1c8 <_init>:
 800c1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ca:	bf00      	nop
 800c1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ce:	bc08      	pop	{r3}
 800c1d0:	469e      	mov	lr, r3
 800c1d2:	4770      	bx	lr

0800c1d4 <_fini>:
 800c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d6:	bf00      	nop
 800c1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1da:	bc08      	pop	{r3}
 800c1dc:	469e      	mov	lr, r3
 800c1de:	4770      	bx	lr
