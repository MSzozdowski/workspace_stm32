
T9_L11_USBDeviceHIDMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f0  080065f0  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  080065f0  080065f0  000165f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065f8  080065f8  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065fc  080065fc  000165fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08006600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000164  08006764  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  08006764  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015307  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003000  00000000  00000000  0003549b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  000384a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00039178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018757  00000000  00000000  00039d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113f6  00000000  00000000  0005247f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895d0  00000000  00000000  00063875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ece45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000336c  00000000  00000000  000ece98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000164 	.word	0x20000164
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006578 	.word	0x08006578

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000168 	.word	0x20000168
 80001d4:	08006578 	.word	0x08006578

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <MX_GPIO_Init+0xd0>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <MX_GPIO_Init+0xd0>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <MX_GPIO_Init+0xd0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a25      	ldr	r2, [pc, #148]	; (80005a0 <MX_GPIO_Init+0xd0>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	4812      	ldr	r0, [pc, #72]	; (80005a4 <MX_GPIO_Init+0xd4>)
 800055c:	f000 fd08 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000566:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <MX_GPIO_Init+0xd8>)
 8000578:	f000 fb5e 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800057c:	2320      	movs	r3, #32
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000594:	f000 fb50 	bl	8000c38 <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020000 	.word	0x40020000
 80005a8:	40020800 	.word	0x40020800

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 f99a 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f820 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f7ff ff8a 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f8f8 	bl	80007b0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005c0:	f005 fb80 	bl	8005cc4 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_RESET)
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x40>)
 80005ca:	f000 fcb9 	bl	8000f40 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f7      	bne.n	80005c4 <main+0x18>
	  {
		  UsbMouseHidBuffer[1] = 100;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <main+0x44>)
 80005d6:	2264      	movs	r2, #100	; 0x64
 80005d8:	705a      	strb	r2, [r3, #1]
		  USBD_HID_SendReport(&hUsbDeviceFS, UsbMouseHidBuffer, 4);
 80005da:	2204      	movs	r2, #4
 80005dc:	4904      	ldr	r1, [pc, #16]	; (80005f0 <main+0x44>)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <main+0x48>)
 80005e0:	f004 f9aa 	bl	8004938 <USBD_HID_SendReport>
		  HAL_Delay(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f000 f9f1 	bl	80009cc <HAL_Delay>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_RESET)
 80005ea:	e7eb      	b.n	80005c4 <main+0x18>
 80005ec:	40020800 	.word	0x40020800
 80005f0:	20000198 	.word	0x20000198
 80005f4:	200001e4 	.word	0x200001e4

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 ffae 	bl	8006568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <SystemClock_Config+0xc8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <SystemClock_Config+0xcc>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000658:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800066c:	2348      	movs	r3, #72	; 0x48
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000674:	2303      	movs	r3, #3
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fdfb 	bl	8002278 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 f81e 	bl	80006c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f85d 	bl	8002768 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b4:	f000 f808 	bl	80006c8 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <HAL_MspInit+0x4c>)
 80006e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <HAL_MspInit+0x4c>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_MspInit+0x4c>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_MspInit+0x4c>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000712:	2007      	movs	r0, #7
 8000714:	f000 fa4e 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x4>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <MemManage_Handler+0x4>

08000736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <UsageFault_Handler+0x4>

08000742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000770:	f000 f90c 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <OTG_FS_IRQHandler+0x10>)
 800077e:	f000 fd60 	bl	8001242 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200006b4 	.word	0x200006b4

0800078c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <SystemInit+0x20>)
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <SystemInit+0x20>)
 8000798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800079c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f002 f9ba 	bl	8002b60 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f7ff ff69 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000019c 	.word	0x2000019c
 8000800:	40004400 	.word	0x40004400

08000804 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_UART_MspInit+0x84>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12b      	bne.n	800087e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_UART_MspInit+0x88>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_UART_MspInit+0x88>)
 8000830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_UART_MspInit+0x88>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <HAL_UART_MspInit+0x88>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <HAL_UART_MspInit+0x88>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_UART_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085e:	230c      	movs	r3, #12
 8000860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800086e:	2307      	movs	r3, #7
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <HAL_UART_MspInit+0x8c>)
 800087a:	f000 f9dd 	bl	8000c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40004400 	.word	0x40004400
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800089a:	490e      	ldr	r1, [pc, #56]	; (80008d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008b0:	4c0b      	ldr	r4, [pc, #44]	; (80008e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008be:	f7ff ff65 	bl	800078c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008c2:	f005 fe2d 	bl	8006520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fe71 	bl	80005ac <main>
  bx  lr    
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80008d8:	08006600 	.word	0x08006600
  ldr r2, =_sbss
 80008dc:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80008e0:	20000abc 	.word	0x20000abc

080008e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <HAL_Init+0x40>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_Init+0x40>)
 80008fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_Init+0x40>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f94f 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff feda 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f967 	bl	8000c1e <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f92f 	bl	8000bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	200001e0 	.word	0x200001e0

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200001e0 	.word	0x200001e0

080009cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff ffee 	bl	80009b4 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffde 	bl	80009b4 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db0b      	blt.n	8000aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 021f 	and.w	r2, r3, #31
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <__NVIC_EnableIRQ+0x38>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	2001      	movs	r0, #1
 8000a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db0a      	blt.n	8000ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	490c      	ldr	r1, [pc, #48]	; (8000b00 <__NVIC_SetPriority+0x4c>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000adc:	e00a      	b.n	8000af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4908      	ldr	r1, [pc, #32]	; (8000b04 <__NVIC_SetPriority+0x50>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	3b04      	subs	r3, #4
 8000aec:	0112      	lsls	r2, r2, #4
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	440b      	add	r3, r1
 8000af2:	761a      	strb	r2, [r3, #24]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	; 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f1c3 0307 	rsb	r3, r3, #7
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	bf28      	it	cs
 8000b26:	2304      	movcs	r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d902      	bls.n	8000b38 <NVIC_EncodePriority+0x30>
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3b03      	subs	r3, #3
 8000b36:	e000      	b.n	8000b3a <NVIC_EncodePriority+0x32>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43da      	mvns	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43d9      	mvns	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	4313      	orrs	r3, r2
         );
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	; 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f7ff ff8e 	bl	8000ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff29 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff3e 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff8e 	bl	8000b08 <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5d 	bl	8000ab4 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff31 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffa2 	bl	8000b70 <SysTick_Config>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	e159      	b.n	8000f08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c54:	2201      	movs	r2, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 8148 	bne.w	8000f02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d005      	beq.n	8000c8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d130      	bne.n	8000cec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	091b      	lsrs	r3, r3, #4
 8000cd6:	f003 0201 	and.w	r2, r3, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d017      	beq.n	8000d28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d123      	bne.n	8000d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	08da      	lsrs	r2, r3, #3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3208      	adds	r2, #8
 8000d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	08da      	lsrs	r2, r3, #3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	69b9      	ldr	r1, [r7, #24]
 8000d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0203 	and.w	r2, r3, #3
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80a2 	beq.w	8000f02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <HAL_GPIO_Init+0x2e8>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a56      	ldr	r2, [pc, #344]	; (8000f20 <HAL_GPIO_Init+0x2e8>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <HAL_GPIO_Init+0x2e8>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dda:	4a52      	ldr	r2, [pc, #328]	; (8000f24 <HAL_GPIO_Init+0x2ec>)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	220f      	movs	r2, #15
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a49      	ldr	r2, [pc, #292]	; (8000f28 <HAL_GPIO_Init+0x2f0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d019      	beq.n	8000e3a <HAL_GPIO_Init+0x202>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a48      	ldr	r2, [pc, #288]	; (8000f2c <HAL_GPIO_Init+0x2f4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0x1fe>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a47      	ldr	r2, [pc, #284]	; (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d00d      	beq.n	8000e32 <HAL_GPIO_Init+0x1fa>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a46      	ldr	r2, [pc, #280]	; (8000f34 <HAL_GPIO_Init+0x2fc>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d007      	beq.n	8000e2e <HAL_GPIO_Init+0x1f6>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a45      	ldr	r2, [pc, #276]	; (8000f38 <HAL_GPIO_Init+0x300>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_GPIO_Init+0x1f2>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	; (8000f24 <HAL_GPIO_Init+0x2ec>)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e5a:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e7e:	4a2f      	ldr	r2, [pc, #188]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ea8:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000efc:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	f67f aea2 	bls.w	8000c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40013c00 	.word	0x40013c00

08000f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e001      	b.n	8000f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa4:	b08f      	sub	sp, #60	; 0x3c
 8000fa6:	af0a      	add	r7, sp, #40	; 0x28
 8000fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e10f      	b.n	80011d4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f004 ffae 	bl	8005f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 f8df 	bl	80031b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	687e      	ldr	r6, [r7, #4]
 8001000:	466d      	mov	r5, sp
 8001002:	f106 0410 	add.w	r4, r6, #16
 8001006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001012:	e885 0003 	stmia.w	r5, {r0, r1}
 8001016:	1d33      	adds	r3, r6, #4
 8001018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800101a:	6838      	ldr	r0, [r7, #0]
 800101c:	f001 ffb6 	bl	8002f8c <USB_CoreInit>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2202      	movs	r2, #2
 800102a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0d0      	b.n	80011d4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f002 f8cd 	bl	80031d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e04a      	b.n	80010da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	333d      	adds	r3, #61	; 0x3d
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	333c      	adds	r3, #60	; 0x3c
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	b298      	uxth	r0, r3
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	3342      	adds	r3, #66	; 0x42
 8001080:	4602      	mov	r2, r0
 8001082:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	333f      	adds	r3, #63	; 0x3f
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	3344      	adds	r3, #68	; 0x44
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3348      	adds	r3, #72	; 0x48
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3350      	adds	r3, #80	; 0x50
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	3301      	adds	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3af      	bcc.n	8001044 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e044      	b.n	8001174 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	1a9b      	subs	r3, r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	1a9b      	subs	r3, r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	1a9b      	subs	r3, r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	1a9b      	subs	r3, r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3b5      	bcc.n	80010ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	687e      	ldr	r6, [r7, #4]
 8001186:	466d      	mov	r5, sp
 8001188:	f106 0410 	add.w	r4, r6, #16
 800118c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001194:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001198:	e885 0003 	stmia.w	r5, {r0, r1}
 800119c:	1d33      	adds	r3, r6, #4
 800119e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f002 f865 	bl	8003270 <USB_DevInit>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2202      	movs	r2, #2
 80011b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e00d      	b.n	80011d4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 f8e1 	bl	8004394 <USB_DevDisconnect>

  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <HAL_PCD_Start+0x1c>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e020      	b.n	800123a <HAL_PCD_Start+0x5e>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	2b01      	cmp	r3, #1
 8001206:	d109      	bne.n	800121c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800120c:	2b01      	cmp	r3, #1
 800120e:	d005      	beq.n	800121c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001214:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f001 ffb7 	bl	8003194 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f003 f891 	bl	8004352 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001242:	b590      	push	{r4, r7, lr}
 8001244:	b08d      	sub	sp, #52	; 0x34
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f003 f94f 	bl	80044fc <USB_GetMode>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	f040 839d 	bne.w	80019a0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f003 f8b3 	bl	80043d6 <USB_ReadInterrupts>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8393 	beq.w	800199e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f003 f8aa 	bl	80043d6 <USB_ReadInterrupts>
 8001282:	4603      	mov	r3, r0
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b02      	cmp	r3, #2
 800128a:	d107      	bne.n	800129c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f002 0202 	and.w	r2, r2, #2
 800129a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 f898 	bl	80043d6 <USB_ReadInterrupts>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	2b10      	cmp	r3, #16
 80012ae:	d161      	bne.n	8001374 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	699a      	ldr	r2, [r3, #24]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0210 	bic.w	r2, r2, #16
 80012be:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f003 020f 	and.w	r2, r3, #15
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	3304      	adds	r3, #4
 80012de:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	0c5b      	lsrs	r3, r3, #17
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d124      	bne.n	8001336 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d035      	beq.n	8001364 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001306:	b29b      	uxth	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	6a38      	ldr	r0, [r7, #32]
 800130c:	f002 fecf 	bl	80040ae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800131c:	441a      	add	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	699a      	ldr	r2, [r3, #24]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132e:	441a      	add	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	619a      	str	r2, [r3, #24]
 8001334:	e016      	b.n	8001364 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	0c5b      	lsrs	r3, r3, #17
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	2b06      	cmp	r3, #6
 8001340:	d110      	bne.n	8001364 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001348:	2208      	movs	r2, #8
 800134a:	4619      	mov	r1, r3
 800134c:	6a38      	ldr	r0, [r7, #32]
 800134e:	f002 feae 	bl	80040ae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	699a      	ldr	r2, [r3, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135e:	441a      	add	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0210 	orr.w	r2, r2, #16
 8001372:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f003 f82c 	bl	80043d6 <USB_ReadInterrupts>
 800137e:	4603      	mov	r3, r0
 8001380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001384:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001388:	d16e      	bne.n	8001468 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f003 f832 	bl	80043fc <USB_ReadDevAllOutEpInterrupt>
 8001398:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800139a:	e062      	b.n	8001462 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d057      	beq.n	8001456 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 f857 	bl	8004464 <USB_ReadDevOutEPInterrupt>
 80013b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00c      	beq.n	80013dc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ce:	461a      	mov	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fd98 	bl	8001f0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00c      	beq.n	8001400 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	2308      	movs	r3, #8
 80013f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fe92 	bl	8002124 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001416:	461a      	mov	r2, r3
 8001418:	2310      	movs	r3, #16
 800141a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	015a      	lsls	r2, r3, #5
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	4413      	add	r3, r2
 800142e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001432:	461a      	mov	r2, r3
 8001434:	2320      	movs	r3, #32
 8001436:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d009      	beq.n	8001456 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144e:	461a      	mov	r2, r3
 8001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001454:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	3301      	adds	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145e:	085b      	lsrs	r3, r3, #1
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001464:	2b00      	cmp	r3, #0
 8001466:	d199      	bne.n	800139c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 ffb2 	bl	80043d6 <USB_ReadInterrupts>
 8001472:	4603      	mov	r3, r0
 8001474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001478:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800147c:	f040 80c0 	bne.w	8001600 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f002 ffd3 	bl	8004430 <USB_ReadDevAllInEpInterrupt>
 800148a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001490:	e0b2      	b.n	80015f8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a7 	beq.w	80015ec <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fff9 	bl	80044a0 <USB_ReadDevInEPInterrupt>
 80014ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d057      	beq.n	800156a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69f9      	ldr	r1, [r7, #28]
 80014d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014da:	4013      	ands	r3, r2
 80014dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	015a      	lsls	r2, r3, #5
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	4413      	add	r3, r2
 80014e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ea:	461a      	mov	r2, r3
 80014ec:	2301      	movs	r3, #1
 80014ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d132      	bne.n	800155e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	3348      	adds	r3, #72	; 0x48
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4403      	add	r3, r0
 8001518:	3344      	adds	r3, #68	; 0x44
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4419      	add	r1, r3
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4403      	add	r3, r0
 800152c:	3348      	adds	r3, #72	; 0x48
 800152e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	2b00      	cmp	r3, #0
 8001534:	d113      	bne.n	800155e <HAL_PCD_IRQHandler+0x31c>
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3350      	adds	r3, #80	; 0x50
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d108      	bne.n	800155e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001556:	461a      	mov	r2, r3
 8001558:	2101      	movs	r1, #1
 800155a:	f003 f801 	bl	8004560 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f004 fd64 	bl	8006032 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	4413      	add	r3, r2
 800157c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001580:	461a      	mov	r2, r3
 8001582:	2308      	movs	r3, #8
 8001584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	4413      	add	r3, r2
 8001598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800159c:	461a      	mov	r2, r3
 800159e:	2310      	movs	r3, #16
 80015a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b8:	461a      	mov	r2, r3
 80015ba:	2340      	movs	r3, #64	; 0x40
 80015bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d4:	461a      	mov	r2, r3
 80015d6:	2302      	movs	r3, #2
 80015d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fc03 	bl	8001df2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	3301      	adds	r3, #1
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f47f af49 	bne.w	8001492 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 fee6 	bl	80043d6 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001614:	d122      	bne.n	800165c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001630:	2b01      	cmp	r3, #1
 8001632:	d108      	bne.n	8001646 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800163c:	2100      	movs	r1, #0
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fe0e 	bl	8002260 <HAL_PCDEx_LPM_Callback>
 8001644:	e002      	b.n	800164c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f004 fd60 	bl	800610c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800165a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f002 feb8 	bl	80043d6 <USB_ReadInterrupts>
 8001666:	4603      	mov	r3, r0
 8001668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001670:	d112      	bne.n	8001698 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b01      	cmp	r3, #1
 8001680:	d102      	bne.n	8001688 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f004 fd1c 	bl	80060c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001696:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fe9a 	bl	80043d6 <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ac:	f040 80c7 	bne.w	800183e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2110      	movs	r1, #16
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 ff34 	bl	8003538 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d4:	e056      	b.n	8001784 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	015a      	lsls	r2, r3, #5
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e2:	461a      	mov	r2, r3
 80016e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	015a      	lsls	r2, r3, #5
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	4413      	add	r3, r2
 80016f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016fa:	0151      	lsls	r1, r2, #5
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	440a      	add	r2, r1
 8001700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001704:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001708:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800171a:	0151      	lsls	r1, r2, #5
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	440a      	add	r2, r1
 8001720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001724:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001728:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172c:	015a      	lsls	r2, r3, #5
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	4413      	add	r3, r2
 8001732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001736:	461a      	mov	r2, r3
 8001738:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800173c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174e:	0151      	lsls	r1, r2, #5
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	440a      	add	r2, r1
 8001754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001758:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800175c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176e:	0151      	lsls	r1, r2, #5
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	440a      	add	r2, r1
 8001774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001778:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800177c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	3301      	adds	r3, #1
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800178a:	429a      	cmp	r2, r3
 800178c:	d3a3      	bcc.n	80016d6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d016      	beq.n	80017d8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ba:	f043 030b 	orr.w	r3, r3, #11
 80017be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d0:	f043 030b 	orr.w	r3, r3, #11
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	e015      	b.n	8001804 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fe:	f043 030b 	orr.w	r3, r3, #11
 8001802:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001812:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001816:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001828:	461a      	mov	r2, r3
 800182a:	f002 fe99 	bl	8004560 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800183c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fdc7 	bl	80043d6 <USB_ReadInterrupts>
 8001848:	4603      	mov	r3, r0
 800184a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001852:	d124      	bne.n	800189e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fe5d 	bl	8004518 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f001 fec5 	bl	80035f2 <USB_GetDevSpeed>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681c      	ldr	r4, [r3, #0]
 8001874:	f001 f940 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8001878:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	4620      	mov	r0, r4
 8001884:	f001 fbe4 	bl	8003050 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f004 fbfa 	bl	8006082 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800189c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fd97 	bl	80043d6 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d10a      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f004 fbd7 	bl	8006066 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f002 0208 	and.w	r2, r2, #8
 80018c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fd82 	bl	80043d6 <USB_ReadInterrupts>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018dc:	d10f      	bne.n	80018fe <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f004 fc2f 	bl	800614c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fd67 	bl	80043d6 <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001912:	d10f      	bne.n	8001934 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4619      	mov	r1, r3
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f004 fc02 	bl	8006128 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fd4c 	bl	80043d6 <USB_ReadInterrupts>
 800193e:	4603      	mov	r3, r0
 8001940:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001948:	d10a      	bne.n	8001960 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f004 fc10 	bl	8006170 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800195e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f002 fd36 	bl	80043d6 <USB_ReadInterrupts>
 800196a:	4603      	mov	r3, r0
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d115      	bne.n	80019a0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f004 fc00 	bl	800618c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6859      	ldr	r1, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	e000      	b.n	80019a0 <HAL_PCD_IRQHandler+0x75e>
      return;
 800199e:	bf00      	nop
    }
  }
}
 80019a0:	3734      	adds	r7, #52	; 0x34
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}

080019a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_PCD_SetAddress+0x1a>
 80019bc:	2302      	movs	r3, #2
 80019be:	e013      	b.n	80019e8 <HAL_PCD_SetAddress+0x42>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 fc94 	bl	8004306 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	4608      	mov	r0, r1
 80019fa:	4611      	mov	r1, r2
 80019fc:	461a      	mov	r2, r3
 80019fe:	4603      	mov	r3, r0
 8001a00:	70fb      	strb	r3, [r7, #3]
 8001a02:	460b      	mov	r3, r1
 8001a04:	803b      	strh	r3, [r7, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da0f      	bge.n	8001a36 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	f003 020f 	and.w	r2, r3, #15
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	3338      	adds	r3, #56	; 0x38
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	705a      	strb	r2, [r3, #1]
 8001a34:	e00f      	b.n	8001a56 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 020f 	and.w	r2, r3, #15
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a62:	883a      	ldrh	r2, [r7, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	78ba      	ldrb	r2, [r7, #2]
 8001a6c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	785b      	ldrb	r3, [r3, #1]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a80:	78bb      	ldrb	r3, [r7, #2]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d102      	bne.n	8001a8c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_PCD_EP_Open+0xaa>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e00e      	b.n	8001ab8 <HAL_PCD_EP_Open+0xc8>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68f9      	ldr	r1, [r7, #12]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 fdc7 	bl	800363c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	da0f      	bge.n	8001af4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	f003 020f 	and.w	r2, r3, #15
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	3338      	adds	r3, #56	; 0x38
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3304      	adds	r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	705a      	strb	r2, [r3, #1]
 8001af2:	e00f      	b.n	8001b14 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_PCD_EP_Close+0x6e>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e00e      	b.n	8001b4c <HAL_PCD_EP_Close+0x8c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 fe05 	bl	800374c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	460b      	mov	r3, r1
 8001b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b64:	7afb      	ldrb	r3, [r7, #11]
 8001b66:	f003 020f 	and.w	r2, r3, #15
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	1a9b      	subs	r3, r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2200      	movs	r2, #0
 8001b94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d102      	bne.n	8001bb0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	6979      	ldr	r1, [r7, #20]
 8001bc8:	f002 f8e0 	bl	8003d8c <USB_EP0StartXfer>
 8001bcc:	e008      	b.n	8001be0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	6979      	ldr	r1, [r7, #20]
 8001bdc:	f001 fe92 	bl	8003904 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
 8001bfc:	f003 020f 	and.w	r2, r3, #15
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	3338      	adds	r3, #56	; 0x38
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3304      	adds	r3, #4
 8001c10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2201      	movs	r2, #1
 8001c28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d102      	bne.n	8001c44 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6979      	ldr	r1, [r7, #20]
 8001c5c:	f002 f896 	bl	8003d8c <USB_EP0StartXfer>
 8001c60:	e008      	b.n	8001c74 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	6979      	ldr	r1, [r7, #20]
 8001c70:	f001 fe48 	bl	8003904 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 020f 	and.w	r2, r3, #15
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d901      	bls.n	8001c9c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e050      	b.n	8001d3e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da0f      	bge.n	8001cc4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 020f 	and.w	r2, r3, #15
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	3338      	adds	r3, #56	; 0x38
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	705a      	strb	r2, [r3, #1]
 8001cc2:	e00d      	b.n	8001ce0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_PCD_EP_SetStall+0x82>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e01e      	b.n	8001d3e <HAL_PCD_EP_SetStall+0xc0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68f9      	ldr	r1, [r7, #12]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 fa25 	bl	800415e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10a      	bne.n	8001d34 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	b2d9      	uxtb	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f002 fc16 	bl	8004560 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	f003 020f 	and.w	r2, r3, #15
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d901      	bls.n	8001d64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e042      	b.n	8001dea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	da0f      	bge.n	8001d8c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 020f 	and.w	r2, r3, #15
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	3338      	adds	r3, #56	; 0x38
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	705a      	strb	r2, [r3, #1]
 8001d8a:	e00f      	b.n	8001dac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_PCD_EP_ClrStall+0x86>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e00e      	b.n	8001dea <HAL_PCD_EP_ClrStall+0xa4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68f9      	ldr	r1, [r7, #12]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 fa2d 	bl	800423a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b08a      	sub	sp, #40	; 0x28
 8001df6:	af02      	add	r7, sp, #8
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	3338      	adds	r3, #56	; 0x38
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d901      	bls.n	8001e2a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e06c      	b.n	8001f04 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d902      	bls.n	8001e46 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3303      	adds	r3, #3
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e4e:	e02b      	b.n	8001ea8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d902      	bls.n	8001e6c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	3303      	adds	r3, #3
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	68d9      	ldr	r1, [r3, #12]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	4603      	mov	r3, r0
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f002 f8d1 	bl	8004032 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	441a      	add	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	441a      	add	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d809      	bhi.n	8001ed2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d203      	bcs.n	8001ed2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1be      	bne.n	8001e50 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d811      	bhi.n	8001f02 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	6939      	ldr	r1, [r7, #16]
 8001efa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001efe:	4013      	ands	r3, r2
 8001f00:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	333c      	adds	r3, #60	; 0x3c
 8001f24:	3304      	adds	r3, #4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	f040 80a0 	bne.w	8002084 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d015      	beq.n	8001f7a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4a72      	ldr	r2, [pc, #456]	; (800211c <PCD_EP_OutXfrComplete_int+0x210>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	f240 80dd 	bls.w	8002112 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80d7 	beq.w	8002112 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f70:	461a      	mov	r2, r3
 8001f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f76:	6093      	str	r3, [r2, #8]
 8001f78:	e0cb      	b.n	8002112 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f90:	461a      	mov	r2, r3
 8001f92:	2320      	movs	r3, #32
 8001f94:	6093      	str	r3, [r2, #8]
 8001f96:	e0bc      	b.n	8002112 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 80b7 	bne.w	8002112 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a5d      	ldr	r2, [pc, #372]	; (800211c <PCD_EP_OutXfrComplete_int+0x210>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d90f      	bls.n	8001fcc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fc8:	6093      	str	r3, [r2, #8]
 8001fca:	e0a2      	b.n	8002112 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fde:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	0159      	lsls	r1, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001ff2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4403      	add	r3, r0
 8002002:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002006:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800201a:	6819      	ldr	r1, [r3, #0]
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4403      	add	r3, r0
 800202a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4419      	add	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4403      	add	r3, r0
 8002040:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002044:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d114      	bne.n	8002076 <PCD_EP_OutXfrComplete_int+0x16a>
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d108      	bne.n	8002076 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800206e:	461a      	mov	r2, r3
 8002070:	2101      	movs	r1, #1
 8002072:	f002 fa75 	bl	8004560 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4619      	mov	r1, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f003 ffbd 	bl	8005ffc <HAL_PCD_DataOutStageCallback>
 8002082:	e046      	b.n	8002112 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a26      	ldr	r2, [pc, #152]	; (8002120 <PCD_EP_OutXfrComplete_int+0x214>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d124      	bne.n	80020d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a2:	461a      	mov	r2, r3
 80020a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a8:	6093      	str	r3, [r2, #8]
 80020aa:	e032      	b.n	8002112 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c2:	461a      	mov	r2, r3
 80020c4:	2320      	movs	r3, #32
 80020c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f003 ff94 	bl	8005ffc <HAL_PCD_DataOutStageCallback>
 80020d4:	e01d      	b.n	8002112 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d114      	bne.n	8002106 <PCD_EP_OutXfrComplete_int+0x1fa>
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d108      	bne.n	8002106 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020fe:	461a      	mov	r2, r3
 8002100:	2100      	movs	r1, #0
 8002102:	f002 fa2d 	bl	8004560 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f003 ff75 	bl	8005ffc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	4f54300a 	.word	0x4f54300a
 8002120:	4f54310a 	.word	0x4f54310a

08002124 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	333c      	adds	r3, #60	; 0x3c
 800213c:	3304      	adds	r3, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4a15      	ldr	r2, [pc, #84]	; (80021ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d90e      	bls.n	8002178 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002170:	461a      	mov	r2, r3
 8002172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002176:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f003 ff2d 	bl	8005fd8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d90c      	bls.n	80021a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002198:	461a      	mov	r2, r3
 800219a:	2101      	movs	r1, #1
 800219c:	f002 f9e0 	bl	8004560 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	4f54300a 	.word	0x4f54300a

080021b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
 80021bc:	4613      	mov	r3, r2
 80021be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d107      	bne.n	80021de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021ce:	883b      	ldrh	r3, [r7, #0]
 80021d0:	0419      	lsls	r1, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	430a      	orrs	r2, r1
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
 80021dc:	e028      	b.n	8002230 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	4413      	add	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e00d      	b.n	800220e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	3340      	adds	r3, #64	; 0x40
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	4413      	add	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	3301      	adds	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	3b01      	subs	r3, #1
 8002214:	429a      	cmp	r2, r3
 8002216:	d3ec      	bcc.n	80021f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002218:	883b      	ldrh	r3, [r7, #0]
 800221a:	0418      	lsls	r0, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	3b01      	subs	r3, #1
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	4302      	orrs	r2, r0
 8002228:	3340      	adds	r3, #64	; 0x40
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e264      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d075      	beq.n	8002382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002296:	4ba3      	ldr	r3, [pc, #652]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d00c      	beq.n	80022bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a2:	4ba0      	ldr	r3, [pc, #640]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d112      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ae:	4b9d      	ldr	r3, [pc, #628]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b99      	ldr	r3, [pc, #612]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d05b      	beq.n	8002380 <HAL_RCC_OscConfig+0x108>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d157      	bne.n	8002380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e23f      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x74>
 80022de:	4b91      	ldr	r3, [pc, #580]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a90      	ldr	r2, [pc, #576]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e01d      	b.n	8002328 <HAL_RCC_OscConfig+0xb0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x98>
 80022f6:	4b8b      	ldr	r3, [pc, #556]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a8a      	ldr	r2, [pc, #552]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a87      	ldr	r2, [pc, #540]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0xb0>
 8002310:	4b84      	ldr	r3, [pc, #528]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a83      	ldr	r2, [pc, #524]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b81      	ldr	r3, [pc, #516]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a80      	ldr	r2, [pc, #512]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fb40 	bl	80009b4 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002338:	f7fe fb3c 	bl	80009b4 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e204      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xc0>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fb2c 	bl	80009b4 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe fb28 	bl	80009b4 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e1f0      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	4b6c      	ldr	r3, [pc, #432]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0xe8>
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d063      	beq.n	8002456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800238e:	4b65      	ldr	r3, [pc, #404]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239a:	4b62      	ldr	r3, [pc, #392]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d11c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b5f      	ldr	r3, [pc, #380]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d116      	bne.n	80023e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	4b5c      	ldr	r3, [pc, #368]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x152>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e1c4      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b56      	ldr	r3, [pc, #344]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4952      	ldr	r1, [pc, #328]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	e03a      	b.n	8002456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e8:	4b4f      	ldr	r3, [pc, #316]	; (8002528 <HAL_RCC_OscConfig+0x2b0>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe fae1 	bl	80009b4 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f6:	f7fe fadd 	bl	80009b4 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1a5      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	4b46      	ldr	r3, [pc, #280]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b43      	ldr	r3, [pc, #268]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4940      	ldr	r1, [pc, #256]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242a:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <HAL_RCC_OscConfig+0x2b0>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fac0 	bl	80009b4 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002438:	f7fe fabc 	bl	80009b4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e184      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d030      	beq.n	80024c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_RCC_OscConfig+0x2b4>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7fe faa0 	bl	80009b4 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002478:	f7fe fa9c 	bl	80009b4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e164      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x200>
 8002496:	e015      	b.n	80024c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002498:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_OscConfig+0x2b4>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7fe fa89 	bl	80009b4 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a6:	f7fe fa85 	bl	80009b4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e14d      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80a0 	beq.w	8002612 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d6:	4b13      	ldr	r3, [pc, #76]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_OscConfig+0x2b8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d121      	bne.n	8002552 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_RCC_OscConfig+0x2b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_RCC_OscConfig+0x2b8>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251a:	f7fe fa4b 	bl	80009b4 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	e011      	b.n	8002546 <HAL_RCC_OscConfig+0x2ce>
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	42470000 	.word	0x42470000
 800252c:	42470e80 	.word	0x42470e80
 8002530:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7fe fa3e 	bl	80009b4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e106      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b85      	ldr	r3, [pc, #532]	; (800275c <HAL_RCC_OscConfig+0x4e4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d106      	bne.n	8002568 <HAL_RCC_OscConfig+0x2f0>
 800255a:	4b81      	ldr	r3, [pc, #516]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a80      	ldr	r2, [pc, #512]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
 8002566:	e01c      	b.n	80025a2 <HAL_RCC_OscConfig+0x32a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d10c      	bne.n	800258a <HAL_RCC_OscConfig+0x312>
 8002570:	4b7b      	ldr	r3, [pc, #492]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a7a      	ldr	r2, [pc, #488]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
 800257c:	4b78      	ldr	r3, [pc, #480]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	4a77      	ldr	r2, [pc, #476]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6713      	str	r3, [r2, #112]	; 0x70
 8002588:	e00b      	b.n	80025a2 <HAL_RCC_OscConfig+0x32a>
 800258a:	4b75      	ldr	r3, [pc, #468]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258e:	4a74      	ldr	r2, [pc, #464]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6713      	str	r3, [r2, #112]	; 0x70
 8002596:	4b72      	ldr	r3, [pc, #456]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	4a71      	ldr	r2, [pc, #452]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d015      	beq.n	80025d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7fe fa03 	bl	80009b4 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe f9ff 	bl	80009b4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0c5      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ee      	beq.n	80025b2 <HAL_RCC_OscConfig+0x33a>
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7fe f9ed 	bl	80009b4 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe f9e9 	bl	80009b4 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0af      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	4b5a      	ldr	r3, [pc, #360]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d105      	bne.n	8002612 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b56      	ldr	r3, [pc, #344]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a55      	ldr	r2, [pc, #340]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 809b 	beq.w	8002752 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d05c      	beq.n	80026e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d141      	bne.n	80026b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <HAL_RCC_OscConfig+0x4ec>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7fe f9bd 	bl	80009b4 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe f9b9 	bl	80009b4 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e081      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002650:	4b43      	ldr	r3, [pc, #268]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69da      	ldr	r2, [r3, #28]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	019b      	lsls	r3, r3, #6
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	3b01      	subs	r3, #1
 8002676:	041b      	lsls	r3, r3, #16
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	061b      	lsls	r3, r3, #24
 8002680:	4937      	ldr	r1, [pc, #220]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_OscConfig+0x4ec>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe f992 	bl	80009b4 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe f98e 	bl	80009b4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e056      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x41c>
 80026b2:	e04e      	b.n	8002752 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_OscConfig+0x4ec>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7fe f97b 	bl	80009b4 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe f977 	bl	80009b4 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e03f      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d4:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x44a>
 80026e0:	e037      	b.n	8002752 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e032      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCC_OscConfig+0x4e8>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d028      	beq.n	800274e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d121      	bne.n	800274e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d11a      	bne.n	800274e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800271e:	4013      	ands	r3, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002724:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002726:	4293      	cmp	r3, r2
 8002728:	d111      	bne.n	800274e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	085b      	lsrs	r3, r3, #1
 8002736:	3b01      	subs	r3, #1
 8002738:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d107      	bne.n	800274e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40007000 	.word	0x40007000
 8002760:	40023800 	.word	0x40023800
 8002764:	42470060 	.word	0x42470060

08002768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0cc      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d90c      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b65      	ldr	r3, [pc, #404]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b63      	ldr	r3, [pc, #396]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0b8      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027bc:	4b59      	ldr	r3, [pc, #356]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a58      	ldr	r2, [pc, #352]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d4:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	4b50      	ldr	r3, [pc, #320]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	494d      	ldr	r1, [pc, #308]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d044      	beq.n	8002888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d119      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e07f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d003      	beq.n	8002826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002822:	2b03      	cmp	r3, #3
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e067      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4934      	ldr	r1, [pc, #208]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002858:	f7fe f8ac 	bl	80009b4 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe f8a8 	bl	80009b4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e04f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d20c      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e032      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4916      	ldr	r1, [pc, #88]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	490e      	ldr	r1, [pc, #56]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ee:	f000 f821 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	490a      	ldr	r1, [pc, #40]	; (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	5ccb      	ldrb	r3, [r1, r3]
 8002902:	fa22 f303 	lsr.w	r3, r2, r3
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe f80c 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00
 8002924:	40023800 	.word	0x40023800
 8002928:	080065d8 	.word	0x080065d8
 800292c:	20000000 	.word	0x20000000
 8002930:	20000004 	.word	0x20000004

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	2300      	movs	r3, #0
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294c:	4b67      	ldr	r3, [pc, #412]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d00d      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x40>
 8002958:	2b08      	cmp	r3, #8
 800295a:	f200 80bd 	bhi.w	8002ad8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x34>
 8002962:	2b04      	cmp	r3, #4
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x3a>
 8002966:	e0b7      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800296a:	60bb      	str	r3, [r7, #8]
       break;
 800296c:	e0b7      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800296e:	4b61      	ldr	r3, [pc, #388]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002970:	60bb      	str	r3, [r7, #8]
      break;
 8002972:	e0b4      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002974:	4b5d      	ldr	r3, [pc, #372]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800297c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297e:	4b5b      	ldr	r3, [pc, #364]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d04d      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298a:	4b58      	ldr	r3, [pc, #352]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	461a      	mov	r2, r3
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	f240 10ff 	movw	r0, #511	; 0x1ff
 800299a:	f04f 0100 	mov.w	r1, #0
 800299e:	ea02 0800 	and.w	r8, r2, r0
 80029a2:	ea03 0901 	and.w	r9, r3, r1
 80029a6:	4640      	mov	r0, r8
 80029a8:	4649      	mov	r1, r9
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	014b      	lsls	r3, r1, #5
 80029b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029b8:	0142      	lsls	r2, r0, #5
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	ebb0 0008 	subs.w	r0, r0, r8
 80029c2:	eb61 0109 	sbc.w	r1, r1, r9
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	018b      	lsls	r3, r1, #6
 80029d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029d4:	0182      	lsls	r2, r0, #6
 80029d6:	1a12      	subs	r2, r2, r0
 80029d8:	eb63 0301 	sbc.w	r3, r3, r1
 80029dc:	f04f 0000 	mov.w	r0, #0
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	00d9      	lsls	r1, r3, #3
 80029e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029ea:	00d0      	lsls	r0, r2, #3
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	eb12 0208 	adds.w	r2, r2, r8
 80029f4:	eb43 0309 	adc.w	r3, r3, r9
 80029f8:	f04f 0000 	mov.w	r0, #0
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	0259      	lsls	r1, r3, #9
 8002a02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a06:	0250      	lsls	r0, r2, #9
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	f7fd fbde 	bl	80001d8 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4613      	mov	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e04a      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a26:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	099b      	lsrs	r3, r3, #6
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a36:	f04f 0100 	mov.w	r1, #0
 8002a3a:	ea02 0400 	and.w	r4, r2, r0
 8002a3e:	ea03 0501 	and.w	r5, r3, r1
 8002a42:	4620      	mov	r0, r4
 8002a44:	4629      	mov	r1, r5
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	014b      	lsls	r3, r1, #5
 8002a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a54:	0142      	lsls	r2, r0, #5
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	1b00      	subs	r0, r0, r4
 8002a5c:	eb61 0105 	sbc.w	r1, r1, r5
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	018b      	lsls	r3, r1, #6
 8002a6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a6e:	0182      	lsls	r2, r0, #6
 8002a70:	1a12      	subs	r2, r2, r0
 8002a72:	eb63 0301 	sbc.w	r3, r3, r1
 8002a76:	f04f 0000 	mov.w	r0, #0
 8002a7a:	f04f 0100 	mov.w	r1, #0
 8002a7e:	00d9      	lsls	r1, r3, #3
 8002a80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a84:	00d0      	lsls	r0, r2, #3
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	1912      	adds	r2, r2, r4
 8002a8c:	eb45 0303 	adc.w	r3, r5, r3
 8002a90:	f04f 0000 	mov.w	r0, #0
 8002a94:	f04f 0100 	mov.w	r1, #0
 8002a98:	0299      	lsls	r1, r3, #10
 8002a9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a9e:	0290      	lsls	r0, r2, #10
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	f7fd fb92 	bl	80001d8 <__aeabi_uldivmod>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	60bb      	str	r3, [r7, #8]
      break;
 8002ad6:	e002      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ada:	60bb      	str	r3, [r7, #8]
      break;
 8002adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ade:	68bb      	ldr	r3, [r7, #8]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	00f42400 	.word	0x00f42400
 8002af4:	007a1200 	.word	0x007a1200

08002af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000000 	.word	0x20000000

08002b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b14:	f7ff fff0 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0a9b      	lsrs	r3, r3, #10
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4903      	ldr	r1, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	080065e8 	.word	0x080065e8

08002b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b3c:	f7ff ffdc 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	0b5b      	lsrs	r3, r3, #13
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	4903      	ldr	r1, [pc, #12]	; (8002b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b4e:	5ccb      	ldrb	r3, [r1, r3]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	080065e8 	.word	0x080065e8

08002b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e03f      	b.n	8002bf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd fe3c 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f829 	bl	8002bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c00:	b09f      	sub	sp, #124	; 0x7c
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c12:	68d9      	ldr	r1, [r3, #12]
 8002c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	ea40 0301 	orr.w	r3, r0, r1
 8002c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c40:	f021 010c 	bic.w	r1, r1, #12
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5a:	6999      	ldr	r1, [r3, #24]
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	ea40 0301 	orr.w	r3, r0, r1
 8002c64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4bc5      	ldr	r3, [pc, #788]	; (8002f80 <UART_SetConfig+0x384>)
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d004      	beq.n	8002c7a <UART_SetConfig+0x7e>
 8002c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4bc3      	ldr	r3, [pc, #780]	; (8002f84 <UART_SetConfig+0x388>)
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d103      	bne.n	8002c82 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c7a:	f7ff ff5d 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 8002c7e:	6778      	str	r0, [r7, #116]	; 0x74
 8002c80:	e002      	b.n	8002c88 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c82:	f7ff ff45 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8002c86:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c90:	f040 80b6 	bne.w	8002e00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c96:	461c      	mov	r4, r3
 8002c98:	f04f 0500 	mov.w	r5, #0
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	462b      	mov	r3, r5
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	6439      	str	r1, [r7, #64]	; 0x40
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cac:	1912      	adds	r2, r2, r4
 8002cae:	eb45 0303 	adc.w	r3, r5, r3
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	00d9      	lsls	r1, r3, #3
 8002cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cc0:	00d0      	lsls	r0, r2, #3
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	1911      	adds	r1, r2, r4
 8002cc8:	6639      	str	r1, [r7, #96]	; 0x60
 8002cca:	416b      	adcs	r3, r5
 8002ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8002cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	1891      	adds	r1, r2, r2
 8002cda:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cdc:	415b      	adcs	r3, r3
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ce4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ce8:	f7fd fa76 	bl	80001d8 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4ba5      	ldr	r3, [pc, #660]	; (8002f88 <UART_SetConfig+0x38c>)
 8002cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	011e      	lsls	r6, r3, #4
 8002cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cfc:	461c      	mov	r4, r3
 8002cfe:	f04f 0500 	mov.w	r5, #0
 8002d02:	4622      	mov	r2, r4
 8002d04:	462b      	mov	r3, r5
 8002d06:	1891      	adds	r1, r2, r2
 8002d08:	6339      	str	r1, [r7, #48]	; 0x30
 8002d0a:	415b      	adcs	r3, r3
 8002d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d12:	1912      	adds	r2, r2, r4
 8002d14:	eb45 0303 	adc.w	r3, r5, r3
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	00d9      	lsls	r1, r3, #3
 8002d22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d26:	00d0      	lsls	r0, r2, #3
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	1911      	adds	r1, r2, r4
 8002d2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d30:	416b      	adcs	r3, r5
 8002d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	1891      	adds	r1, r2, r2
 8002d40:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d42:	415b      	adcs	r3, r3
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d4e:	f7fd fa43 	bl	80001d8 <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4b8c      	ldr	r3, [pc, #560]	; (8002f88 <UART_SetConfig+0x38c>)
 8002d58:	fba3 1302 	umull	r1, r3, r3, r2
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	2164      	movs	r1, #100	; 0x64
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	3332      	adds	r3, #50	; 0x32
 8002d6a:	4a87      	ldr	r2, [pc, #540]	; (8002f88 <UART_SetConfig+0x38c>)
 8002d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d78:	441e      	add	r6, r3
 8002d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f04f 0100 	mov.w	r1, #0
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	1894      	adds	r4, r2, r2
 8002d88:	623c      	str	r4, [r7, #32]
 8002d8a:	415b      	adcs	r3, r3
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d92:	1812      	adds	r2, r2, r0
 8002d94:	eb41 0303 	adc.w	r3, r1, r3
 8002d98:	f04f 0400 	mov.w	r4, #0
 8002d9c:	f04f 0500 	mov.w	r5, #0
 8002da0:	00dd      	lsls	r5, r3, #3
 8002da2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002da6:	00d4      	lsls	r4, r2, #3
 8002da8:	4622      	mov	r2, r4
 8002daa:	462b      	mov	r3, r5
 8002dac:	1814      	adds	r4, r2, r0
 8002dae:	653c      	str	r4, [r7, #80]	; 0x50
 8002db0:	414b      	adcs	r3, r1
 8002db2:	657b      	str	r3, [r7, #84]	; 0x54
 8002db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	461a      	mov	r2, r3
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	1891      	adds	r1, r2, r2
 8002dc0:	61b9      	str	r1, [r7, #24]
 8002dc2:	415b      	adcs	r3, r3
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002dce:	f7fd fa03 	bl	80001d8 <__aeabi_uldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4b6c      	ldr	r3, [pc, #432]	; (8002f88 <UART_SetConfig+0x38c>)
 8002dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	2164      	movs	r1, #100	; 0x64
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	3332      	adds	r3, #50	; 0x32
 8002dea:	4a67      	ldr	r2, [pc, #412]	; (8002f88 <UART_SetConfig+0x38c>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	f003 0207 	and.w	r2, r3, #7
 8002df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4432      	add	r2, r6
 8002dfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dfe:	e0b9      	b.n	8002f74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e02:	461c      	mov	r4, r3
 8002e04:	f04f 0500 	mov.w	r5, #0
 8002e08:	4622      	mov	r2, r4
 8002e0a:	462b      	mov	r3, r5
 8002e0c:	1891      	adds	r1, r2, r2
 8002e0e:	6139      	str	r1, [r7, #16]
 8002e10:	415b      	adcs	r3, r3
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e18:	1912      	adds	r2, r2, r4
 8002e1a:	eb45 0303 	adc.w	r3, r5, r3
 8002e1e:	f04f 0000 	mov.w	r0, #0
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	00d9      	lsls	r1, r3, #3
 8002e28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e2c:	00d0      	lsls	r0, r2, #3
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	eb12 0804 	adds.w	r8, r2, r4
 8002e36:	eb43 0905 	adc.w	r9, r3, r5
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f04f 0100 	mov.w	r1, #0
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	008b      	lsls	r3, r1, #2
 8002e4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e52:	0082      	lsls	r2, r0, #2
 8002e54:	4640      	mov	r0, r8
 8002e56:	4649      	mov	r1, r9
 8002e58:	f7fd f9be 	bl	80001d8 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <UART_SetConfig+0x38c>)
 8002e62:	fba3 2302 	umull	r2, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	011e      	lsls	r6, r3, #4
 8002e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f04f 0100 	mov.w	r1, #0
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	1894      	adds	r4, r2, r2
 8002e78:	60bc      	str	r4, [r7, #8]
 8002e7a:	415b      	adcs	r3, r3
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e82:	1812      	adds	r2, r2, r0
 8002e84:	eb41 0303 	adc.w	r3, r1, r3
 8002e88:	f04f 0400 	mov.w	r4, #0
 8002e8c:	f04f 0500 	mov.w	r5, #0
 8002e90:	00dd      	lsls	r5, r3, #3
 8002e92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e96:	00d4      	lsls	r4, r2, #3
 8002e98:	4622      	mov	r2, r4
 8002e9a:	462b      	mov	r3, r5
 8002e9c:	1814      	adds	r4, r2, r0
 8002e9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ea0:	414b      	adcs	r3, r1
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ebc:	0082      	lsls	r2, r0, #2
 8002ebe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ec2:	f7fd f989 	bl	80001d8 <__aeabi_uldivmod>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <UART_SetConfig+0x38c>)
 8002ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2164      	movs	r1, #100	; 0x64
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	3332      	adds	r3, #50	; 0x32
 8002ede:	4a2a      	ldr	r2, [pc, #168]	; (8002f88 <UART_SetConfig+0x38c>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eea:	441e      	add	r6, r3
 8002eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f04f 0100 	mov.w	r1, #0
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	1894      	adds	r4, r2, r2
 8002efa:	603c      	str	r4, [r7, #0]
 8002efc:	415b      	adcs	r3, r3
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f04:	1812      	adds	r2, r2, r0
 8002f06:	eb41 0303 	adc.w	r3, r1, r3
 8002f0a:	f04f 0400 	mov.w	r4, #0
 8002f0e:	f04f 0500 	mov.w	r5, #0
 8002f12:	00dd      	lsls	r5, r3, #3
 8002f14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f18:	00d4      	lsls	r4, r2, #3
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	eb12 0a00 	adds.w	sl, r2, r0
 8002f22:	eb43 0b01 	adc.w	fp, r3, r1
 8002f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f04f 0100 	mov.w	r1, #0
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	008b      	lsls	r3, r1, #2
 8002f3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f3e:	0082      	lsls	r2, r0, #2
 8002f40:	4650      	mov	r0, sl
 8002f42:	4659      	mov	r1, fp
 8002f44:	f7fd f948 	bl	80001d8 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <UART_SetConfig+0x38c>)
 8002f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2164      	movs	r1, #100	; 0x64
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	3332      	adds	r3, #50	; 0x32
 8002f60:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <UART_SetConfig+0x38c>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4432      	add	r2, r6
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	377c      	adds	r7, #124	; 0x7c
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f7e:	bf00      	nop
 8002f80:	40011000 	.word	0x40011000
 8002f84:	40011400 	.word	0x40011400
 8002f88:	51eb851f 	.word	0x51eb851f

08002f8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	f107 001c 	add.w	r0, r7, #28
 8002f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d122      	bne.n	8002fea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d105      	bne.n	8002fde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f001 fb1c 	bl	800461c <USB_CoreReset>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	e01a      	b.n	8003020 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f001 fb10 	bl	800461c <USB_CoreReset>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
 8003012:	e005      	b.n	8003020 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10b      	bne.n	800303e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f043 0206 	orr.w	r2, r3, #6
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800304a:	b004      	add	sp, #16
 800304c:	4770      	bx	lr
	...

08003050 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d165      	bne.n	8003130 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4a41      	ldr	r2, [pc, #260]	; (800316c <USB_SetTurnaroundTime+0x11c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d906      	bls.n	800307a <USB_SetTurnaroundTime+0x2a>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4a40      	ldr	r2, [pc, #256]	; (8003170 <USB_SetTurnaroundTime+0x120>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d202      	bcs.n	800307a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003074:	230f      	movs	r3, #15
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	e062      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4a3c      	ldr	r2, [pc, #240]	; (8003170 <USB_SetTurnaroundTime+0x120>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d306      	bcc.n	8003090 <USB_SetTurnaroundTime+0x40>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4a3b      	ldr	r2, [pc, #236]	; (8003174 <USB_SetTurnaroundTime+0x124>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d202      	bcs.n	8003090 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800308a:	230e      	movs	r3, #14
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	e057      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4a38      	ldr	r2, [pc, #224]	; (8003174 <USB_SetTurnaroundTime+0x124>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d306      	bcc.n	80030a6 <USB_SetTurnaroundTime+0x56>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4a37      	ldr	r2, [pc, #220]	; (8003178 <USB_SetTurnaroundTime+0x128>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d202      	bcs.n	80030a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80030a0:	230d      	movs	r3, #13
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	e04c      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4a33      	ldr	r2, [pc, #204]	; (8003178 <USB_SetTurnaroundTime+0x128>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d306      	bcc.n	80030bc <USB_SetTurnaroundTime+0x6c>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4a32      	ldr	r2, [pc, #200]	; (800317c <USB_SetTurnaroundTime+0x12c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d802      	bhi.n	80030bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80030b6:	230c      	movs	r3, #12
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e041      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4a2f      	ldr	r2, [pc, #188]	; (800317c <USB_SetTurnaroundTime+0x12c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d906      	bls.n	80030d2 <USB_SetTurnaroundTime+0x82>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4a2e      	ldr	r2, [pc, #184]	; (8003180 <USB_SetTurnaroundTime+0x130>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d802      	bhi.n	80030d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80030cc:	230b      	movs	r3, #11
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	e036      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <USB_SetTurnaroundTime+0x130>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d906      	bls.n	80030e8 <USB_SetTurnaroundTime+0x98>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4a29      	ldr	r2, [pc, #164]	; (8003184 <USB_SetTurnaroundTime+0x134>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d802      	bhi.n	80030e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80030e2:	230a      	movs	r3, #10
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e02b      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4a26      	ldr	r2, [pc, #152]	; (8003184 <USB_SetTurnaroundTime+0x134>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d906      	bls.n	80030fe <USB_SetTurnaroundTime+0xae>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4a25      	ldr	r2, [pc, #148]	; (8003188 <USB_SetTurnaroundTime+0x138>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d202      	bcs.n	80030fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80030f8:	2309      	movs	r3, #9
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	e020      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4a21      	ldr	r2, [pc, #132]	; (8003188 <USB_SetTurnaroundTime+0x138>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d306      	bcc.n	8003114 <USB_SetTurnaroundTime+0xc4>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4a20      	ldr	r2, [pc, #128]	; (800318c <USB_SetTurnaroundTime+0x13c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d802      	bhi.n	8003114 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800310e:	2308      	movs	r3, #8
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e015      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4a1d      	ldr	r2, [pc, #116]	; (800318c <USB_SetTurnaroundTime+0x13c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d906      	bls.n	800312a <USB_SetTurnaroundTime+0xda>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <USB_SetTurnaroundTime+0x140>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d202      	bcs.n	800312a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003124:	2307      	movs	r3, #7
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	e00a      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800312a:	2306      	movs	r3, #6
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e007      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003136:	2309      	movs	r3, #9
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e001      	b.n	8003140 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800313c:	2309      	movs	r3, #9
 800313e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	029b      	lsls	r3, r3, #10
 8003154:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	00d8acbf 	.word	0x00d8acbf
 8003170:	00e4e1c0 	.word	0x00e4e1c0
 8003174:	00f42400 	.word	0x00f42400
 8003178:	01067380 	.word	0x01067380
 800317c:	011a499f 	.word	0x011a499f
 8003180:	01312cff 	.word	0x01312cff
 8003184:	014ca43f 	.word	0x014ca43f
 8003188:	016e3600 	.word	0x016e3600
 800318c:	01a6ab1f 	.word	0x01a6ab1f
 8003190:	01e84800 	.word	0x01e84800

08003194 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 0201 	bic.w	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d115      	bne.n	8003226 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003206:	2001      	movs	r0, #1
 8003208:	f7fd fbe0 	bl	80009cc <HAL_Delay>
      ms++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f001 f972 	bl	80044fc <USB_GetMode>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d01e      	beq.n	800325c <USB_SetCurrentMode+0x84>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b31      	cmp	r3, #49	; 0x31
 8003222:	d9f0      	bls.n	8003206 <USB_SetCurrentMode+0x2e>
 8003224:	e01a      	b.n	800325c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d115      	bne.n	8003258 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003238:	2001      	movs	r0, #1
 800323a:	f7fd fbc7 	bl	80009cc <HAL_Delay>
      ms++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3301      	adds	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f001 f959 	bl	80044fc <USB_GetMode>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <USB_SetCurrentMode+0x84>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b31      	cmp	r3, #49	; 0x31
 8003254:	d9f0      	bls.n	8003238 <USB_SetCurrentMode+0x60>
 8003256:	e001      	b.n	800325c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e005      	b.n	8003268 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b32      	cmp	r3, #50	; 0x32
 8003260:	d101      	bne.n	8003266 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003270:	b084      	sub	sp, #16
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800327e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e009      	b.n	80032a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3340      	adds	r3, #64	; 0x40
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	2200      	movs	r2, #0
 800329c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	3301      	adds	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b0e      	cmp	r3, #14
 80032a8:	d9f2      	bls.n	8003290 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80032aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d11c      	bne.n	80032ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
 80032e8:	e00b      	b.n	8003302 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003308:	461a      	mov	r2, r3
 800330a:	2300      	movs	r3, #0
 800330c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003314:	4619      	mov	r1, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331c:	461a      	mov	r2, r3
 800331e:	680b      	ldr	r3, [r1, #0]
 8003320:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	2b01      	cmp	r3, #1
 8003326:	d10c      	bne.n	8003342 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800332e:	2100      	movs	r1, #0
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f945 	bl	80035c0 <USB_SetDevSpeed>
 8003336:	e008      	b.n	800334a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003338:	2101      	movs	r1, #1
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f940 	bl	80035c0 <USB_SetDevSpeed>
 8003340:	e003      	b.n	800334a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003342:	2103      	movs	r1, #3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f93b 	bl	80035c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800334a:	2110      	movs	r1, #16
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f8f3 	bl	8003538 <USB_FlushTxFifo>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f90f 	bl	8003580 <USB_FlushRxFifo>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	461a      	mov	r2, r3
 8003374:	2300      	movs	r3, #0
 8003376:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337e:	461a      	mov	r2, r3
 8003380:	2300      	movs	r3, #0
 8003382:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338a:	461a      	mov	r2, r3
 800338c:	2300      	movs	r3, #0
 800338e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	e043      	b.n	800341e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ac:	d118      	bne.n	80033e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c0:	461a      	mov	r2, r3
 80033c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e013      	b.n	80033f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d6:	461a      	mov	r2, r3
 80033d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e008      	b.n	80033f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ec:	461a      	mov	r2, r3
 80033ee:	2300      	movs	r3, #0
 80033f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fe:	461a      	mov	r2, r3
 8003400:	2300      	movs	r3, #0
 8003402:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003410:	461a      	mov	r2, r3
 8003412:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003416:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	3301      	adds	r3, #1
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	429a      	cmp	r2, r3
 8003424:	d3b7      	bcc.n	8003396 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e043      	b.n	80034b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800343e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003442:	d118      	bne.n	8003476 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003456:	461a      	mov	r2, r3
 8003458:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e013      	b.n	8003488 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346c:	461a      	mov	r2, r3
 800346e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	e008      	b.n	8003488 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003482:	461a      	mov	r2, r3
 8003484:	2300      	movs	r3, #0
 8003486:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	461a      	mov	r2, r3
 8003496:	2300      	movs	r3, #0
 8003498:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a6:	461a      	mov	r2, r3
 80034a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	3301      	adds	r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d3b7      	bcc.n	800342c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80034dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f043 0210 	orr.w	r2, r3, #16
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699a      	ldr	r2, [r3, #24]
 80034f4:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <USB_DevInit+0x2c4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80034fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f043 0208 	orr.w	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800350e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d107      	bne.n	8003524 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003524:	7dfb      	ldrb	r3, [r7, #23]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003530:	b004      	add	sp, #16
 8003532:	4770      	bx	lr
 8003534:	803c3800 	.word	0x803c3800

08003538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	019b      	lsls	r3, r3, #6
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3301      	adds	r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	4a08      	ldr	r2, [pc, #32]	; (800357c <USB_FlushTxFifo+0x44>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e006      	b.n	8003570 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b20      	cmp	r3, #32
 800356c:	d0f1      	beq.n	8003552 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	00030d40 	.word	0x00030d40

08003580 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2210      	movs	r2, #16
 8003590:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3301      	adds	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	4a08      	ldr	r2, [pc, #32]	; (80035bc <USB_FlushRxFifo+0x3c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e006      	b.n	80035b0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d0f1      	beq.n	8003592 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	00030d40 	.word	0x00030d40

080035c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	68f9      	ldr	r1, [r7, #12]
 80035dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b087      	sub	sp, #28
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0306 	and.w	r3, r3, #6
 800360a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]
 8003616:	e00a      	b.n	800362e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d002      	beq.n	8003624 <USB_GetDevSpeed+0x32>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d102      	bne.n	800362a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003624:	2302      	movs	r3, #2
 8003626:	75fb      	strb	r3, [r7, #23]
 8003628:	e001      	b.n	800362e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800362a:	230f      	movs	r3, #15
 800362c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800362e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003630:	4618      	mov	r0, r3
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	785b      	ldrb	r3, [r3, #1]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d13a      	bne.n	80036ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365e:	69da      	ldr	r2, [r3, #28]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	68f9      	ldr	r1, [r7, #12]
 8003672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003676:	4313      	orrs	r3, r2
 8003678:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d155      	bne.n	800373c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	78db      	ldrb	r3, [r3, #3]
 80036aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	059b      	lsls	r3, r3, #22
 80036b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036b4:	4313      	orrs	r3, r2
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	0151      	lsls	r1, r2, #5
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	440a      	add	r2, r1
 80036be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	e036      	b.n	800373c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	041b      	lsls	r3, r3, #16
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d11a      	bne.n	800373c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	78db      	ldrb	r3, [r3, #3]
 8003720:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003722:	430b      	orrs	r3, r1
 8003724:	4313      	orrs	r3, r2
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	440a      	add	r2, r1
 800372e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800373a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	785b      	ldrb	r3, [r3, #1]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d161      	bne.n	800382c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800377a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800377e:	d11f      	bne.n	80037c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	0151      	lsls	r1, r2, #5
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	440a      	add	r2, r1
 8003796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800379a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800379e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	0151      	lsls	r1, r2, #5
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	440a      	add	r2, r1
 80037b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	2101      	movs	r1, #1
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037e0:	4013      	ands	r3, r2
 80037e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	69da      	ldr	r2, [r3, #28]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	2101      	movs	r1, #1
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003804:	4013      	ands	r3, r2
 8003806:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	0159      	lsls	r1, r3, #5
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	440b      	add	r3, r1
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	4619      	mov	r1, r3
 8003824:	4b35      	ldr	r3, [pc, #212]	; (80038fc <USB_DeactivateEndpoint+0x1b0>)
 8003826:	4013      	ands	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
 800382a:	e060      	b.n	80038ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800383e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003842:	d11f      	bne.n	8003884 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	0151      	lsls	r1, r2, #5
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	440a      	add	r2, r1
 800385a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800385e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003862:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	0151      	lsls	r1, r2, #5
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	440a      	add	r2, r1
 800387a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800387e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	43db      	mvns	r3, r3
 800389e:	68f9      	ldr	r1, [r7, #12]
 80038a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038a4:	4013      	ands	r3, r2
 80038a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	041b      	lsls	r3, r3, #16
 80038c0:	43db      	mvns	r3, r3
 80038c2:	68f9      	ldr	r1, [r7, #12]
 80038c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038c8:	4013      	ands	r3, r2
 80038ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	0159      	lsls	r1, r3, #5
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	440b      	add	r3, r1
 80038e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e6:	4619      	mov	r1, r3
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <USB_DeactivateEndpoint+0x1b4>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	ec337800 	.word	0xec337800
 8003900:	eff37800 	.word	0xeff37800

08003904 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	785b      	ldrb	r3, [r3, #1]
 8003920:	2b01      	cmp	r3, #1
 8003922:	f040 815c 	bne.w	8003bde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d132      	bne.n	8003994 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	0151      	lsls	r1, r2, #5
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	440a      	add	r2, r1
 8003944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003948:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800394c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	0151      	lsls	r1, r2, #5
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	440a      	add	r2, r1
 8003968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800396c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	0151      	lsls	r1, r2, #5
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	440a      	add	r2, r1
 8003988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800398c:	0cdb      	lsrs	r3, r3, #19
 800398e:	04db      	lsls	r3, r3, #19
 8003990:	6113      	str	r3, [r2, #16]
 8003992:	e074      	b.n	8003a7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	0151      	lsls	r1, r2, #5
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	440a      	add	r2, r1
 80039aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ae:	0cdb      	lsrs	r3, r3, #19
 80039b0:	04db      	lsls	r3, r3, #19
 80039b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6959      	ldr	r1, [r3, #20]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	440b      	add	r3, r1
 80039f0:	1e59      	subs	r1, r3, #1
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80039fc:	4b9d      	ldr	r3, [pc, #628]	; (8003c74 <USB_EPStartXfer+0x370>)
 80039fe:	400b      	ands	r3, r1
 8003a00:	69b9      	ldr	r1, [r7, #24]
 8003a02:	0148      	lsls	r0, r1, #5
 8003a04:	69f9      	ldr	r1, [r7, #28]
 8003a06:	4401      	add	r1, r0
 8003a08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a26:	69b9      	ldr	r1, [r7, #24]
 8003a28:	0148      	lsls	r0, r1, #5
 8003a2a:	69f9      	ldr	r1, [r7, #28]
 8003a2c:	4401      	add	r1, r0
 8003a2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a32:	4313      	orrs	r3, r2
 8003a34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	78db      	ldrb	r3, [r3, #3]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d11f      	bne.n	8003a7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	0151      	lsls	r1, r2, #5
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	440a      	add	r2, r1
 8003a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003a5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	0151      	lsls	r1, r2, #5
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	440a      	add	r2, r1
 8003a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d14b      	bne.n	8003b1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d009      	beq.n	8003aa0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	78db      	ldrb	r3, [r3, #3]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d128      	bne.n	8003afa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d110      	bne.n	8003ada <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	0151      	lsls	r1, r2, #5
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	440a      	add	r2, r1
 8003ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ad2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e00f      	b.n	8003afa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e12f      	b.n	8003d7c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	78db      	ldrb	r3, [r3, #3]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d015      	beq.n	8003b70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8117 	beq.w	8003d7c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	69f9      	ldr	r1, [r7, #28]
 8003b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	634b      	str	r3, [r1, #52]	; 0x34
 8003b6e:	e105      	b.n	8003d7c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d110      	bne.n	8003ba2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	0151      	lsls	r1, r2, #5
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	440a      	add	r2, r1
 8003b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	e00f      	b.n	8003bc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	68d9      	ldr	r1, [r3, #12]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	b298      	uxth	r0, r3
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fa2b 	bl	8004032 <USB_WritePacket>
 8003bdc:	e0ce      	b.n	8003d7c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bf8:	0cdb      	lsrs	r3, r3, #19
 8003bfa:	04db      	lsls	r3, r3, #19
 8003bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d126      	bne.n	8003c78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c40:	69b9      	ldr	r1, [r7, #24]
 8003c42:	0148      	lsls	r0, r1, #5
 8003c44:	69f9      	ldr	r1, [r7, #28]
 8003c46:	4401      	add	r1, r0
 8003c48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6e:	6113      	str	r3, [r2, #16]
 8003c70:	e036      	b.n	8003ce0 <USB_EPStartXfer+0x3dc>
 8003c72:	bf00      	nop
 8003c74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4413      	add	r3, r2
 8003c82:	1e5a      	subs	r2, r3, #1
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	8afb      	ldrh	r3, [r7, #22]
 8003c9e:	04d9      	lsls	r1, r3, #19
 8003ca0:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <USB_EPStartXfer+0x484>)
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	69b9      	ldr	r1, [r7, #24]
 8003ca6:	0148      	lsls	r0, r1, #5
 8003ca8:	69f9      	ldr	r1, [r7, #28]
 8003caa:	4401      	add	r1, r0
 8003cac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	8af9      	ldrh	r1, [r7, #22]
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd0:	69b9      	ldr	r1, [r7, #24]
 8003cd2:	0148      	lsls	r0, r1, #5
 8003cd4:	69f9      	ldr	r1, [r7, #28]
 8003cd6:	4401      	add	r1, r0
 8003cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10d      	bne.n	8003d02 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	68d9      	ldr	r1, [r3, #12]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfe:	460a      	mov	r2, r1
 8003d00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	78db      	ldrb	r3, [r3, #3]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d128      	bne.n	8003d5c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d110      	bne.n	8003d3c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00f      	b.n	8003d5c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	0151      	lsls	r1, r2, #5
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	440a      	add	r2, r1
 8003d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	1ff80000 	.word	0x1ff80000

08003d8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	4613      	mov	r3, r2
 8003d98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	f040 80cd 	bne.w	8003f48 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d132      	bne.n	8003e1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	0151      	lsls	r1, r2, #5
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	440a      	add	r2, r1
 8003dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	0151      	lsls	r1, r2, #5
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	440a      	add	r2, r1
 8003df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003df8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	0151      	lsls	r1, r2, #5
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	440a      	add	r2, r1
 8003e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e14:	0cdb      	lsrs	r3, r3, #19
 8003e16:	04db      	lsls	r3, r3, #19
 8003e18:	6113      	str	r3, [r2, #16]
 8003e1a:	e04e      	b.n	8003eba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	0151      	lsls	r1, r2, #5
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	440a      	add	r2, r1
 8003e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e36:	0cdb      	lsrs	r3, r3, #19
 8003e38:	04db      	lsls	r3, r3, #19
 8003e3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e5e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d903      	bls.n	8003e74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	0151      	lsls	r1, r2, #5
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	440a      	add	r2, r1
 8003e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eaa:	6939      	ldr	r1, [r7, #16]
 8003eac:	0148      	lsls	r0, r1, #5
 8003eae:	6979      	ldr	r1, [r7, #20]
 8003eb0:	4401      	add	r1, r0
 8003eb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d11e      	bne.n	8003efe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	e092      	b.n	8004024 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d07e      	beq.n	8004024 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	2101      	movs	r1, #1
 8003f38:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3c:	6979      	ldr	r1, [r7, #20]
 8003f3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f42:	4313      	orrs	r3, r2
 8003f44:	634b      	str	r3, [r1, #52]	; 0x34
 8003f46:	e06d      	b.n	8004024 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	0151      	lsls	r1, r2, #5
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	440a      	add	r2, r1
 8003f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f62:	0cdb      	lsrs	r3, r3, #19
 8003f64:	04db      	lsls	r3, r3, #19
 8003f66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	0151      	lsls	r1, r2, #5
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f8a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	0151      	lsls	r1, r2, #5
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	440a      	add	r2, r1
 8003fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd2:	6939      	ldr	r1, [r7, #16]
 8003fd4:	0148      	lsls	r0, r1, #5
 8003fd6:	6979      	ldr	r1, [r7, #20]
 8003fd8:	4401      	add	r1, r0
 8003fda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d10d      	bne.n	8004004 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	68d9      	ldr	r1, [r3, #12]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	460a      	mov	r2, r1
 8004002:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004032:	b480      	push	{r7}
 8004034:	b089      	sub	sp, #36	; 0x24
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	4611      	mov	r1, r2
 800403e:	461a      	mov	r2, r3
 8004040:	460b      	mov	r3, r1
 8004042:	71fb      	strb	r3, [r7, #7]
 8004044:	4613      	mov	r3, r2
 8004046:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004050:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004054:	2b00      	cmp	r3, #0
 8004056:	d123      	bne.n	80040a0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004058:	88bb      	ldrh	r3, [r7, #4]
 800405a:	3303      	adds	r3, #3
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	e018      	b.n	8004098 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	031a      	lsls	r2, r3, #12
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	4413      	add	r3, r2
 800406e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004072:	461a      	mov	r2, r3
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6013      	str	r3, [r2, #0]
      pSrc++;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3301      	adds	r3, #1
 800407e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	3301      	adds	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3301      	adds	r3, #1
 800408a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	3301      	adds	r3, #1
 8004090:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	3301      	adds	r3, #1
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d3e2      	bcc.n	8004066 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3724      	adds	r7, #36	; 0x24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b08b      	sub	sp, #44	; 0x2c
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	4613      	mov	r3, r2
 80040ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	089b      	lsrs	r3, r3, #2
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	623b      	str	r3, [r7, #32]
 80040d8:	e014      	b.n	8004104 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	3301      	adds	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	3301      	adds	r3, #1
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	3301      	adds	r3, #1
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	3301      	adds	r3, #1
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	3301      	adds	r3, #1
 8004102:	623b      	str	r3, [r7, #32]
 8004104:	6a3a      	ldr	r2, [r7, #32]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	429a      	cmp	r2, r3
 800410a:	d3e6      	bcc.n	80040da <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800410c:	8bfb      	ldrh	r3, [r7, #30]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01e      	beq.n	8004150 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	461a      	mov	r2, r3
 800411e:	f107 0310 	add.w	r3, r7, #16
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	fa22 f303 	lsr.w	r3, r2, r3
 8004132:	b2da      	uxtb	r2, r3
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	701a      	strb	r2, [r3, #0]
      i++;
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	3301      	adds	r3, #1
 800413c:	623b      	str	r3, [r7, #32]
      pDest++;
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	3301      	adds	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004144:	8bfb      	ldrh	r3, [r7, #30]
 8004146:	3b01      	subs	r3, #1
 8004148:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800414a:	8bfb      	ldrh	r3, [r7, #30]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1ea      	bne.n	8004126 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004152:	4618      	mov	r0, r3
 8004154:	372c      	adds	r7, #44	; 0x2c
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d12c      	bne.n	80041d4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	db12      	blt.n	80041b2 <USB_EPSetStall+0x54>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00f      	beq.n	80041b2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041b0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e02b      	b.n	800422c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	db12      	blt.n	800420c <USB_EPSetStall+0xae>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00f      	beq.n	800420c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	0151      	lsls	r1, r2, #5
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	440a      	add	r2, r1
 8004202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004206:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800420a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	440a      	add	r2, r1
 8004222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800422a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d128      	bne.n	80042a8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004270:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004274:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	78db      	ldrb	r3, [r3, #3]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d003      	beq.n	8004286 <USB_EPClearStall+0x4c>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d138      	bne.n	80042f8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	0151      	lsls	r1, r2, #5
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	440a      	add	r2, r1
 800429c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e027      	b.n	80042f8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	78db      	ldrb	r3, [r3, #3]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d003      	beq.n	80042d8 <USB_EPClearStall+0x9e>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	78db      	ldrb	r3, [r3, #3]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d10f      	bne.n	80042f8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	0151      	lsls	r1, r2, #5
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	440a      	add	r2, r1
 80042ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	460b      	mov	r3, r1
 8004310:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004324:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004328:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800433a:	68f9      	ldr	r1, [r7, #12]
 800433c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004340:	4313      	orrs	r3, r2
 8004342:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800436c:	f023 0303 	bic.w	r3, r3, #3
 8004370:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004380:	f023 0302 	bic.w	r3, r3, #2
 8004384:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c2:	f043 0302 	orr.w	r3, r3, #2
 80043c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4013      	ands	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	0c1b      	lsrs	r3, r3, #16
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	4013      	ands	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	b29b      	uxth	r3, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004492:	68bb      	ldr	r3, [r7, #8]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	01db      	lsls	r3, r3, #7
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4013      	ands	r3, r2
 80044ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044ee:	68bb      	ldr	r3, [r7, #8]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f003 0301 	and.w	r3, r3, #1
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004532:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004536:	f023 0307 	bic.w	r3, r3, #7
 800453a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800454a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	460b      	mov	r3, r1
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	333c      	adds	r3, #60	; 0x3c
 8004576:	3304      	adds	r3, #4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4a26      	ldr	r2, [pc, #152]	; (8004618 <USB_EP0_OutStart+0xb8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d90a      	bls.n	800459a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004594:	d101      	bne.n	800459a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e037      	b.n	800460a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a0:	461a      	mov	r2, r3
 80045a2:	2300      	movs	r3, #0
 80045a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c8:	f043 0318 	orr.w	r3, r3, #24
 80045cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80045e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80045e2:	7afb      	ldrb	r3, [r7, #11]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d10f      	bne.n	8004608 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	461a      	mov	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004602:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004606:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	4f54300a 	.word	0x4f54300a

0800461c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3301      	adds	r3, #1
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	4a13      	ldr	r2, [pc, #76]	; (800467c <USB_CoreReset+0x60>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e01a      	b.n	800466e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	daf3      	bge.n	8004628 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f043 0201 	orr.w	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3301      	adds	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	4a09      	ldr	r2, [pc, #36]	; (800467c <USB_CoreReset+0x60>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e006      	b.n	800466e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d0f1      	beq.n	8004650 <USB_CoreReset+0x34>

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	00030d40 	.word	0x00030d40

08004680 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800468c:	2010      	movs	r0, #16
 800468e:	f001 ff03 	bl	8006498 <USBD_static_malloc>
 8004692:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80046a2:	2302      	movs	r3, #2
 80046a4:	e01b      	b.n	80046de <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7c1b      	ldrb	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2207      	movs	r2, #7
 80046ba:	875a      	strh	r2, [r3, #58]	; 0x3a
 80046bc:	e002      	b.n	80046c4 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	220a      	movs	r2, #10
 80046c2:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80046c4:	2304      	movs	r3, #4
 80046c6:	2203      	movs	r2, #3
 80046c8:	2181      	movs	r1, #129	; 0x81
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 fdd3 	bl	8006276 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80046f2:	2181      	movs	r1, #129	; 0x81
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f001 fde4 	bl	80062c2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800470c:	2b00      	cmp	r3, #0
 800470e:	d009      	beq.n	8004724 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004716:	4618      	mov	r0, r3
 8004718:	f001 fecc 	bl	80064b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004740:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004750:	2303      	movs	r3, #3
 8004752:	e0e8      	b.n	8004926 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800475c:	2b00      	cmp	r3, #0
 800475e:	d046      	beq.n	80047ee <USBD_HID_Setup+0xbe>
 8004760:	2b20      	cmp	r3, #32
 8004762:	f040 80d8 	bne.w	8004916 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	785b      	ldrb	r3, [r3, #1]
 800476a:	3b02      	subs	r3, #2
 800476c:	2b09      	cmp	r3, #9
 800476e:	d836      	bhi.n	80047de <USBD_HID_Setup+0xae>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <USBD_HID_Setup+0x48>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047cf 	.word	0x080047cf
 800477c:	080047af 	.word	0x080047af
 8004780:	080047df 	.word	0x080047df
 8004784:	080047df 	.word	0x080047df
 8004788:	080047df 	.word	0x080047df
 800478c:	080047df 	.word	0x080047df
 8004790:	080047df 	.word	0x080047df
 8004794:	080047df 	.word	0x080047df
 8004798:	080047bd 	.word	0x080047bd
 800479c:	080047a1 	.word	0x080047a1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	885b      	ldrh	r3, [r3, #2]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	601a      	str	r2, [r3, #0]
          break;
 80047ac:	e01e      	b.n	80047ec <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f001 fa22 	bl	8005bfe <USBD_CtlSendData>
          break;
 80047ba:	e017      	b.n	80047ec <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	885b      	ldrh	r3, [r3, #2]
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	605a      	str	r2, [r3, #4]
          break;
 80047cc:	e00e      	b.n	80047ec <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3304      	adds	r3, #4
 80047d2:	2201      	movs	r2, #1
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f001 fa11 	bl	8005bfe <USBD_CtlSendData>
          break;
 80047dc:	e006      	b.n	80047ec <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80047de:	6839      	ldr	r1, [r7, #0]
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f001 f99b 	bl	8005b1c <USBD_CtlError>
          ret = USBD_FAIL;
 80047e6:	2303      	movs	r3, #3
 80047e8:	75fb      	strb	r3, [r7, #23]
          break;
 80047ea:	bf00      	nop
      }
      break;
 80047ec:	e09a      	b.n	8004924 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	785b      	ldrb	r3, [r3, #1]
 80047f2:	2b0b      	cmp	r3, #11
 80047f4:	f200 8086 	bhi.w	8004904 <USBD_HID_Setup+0x1d4>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <USBD_HID_Setup+0xd0>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004831 	.word	0x08004831
 8004804:	08004913 	.word	0x08004913
 8004808:	08004905 	.word	0x08004905
 800480c:	08004905 	.word	0x08004905
 8004810:	08004905 	.word	0x08004905
 8004814:	08004905 	.word	0x08004905
 8004818:	0800485b 	.word	0x0800485b
 800481c:	08004905 	.word	0x08004905
 8004820:	08004905 	.word	0x08004905
 8004824:	08004905 	.word	0x08004905
 8004828:	080048b3 	.word	0x080048b3
 800482c:	080048dd 	.word	0x080048dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b03      	cmp	r3, #3
 800483a:	d107      	bne.n	800484c <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800483c:	f107 030a 	add.w	r3, r7, #10
 8004840:	2202      	movs	r2, #2
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f001 f9da 	bl	8005bfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800484a:	e063      	b.n	8004914 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 f964 	bl	8005b1c <USBD_CtlError>
            ret = USBD_FAIL;
 8004854:	2303      	movs	r3, #3
 8004856:	75fb      	strb	r3, [r7, #23]
          break;
 8004858:	e05c      	b.n	8004914 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	885b      	ldrh	r3, [r3, #2]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b22      	cmp	r3, #34	; 0x22
 8004864:	d108      	bne.n	8004878 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	88db      	ldrh	r3, [r3, #6]
 800486a:	2b4a      	cmp	r3, #74	; 0x4a
 800486c:	bf28      	it	cs
 800486e:	234a      	movcs	r3, #74	; 0x4a
 8004870:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8004872:	4b2f      	ldr	r3, [pc, #188]	; (8004930 <USBD_HID_Setup+0x200>)
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	e015      	b.n	80048a4 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	885b      	ldrh	r3, [r3, #2]
 800487c:	0a1b      	lsrs	r3, r3, #8
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b21      	cmp	r3, #33	; 0x21
 8004882:	d108      	bne.n	8004896 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <USBD_HID_Setup+0x204>)
 8004886:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	88db      	ldrh	r3, [r3, #6]
 800488c:	2b09      	cmp	r3, #9
 800488e:	bf28      	it	cs
 8004890:	2309      	movcs	r3, #9
 8004892:	82bb      	strh	r3, [r7, #20]
 8004894:	e006      	b.n	80048a4 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004896:	6839      	ldr	r1, [r7, #0]
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f001 f93f 	bl	8005b1c <USBD_CtlError>
            ret = USBD_FAIL;
 800489e:	2303      	movs	r3, #3
 80048a0:	75fb      	strb	r3, [r7, #23]
            break;
 80048a2:	e037      	b.n	8004914 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80048a4:	8abb      	ldrh	r3, [r7, #20]
 80048a6:	461a      	mov	r2, r3
 80048a8:	6939      	ldr	r1, [r7, #16]
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 f9a7 	bl	8005bfe <USBD_CtlSendData>
          break;
 80048b0:	e030      	b.n	8004914 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d107      	bne.n	80048ce <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3308      	adds	r3, #8
 80048c2:	2201      	movs	r2, #1
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f001 f999 	bl	8005bfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048cc:	e022      	b.n	8004914 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80048ce:	6839      	ldr	r1, [r7, #0]
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 f923 	bl	8005b1c <USBD_CtlError>
            ret = USBD_FAIL;
 80048d6:	2303      	movs	r3, #3
 80048d8:	75fb      	strb	r3, [r7, #23]
          break;
 80048da:	e01b      	b.n	8004914 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d106      	bne.n	80048f6 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	885b      	ldrh	r3, [r3, #2]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048f4:	e00e      	b.n	8004914 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 f90f 	bl	8005b1c <USBD_CtlError>
            ret = USBD_FAIL;
 80048fe:	2303      	movs	r3, #3
 8004900:	75fb      	strb	r3, [r7, #23]
          break;
 8004902:	e007      	b.n	8004914 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f001 f908 	bl	8005b1c <USBD_CtlError>
          ret = USBD_FAIL;
 800490c:	2303      	movs	r3, #3
 800490e:	75fb      	strb	r3, [r7, #23]
          break;
 8004910:	e000      	b.n	8004914 <USBD_HID_Setup+0x1e4>
          break;
 8004912:	bf00      	nop
      }
      break;
 8004914:	e006      	b.n	8004924 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f001 f8ff 	bl	8005b1c <USBD_CtlError>
      ret = USBD_FAIL;
 800491e:	2303      	movs	r3, #3
 8004920:	75fb      	strb	r3, [r7, #23]
      break;
 8004922:	bf00      	nop
  }

  return (uint8_t)ret;
 8004924:	7dfb      	ldrb	r3, [r7, #23]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200000c8 	.word	0x200000c8
 8004934:	200000b0 	.word	0x200000b0

08004938 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	4613      	mov	r3, r2
 8004944:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800494c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8004954:	2303      	movs	r3, #3
 8004956:	e013      	b.n	8004980 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b03      	cmp	r3, #3
 8004962:	d10c      	bne.n	800497e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	7b1b      	ldrb	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d108      	bne.n	800497e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2201      	movs	r2, #1
 8004970:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	2181      	movs	r1, #129	; 0x81
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f001 fd4a 	bl	8006412 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2222      	movs	r2, #34	; 0x22
 8004994:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004996:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	20000044 	.word	0x20000044

080049a8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2222      	movs	r2, #34	; 0x22
 80049b4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80049b6:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	20000068 	.word	0x20000068

080049c8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2222      	movs	r2, #34	; 0x22
 80049d4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80049d6:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	2000008c 	.word	0x2000008c

080049e8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049fa:	2200      	movs	r2, #0
 80049fc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	220a      	movs	r2, #10
 8004a18:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004a1a:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	200000bc 	.word	0x200000bc

08004a2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e01f      	b.n	8004a84 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	79fa      	ldrb	r2, [r7, #7]
 8004a76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f001 fb95 	bl	80061a8 <USBD_LL_Init>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e016      	b.n	8004ad2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	f107 020e 	add.w	r2, r7, #14
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4798      	blx	r3
 8004ac8:	4602      	mov	r2, r0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f001 fbac 	bl	8006240 <USBD_LL_Start>
 8004ae8:	4603      	mov	r3, r0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004b14:	2303      	movs	r3, #3
 8004b16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	4611      	mov	r1, r2
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
  }

  return USBD_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 ff90 	bl	8005aa8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004b96:	461a      	mov	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d01a      	beq.n	8004be2 <USBD_LL_SetupStage+0x72>
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d822      	bhi.n	8004bf6 <USBD_LL_SetupStage+0x86>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <USBD_LL_SetupStage+0x4a>
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d00a      	beq.n	8004bce <USBD_LL_SetupStage+0x5e>
 8004bb8:	e01d      	b.n	8004bf6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa62 	bl	800508c <USBD_StdDevReq>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	73fb      	strb	r3, [r7, #15]
      break;
 8004bcc:	e020      	b.n	8004c10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fac6 	bl	8005168 <USBD_StdItfReq>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	73fb      	strb	r3, [r7, #15]
      break;
 8004be0:	e016      	b.n	8004c10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fb05 	bl	80051fa <USBD_StdEPReq>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf4:	e00c      	b.n	8004c10 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004bfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	4619      	mov	r1, r3
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f001 fb7b 	bl	8006300 <USBD_LL_StallEP>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c0e:	bf00      	nop
  }

  return ret;
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	460b      	mov	r3, r1
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004c28:	7afb      	ldrb	r3, [r7, #11]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d138      	bne.n	8004ca0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004c34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d14a      	bne.n	8004cd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d913      	bls.n	8004c74 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	1ad2      	subs	r2, r2, r3
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	4293      	cmp	r3, r2
 8004c64:	bf28      	it	cs
 8004c66:	4613      	movcs	r3, r2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fff2 	bl	8005c56 <USBD_CtlContinueRx>
 8004c72:	e030      	b.n	8004cd6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d10b      	bne.n	8004c98 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 ffed 	bl	8005c78 <USBD_CtlSendStatus>
 8004c9e:	e01a      	b.n	8004cd6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d114      	bne.n	8004cd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00e      	beq.n	8004cd6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	7afa      	ldrb	r2, [r7, #11]
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	4798      	blx	r3
 8004cc8:	4603      	mov	r3, r0
 8004cca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	e000      	b.n	8004cd8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004cee:	7afb      	ldrb	r3, [r7, #11]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d16b      	bne.n	8004dcc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d156      	bne.n	8004db2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d914      	bls.n	8004d3a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	1ad2      	subs	r2, r2, r3
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	461a      	mov	r2, r3
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 ff84 	bl	8005c34 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2100      	movs	r1, #0
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f001 fb8e 	bl	8006454 <USBD_LL_PrepareReceive>
 8004d38:	e03b      	b.n	8004db2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d11c      	bne.n	8004d80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d316      	bcc.n	8004d80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d20f      	bcs.n	8004d80 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d60:	2200      	movs	r2, #0
 8004d62:	2100      	movs	r1, #0
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 ff65 	bl	8005c34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d72:	2300      	movs	r3, #0
 8004d74:	2200      	movs	r2, #0
 8004d76:	2100      	movs	r1, #0
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f001 fb6b 	bl	8006454 <USBD_LL_PrepareReceive>
 8004d7e:	e018      	b.n	8004db2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d10b      	bne.n	8004da4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f001 faaa 	bl	8006300 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 ff76 	bl	8005c9e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d122      	bne.n	8004e02 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff fe98 	bl	8004af2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004dca:	e01a      	b.n	8004e02 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d114      	bne.n	8004e02 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00e      	beq.n	8004e02 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	7afa      	ldrb	r2, [r7, #11]
 8004dee:	4611      	mov	r1, r2
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	4798      	blx	r3
 8004df4:	4603      	mov	r3, r0
 8004df6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
 8004e00:	e000      	b.n	8004e04 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e02f      	b.n	8004ea0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00f      	beq.n	8004e6a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6852      	ldr	r2, [r2, #4]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	4611      	mov	r1, r2
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e6a:	2340      	movs	r3, #64	; 0x40
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f001 fa00 	bl	8006276 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2240      	movs	r2, #64	; 0x40
 8004e82:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e86:	2340      	movs	r3, #64	; 0x40
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2180      	movs	r1, #128	; 0x80
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 f9f2 	bl	8006276 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2240      	movs	r2, #64	; 0x40
 8004e9c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d106      	bne.n	8004f16 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e012      	b.n	8004f60 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d10b      	bne.n	8004f5e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e014      	b.n	8004fac <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d10d      	bne.n	8004faa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e014      	b.n	8004ff8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d10d      	bne.n	8004ff6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d009      	beq.n	8005044 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6852      	ldr	r2, [r2, #4]
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	4611      	mov	r1, r2
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
  }

  return USBD_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800504e:	b480      	push	{r7}
 8005050:	b087      	sub	sp, #28
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3301      	adds	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800506c:	8a3b      	ldrh	r3, [r7, #16]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	b21a      	sxth	r2, r3
 8005072:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005076:	4313      	orrs	r3, r2
 8005078:	b21b      	sxth	r3, r3
 800507a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800507c:	89fb      	ldrh	r3, [r7, #14]
}
 800507e:	4618      	mov	r0, r3
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d005      	beq.n	80050b2 <USBD_StdDevReq+0x26>
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d853      	bhi.n	8005152 <USBD_StdDevReq+0xc6>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <USBD_StdDevReq+0x3a>
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d14f      	bne.n	8005152 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	6839      	ldr	r1, [r7, #0]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
 80050c0:	4603      	mov	r3, r0
 80050c2:	73fb      	strb	r3, [r7, #15]
      break;
 80050c4:	e04a      	b.n	800515c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b09      	cmp	r3, #9
 80050cc:	d83b      	bhi.n	8005146 <USBD_StdDevReq+0xba>
 80050ce:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <USBD_StdDevReq+0x48>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	08005129 	.word	0x08005129
 80050d8:	0800513d 	.word	0x0800513d
 80050dc:	08005147 	.word	0x08005147
 80050e0:	08005133 	.word	0x08005133
 80050e4:	08005147 	.word	0x08005147
 80050e8:	08005107 	.word	0x08005107
 80050ec:	080050fd 	.word	0x080050fd
 80050f0:	08005147 	.word	0x08005147
 80050f4:	0800511f 	.word	0x0800511f
 80050f8:	08005111 	.word	0x08005111
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f9de 	bl	80054c0 <USBD_GetDescriptor>
          break;
 8005104:	e024      	b.n	8005150 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fb43 	bl	8005794 <USBD_SetAddress>
          break;
 800510e:	e01f      	b.n	8005150 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fb82 	bl	800581c <USBD_SetConfig>
 8005118:	4603      	mov	r3, r0
 800511a:	73fb      	strb	r3, [r7, #15]
          break;
 800511c:	e018      	b.n	8005150 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fc21 	bl	8005968 <USBD_GetConfig>
          break;
 8005126:	e013      	b.n	8005150 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fc52 	bl	80059d4 <USBD_GetStatus>
          break;
 8005130:	e00e      	b.n	8005150 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005132:	6839      	ldr	r1, [r7, #0]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fc81 	bl	8005a3c <USBD_SetFeature>
          break;
 800513a:	e009      	b.n	8005150 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fc90 	bl	8005a64 <USBD_ClrFeature>
          break;
 8005144:	e004      	b.n	8005150 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fce7 	bl	8005b1c <USBD_CtlError>
          break;
 800514e:	bf00      	nop
      }
      break;
 8005150:	e004      	b.n	800515c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fce1 	bl	8005b1c <USBD_CtlError>
      break;
 800515a:	bf00      	nop
  }

  return ret;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop

08005168 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d005      	beq.n	800518e <USBD_StdItfReq+0x26>
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	d82f      	bhi.n	80051e6 <USBD_StdItfReq+0x7e>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <USBD_StdItfReq+0x26>
 800518a:	2b20      	cmp	r3, #32
 800518c:	d12b      	bne.n	80051e6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005194:	b2db      	uxtb	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	2b02      	cmp	r3, #2
 800519a:	d81d      	bhi.n	80051d8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	889b      	ldrh	r3, [r3, #4]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d813      	bhi.n	80051ce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	4798      	blx	r3
 80051b4:	4603      	mov	r3, r0
 80051b6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	88db      	ldrh	r3, [r3, #6]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d110      	bne.n	80051e2 <USBD_StdItfReq+0x7a>
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10d      	bne.n	80051e2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fd56 	bl	8005c78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80051cc:	e009      	b.n	80051e2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fca3 	bl	8005b1c <USBD_CtlError>
          break;
 80051d6:	e004      	b.n	80051e2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fc9e 	bl	8005b1c <USBD_CtlError>
          break;
 80051e0:	e000      	b.n	80051e4 <USBD_StdItfReq+0x7c>
          break;
 80051e2:	bf00      	nop
      }
      break;
 80051e4:	e004      	b.n	80051f0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fc97 	bl	8005b1c <USBD_CtlError>
      break;
 80051ee:	bf00      	nop
  }

  return ret;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	889b      	ldrh	r3, [r3, #4]
 800520c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d007      	beq.n	800522a <USBD_StdEPReq+0x30>
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	f200 8145 	bhi.w	80054aa <USBD_StdEPReq+0x2b0>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <USBD_StdEPReq+0x44>
 8005224:	2b20      	cmp	r3, #32
 8005226:	f040 8140 	bne.w	80054aa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	6839      	ldr	r1, [r7, #0]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]
      break;
 800523c:	e13a      	b.n	80054b4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b03      	cmp	r3, #3
 8005244:	d007      	beq.n	8005256 <USBD_StdEPReq+0x5c>
 8005246:	2b03      	cmp	r3, #3
 8005248:	f300 8129 	bgt.w	800549e <USBD_StdEPReq+0x2a4>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d07f      	beq.n	8005350 <USBD_StdEPReq+0x156>
 8005250:	2b01      	cmp	r3, #1
 8005252:	d03c      	beq.n	80052ce <USBD_StdEPReq+0xd4>
 8005254:	e123      	b.n	800549e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d002      	beq.n	8005268 <USBD_StdEPReq+0x6e>
 8005262:	2b03      	cmp	r3, #3
 8005264:	d016      	beq.n	8005294 <USBD_StdEPReq+0x9a>
 8005266:	e02c      	b.n	80052c2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <USBD_StdEPReq+0x90>
 800526e:	7bbb      	ldrb	r3, [r7, #14]
 8005270:	2b80      	cmp	r3, #128	; 0x80
 8005272:	d00a      	beq.n	800528a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005274:	7bbb      	ldrb	r3, [r7, #14]
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 f841 	bl	8006300 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 f83d 	bl	8006300 <USBD_LL_StallEP>
 8005286:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005288:	e020      	b.n	80052cc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fc45 	bl	8005b1c <USBD_CtlError>
              break;
 8005292:	e01b      	b.n	80052cc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	885b      	ldrh	r3, [r3, #2]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10e      	bne.n	80052ba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800529c:	7bbb      	ldrb	r3, [r7, #14]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <USBD_StdEPReq+0xc0>
 80052a2:	7bbb      	ldrb	r3, [r7, #14]
 80052a4:	2b80      	cmp	r3, #128	; 0x80
 80052a6:	d008      	beq.n	80052ba <USBD_StdEPReq+0xc0>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	88db      	ldrh	r3, [r3, #6]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f001 f823 	bl	8006300 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fcdc 	bl	8005c78 <USBD_CtlSendStatus>

              break;
 80052c0:	e004      	b.n	80052cc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80052c2:	6839      	ldr	r1, [r7, #0]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fc29 	bl	8005b1c <USBD_CtlError>
              break;
 80052ca:	bf00      	nop
          }
          break;
 80052cc:	e0ec      	b.n	80054a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d002      	beq.n	80052e0 <USBD_StdEPReq+0xe6>
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d016      	beq.n	800530c <USBD_StdEPReq+0x112>
 80052de:	e030      	b.n	8005342 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052e0:	7bbb      	ldrb	r3, [r7, #14]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <USBD_StdEPReq+0x108>
 80052e6:	7bbb      	ldrb	r3, [r7, #14]
 80052e8:	2b80      	cmp	r3, #128	; 0x80
 80052ea:	d00a      	beq.n	8005302 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80052ec:	7bbb      	ldrb	r3, [r7, #14]
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 f805 	bl	8006300 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 f801 	bl	8006300 <USBD_LL_StallEP>
 80052fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005300:	e025      	b.n	800534e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fc09 	bl	8005b1c <USBD_CtlError>
              break;
 800530a:	e020      	b.n	800534e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	885b      	ldrh	r3, [r3, #2]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d11b      	bne.n	800534c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005314:	7bbb      	ldrb	r3, [r7, #14]
 8005316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800531e:	7bbb      	ldrb	r3, [r7, #14]
 8005320:	4619      	mov	r1, r3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f001 f80b 	bl	800633e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fca5 	bl	8005c78 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	4798      	blx	r3
 800533c:	4603      	mov	r3, r0
 800533e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005340:	e004      	b.n	800534c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fbe9 	bl	8005b1c <USBD_CtlError>
              break;
 800534a:	e000      	b.n	800534e <USBD_StdEPReq+0x154>
              break;
 800534c:	bf00      	nop
          }
          break;
 800534e:	e0ab      	b.n	80054a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d002      	beq.n	8005362 <USBD_StdEPReq+0x168>
 800535c:	2b03      	cmp	r3, #3
 800535e:	d032      	beq.n	80053c6 <USBD_StdEPReq+0x1cc>
 8005360:	e097      	b.n	8005492 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005362:	7bbb      	ldrb	r3, [r7, #14]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <USBD_StdEPReq+0x17e>
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	d004      	beq.n	8005378 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800536e:	6839      	ldr	r1, [r7, #0]
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fbd3 	bl	8005b1c <USBD_CtlError>
                break;
 8005376:	e091      	b.n	800549c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800537c:	2b00      	cmp	r3, #0
 800537e:	da0b      	bge.n	8005398 <USBD_StdEPReq+0x19e>
 8005380:	7bbb      	ldrb	r3, [r7, #14]
 8005382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	3310      	adds	r3, #16
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	4413      	add	r3, r2
 8005394:	3304      	adds	r3, #4
 8005396:	e00b      	b.n	80053b0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	3304      	adds	r3, #4
 80053b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2202      	movs	r2, #2
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fc1d 	bl	8005bfe <USBD_CtlSendData>
              break;
 80053c4:	e06a      	b.n	800549c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80053c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	da11      	bge.n	80053f2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80053ce:	7bbb      	ldrb	r3, [r7, #14]
 80053d0:	f003 020f 	and.w	r2, r3, #15
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3324      	adds	r3, #36	; 0x24
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d117      	bne.n	8005418 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fb96 	bl	8005b1c <USBD_CtlError>
                  break;
 80053f0:	e054      	b.n	800549c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053f2:	7bbb      	ldrb	r3, [r7, #14]
 80053f4:	f003 020f 	and.w	r2, r3, #15
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fb83 	bl	8005b1c <USBD_CtlError>
                  break;
 8005416:	e041      	b.n	800549c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800541c:	2b00      	cmp	r3, #0
 800541e:	da0b      	bge.n	8005438 <USBD_StdEPReq+0x23e>
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	3310      	adds	r3, #16
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4413      	add	r3, r2
 8005434:	3304      	adds	r3, #4
 8005436:	e00b      	b.n	8005450 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005438:	7bbb      	ldrb	r3, [r7, #14]
 800543a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4413      	add	r3, r2
 800544e:	3304      	adds	r3, #4
 8005450:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <USBD_StdEPReq+0x264>
 8005458:	7bbb      	ldrb	r3, [r7, #14]
 800545a:	2b80      	cmp	r3, #128	; 0x80
 800545c:	d103      	bne.n	8005466 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e00e      	b.n	8005484 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005466:	7bbb      	ldrb	r3, [r7, #14]
 8005468:	4619      	mov	r1, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 ff86 	bl	800637c <USBD_LL_IsStallEP>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	e002      	b.n	8005484 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2202      	movs	r2, #2
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fbb7 	bl	8005bfe <USBD_CtlSendData>
              break;
 8005490:	e004      	b.n	800549c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fb41 	bl	8005b1c <USBD_CtlError>
              break;
 800549a:	bf00      	nop
          }
          break;
 800549c:	e004      	b.n	80054a8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800549e:	6839      	ldr	r1, [r7, #0]
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fb3b 	bl	8005b1c <USBD_CtlError>
          break;
 80054a6:	bf00      	nop
      }
      break;
 80054a8:	e004      	b.n	80054b4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb35 	bl	8005b1c <USBD_CtlError>
      break;
 80054b2:	bf00      	nop
  }

  return ret;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	885b      	ldrh	r3, [r3, #2]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	2b06      	cmp	r3, #6
 80054e2:	f200 8128 	bhi.w	8005736 <USBD_GetDescriptor+0x276>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <USBD_GetDescriptor+0x2c>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005509 	.word	0x08005509
 80054f0:	08005521 	.word	0x08005521
 80054f4:	08005561 	.word	0x08005561
 80054f8:	08005737 	.word	0x08005737
 80054fc:	08005737 	.word	0x08005737
 8005500:	080056d7 	.word	0x080056d7
 8005504:	08005703 	.word	0x08005703
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	7c12      	ldrb	r2, [r2, #16]
 8005514:	f107 0108 	add.w	r1, r7, #8
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3
 800551c:	60f8      	str	r0, [r7, #12]
      break;
 800551e:	e112      	b.n	8005746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7c1b      	ldrb	r3, [r3, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10d      	bne.n	8005544 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	f107 0208 	add.w	r2, r7, #8
 8005534:	4610      	mov	r0, r2
 8005536:	4798      	blx	r3
 8005538:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	2202      	movs	r2, #2
 8005540:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005542:	e100      	b.n	8005746 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	f107 0208 	add.w	r2, r7, #8
 8005550:	4610      	mov	r0, r2
 8005552:	4798      	blx	r3
 8005554:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3301      	adds	r3, #1
 800555a:	2202      	movs	r2, #2
 800555c:	701a      	strb	r2, [r3, #0]
      break;
 800555e:	e0f2      	b.n	8005746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	885b      	ldrh	r3, [r3, #2]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b05      	cmp	r3, #5
 8005568:	f200 80ac 	bhi.w	80056c4 <USBD_GetDescriptor+0x204>
 800556c:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <USBD_GetDescriptor+0xb4>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	0800558d 	.word	0x0800558d
 8005578:	080055c1 	.word	0x080055c1
 800557c:	080055f5 	.word	0x080055f5
 8005580:	08005629 	.word	0x08005629
 8005584:	0800565d 	.word	0x0800565d
 8005588:	08005691 	.word	0x08005691
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	7c12      	ldrb	r2, [r2, #16]
 80055a4:	f107 0108 	add.w	r1, r7, #8
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
 80055ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055ae:	e091      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fab2 	bl	8005b1c <USBD_CtlError>
            err++;
 80055b8:	7afb      	ldrb	r3, [r7, #11]
 80055ba:	3301      	adds	r3, #1
 80055bc:	72fb      	strb	r3, [r7, #11]
          break;
 80055be:	e089      	b.n	80056d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	7c12      	ldrb	r2, [r2, #16]
 80055d8:	f107 0108 	add.w	r1, r7, #8
 80055dc:	4610      	mov	r0, r2
 80055de:	4798      	blx	r3
 80055e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055e2:	e077      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa98 	bl	8005b1c <USBD_CtlError>
            err++;
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	3301      	adds	r3, #1
 80055f0:	72fb      	strb	r3, [r7, #11]
          break;
 80055f2:	e06f      	b.n	80056d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	7c12      	ldrb	r2, [r2, #16]
 800560c:	f107 0108 	add.w	r1, r7, #8
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
 8005614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005616:	e05d      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fa7e 	bl	8005b1c <USBD_CtlError>
            err++;
 8005620:	7afb      	ldrb	r3, [r7, #11]
 8005622:	3301      	adds	r3, #1
 8005624:	72fb      	strb	r3, [r7, #11]
          break;
 8005626:	e055      	b.n	80056d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	7c12      	ldrb	r2, [r2, #16]
 8005640:	f107 0108 	add.w	r1, r7, #8
 8005644:	4610      	mov	r0, r2
 8005646:	4798      	blx	r3
 8005648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800564a:	e043      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa64 	bl	8005b1c <USBD_CtlError>
            err++;
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	3301      	adds	r3, #1
 8005658:	72fb      	strb	r3, [r7, #11]
          break;
 800565a:	e03b      	b.n	80056d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	7c12      	ldrb	r2, [r2, #16]
 8005674:	f107 0108 	add.w	r1, r7, #8
 8005678:	4610      	mov	r0, r2
 800567a:	4798      	blx	r3
 800567c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800567e:	e029      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fa4a 	bl	8005b1c <USBD_CtlError>
            err++;
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	3301      	adds	r3, #1
 800568c:	72fb      	strb	r3, [r7, #11]
          break;
 800568e:	e021      	b.n	80056d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	7c12      	ldrb	r2, [r2, #16]
 80056a8:	f107 0108 	add.w	r1, r7, #8
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
 80056b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056b2:	e00f      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa30 	bl	8005b1c <USBD_CtlError>
            err++;
 80056bc:	7afb      	ldrb	r3, [r7, #11]
 80056be:	3301      	adds	r3, #1
 80056c0:	72fb      	strb	r3, [r7, #11]
          break;
 80056c2:	e007      	b.n	80056d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa28 	bl	8005b1c <USBD_CtlError>
          err++;
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	3301      	adds	r3, #1
 80056d0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80056d2:	bf00      	nop
      }
      break;
 80056d4:	e037      	b.n	8005746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7c1b      	ldrb	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e6:	f107 0208 	add.w	r2, r7, #8
 80056ea:	4610      	mov	r0, r2
 80056ec:	4798      	blx	r3
 80056ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056f0:	e029      	b.n	8005746 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fa11 	bl	8005b1c <USBD_CtlError>
        err++;
 80056fa:	7afb      	ldrb	r3, [r7, #11]
 80056fc:	3301      	adds	r3, #1
 80056fe:	72fb      	strb	r3, [r7, #11]
      break;
 8005700:	e021      	b.n	8005746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	7c1b      	ldrb	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10d      	bne.n	8005726 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f107 0208 	add.w	r2, r7, #8
 8005716:	4610      	mov	r0, r2
 8005718:	4798      	blx	r3
 800571a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	2207      	movs	r2, #7
 8005722:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005724:	e00f      	b.n	8005746 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f9f7 	bl	8005b1c <USBD_CtlError>
        err++;
 800572e:	7afb      	ldrb	r3, [r7, #11]
 8005730:	3301      	adds	r3, #1
 8005732:	72fb      	strb	r3, [r7, #11]
      break;
 8005734:	e007      	b.n	8005746 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f9ef 	bl	8005b1c <USBD_CtlError>
      err++;
 800573e:	7afb      	ldrb	r3, [r7, #11]
 8005740:	3301      	adds	r3, #1
 8005742:	72fb      	strb	r3, [r7, #11]
      break;
 8005744:	bf00      	nop
  }

  if (err != 0U)
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d11e      	bne.n	800578a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	88db      	ldrh	r3, [r3, #6]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d016      	beq.n	8005782 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005754:	893b      	ldrh	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	88da      	ldrh	r2, [r3, #6]
 800575e:	893b      	ldrh	r3, [r7, #8]
 8005760:	4293      	cmp	r3, r2
 8005762:	bf28      	it	cs
 8005764:	4613      	movcs	r3, r2
 8005766:	b29b      	uxth	r3, r3
 8005768:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800576a:	893b      	ldrh	r3, [r7, #8]
 800576c:	461a      	mov	r2, r3
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fa44 	bl	8005bfe <USBD_CtlSendData>
 8005776:	e009      	b.n	800578c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f9ce 	bl	8005b1c <USBD_CtlError>
 8005780:	e004      	b.n	800578c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa78 	bl	8005c78 <USBD_CtlSendStatus>
 8005788:	e000      	b.n	800578c <USBD_GetDescriptor+0x2cc>
    return;
 800578a:	bf00      	nop
  }
}
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop

08005794 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	889b      	ldrh	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d131      	bne.n	800580a <USBD_SetAddress+0x76>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	88db      	ldrh	r3, [r3, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d12d      	bne.n	800580a <USBD_SetAddress+0x76>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	885b      	ldrh	r3, [r3, #2]
 80057b2:	2b7f      	cmp	r3, #127	; 0x7f
 80057b4:	d829      	bhi.n	800580a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	885b      	ldrh	r3, [r3, #2]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d104      	bne.n	80057d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f9a3 	bl	8005b1c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d6:	e01d      	b.n	8005814 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7bfa      	ldrb	r2, [r7, #15]
 80057dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fdf5 	bl	80063d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa44 	bl	8005c78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fe:	e009      	b.n	8005814 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005808:	e004      	b.n	8005814 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f985 	bl	8005b1c <USBD_CtlError>
  }
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	885b      	ldrh	r3, [r3, #2]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	4b4c      	ldr	r3, [pc, #304]	; (8005964 <USBD_SetConfig+0x148>)
 8005832:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005834:	4b4b      	ldr	r3, [pc, #300]	; (8005964 <USBD_SetConfig+0x148>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d905      	bls.n	8005848 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f96c 	bl	8005b1c <USBD_CtlError>
    return USBD_FAIL;
 8005844:	2303      	movs	r3, #3
 8005846:	e088      	b.n	800595a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d002      	beq.n	800585a <USBD_SetConfig+0x3e>
 8005854:	2b03      	cmp	r3, #3
 8005856:	d025      	beq.n	80058a4 <USBD_SetConfig+0x88>
 8005858:	e071      	b.n	800593e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800585a:	4b42      	ldr	r3, [pc, #264]	; (8005964 <USBD_SetConfig+0x148>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01c      	beq.n	800589c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005862:	4b40      	ldr	r3, [pc, #256]	; (8005964 <USBD_SetConfig+0x148>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800586c:	4b3d      	ldr	r3, [pc, #244]	; (8005964 <USBD_SetConfig+0x148>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff f948 	bl	8004b08 <USBD_SetClassConfig>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d004      	beq.n	800588c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f949 	bl	8005b1c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800588a:	e065      	b.n	8005958 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f9f3 	bl	8005c78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2203      	movs	r2, #3
 8005896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800589a:	e05d      	b.n	8005958 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f9eb 	bl	8005c78 <USBD_CtlSendStatus>
      break;
 80058a2:	e059      	b.n	8005958 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80058a4:	4b2f      	ldr	r3, [pc, #188]	; (8005964 <USBD_SetConfig+0x148>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d112      	bne.n	80058d2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80058b4:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <USBD_SetConfig+0x148>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80058be:	4b29      	ldr	r3, [pc, #164]	; (8005964 <USBD_SetConfig+0x148>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff f93b 	bl	8004b40 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f9d4 	bl	8005c78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80058d0:	e042      	b.n	8005958 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80058d2:	4b24      	ldr	r3, [pc, #144]	; (8005964 <USBD_SetConfig+0x148>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d02a      	beq.n	8005936 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff f929 	bl	8004b40 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80058ee:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <USBD_SetConfig+0x148>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058f8:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <USBD_SetConfig+0x148>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff f902 	bl	8004b08 <USBD_SetClassConfig>
 8005904:	4603      	mov	r3, r0
 8005906:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00f      	beq.n	800592e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f903 	bl	8005b1c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff f90e 	bl	8004b40 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800592c:	e014      	b.n	8005958 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f9a2 	bl	8005c78 <USBD_CtlSendStatus>
      break;
 8005934:	e010      	b.n	8005958 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f99e 	bl	8005c78 <USBD_CtlSendStatus>
      break;
 800593c:	e00c      	b.n	8005958 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f8eb 	bl	8005b1c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <USBD_SetConfig+0x148>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff f8f7 	bl	8004b40 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005952:	2303      	movs	r3, #3
 8005954:	73fb      	strb	r3, [r7, #15]
      break;
 8005956:	bf00      	nop
  }

  return ret;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000180 	.word	0x20000180

08005968 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	88db      	ldrh	r3, [r3, #6]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d004      	beq.n	8005984 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f8cd 	bl	8005b1c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005982:	e023      	b.n	80059cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	dc02      	bgt.n	8005996 <USBD_GetConfig+0x2e>
 8005990:	2b00      	cmp	r3, #0
 8005992:	dc03      	bgt.n	800599c <USBD_GetConfig+0x34>
 8005994:	e015      	b.n	80059c2 <USBD_GetConfig+0x5a>
 8005996:	2b03      	cmp	r3, #3
 8005998:	d00b      	beq.n	80059b2 <USBD_GetConfig+0x4a>
 800599a:	e012      	b.n	80059c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3308      	adds	r3, #8
 80059a6:	2201      	movs	r2, #1
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f927 	bl	8005bfe <USBD_CtlSendData>
        break;
 80059b0:	e00c      	b.n	80059cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3304      	adds	r3, #4
 80059b6:	2201      	movs	r2, #1
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f91f 	bl	8005bfe <USBD_CtlSendData>
        break;
 80059c0:	e004      	b.n	80059cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f8a9 	bl	8005b1c <USBD_CtlError>
        break;
 80059ca:	bf00      	nop
}
 80059cc:	bf00      	nop
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d81e      	bhi.n	8005a2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	88db      	ldrh	r3, [r3, #6]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d004      	beq.n	80059fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f890 	bl	8005b1c <USBD_CtlError>
        break;
 80059fc:	e01a      	b.n	8005a34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f043 0202 	orr.w	r2, r3, #2
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	2202      	movs	r2, #2
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8eb 	bl	8005bfe <USBD_CtlSendData>
      break;
 8005a28:	e004      	b.n	8005a34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f875 	bl	8005b1c <USBD_CtlError>
      break;
 8005a32:	bf00      	nop
  }
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	885b      	ldrh	r3, [r3, #2]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d106      	bne.n	8005a5c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f90e 	bl	8005c78 <USBD_CtlSendStatus>
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d80b      	bhi.n	8005a94 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	885b      	ldrh	r3, [r3, #2]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10c      	bne.n	8005a9e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8f3 	bl	8005c78 <USBD_CtlSendStatus>
      }
      break;
 8005a92:	e004      	b.n	8005a9e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f840 	bl	8005b1c <USBD_CtlError>
      break;
 8005a9c:	e000      	b.n	8005aa0 <USBD_ClrFeature+0x3c>
      break;
 8005a9e:	bf00      	nop
  }
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	781a      	ldrb	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff fabb 	bl	800504e <SWAPBYTE>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f7ff faae 	bl	800504e <SWAPBYTE>
 8005af2:	4603      	mov	r3, r0
 8005af4:	461a      	mov	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3301      	adds	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff faa1 	bl	800504e <SWAPBYTE>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	80da      	strh	r2, [r3, #6]
}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b26:	2180      	movs	r1, #128	; 0x80
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fbe9 	bl	8006300 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b2e:	2100      	movs	r1, #0
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fbe5 	bl	8006300 <USBD_LL_StallEP>
}
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b086      	sub	sp, #24
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	60f8      	str	r0, [r7, #12]
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d036      	beq.n	8005bc2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005b58:	6938      	ldr	r0, [r7, #16]
 8005b5a:	f000 f836 	bl	8005bca <USBD_GetLen>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	3301      	adds	r3, #1
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4413      	add	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	7812      	ldrb	r2, [r2, #0]
 8005b76:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	4413      	add	r3, r2
 8005b84:	2203      	movs	r2, #3
 8005b86:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005b8e:	e013      	b.n	8005bb8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	4413      	add	r3, r2
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	7812      	ldrb	r2, [r2, #0]
 8005b9a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	613b      	str	r3, [r7, #16]
    idx++;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	2200      	movs	r2, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
    idx++;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e7      	bne.n	8005b90 <USBD_GetString+0x52>
 8005bc0:	e000      	b.n	8005bc4 <USBD_GetString+0x86>
    return;
 8005bc2:	bf00      	nop
  }
}
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005bda:	e005      	b.n	8005be8 <USBD_GetLen+0x1e>
  {
    len++;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	3301      	adds	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f5      	bne.n	8005bdc <USBD_GetLen+0x12>
  }

  return len;
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	2100      	movs	r1, #0
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 fbf4 	bl	8006412 <USBD_LL_Transmit>

  return USBD_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	2100      	movs	r1, #0
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fbe3 	bl	8006412 <USBD_LL_Transmit>

  return USBD_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	2100      	movs	r1, #0
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fbf3 	bl	8006454 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2204      	movs	r2, #4
 8005c84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fbbf 	bl	8006412 <USBD_LL_Transmit>

  return USBD_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2205      	movs	r2, #5
 8005caa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cae:	2300      	movs	r3, #0
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fbcd 	bl	8006454 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	490e      	ldr	r1, [pc, #56]	; (8005d04 <MX_USB_DEVICE_Init+0x40>)
 8005ccc:	480e      	ldr	r0, [pc, #56]	; (8005d08 <MX_USB_DEVICE_Init+0x44>)
 8005cce:	f7fe fead 	bl	8004a2c <USBD_Init>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005cd8:	f7fa fcf6 	bl	80006c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005cdc:	490b      	ldr	r1, [pc, #44]	; (8005d0c <MX_USB_DEVICE_Init+0x48>)
 8005cde:	480a      	ldr	r0, [pc, #40]	; (8005d08 <MX_USB_DEVICE_Init+0x44>)
 8005ce0:	f7fe fed4 	bl	8004a8c <USBD_RegisterClass>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005cea:	f7fa fced 	bl	80006c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005cee:	4806      	ldr	r0, [pc, #24]	; (8005d08 <MX_USB_DEVICE_Init+0x44>)
 8005cf0:	f7fe fef3 	bl	8004ada <USBD_Start>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005cfa:	f7fa fce5 	bl	80006c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005cfe:	bf00      	nop
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000114 	.word	0x20000114
 8005d08:	200001e4 	.word	0x200001e4
 8005d0c:	2000000c 	.word	0x2000000c

08005d10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	6039      	str	r1, [r7, #0]
 8005d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2212      	movs	r2, #18
 8005d20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d22:	4b03      	ldr	r3, [pc, #12]	; (8005d30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000130 	.word	0x20000130

08005d34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	6039      	str	r1, [r7, #0]
 8005d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2204      	movs	r2, #4
 8005d44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d46:	4b03      	ldr	r3, [pc, #12]	; (8005d54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	20000144 	.word	0x20000144

08005d58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	6039      	str	r1, [r7, #0]
 8005d62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d64:	79fb      	ldrb	r3, [r7, #7]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d105      	bne.n	8005d76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	4907      	ldr	r1, [pc, #28]	; (8005d8c <USBD_FS_ProductStrDescriptor+0x34>)
 8005d6e:	4808      	ldr	r0, [pc, #32]	; (8005d90 <USBD_FS_ProductStrDescriptor+0x38>)
 8005d70:	f7ff fee5 	bl	8005b3e <USBD_GetString>
 8005d74:	e004      	b.n	8005d80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	4904      	ldr	r1, [pc, #16]	; (8005d8c <USBD_FS_ProductStrDescriptor+0x34>)
 8005d7a:	4805      	ldr	r0, [pc, #20]	; (8005d90 <USBD_FS_ProductStrDescriptor+0x38>)
 8005d7c:	f7ff fedf 	bl	8005b3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d80:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	200004b4 	.word	0x200004b4
 8005d90:	08006590 	.word	0x08006590

08005d94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	6039      	str	r1, [r7, #0]
 8005d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	4904      	ldr	r1, [pc, #16]	; (8005db4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005da4:	4804      	ldr	r0, [pc, #16]	; (8005db8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005da6:	f7ff feca 	bl	8005b3e <USBD_GetString>
  return USBD_StrDesc;
 8005daa:	4b02      	ldr	r3, [pc, #8]	; (8005db4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	200004b4 	.word	0x200004b4
 8005db8:	080065a8 	.word	0x080065a8

08005dbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	6039      	str	r1, [r7, #0]
 8005dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	221a      	movs	r2, #26
 8005dcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005dce:	f000 f843 	bl	8005e58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005dd2:	4b02      	ldr	r3, [pc, #8]	; (8005ddc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000148 	.word	0x20000148

08005de0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d105      	bne.n	8005dfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	4907      	ldr	r1, [pc, #28]	; (8005e14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005df6:	4808      	ldr	r0, [pc, #32]	; (8005e18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005df8:	f7ff fea1 	bl	8005b3e <USBD_GetString>
 8005dfc:	e004      	b.n	8005e08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	4904      	ldr	r1, [pc, #16]	; (8005e14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e02:	4805      	ldr	r0, [pc, #20]	; (8005e18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e04:	f7ff fe9b 	bl	8005b3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e08:	4b02      	ldr	r3, [pc, #8]	; (8005e14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	200004b4 	.word	0x200004b4
 8005e18:	080065bc 	.word	0x080065bc

08005e1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d105      	bne.n	8005e3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	4907      	ldr	r1, [pc, #28]	; (8005e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e32:	4808      	ldr	r0, [pc, #32]	; (8005e54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e34:	f7ff fe83 	bl	8005b3e <USBD_GetString>
 8005e38:	e004      	b.n	8005e44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	4904      	ldr	r1, [pc, #16]	; (8005e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e3e:	4805      	ldr	r0, [pc, #20]	; (8005e54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e40:	f7ff fe7d 	bl	8005b3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e44:	4b02      	ldr	r3, [pc, #8]	; (8005e50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	200004b4 	.word	0x200004b4
 8005e54:	080065c8 	.word	0x080065c8

08005e58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <Get_SerialNum+0x44>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <Get_SerialNum+0x48>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005e6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <Get_SerialNum+0x4c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005e7e:	2208      	movs	r2, #8
 8005e80:	4909      	ldr	r1, [pc, #36]	; (8005ea8 <Get_SerialNum+0x50>)
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f814 	bl	8005eb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e88:	2204      	movs	r2, #4
 8005e8a:	4908      	ldr	r1, [pc, #32]	; (8005eac <Get_SerialNum+0x54>)
 8005e8c:	68b8      	ldr	r0, [r7, #8]
 8005e8e:	f000 f80f 	bl	8005eb0 <IntToUnicode>
  }
}
 8005e92:	bf00      	nop
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	1fff7a10 	.word	0x1fff7a10
 8005ea0:	1fff7a14 	.word	0x1fff7a14
 8005ea4:	1fff7a18 	.word	0x1fff7a18
 8005ea8:	2000014a 	.word	0x2000014a
 8005eac:	2000015a 	.word	0x2000015a

08005eb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	75fb      	strb	r3, [r7, #23]
 8005ec6:	e027      	b.n	8005f18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	0f1b      	lsrs	r3, r3, #28
 8005ecc:	2b09      	cmp	r3, #9
 8005ece:	d80b      	bhi.n	8005ee8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	0f1b      	lsrs	r3, r3, #28
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4619      	mov	r1, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	440b      	add	r3, r1
 8005ee0:	3230      	adds	r2, #48	; 0x30
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e00a      	b.n	8005efe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	0f1b      	lsrs	r3, r3, #28
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3237      	adds	r2, #55	; 0x37
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	3301      	adds	r3, #1
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
 8005f14:	3301      	adds	r3, #1
 8005f16:	75fb      	strb	r3, [r7, #23]
 8005f18:	7dfa      	ldrb	r2, [r7, #23]
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d3d3      	bcc.n	8005ec8 <IntToUnicode+0x18>
  }
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	; 0x28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f38:	f107 0314 	add.w	r3, r7, #20
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	605a      	str	r2, [r3, #4]
 8005f42:	609a      	str	r2, [r3, #8]
 8005f44:	60da      	str	r2, [r3, #12]
 8005f46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f50:	d13a      	bne.n	8005fc8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f52:	2300      	movs	r3, #0
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <HAL_PCD_MspInit+0xa0>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	4a1d      	ldr	r2, [pc, #116]	; (8005fd0 <HAL_PCD_MspInit+0xa0>)
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	6313      	str	r3, [r2, #48]	; 0x30
 8005f62:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <HAL_PCD_MspInit+0xa0>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005f6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f74:	2302      	movs	r3, #2
 8005f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005f80:	230a      	movs	r3, #10
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f84:	f107 0314 	add.w	r3, r7, #20
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4812      	ldr	r0, [pc, #72]	; (8005fd4 <HAL_PCD_MspInit+0xa4>)
 8005f8c:	f7fa fe54 	bl	8000c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005f90:	4b0f      	ldr	r3, [pc, #60]	; (8005fd0 <HAL_PCD_MspInit+0xa0>)
 8005f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f94:	4a0e      	ldr	r2, [pc, #56]	; (8005fd0 <HAL_PCD_MspInit+0xa0>)
 8005f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9a:	6353      	str	r3, [r2, #52]	; 0x34
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <HAL_PCD_MspInit+0xa0>)
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	4a0a      	ldr	r2, [pc, #40]	; (8005fd0 <HAL_PCD_MspInit+0xa0>)
 8005fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005faa:	6453      	str	r3, [r2, #68]	; 0x44
 8005fac:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <HAL_PCD_MspInit+0xa0>)
 8005fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2100      	movs	r1, #0
 8005fbc:	2043      	movs	r0, #67	; 0x43
 8005fbe:	f7fa fe04 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005fc2:	2043      	movs	r0, #67	; 0x43
 8005fc4:	f7fa fe1d 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005fc8:	bf00      	nop
 8005fca:	3728      	adds	r7, #40	; 0x28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	40020000 	.word	0x40020000

08005fd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f7fe fdbe 	bl	8004b70 <USBD_LL_SetupStage>
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	4613      	mov	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	4619      	mov	r1, r3
 8006026:	f7fe fdf8 	bl	8004c1a <USBD_LL_DataOutStage>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	460b      	mov	r3, r1
 800603c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006044:	78fa      	ldrb	r2, [r7, #3]
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	3348      	adds	r3, #72	; 0x48
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	4619      	mov	r1, r3
 800605a:	f7fe fe41 	bl	8004ce0 <USBD_LL_DataInStage>
}
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe ff55 	bl	8004f24 <USBD_LL_SOF>
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800608a:	2301      	movs	r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d001      	beq.n	800609a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006096:	f7fa fb17 	bl	80006c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060a0:	7bfa      	ldrb	r2, [r7, #15]
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fe feff 	bl	8004ea8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe feab 	bl	8004e0c <USBD_LL_Reset>
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fefa 	bl	8004ec8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80060f4:	4b04      	ldr	r3, [pc, #16]	; (8006108 <HAL_PCD_SuspendCallback+0x48>)
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	4a03      	ldr	r2, [pc, #12]	; (8006108 <HAL_PCD_SuspendCallback+0x48>)
 80060fa:	f043 0306 	orr.w	r3, r3, #6
 80060fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e000ed00 	.word	0xe000ed00

0800610c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe feea 	bl	8004ef4 <USBD_LL_Resume>
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	4611      	mov	r1, r2
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe ff38 	bl	8004fb4 <USBD_LL_IsoOUTIncomplete>
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800615e:	78fa      	ldrb	r2, [r7, #3]
 8006160:	4611      	mov	r1, r2
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe ff00 	bl	8004f68 <USBD_LL_IsoINIncomplete>
}
 8006168:	bf00      	nop
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe ff3e 	bl	8005000 <USBD_LL_DevConnected>
}
 8006184:	bf00      	nop
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe ff3b 	bl	8005016 <USBD_LL_DevDisconnected>
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d13c      	bne.n	8006232 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80061b8:	4a20      	ldr	r2, [pc, #128]	; (800623c <USBD_LL_Init+0x94>)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a1e      	ldr	r2, [pc, #120]	; (800623c <USBD_LL_Init+0x94>)
 80061c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80061c8:	4b1c      	ldr	r3, [pc, #112]	; (800623c <USBD_LL_Init+0x94>)
 80061ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80061ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80061d0:	4b1a      	ldr	r3, [pc, #104]	; (800623c <USBD_LL_Init+0x94>)
 80061d2:	2204      	movs	r2, #4
 80061d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80061d6:	4b19      	ldr	r3, [pc, #100]	; (800623c <USBD_LL_Init+0x94>)
 80061d8:	2202      	movs	r2, #2
 80061da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80061dc:	4b17      	ldr	r3, [pc, #92]	; (800623c <USBD_LL_Init+0x94>)
 80061de:	2200      	movs	r2, #0
 80061e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80061e2:	4b16      	ldr	r3, [pc, #88]	; (800623c <USBD_LL_Init+0x94>)
 80061e4:	2202      	movs	r2, #2
 80061e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80061e8:	4b14      	ldr	r3, [pc, #80]	; (800623c <USBD_LL_Init+0x94>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80061ee:	4b13      	ldr	r3, [pc, #76]	; (800623c <USBD_LL_Init+0x94>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80061f4:	4b11      	ldr	r3, [pc, #68]	; (800623c <USBD_LL_Init+0x94>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80061fa:	4b10      	ldr	r3, [pc, #64]	; (800623c <USBD_LL_Init+0x94>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006200:	4b0e      	ldr	r3, [pc, #56]	; (800623c <USBD_LL_Init+0x94>)
 8006202:	2200      	movs	r2, #0
 8006204:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006206:	480d      	ldr	r0, [pc, #52]	; (800623c <USBD_LL_Init+0x94>)
 8006208:	f7fa fecb 	bl	8000fa2 <HAL_PCD_Init>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006212:	f7fa fa59 	bl	80006c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006216:	2180      	movs	r1, #128	; 0x80
 8006218:	4808      	ldr	r0, [pc, #32]	; (800623c <USBD_LL_Init+0x94>)
 800621a:	f7fc f810 	bl	800223e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800621e:	2240      	movs	r2, #64	; 0x40
 8006220:	2100      	movs	r1, #0
 8006222:	4806      	ldr	r0, [pc, #24]	; (800623c <USBD_LL_Init+0x94>)
 8006224:	f7fb ffc4 	bl	80021b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006228:	2280      	movs	r2, #128	; 0x80
 800622a:	2101      	movs	r1, #1
 800622c:	4803      	ldr	r0, [pc, #12]	; (800623c <USBD_LL_Init+0x94>)
 800622e:	f7fb ffbf 	bl	80021b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	200006b4 	.word	0x200006b4

08006240 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006256:	4618      	mov	r0, r3
 8006258:	f7fa ffc0 	bl	80011dc <HAL_PCD_Start>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f930 	bl	80064c8 <USBD_Get_USB_Status>
 8006268:	4603      	mov	r3, r0
 800626a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800626c:	7bbb      	ldrb	r3, [r7, #14]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	4608      	mov	r0, r1
 8006280:	4611      	mov	r1, r2
 8006282:	461a      	mov	r2, r3
 8006284:	4603      	mov	r3, r0
 8006286:	70fb      	strb	r3, [r7, #3]
 8006288:	460b      	mov	r3, r1
 800628a:	70bb      	strb	r3, [r7, #2]
 800628c:	4613      	mov	r3, r2
 800628e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800629e:	78bb      	ldrb	r3, [r7, #2]
 80062a0:	883a      	ldrh	r2, [r7, #0]
 80062a2:	78f9      	ldrb	r1, [r7, #3]
 80062a4:	f7fb fba4 	bl	80019f0 <HAL_PCD_EP_Open>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f90a 	bl	80064c8 <USBD_Get_USB_Status>
 80062b4:	4603      	mov	r3, r0
 80062b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062dc:	78fa      	ldrb	r2, [r7, #3]
 80062de:	4611      	mov	r1, r2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fb fbed 	bl	8001ac0 <HAL_PCD_EP_Close>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 f8eb 	bl	80064c8 <USBD_Get_USB_Status>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f7fb fcad 	bl	8001c7e <HAL_PCD_EP_SetStall>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 f8cc 	bl	80064c8 <USBD_Get_USB_Status>
 8006330:	4603      	mov	r3, r0
 8006332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006334:	7bbb      	ldrb	r3, [r7, #14]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006358:	78fa      	ldrb	r2, [r7, #3]
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f7fb fcf2 	bl	8001d46 <HAL_PCD_EP_ClrStall>
 8006362:	4603      	mov	r3, r0
 8006364:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	4618      	mov	r0, r3
 800636a:	f000 f8ad 	bl	80064c8 <USBD_Get_USB_Status>
 800636e:	4603      	mov	r3, r0
 8006370:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006372:	7bbb      	ldrb	r3, [r7, #14]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800638e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006394:	2b00      	cmp	r3, #0
 8006396:	da0b      	bge.n	80063b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	4613      	mov	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	333e      	adds	r3, #62	; 0x3e
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	e00b      	b.n	80063c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063b6:	68f9      	ldr	r1, [r7, #12]
 80063b8:	4613      	mov	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063ee:	78fa      	ldrb	r2, [r7, #3]
 80063f0:	4611      	mov	r1, r2
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fb fad7 	bl	80019a6 <HAL_PCD_SetAddress>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f862 	bl	80064c8 <USBD_Get_USB_Status>
 8006404:	4603      	mov	r3, r0
 8006406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006408:	7bbb      	ldrb	r3, [r7, #14]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b086      	sub	sp, #24
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
 800641e:	460b      	mov	r3, r1
 8006420:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006430:	7af9      	ldrb	r1, [r7, #11]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	f7fb fbd8 	bl	8001bea <HAL_PCD_EP_Transmit>
 800643a:	4603      	mov	r3, r0
 800643c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800643e:	7dfb      	ldrb	r3, [r7, #23]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 f841 	bl	80064c8 <USBD_Get_USB_Status>
 8006446:	4603      	mov	r3, r0
 8006448:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800644a:	7dbb      	ldrb	r3, [r7, #22]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	460b      	mov	r3, r1
 8006462:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006472:	7af9      	ldrb	r1, [r7, #11]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	f7fb fb6c 	bl	8001b54 <HAL_PCD_EP_Receive>
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006480:	7dfb      	ldrb	r3, [r7, #23]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f820 	bl	80064c8 <USBD_Get_USB_Status>
 8006488:	4603      	mov	r3, r0
 800648a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800648c:	7dbb      	ldrb	r3, [r7, #22]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80064a0:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <USBD_static_malloc+0x18>)
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	20000184 	.word	0x20000184

080064b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d817      	bhi.n	800650c <USBD_Get_USB_Status+0x44>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <USBD_Get_USB_Status+0x1c>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	080064fb 	.word	0x080064fb
 80064ec:	08006501 	.word	0x08006501
 80064f0:	08006507 	.word	0x08006507
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	73fb      	strb	r3, [r7, #15]
    break;
 80064f8:	e00b      	b.n	8006512 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80064fa:	2303      	movs	r3, #3
 80064fc:	73fb      	strb	r3, [r7, #15]
    break;
 80064fe:	e008      	b.n	8006512 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006500:	2301      	movs	r3, #1
 8006502:	73fb      	strb	r3, [r7, #15]
    break;
 8006504:	e005      	b.n	8006512 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006506:	2303      	movs	r3, #3
 8006508:	73fb      	strb	r3, [r7, #15]
    break;
 800650a:	e002      	b.n	8006512 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	73fb      	strb	r3, [r7, #15]
    break;
 8006510:	bf00      	nop
  }
  return usb_status;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <__libc_init_array>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	4d0d      	ldr	r5, [pc, #52]	; (8006558 <__libc_init_array+0x38>)
 8006524:	4c0d      	ldr	r4, [pc, #52]	; (800655c <__libc_init_array+0x3c>)
 8006526:	1b64      	subs	r4, r4, r5
 8006528:	10a4      	asrs	r4, r4, #2
 800652a:	2600      	movs	r6, #0
 800652c:	42a6      	cmp	r6, r4
 800652e:	d109      	bne.n	8006544 <__libc_init_array+0x24>
 8006530:	4d0b      	ldr	r5, [pc, #44]	; (8006560 <__libc_init_array+0x40>)
 8006532:	4c0c      	ldr	r4, [pc, #48]	; (8006564 <__libc_init_array+0x44>)
 8006534:	f000 f820 	bl	8006578 <_init>
 8006538:	1b64      	subs	r4, r4, r5
 800653a:	10a4      	asrs	r4, r4, #2
 800653c:	2600      	movs	r6, #0
 800653e:	42a6      	cmp	r6, r4
 8006540:	d105      	bne.n	800654e <__libc_init_array+0x2e>
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	f855 3b04 	ldr.w	r3, [r5], #4
 8006548:	4798      	blx	r3
 800654a:	3601      	adds	r6, #1
 800654c:	e7ee      	b.n	800652c <__libc_init_array+0xc>
 800654e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006552:	4798      	blx	r3
 8006554:	3601      	adds	r6, #1
 8006556:	e7f2      	b.n	800653e <__libc_init_array+0x1e>
 8006558:	080065f8 	.word	0x080065f8
 800655c:	080065f8 	.word	0x080065f8
 8006560:	080065f8 	.word	0x080065f8
 8006564:	080065fc 	.word	0x080065fc

08006568 <memset>:
 8006568:	4402      	add	r2, r0
 800656a:	4603      	mov	r3, r0
 800656c:	4293      	cmp	r3, r2
 800656e:	d100      	bne.n	8006572 <memset+0xa>
 8006570:	4770      	bx	lr
 8006572:	f803 1b01 	strb.w	r1, [r3], #1
 8006576:	e7f9      	b.n	800656c <memset+0x4>

08006578 <_init>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	bf00      	nop
 800657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657e:	bc08      	pop	{r3}
 8006580:	469e      	mov	lr, r3
 8006582:	4770      	bx	lr

08006584 <_fini>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	bf00      	nop
 8006588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658a:	bc08      	pop	{r3}
 800658c:	469e      	mov	lr, r3
 800658e:	4770      	bx	lr
