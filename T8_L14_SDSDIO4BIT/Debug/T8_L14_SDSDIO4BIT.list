
T8_L14_SDSDIO4BIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08008c20  08008c20  00018c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e7c  08008e7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008e7c  08008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e84  08008e84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e84  08008e84  00018e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bac  20000070  08008efc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c1c  08008efc  00020c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019912  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037db  00000000  00000000  000399b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0003d190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  0003e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047f2  00000000  00000000  0003f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001699e  00000000  00000000  000438ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fcc5  00000000  00000000  0005a268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9f2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000456c  00000000  00000000  000e9f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c08 	.word	0x08008c08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08008c08 	.word	0x08008c08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ILI9341_Delay>:

//
//  Basic function - write those for your MCU
//
static void ILI9341_Delay(uint32_t ms)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 ffe1 	bl	8001548 <HAL_Delay>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 800059a:	e014      	b.n	80005c6 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <ILI9341_SendToTFT+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d10c      	bne.n	80005c6 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <ILI9341_SendToTFT+0x5c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	330c      	adds	r3, #12
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7812      	ldrb	r2, [r2, #0]
 80005b8:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3301      	adds	r3, #1
 80005be:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1e7      	bne.n	800059c <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 80005cc:	bf00      	nop
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <ILI9341_SendToTFT+0x5c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	2b80      	cmp	r3, #128	; 0x80
 80005dc:	d0f7      	beq.n	80005ce <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	200000d4 	.word	0x200000d4

080005f0 <ILI9341_SendCommand>:

static void ILI9341_SendCommand(uint8_t Command)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <ILI9341_SendCommand+0x3c>)
 8000600:	f001 fdfa 	bl	80021f8 <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 8000604:	2200      	movs	r2, #0
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <ILI9341_SendCommand+0x40>)
 800060a:	f001 fdf5 	bl	80021f8 <HAL_GPIO_WritePin>

	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ffbc 	bl	8000590 <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <ILI9341_SendCommand+0x3c>)
 800061e:	f001 fdeb 	bl	80021f8 <HAL_GPIO_WritePin>
#endif
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020400 	.word	0x40020400
 8000630:	40020800 	.word	0x40020800

08000634 <ILI9341_SendCommandAndData>:

static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	73fb      	strb	r3, [r7, #15]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8000642:	2200      	movs	r2, #0
 8000644:	2140      	movs	r1, #64	; 0x40
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <ILI9341_SendCommandAndData+0x54>)
 8000648:	f001 fdd6 	bl	80021f8 <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 800064c:	2200      	movs	r2, #0
 800064e:	2180      	movs	r1, #128	; 0x80
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <ILI9341_SendCommandAndData+0x58>)
 8000652:	f001 fdd1 	bl	80021f8 <HAL_GPIO_WritePin>
	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 8000656:	f107 030f 	add.w	r3, r7, #15
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff97 	bl	8000590 <ILI9341_SendToTFT>

	// DC to Data - DC to High
	ILI9341_DC_HIGH;
 8000662:	2201      	movs	r2, #1
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <ILI9341_SendCommandAndData+0x58>)
 8000668:	f001 fdc6 	bl	80021f8 <HAL_GPIO_WritePin>
	// Send to TFT Length byte
	ILI9341_SendToTFT(Data, Length);
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	68b8      	ldr	r0, [r7, #8]
 8000670:	f7ff ff8e 	bl	8000590 <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000674:	2201      	movs	r2, #1
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <ILI9341_SendCommandAndData+0x54>)
 800067a:	f001 fdbd 	bl	80021f8 <HAL_GPIO_WritePin>
#endif
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40020400 	.word	0x40020400
 800068c:	40020800 	.word	0x40020800

08000690 <ILI9341_SetRotation>:

//
// TFT Functions
//
void ILI9341_SetRotation(uint8_t Rotation)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d820      	bhi.n	80006e2 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d816      	bhi.n	80006d4 <ILI9341_SetRotation+0x44>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <ILI9341_SetRotation+0x1c>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006bd 	.word	0x080006bd
 80006b0:	080006c3 	.word	0x080006c3
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006cf 	.word	0x080006cf
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 80006bc:	2348      	movs	r3, #72	; 0x48
 80006be:	71fb      	strb	r3, [r7, #7]
		break;
 80006c0:	e008      	b.n	80006d4 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 80006c2:	2328      	movs	r3, #40	; 0x28
 80006c4:	71fb      	strb	r3, [r7, #7]
		break;
 80006c6:	e005      	b.n	80006d4 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 80006c8:	2388      	movs	r3, #136	; 0x88
 80006ca:	71fb      	strb	r3, [r7, #7]
		break;
 80006cc:	e002      	b.n	80006d4 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80006ce:	23e8      	movs	r3, #232	; 0xe8
 80006d0:	71fb      	strb	r3, [r7, #7]
		break;
 80006d2:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	2036      	movs	r0, #54	; 0x36
 80006dc:	f7ff ffaa 	bl	8000634 <ILI9341_SendCommandAndData>
 80006e0:	e000      	b.n	80006e4 <ILI9341_SetRotation+0x54>
		return;
 80006e2:	bf00      	nop
}
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop

080006ec <ILI9341_SetAddrWindow>:

void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4604      	mov	r4, r0
 80006f4:	4608      	mov	r0, r1
 80006f6:	4611      	mov	r1, r2
 80006f8:	461a      	mov	r2, r3
 80006fa:	4623      	mov	r3, r4
 80006fc:	80fb      	strh	r3, [r7, #6]
 80006fe:	4603      	mov	r3, r0
 8000700:	80bb      	strh	r3, [r7, #4]
 8000702:	460b      	mov	r3, r1
 8000704:	807b      	strh	r3, [r7, #2]
 8000706:	4613      	mov	r3, r2
 8000708:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 800070a:	88fa      	ldrh	r2, [r7, #6]
 800070c:	887b      	ldrh	r3, [r7, #2]
 800070e:	4413      	add	r3, r2
 8000710:	b29b      	uxth	r3, r3
 8000712:	3b01      	subs	r3, #1
 8000714:	81fb      	strh	r3, [r7, #14]
 8000716:	88ba      	ldrh	r2, [r7, #4]
 8000718:	883b      	ldrh	r3, [r7, #0]
 800071a:	4413      	add	r3, r2
 800071c:	b29b      	uxth	r3, r3
 800071e:	3b01      	subs	r3, #1
 8000720:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	b29b      	uxth	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8000732:	89fb      	ldrh	r3, [r7, #14]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	b29b      	uxth	r3, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 800073c:	89fb      	ldrh	r3, [r7, #14]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2204      	movs	r2, #4
 8000748:	4619      	mov	r1, r3
 800074a:	202a      	movs	r0, #42	; 0x2a
 800074c:	f7ff ff72 	bl	8000634 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8000750:	88bb      	ldrh	r3, [r7, #4]
 8000752:	0a1b      	lsrs	r3, r3, #8
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 800075a:	88bb      	ldrh	r3, [r7, #4]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8000760:	89bb      	ldrh	r3, [r7, #12]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29b      	uxth	r3, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 800076a:	89bb      	ldrh	r3, [r7, #12]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2204      	movs	r2, #4
 8000776:	4619      	mov	r1, r3
 8000778:	202b      	movs	r0, #43	; 0x2b
 800077a:	f7ff ff5b 	bl	8000634 <ILI9341_SendCommandAndData>
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bd90      	pop	{r4, r7, pc}
	...

08000788 <ILI9341_ClearDisplay>:
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
	}
}

void ILI9341_ClearDisplay(uint16_t Color)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8000792:	23f0      	movs	r3, #240	; 0xf0
 8000794:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000798:	2100      	movs	r1, #0
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ffa6 	bl	80006ec <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendCommand(ILI9341_RAMWR);
 80007a0:	202c      	movs	r0, #44	; 0x2c
 80007a2:	f7ff ff25 	bl	80005f0 <ILI9341_SendCommand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 80007a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80007aa:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 80007ac:	2200      	movs	r2, #0
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	4820      	ldr	r0, [pc, #128]	; (8000834 <ILI9341_ClearDisplay+0xac>)
 80007b2:	f001 fd21 	bl	80021f8 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 80007b6:	2201      	movs	r2, #1
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	481f      	ldr	r0, [pc, #124]	; (8000838 <ILI9341_ClearDisplay+0xb0>)
 80007bc:	f001 fd1c 	bl	80021f8 <HAL_GPIO_WritePin>

    while (Length > 0U)
 80007c0:	e023      	b.n	800080a <ILI9341_ClearDisplay+0x82>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <ILI9341_ClearDisplay+0xb4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d11b      	bne.n	800080a <ILI9341_ClearDisplay+0x82>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <ILI9341_ClearDisplay+0xb4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	330c      	adds	r3, #12
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 80007e4:	bf00      	nop
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <ILI9341_ClearDisplay+0xb4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d1f7      	bne.n	80007e6 <ILI9341_ClearDisplay+0x5e>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <ILI9341_ClearDisplay+0xb4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	330c      	adds	r3, #12
 80007fe:	88fa      	ldrh	r2, [r7, #6]
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3b01      	subs	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1d8      	bne.n	80007c2 <ILI9341_ClearDisplay+0x3a>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8000810:	bf00      	nop
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <ILI9341_ClearDisplay+0xb4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	2b80      	cmp	r3, #128	; 0x80
 8000820:	d0f7      	beq.n	8000812 <ILI9341_ClearDisplay+0x8a>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000822:	2201      	movs	r2, #1
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <ILI9341_ClearDisplay+0xac>)
 8000828:	f001 fce6 	bl	80021f8 <HAL_GPIO_WritePin>
	{
		// Send Color bytes
		ILI9341_SendData16(Color);
	}
#endif
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40020400 	.word	0x40020400
 8000838:	40020800 	.word	0x40020800
 800083c:	200000d4 	.word	0x200000d4

08000840 <ILI9341_Init>:
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};

void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8000848:	4a25      	ldr	r2, [pc, #148]	; (80008e0 <ILI9341_Init+0xa0>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]

    uint8_t cmd, x, numArgs;
    const uint8_t *addr = initcmd;
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <ILI9341_Init+0xa4>)
 8000850:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
    __HAL_SPI_ENABLE(Tft_hspi);
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <ILI9341_Init+0xa0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <ILI9341_Init+0xa0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000864:	601a      	str	r2, [r3, #0]
#endif

#if (ILI9341_USE_HW_RESET == 1)
	ILI9341_RST_LOW;
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086c:	481e      	ldr	r0, [pc, #120]	; (80008e8 <ILI9341_Init+0xa8>)
 800086e:	f001 fcc3 	bl	80021f8 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8000872:	200a      	movs	r0, #10
 8000874:	f7ff fe80 	bl	8000578 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087e:	481a      	ldr	r0, [pc, #104]	; (80008e8 <ILI9341_Init+0xa8>)
 8000880:	f001 fcba 	bl	80021f8 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8000884:	200a      	movs	r0, #10
 8000886:	f7ff fe77 	bl	8000578 <ILI9341_Delay>
#else
	ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
    ILI9341_Delay(150);
#endif

    while ((cmd = *(addr++)) > 0)
 800088a:	e019      	b.n	80008c0 <ILI9341_Init+0x80>
    {
      x = *(addr++);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	60fa      	str	r2, [r7, #12]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	72bb      	strb	r3, [r7, #10]
      numArgs = x & 0x7F;
 8000896:	7abb      	ldrb	r3, [r7, #10]
 8000898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800089c:	727b      	strb	r3, [r7, #9]
      // Push Init data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 800089e:	7a7a      	ldrb	r2, [r7, #9]
 80008a0:	7afb      	ldrb	r3, [r7, #11]
 80008a2:	68f9      	ldr	r1, [r7, #12]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fec5 	bl	8000634 <ILI9341_SendCommandAndData>

      addr += numArgs;
 80008aa:	7a7b      	ldrb	r3, [r7, #9]
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]

      if (x & 0x80)
 80008b2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da02      	bge.n	80008c0 <ILI9341_Init+0x80>
      {
    	  ILI9341_Delay(150);
 80008ba:	2096      	movs	r0, #150	; 0x96
 80008bc:	f7ff fe5c 	bl	8000578 <ILI9341_Delay>
    while ((cmd = *(addr++)) > 0)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	60fa      	str	r2, [r7, #12]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	72fb      	strb	r3, [r7, #11]
 80008ca:	7afb      	ldrb	r3, [r7, #11]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1dd      	bne.n	800088c <ILI9341_Init+0x4c>
      }
    }

    // Set selected Rotation
    ILI9341_SetRotation(ILI9341_ROTATION);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f7ff fedd 	bl	8000690 <ILI9341_SetRotation>
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000d4 	.word	0x200000d4
 80008e4:	08008d24 	.word	0x08008d24
 80008e8:	40020000 	.word	0x40020000

080008ec <ILI9341_DrawImageFromSD>:

#if(ILI9341_USE_SD_CARD)
//binary files
uint8_t ILI9341_DrawImageFromSD(uint16_t x, uint16_t y, const TCHAR* path, uint16_t w, uint16_t h)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4604      	mov	r4, r0
 80008f6:	4608      	mov	r0, r1
 80008f8:	f107 0108 	add.w	r1, r7, #8
 80008fc:	600a      	str	r2, [r1, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	f107 030e 	add.w	r3, r7, #14
 8000904:	4622      	mov	r2, r4
 8000906:	801a      	strh	r2, [r3, #0]
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4602      	mov	r2, r0
 800090e:	801a      	strh	r2, [r3, #0]
 8000910:	1dbb      	adds	r3, r7, #6
 8000912:	460a      	mov	r2, r1
 8000914:	801a      	strh	r2, [r3, #0]
	FIL ImageFile;

	uint8_t Data[SD_BUFFER_SIZE];
	UINT Length;

	ImageFsResult = f_open(&ImageFile, path, FA_READ);
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800091e:	2201      	movs	r2, #1
 8000920:	6819      	ldr	r1, [r3, #0]
 8000922:	f006 fd03 	bl	800732c <f_open>
 8000926:	4603      	mov	r3, r0
 8000928:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347

	if(ImageFsResult != FR_OK)
 800092c:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <ILI9341_DrawImageFromSD+0x4c>
	{
		return 1;
 8000934:	2301      	movs	r3, #1
 8000936:	e043      	b.n	80009c0 <ILI9341_DrawImageFromSD+0xd4>
	}
	else
	{
		ILI9341_SetAddrWindow(x, y, w, h);
 8000938:	f8b7 4358 	ldrh.w	r4, [r7, #856]	; 0x358
 800093c:	1dbb      	adds	r3, r7, #6
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	8819      	ldrh	r1, [r3, #0]
 8000946:	f107 030e 	add.w	r3, r7, #14
 800094a:	8818      	ldrh	r0, [r3, #0]
 800094c:	4623      	mov	r3, r4
 800094e:	f7ff fecd 	bl	80006ec <ILI9341_SetAddrWindow>
		ILI9341_SendCommand(ILI9341_RAMWR);
 8000952:	202c      	movs	r0, #44	; 0x2c
 8000954:	f7ff fe4c 	bl	80005f0 <ILI9341_SendCommand>

		do
		{
			Length = 0;
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
			f_read(&ImageFile, Data, SD_BUFFER_SIZE, &Length);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	f107 0114 	add.w	r1, r7, #20
 8000968:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800096c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000970:	f006 fe9a 	bl	80076a8 <f_read>
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8000974:	2200      	movs	r2, #0
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	4814      	ldr	r0, [pc, #80]	; (80009cc <ILI9341_DrawImageFromSD+0xe0>)
 800097a:	f001 fc3d 	bl	80021f8 <HAL_GPIO_WritePin>
#endif

			ILI9341_DC_HIGH;
 800097e:	2201      	movs	r2, #1
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <ILI9341_DrawImageFromSD+0xe4>)
 8000984:	f001 fc38 	bl	80021f8 <HAL_GPIO_WritePin>
			ILI9341_SendToTFT(Data, Length);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fdfb 	bl	8000590 <ILI9341_SendToTFT>

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800099a:	2201      	movs	r2, #1
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <ILI9341_DrawImageFromSD+0xe0>)
 80009a0:	f001 fc2a 	bl	80021f8 <HAL_GPIO_WritePin>
#endif
		}while(Length > 0);
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1d4      	bne.n	8000958 <ILI9341_DrawImageFromSD+0x6c>

		ImageFsResult = f_close(&ImageFile);
 80009ae:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80009b2:	4618      	mov	r0, r3
 80009b4:	f007 f9aa 	bl	8007d0c <f_close>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		return 0;
 80009be:	2300      	movs	r3, #0
	}
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd90      	pop	{r4, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40020800 	.word	0x40020800

080009d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_DMA_Init+0x4c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <MX_DMA_Init+0x4c>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_DMA_Init+0x4c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	203b      	movs	r0, #59	; 0x3b
 80009fc:	f000 fea3 	bl	8001746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a00:	203b      	movs	r0, #59	; 0x3b
 8000a02:	f000 febc 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2045      	movs	r0, #69	; 0x45
 8000a0c:	f000 fe9b 	bl	8001746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a10:	2045      	movs	r0, #69	; 0x45
 8000a12:	f000 feb4 	bl	800177e <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b48      	ldr	r3, [pc, #288]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b45      	ldr	r3, [pc, #276]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b41      	ldr	r3, [pc, #260]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a40      	ldr	r2, [pc, #256]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b3e      	ldr	r3, [pc, #248]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a39      	ldr	r2, [pc, #228]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b33      	ldr	r3, [pc, #204]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a32      	ldr	r2, [pc, #200]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_GPIO_Init+0x13c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD2_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2181      	movs	r1, #129	; 0x81
 8000aca:	4826      	ldr	r0, [pc, #152]	; (8000b64 <MX_GPIO_Init+0x140>)
 8000acc:	f001 fb94 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad6:	4824      	ldr	r0, [pc, #144]	; (8000b68 <MX_GPIO_Init+0x144>)
 8000ad8:	f001 fb8e 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	4822      	ldr	r0, [pc, #136]	; (8000b6c <MX_GPIO_Init+0x148>)
 8000ae2:	f001 fb89 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4819      	ldr	r0, [pc, #100]	; (8000b64 <MX_GPIO_Init+0x140>)
 8000afe:	f001 f9f7 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD2_Pin|TFT_DC_Pin;
 8000b02:	2381      	movs	r3, #129	; 0x81
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4812      	ldr	r0, [pc, #72]	; (8000b64 <MX_GPIO_Init+0x140>)
 8000b1a:	f001 f9e9 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8000b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_GPIO_Init+0x144>)
 8000b38:	f001 f9da 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_GPIO_Init+0x148>)
 8000b54:	f001 f9cc 	bl	8001ef0 <HAL_GPIO_Init>

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fc75 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f8ff 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f7ff ff51 	bl	8000a24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b82:	f000 fbd3 	bl	800132c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000b86:	f004 fc07 	bl	8005398 <MX_FATFS_Init>
  MX_DMA_Init();
 8000b8a:	f7ff ff23 	bl	80009d4 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000b8e:	f000 f963 	bl	8000e58 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000b92:	f000 fa95 	bl	80010c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init(&hspi1);
 8000b96:	4868      	ldr	r0, [pc, #416]	; (8000d38 <main+0x1c8>)
 8000b98:	f7ff fe52 	bl	8000840 <ILI9341_Init>
  ILI9341_ClearDisplay(ILI9341_CYAN);
 8000b9c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000ba0:	f7ff fdf2 	bl	8000788 <ILI9341_ClearDisplay>

  FatFsResult = f_mount(&SdFatFs, "",1);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4965      	ldr	r1, [pc, #404]	; (8000d3c <main+0x1cc>)
 8000ba8:	4865      	ldr	r0, [pc, #404]	; (8000d40 <main+0x1d0>)
 8000baa:	f006 fb79 	bl	80072a0 <f_mount>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b64      	ldr	r3, [pc, #400]	; (8000d44 <main+0x1d4>)
 8000bb4:	701a      	strb	r2, [r3, #0]
  if(FatFsResult != FR_OK)
 8000bb6:	4b63      	ldr	r3, [pc, #396]	; (8000d44 <main+0x1d4>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d011      	beq.n	8000be2 <main+0x72>
  {
	  bytes = sprintf(data, "FatFS mount error.\n\r");
 8000bbe:	4962      	ldr	r1, [pc, #392]	; (8000d48 <main+0x1d8>)
 8000bc0:	4862      	ldr	r0, [pc, #392]	; (8000d4c <main+0x1dc>)
 8000bc2:	f007 fbf3 	bl	80083ac <siprintf>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b61      	ldr	r3, [pc, #388]	; (8000d50 <main+0x1e0>)
 8000bcc:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8000bce:	4b60      	ldr	r3, [pc, #384]	; (8000d50 <main+0x1e0>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd8:	495c      	ldr	r1, [pc, #368]	; (8000d4c <main+0x1dc>)
 8000bda:	485e      	ldr	r0, [pc, #376]	; (8000d54 <main+0x1e4>)
 8000bdc:	f003 fb9f 	bl	800431e <HAL_UART_Transmit>
 8000be0:	e0a0      	b.n	8000d24 <main+0x1b4>
  }
  else
  {
	  bytes = sprintf(data, "FatFS mounted.\n\r");
 8000be2:	495d      	ldr	r1, [pc, #372]	; (8000d58 <main+0x1e8>)
 8000be4:	4859      	ldr	r0, [pc, #356]	; (8000d4c <main+0x1dc>)
 8000be6:	f007 fbe1 	bl	80083ac <siprintf>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b58      	ldr	r3, [pc, #352]	; (8000d50 <main+0x1e0>)
 8000bf0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8000bf2:	4b57      	ldr	r3, [pc, #348]	; (8000d50 <main+0x1e0>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	4953      	ldr	r1, [pc, #332]	; (8000d4c <main+0x1dc>)
 8000bfe:	4855      	ldr	r0, [pc, #340]	; (8000d54 <main+0x1e4>)
 8000c00:	f003 fb8d 	bl	800431e <HAL_UART_Transmit>
	  //
	  // Open file on SD for writing
	  //
	  FatFsResult = f_open(&SdCardFile, "test.txt", FA_WRITE|FA_CREATE_ALWAYS);
 8000c04:	220a      	movs	r2, #10
 8000c06:	4955      	ldr	r1, [pc, #340]	; (8000d5c <main+0x1ec>)
 8000c08:	4855      	ldr	r0, [pc, #340]	; (8000d60 <main+0x1f0>)
 8000c0a:	f006 fb8f 	bl	800732c <f_open>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b4c      	ldr	r3, [pc, #304]	; (8000d44 <main+0x1d4>)
 8000c14:	701a      	strb	r2, [r3, #0]
	  //
	  // File open error check
	  //
	  if(FatFsResult != FR_OK)
 8000c16:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <main+0x1d4>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d011      	beq.n	8000c42 <main+0xd2>
	  {
		  bytes = sprintf(data, "No test.txt file. Can't create.\n\r");
 8000c1e:	4951      	ldr	r1, [pc, #324]	; (8000d64 <main+0x1f4>)
 8000c20:	484a      	ldr	r0, [pc, #296]	; (8000d4c <main+0x1dc>)
 8000c22:	f007 fbc3 	bl	80083ac <siprintf>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <main+0x1e0>)
 8000c2c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8000c2e:	4b48      	ldr	r3, [pc, #288]	; (8000d50 <main+0x1e0>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c38:	4944      	ldr	r1, [pc, #272]	; (8000d4c <main+0x1dc>)
 8000c3a:	4846      	ldr	r0, [pc, #280]	; (8000d54 <main+0x1e4>)
 8000c3c:	f003 fb6f 	bl	800431e <HAL_UART_Transmit>
 8000c40:	e070      	b.n	8000d24 <main+0x1b4>
	  }
	  else
	  {
		  bytes = sprintf(data, "File opened.\n\r");
 8000c42:	4949      	ldr	r1, [pc, #292]	; (8000d68 <main+0x1f8>)
 8000c44:	4841      	ldr	r0, [pc, #260]	; (8000d4c <main+0x1dc>)
 8000c46:	f007 fbb1 	bl	80083ac <siprintf>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <main+0x1e0>)
 8000c50:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8000c52:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <main+0x1e0>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5c:	493b      	ldr	r1, [pc, #236]	; (8000d4c <main+0x1dc>)
 8000c5e:	483d      	ldr	r0, [pc, #244]	; (8000d54 <main+0x1e4>)
 8000c60:	f003 fb5d 	bl	800431e <HAL_UART_Transmit>
		  //
		  //	Print something to this file
		  //
		  for(uint8_t i = 0; i < 10; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	e008      	b.n	8000c7c <main+0x10c>
		  {
			  f_printf(&SdCardFile, "Line number %d.\n", i);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	493f      	ldr	r1, [pc, #252]	; (8000d6c <main+0x1fc>)
 8000c70:	483b      	ldr	r0, [pc, #236]	; (8000d60 <main+0x1f0>)
 8000c72:	f007 f8ed 	bl	8007e50 <f_printf>
		  for(uint8_t i = 0; i < 10; i++)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	d9f3      	bls.n	8000c6a <main+0xfa>
		  }

		  //
		  // Close file
		  //
		  FatFsResult = f_close(&SdCardFile);
 8000c82:	4837      	ldr	r0, [pc, #220]	; (8000d60 <main+0x1f0>)
 8000c84:	f007 f842 	bl	8007d0c <f_close>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <main+0x1d4>)
 8000c8e:	701a      	strb	r2, [r3, #0]

		  bytes = sprintf(data, "File closed.\n\r");
 8000c90:	4937      	ldr	r1, [pc, #220]	; (8000d70 <main+0x200>)
 8000c92:	482e      	ldr	r0, [pc, #184]	; (8000d4c <main+0x1dc>)
 8000c94:	f007 fb8a 	bl	80083ac <siprintf>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <main+0x1e0>)
 8000c9e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <main+0x1e0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	4928      	ldr	r1, [pc, #160]	; (8000d4c <main+0x1dc>)
 8000cac:	4829      	ldr	r0, [pc, #164]	; (8000d54 <main+0x1e4>)
 8000cae:	f003 fb36 	bl	800431e <HAL_UART_Transmit>

		  FatFsResult = f_open(&SdCardFile, "test.txt", FA_READ);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4929      	ldr	r1, [pc, #164]	; (8000d5c <main+0x1ec>)
 8000cb6:	482a      	ldr	r0, [pc, #168]	; (8000d60 <main+0x1f0>)
 8000cb8:	f006 fb38 	bl	800732c <f_open>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <main+0x1d4>)
 8000cc2:	701a      	strb	r2, [r3, #0]
		  if(FatFsResult != FR_OK)
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <main+0x1d4>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d011      	beq.n	8000cf0 <main+0x180>
		  {
			  bytes = sprintf(data, "No test.txt file. Can't open \n\r");
 8000ccc:	4929      	ldr	r1, [pc, #164]	; (8000d74 <main+0x204>)
 8000cce:	481f      	ldr	r0, [pc, #124]	; (8000d4c <main+0x1dc>)
 8000cd0:	f007 fb6c 	bl	80083ac <siprintf>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <main+0x1e0>)
 8000cda:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <main+0x1e0>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	4919      	ldr	r1, [pc, #100]	; (8000d4c <main+0x1dc>)
 8000ce8:	481a      	ldr	r0, [pc, #104]	; (8000d54 <main+0x1e4>)
 8000cea:	f003 fb18 	bl	800431e <HAL_UART_Transmit>
 8000cee:	e019      	b.n	8000d24 <main+0x1b4>
		  else
		  {
			  UINT len;
			  do
			  {
				  len = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	603b      	str	r3, [r7, #0]
				  f_read(&SdCardFile, data, 10, &len);
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	220a      	movs	r2, #10
 8000cf8:	4914      	ldr	r1, [pc, #80]	; (8000d4c <main+0x1dc>)
 8000cfa:	4819      	ldr	r0, [pc, #100]	; (8000d60 <main+0x1f0>)
 8000cfc:	f006 fcd4 	bl	80076a8 <f_read>
				  HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d08:	4910      	ldr	r1, [pc, #64]	; (8000d4c <main+0x1dc>)
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <main+0x1e4>)
 8000d0c:	f003 fb07 	bl	800431e <HAL_UART_Transmit>
			  }while(len >0);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1ec      	bne.n	8000cf0 <main+0x180>
			  FatFsResult = f_close(&SdCardFile);
 8000d16:	4812      	ldr	r0, [pc, #72]	; (8000d60 <main+0x1f0>)
 8000d18:	f006 fff8 	bl	8007d0c <f_close>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <main+0x1d4>)
 8000d22:	701a      	strb	r2, [r3, #0]
		  }
	  }
  }

  ILI9341_DrawImageFromSD(28, 70, "logo.bin", 265, 100);
 8000d24:	2364      	movs	r3, #100	; 0x64
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	f240 1309 	movw	r3, #265	; 0x109
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <main+0x208>)
 8000d2e:	2146      	movs	r1, #70	; 0x46
 8000d30:	201c      	movs	r0, #28
 8000d32:	f7ff fddb 	bl	80008ec <ILI9341_DrawImageFromSD>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <main+0x1c6>
 8000d38:	20000704 	.word	0x20000704
 8000d3c:	08008c20 	.word	0x08008c20
 8000d40:	2000030c 	.word	0x2000030c
 8000d44:	200005bc 	.word	0x200005bc
 8000d48:	08008c24 	.word	0x08008c24
 8000d4c:	2000053c 	.word	0x2000053c
 8000d50:	20000308 	.word	0x20000308
 8000d54:	2000075c 	.word	0x2000075c
 8000d58:	08008c3c 	.word	0x08008c3c
 8000d5c:	08008c50 	.word	0x08008c50
 8000d60:	200000d8 	.word	0x200000d8
 8000d64:	08008c5c 	.word	0x08008c5c
 8000d68:	08008c80 	.word	0x08008c80
 8000d6c:	08008c90 	.word	0x08008c90
 8000d70:	08008ca4 	.word	0x08008ca4
 8000d74:	08008cb4 	.word	0x08008cb4
 8000d78:	08008cd4 	.word	0x08008cd4

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2230      	movs	r2, #48	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f007 fb06 	bl	800839c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <SystemClock_Config+0xc8>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <SystemClock_Config+0xc8>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <SystemClock_Config+0xc8>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <SystemClock_Config+0xcc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a20      	ldr	r2, [pc, #128]	; (8000e48 <SystemClock_Config+0xcc>)
 8000dc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <SystemClock_Config+0xcc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de0:	2310      	movs	r3, #16
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de4:	2302      	movs	r3, #2
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de8:	2300      	movs	r3, #0
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dec:	2308      	movs	r3, #8
 8000dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000df0:	2348      	movs	r3, #72	; 0x48
 8000df2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fa13 	bl	800222c <HAL_RCC_OscConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e0c:	f000 f81e 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e10:	230f      	movs	r3, #15
 8000e12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e14:	2302      	movs	r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fc75 	bl	800271c <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e38:	f000 f808 	bl	8000e4c <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3750      	adds	r7, #80	; 0x50
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_SDIO_SD_Init+0x3c>)
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <MX_SDIO_SD_Init+0x40>)
 8000e60:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SDIO_SD_Init+0x3c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_SDIO_SD_Init+0x3c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_ENABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SDIO_SD_Init+0x3c>)
 8000e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e74:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_SDIO_SD_Init+0x3c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <MX_SDIO_SD_Init+0x3c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <MX_SDIO_SD_Init+0x3c>)
 8000e84:	220a      	movs	r2, #10
 8000e86:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000680 	.word	0x20000680
 8000e98:	40012c00 	.word	0x40012c00

08000e9c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a78      	ldr	r2, [pc, #480]	; (800109c <HAL_SD_MspInit+0x200>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	f040 80ea 	bne.w	8001094 <HAL_SD_MspInit+0x1f8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec8:	4a75      	ldr	r2, [pc, #468]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000eca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ece:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed0:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	4b6f      	ldr	r3, [pc, #444]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	4a6e      	ldr	r2, [pc, #440]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	6313      	str	r3, [r2, #48]	; 0x30
 8000eec:	4b6c      	ldr	r3, [pc, #432]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	4b68      	ldr	r3, [pc, #416]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	4a67      	ldr	r2, [pc, #412]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6313      	str	r3, [r2, #48]	; 0x30
 8000f08:	4b65      	ldr	r3, [pc, #404]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4b61      	ldr	r3, [pc, #388]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a60      	ldr	r2, [pc, #384]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000f1e:	f043 0308 	orr.w	r3, r3, #8
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b5e      	ldr	r3, [pc, #376]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f42:	230c      	movs	r3, #12
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4855      	ldr	r0, [pc, #340]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000f4e:	f000 ffcf 	bl	8001ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f52:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f64:	230c      	movs	r3, #12
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	484e      	ldr	r0, [pc, #312]	; (80010a8 <HAL_SD_MspInit+0x20c>)
 8000f70:	f000 ffbe 	bl	8001ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f74:	2304      	movs	r3, #4
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f84:	230c      	movs	r3, #12
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4847      	ldr	r0, [pc, #284]	; (80010ac <HAL_SD_MspInit+0x210>)
 8000f90:	f000 ffae 	bl	8001ef0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000f94:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000f96:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <HAL_SD_MspInit+0x218>)
 8000f98:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000f9a:	4b45      	ldr	r3, [pc, #276]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000f9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fa0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa2:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa8:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000fb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fbc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fbe:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000fc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000fc8:	2220      	movs	r2, #32
 8000fca:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fcc:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000fce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fd2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fda:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000fdc:	2203      	movs	r2, #3
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000fe2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000fea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ff0:	482f      	ldr	r0, [pc, #188]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8000ff2:	f000 fbdf 	bl	80017b4 <HAL_DMA_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_SD_MspInit+0x164>
    {
      Error_Handler();
 8000ffc:	f7ff ff26 	bl	8000e4c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a2b      	ldr	r2, [pc, #172]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8001004:	641a      	str	r2, [r3, #64]	; 0x40
 8001006:	4a2a      	ldr	r2, [pc, #168]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800100c:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 800100e:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <HAL_SD_MspInit+0x220>)
 8001010:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 8001014:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001018:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 800101c:	2240      	movs	r2, #64	; 0x40
 800101e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 8001028:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 8001030:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001034:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 8001038:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800103c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 8001040:	2220      	movs	r2, #32
 8001042:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 8001046:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800104a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 800104e:	2204      	movs	r2, #4
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 8001054:	2203      	movs	r2, #3
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 800105a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 8001062:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 800106a:	f000 fba3 	bl	80017b4 <HAL_DMA_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_SD_MspInit+0x1dc>
    {
      Error_Handler();
 8001074:	f7ff feea 	bl	8000e4c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 800107c:	63da      	str	r2, [r3, #60]	; 0x3c
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_SD_MspInit+0x21c>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2031      	movs	r0, #49	; 0x31
 800108a:	f000 fb5c 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800108e:	2031      	movs	r0, #49	; 0x31
 8001090:	f000 fb75 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001094:	bf00      	nop
 8001096:	3730      	adds	r7, #48	; 0x30
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40012c00 	.word	0x40012c00
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	200005c0 	.word	0x200005c0
 80010b4:	40026458 	.word	0x40026458
 80010b8:	20000620 	.word	0x20000620
 80010bc:	400264a0 	.word	0x400264a0

080010c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_SPI1_Init+0x64>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_SPI1_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_SPI1_Init+0x64>)
 80010cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_SPI1_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_SPI1_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_SPI1_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_SPI1_Init+0x64>)
 80010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_SPI1_Init+0x64>)
 80010f4:	2210      	movs	r2, #16
 80010f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_SPI1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_SPI1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_SPI1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_SPI1_Init+0x64>)
 800110c:	220a      	movs	r2, #10
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_SPI1_Init+0x64>)
 8001112:	f003 f82e 	bl	8004172 <HAL_SPI_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800111c:	f7ff fe96 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000704 	.word	0x20000704
 8001128:	40013000 	.word	0x40013000

0800112c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <HAL_SPI_MspInit+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12b      	bne.n	80011a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 8001158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001186:	23e0      	movs	r3, #224	; 0xe0
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001196:	2305      	movs	r3, #5
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_SPI_MspInit+0x8c>)
 80011a2:	f000 fea5 	bl	8001ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40013000 	.word	0x40013000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011fa:	2007      	movs	r0, #7
 80011fc:	f000 fa98 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f956 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <SDIO_IRQHandler+0x10>)
 8001266:	f001 fecb 	bl	8003000 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000680 	.word	0x20000680

08001274 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <DMA2_Stream3_IRQHandler+0x10>)
 800127a:	f000 fbc3 	bl	8001a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200005c0 	.word	0x200005c0

08001288 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <DMA2_Stream6_IRQHandler+0x10>)
 800128e:	f000 fbb9 	bl	8001a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000620 	.word	0x20000620

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f007 f83c 	bl	8008348 <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20020000 	.word	0x20020000
 80012fc:	00000400 	.word	0x00000400
 8001300:	2000008c 	.word	0x2000008c
 8001304:	20000c20 	.word	0x20000c20

08001308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_USART2_UART_Init+0x50>)
 8001334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001364:	f002 ff8e 	bl	8004284 <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800136e:	f7ff fd6d 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000075c 	.word	0x2000075c
 800137c:	40004400 	.word	0x40004400

08001380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_UART_MspInit+0x84>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12b      	bne.n	80013fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013da:	230c      	movs	r3, #12
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ea:	2307      	movs	r3, #7
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0x8c>)
 80013f6:	f000 fd7b 	bl	8001ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004400 	.word	0x40004400
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800142c:	4c0b      	ldr	r4, [pc, #44]	; (800145c <LoopFillZerobss+0x26>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800143a:	f7ff ff65 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f006 ff89 	bl	8008354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff fb95 	bl	8000b70 <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001454:	08008e8c 	.word	0x08008e8c
  ldr r2, =_sbss
 8001458:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800145c:	20000c1c 	.word	0x20000c1c

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f94f 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fe90 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f967 	bl	800179a <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 f92f 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000008 	.word	0x20000008
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008
 800152c:	200007a0 	.word	0x200007a0

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200007a0 	.word	0x200007a0

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <__NVIC_EnableIRQ+0x38>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff29 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff3e 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff8e 	bl	8001684 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff31 	bl	80015f4 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff feb6 	bl	8001530 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e099      	b.n	8001904 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f0:	e00f      	b.n	8001812 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f2:	f7ff fe9d 	bl	8001530 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d908      	bls.n	8001812 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2220      	movs	r2, #32
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2203      	movs	r2, #3
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e078      	b.n	8001904 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e8      	bne.n	80017f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4b38      	ldr	r3, [pc, #224]	; (800190c <HAL_DMA_Init+0x158>)
 800182c:	4013      	ands	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800183e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4313      	orrs	r3, r2
 8001862:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	2b04      	cmp	r3, #4
 800186a:	d107      	bne.n	800187c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4313      	orrs	r3, r2
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4313      	orrs	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f023 0307 	bic.w	r3, r3, #7
 8001892:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	4313      	orrs	r3, r2
 800189c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d117      	bne.n	80018d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00e      	beq.n	80018d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fa9d 	bl	8001df8 <DMA_CheckFifoParam>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2240      	movs	r2, #64	; 0x40
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018d2:	2301      	movs	r3, #1
 80018d4:	e016      	b.n	8001904 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fa54 	bl	8001d8c <DMA_CalcBaseAndBitshift>
 80018e4:	4603      	mov	r3, r0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	223f      	movs	r2, #63	; 0x3f
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	f010803f 	.word	0xf010803f

08001910 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_DMA_Start_IT+0x26>
 8001932:	2302      	movs	r3, #2
 8001934:	e040      	b.n	80019b8 <HAL_DMA_Start_IT+0xa8>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d12f      	bne.n	80019aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2202      	movs	r2, #2
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f9e6 	bl	8001d30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	223f      	movs	r2, #63	; 0x3f
 800196a:	409a      	lsls	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0216 	orr.w	r2, r2, #22
 800197e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0208 	orr.w	r2, r2, #8
 8001996:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e005      	b.n	80019b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019b2:	2302      	movs	r3, #2
 80019b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d004      	beq.n	80019de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00c      	b.n	80019f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2205      	movs	r2, #5
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0201 	bic.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a10:	4b92      	ldr	r3, [pc, #584]	; (8001c5c <HAL_DMA_IRQHandler+0x258>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a92      	ldr	r2, [pc, #584]	; (8001c60 <HAL_DMA_IRQHandler+0x25c>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0a9b      	lsrs	r3, r3, #10
 8001a1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	2208      	movs	r2, #8
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01a      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0204 	bic.w	r2, r2, #4
 8001a56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	2201      	movs	r2, #1
 8001a76:	409a      	lsls	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d012      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	2201      	movs	r2, #1
 8001a94:	409a      	lsls	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9e:	f043 0202 	orr.w	r2, r3, #2
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aaa:	2204      	movs	r2, #4
 8001aac:	409a      	lsls	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d012      	beq.n	8001adc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	2204      	movs	r2, #4
 8001aca:	409a      	lsls	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	f043 0204 	orr.w	r2, r3, #4
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d043      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03c      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afe:	2210      	movs	r2, #16
 8001b00:	409a      	lsls	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d018      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d108      	bne.n	8001b34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d024      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
 8001b32:	e01f      	b.n	8001b74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	4798      	blx	r3
 8001b44:	e016      	b.n	8001b74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0208 	bic.w	r2, r2, #8
 8001b62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	2220      	movs	r2, #32
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 808e 	beq.w	8001ca2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 8086 	beq.w	8001ca2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d136      	bne.n	8001c1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0216 	bic.w	r2, r2, #22
 8001bbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d103      	bne.n	8001bde <HAL_DMA_IRQHandler+0x1da>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0208 	bic.w	r2, r2, #8
 8001bec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	223f      	movs	r2, #63	; 0x3f
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d07d      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
        }
        return;
 8001c1a:	e078      	b.n	8001d0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01c      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d108      	bne.n	8001c4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d030      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
 8001c48:	e02b      	b.n	8001ca2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d027      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
 8001c5a:	e022      	b.n	8001ca2 <HAL_DMA_IRQHandler+0x29e>
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0210 	bic.w	r2, r2, #16
 8001c80:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d032      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d022      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2205      	movs	r2, #5
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d307      	bcc.n	8001cea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f2      	bne.n	8001cce <HAL_DMA_IRQHandler+0x2ca>
 8001ce8:	e000      	b.n	8001cec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001cea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
 8001d0c:	e000      	b.n	8001d10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d0e:	bf00      	nop
    }
  }
}
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop

08001d18 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b40      	cmp	r3, #64	; 0x40
 8001d5c:	d108      	bne.n	8001d70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d6e:	e007      	b.n	8001d80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	3b10      	subs	r3, #16
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001da6:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <DMA_CalcBaseAndBitshift+0x68>)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d909      	bls.n	8001dce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dc2:	f023 0303 	bic.w	r3, r3, #3
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	659a      	str	r2, [r3, #88]	; 0x58
 8001dcc:	e007      	b.n	8001dde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dd6:	f023 0303 	bic.w	r3, r3, #3
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	aaaaaaab 	.word	0xaaaaaaab
 8001df4:	08008dac 	.word	0x08008dac

08001df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d11f      	bne.n	8001e52 <DMA_CheckFifoParam+0x5a>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d856      	bhi.n	8001ec6 <DMA_CheckFifoParam+0xce>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <DMA_CheckFifoParam+0x28>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001e31 	.word	0x08001e31
 8001e24:	08001e43 	.word	0x08001e43
 8001e28:	08001e31 	.word	0x08001e31
 8001e2c:	08001ec7 	.word	0x08001ec7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d046      	beq.n	8001eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e40:	e043      	b.n	8001eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e4a:	d140      	bne.n	8001ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e50:	e03d      	b.n	8001ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e5a:	d121      	bne.n	8001ea0 <DMA_CheckFifoParam+0xa8>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d837      	bhi.n	8001ed2 <DMA_CheckFifoParam+0xda>
 8001e62:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <DMA_CheckFifoParam+0x70>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001e79 	.word	0x08001e79
 8001e6c:	08001e7f 	.word	0x08001e7f
 8001e70:	08001e79 	.word	0x08001e79
 8001e74:	08001e91 	.word	0x08001e91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e7c:	e030      	b.n	8001ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d025      	beq.n	8001ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e8e:	e022      	b.n	8001ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e98:	d11f      	bne.n	8001eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e9e:	e01c      	b.n	8001eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d903      	bls.n	8001eae <DMA_CheckFifoParam+0xb6>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d003      	beq.n	8001eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001eac:	e018      	b.n	8001ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb2:	e015      	b.n	8001ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00e      	beq.n	8001ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec4:	e00b      	b.n	8001ede <DMA_CheckFifoParam+0xe6>
      break;
 8001ec6:	bf00      	nop
 8001ec8:	e00a      	b.n	8001ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eca:	bf00      	nop
 8001ecc:	e008      	b.n	8001ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ece:	bf00      	nop
 8001ed0:	e006      	b.n	8001ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ed2:	bf00      	nop
 8001ed4:	e004      	b.n	8001ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ed6:	bf00      	nop
 8001ed8:	e002      	b.n	8001ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001eda:	bf00      	nop
 8001edc:	e000      	b.n	8001ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ede:	bf00      	nop
    }
  } 
  
  return status; 
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	e159      	b.n	80021c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f040 8148 	bne.w	80021ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d005      	beq.n	8001f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d130      	bne.n	8001fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0201 	and.w	r2, r3, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d017      	beq.n	8001fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d123      	bne.n	8002034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	08da      	lsrs	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3208      	adds	r2, #8
 800202e:	69b9      	ldr	r1, [r7, #24]
 8002030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a2 	beq.w	80021ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_GPIO_Init+0x2e8>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a56      	ldr	r2, [pc, #344]	; (80021d8 <HAL_GPIO_Init+0x2e8>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b54      	ldr	r3, [pc, #336]	; (80021d8 <HAL_GPIO_Init+0x2e8>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002092:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_GPIO_Init+0x2ec>)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <HAL_GPIO_Init+0x2f0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d019      	beq.n	80020f2 <HAL_GPIO_Init+0x202>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_GPIO_Init+0x2f4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_GPIO_Init+0x1fe>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a47      	ldr	r2, [pc, #284]	; (80021e8 <HAL_GPIO_Init+0x2f8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00d      	beq.n	80020ea <HAL_GPIO_Init+0x1fa>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a46      	ldr	r2, [pc, #280]	; (80021ec <HAL_GPIO_Init+0x2fc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <HAL_GPIO_Init+0x1f6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a45      	ldr	r2, [pc, #276]	; (80021f0 <HAL_GPIO_Init+0x300>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_GPIO_Init+0x1f2>
 80020de:	2304      	movs	r3, #4
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x204>
 80020e2:	2307      	movs	r3, #7
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x204>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x204>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x204>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x204>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4935      	ldr	r1, [pc, #212]	; (80021dc <HAL_GPIO_Init+0x2ec>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_GPIO_Init+0x304>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002136:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <HAL_GPIO_Init+0x304>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800213c:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_GPIO_Init+0x304>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002160:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <HAL_GPIO_Init+0x304>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002166:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_GPIO_Init+0x304>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218a:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_GPIO_Init+0x304>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_GPIO_Init+0x304>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b4:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <HAL_GPIO_Init+0x304>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f aea2 	bls.w	8001f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40013c00 	.word	0x40013c00

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002214:	e003      	b.n	800221e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	041a      	lsls	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	619a      	str	r2, [r3, #24]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e264      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d075      	beq.n	8002336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224a:	4ba3      	ldr	r3, [pc, #652]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b04      	cmp	r3, #4
 8002254:	d00c      	beq.n	8002270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4ba0      	ldr	r3, [pc, #640]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800225e:	2b08      	cmp	r3, #8
 8002260:	d112      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002262:	4b9d      	ldr	r3, [pc, #628]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226e:	d10b      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	4b99      	ldr	r3, [pc, #612]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d05b      	beq.n	8002334 <HAL_RCC_OscConfig+0x108>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d157      	bne.n	8002334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e23f      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d106      	bne.n	80022a0 <HAL_RCC_OscConfig+0x74>
 8002292:	4b91      	ldr	r3, [pc, #580]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a90      	ldr	r2, [pc, #576]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e01d      	b.n	80022dc <HAL_RCC_OscConfig+0xb0>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x98>
 80022aa:	4b8b      	ldr	r3, [pc, #556]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a8a      	ldr	r2, [pc, #552]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a87      	ldr	r2, [pc, #540]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0xb0>
 80022c4:	4b84      	ldr	r3, [pc, #528]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a83      	ldr	r2, [pc, #524]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a80      	ldr	r2, [pc, #512]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff f924 	bl	8001530 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff f920 	bl	8001530 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e204      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b76      	ldr	r3, [pc, #472]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0xc0>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f910 	bl	8001530 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff f90c 	bl	8001530 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1f0      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	4b6c      	ldr	r3, [pc, #432]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0xe8>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d063      	beq.n	800240a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002342:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b62      	ldr	r3, [pc, #392]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002356:	2b08      	cmp	r3, #8
 8002358:	d11c      	bne.n	8002394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235a:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d116      	bne.n	8002394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x152>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d001      	beq.n	800237e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e1c4      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4952      	ldr	r1, [pc, #328]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	e03a      	b.n	800240a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800239c:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <HAL_RCC_OscConfig+0x2b0>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7ff f8c5 	bl	8001530 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023aa:	f7ff f8c1 	bl	8001530 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e1a5      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4940      	ldr	r1, [pc, #256]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_RCC_OscConfig+0x2b0>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7ff f8a4 	bl	8001530 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ec:	f7ff f8a0 	bl	8001530 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e184      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d030      	beq.n	8002478 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_OscConfig+0x2b4>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7ff f884 	bl	8001530 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff f880 	bl	8001530 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e164      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x200>
 800244a:	e015      	b.n	8002478 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_OscConfig+0x2b4>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7ff f86d 	bl	8001530 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245a:	f7ff f869 	bl	8001530 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e14d      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a0 	beq.w	80025c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_OscConfig+0x2b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d121      	bne.n	8002506 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_RCC_OscConfig+0x2b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_RCC_OscConfig+0x2b8>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7ff f82f 	bl	8001530 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e011      	b.n	80024fa <HAL_RCC_OscConfig+0x2ce>
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	42470000 	.word	0x42470000
 80024e0:	42470e80 	.word	0x42470e80
 80024e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e8:	f7ff f822 	bl	8001530 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e106      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b85      	ldr	r3, [pc, #532]	; (8002710 <HAL_RCC_OscConfig+0x4e4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x2f0>
 800250e:	4b81      	ldr	r3, [pc, #516]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a80      	ldr	r2, [pc, #512]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	e01c      	b.n	8002556 <HAL_RCC_OscConfig+0x32a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x312>
 8002524:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a7a      	ldr	r2, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
 8002530:	4b78      	ldr	r3, [pc, #480]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	4a77      	ldr	r2, [pc, #476]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6713      	str	r3, [r2, #112]	; 0x70
 800253c:	e00b      	b.n	8002556 <HAL_RCC_OscConfig+0x32a>
 800253e:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	4a74      	ldr	r2, [pc, #464]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6713      	str	r3, [r2, #112]	; 0x70
 800254a:	4b72      	ldr	r3, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a71      	ldr	r2, [pc, #452]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d015      	beq.n	800258a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe ffe7 	bl	8001530 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe ffe3 	bl	8001530 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0c5      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ee      	beq.n	8002566 <HAL_RCC_OscConfig+0x33a>
 8002588:	e014      	b.n	80025b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe ffd1 	bl	8001530 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe ffcd 	bl	8001530 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0af      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a8:	4b5a      	ldr	r3, [pc, #360]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ee      	bne.n	8002592 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b56      	ldr	r3, [pc, #344]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a55      	ldr	r2, [pc, #340]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 809b 	beq.w	8002706 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d05c      	beq.n	8002696 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d141      	bne.n	8002668 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b4c      	ldr	r3, [pc, #304]	; (8002718 <HAL_RCC_OscConfig+0x4ec>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7fe ffa1 	bl	8001530 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f2:	f7fe ff9d 	bl	8001530 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e081      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69da      	ldr	r2, [r3, #28]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	019b      	lsls	r3, r3, #6
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	085b      	lsrs	r3, r3, #1
 8002628:	3b01      	subs	r3, #1
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	4937      	ldr	r1, [pc, #220]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263a:	4b37      	ldr	r3, [pc, #220]	; (8002718 <HAL_RCC_OscConfig+0x4ec>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe ff76 	bl	8001530 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe ff72 	bl	8001530 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e056      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x41c>
 8002666:	e04e      	b.n	8002706 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCC_OscConfig+0x4ec>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7fe ff5f 	bl	8001530 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe ff5b 	bl	8001530 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e03f      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x44a>
 8002694:	e037      	b.n	8002706 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e032      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d028      	beq.n	8002702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d121      	bne.n	8002702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d11a      	bne.n	8002702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026d2:	4013      	ands	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026da:	4293      	cmp	r3, r2
 80026dc:	d111      	bne.n	8002702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40007000 	.word	0x40007000
 8002714:	40023800 	.word	0x40023800
 8002718:	42470060 	.word	0x42470060

0800271c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0cc      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d90c      	bls.n	8002758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a58      	ldr	r2, [pc, #352]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800277a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002788:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a52      	ldr	r2, [pc, #328]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b50      	ldr	r3, [pc, #320]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	494d      	ldr	r1, [pc, #308]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d044      	beq.n	800283c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d119      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d003      	beq.n	80027da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e06f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e067      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f023 0203 	bic.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4934      	ldr	r1, [pc, #208]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800280c:	f7fe fe90 	bl	8001530 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	e00a      	b.n	800282a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7fe fe8c 	bl	8001530 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e04f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 020c 	and.w	r2, r3, #12
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	429a      	cmp	r2, r3
 800283a:	d1eb      	bne.n	8002814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d20c      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b22      	ldr	r3, [pc, #136]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4916      	ldr	r1, [pc, #88]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490e      	ldr	r1, [pc, #56]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028a2:	f000 f821 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	490a      	ldr	r1, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fdf0 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08008d94 	.word	0x08008d94
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000004 	.word	0x20000004

080028e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	2300      	movs	r3, #0
 80028fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002900:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d00d      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x40>
 800290c:	2b08      	cmp	r3, #8
 800290e:	f200 80bd 	bhi.w	8002a8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x34>
 8002916:	2b04      	cmp	r3, #4
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x3a>
 800291a:	e0b7      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800291c:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800291e:	60bb      	str	r3, [r7, #8]
       break;
 8002920:	e0b7      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002922:	4b61      	ldr	r3, [pc, #388]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002924:	60bb      	str	r3, [r7, #8]
      break;
 8002926:	e0b4      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002928:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002930:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002932:	4b5b      	ldr	r3, [pc, #364]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d04d      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293e:	4b58      	ldr	r3, [pc, #352]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	461a      	mov	r2, r3
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	ea02 0800 	and.w	r8, r2, r0
 8002956:	ea03 0901 	and.w	r9, r3, r1
 800295a:	4640      	mov	r0, r8
 800295c:	4649      	mov	r1, r9
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	014b      	lsls	r3, r1, #5
 8002968:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800296c:	0142      	lsls	r2, r0, #5
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	ebb0 0008 	subs.w	r0, r0, r8
 8002976:	eb61 0109 	sbc.w	r1, r1, r9
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	018b      	lsls	r3, r1, #6
 8002984:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002988:	0182      	lsls	r2, r0, #6
 800298a:	1a12      	subs	r2, r2, r0
 800298c:	eb63 0301 	sbc.w	r3, r3, r1
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	00d9      	lsls	r1, r3, #3
 800299a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800299e:	00d0      	lsls	r0, r2, #3
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	eb12 0208 	adds.w	r2, r2, r8
 80029a8:	eb43 0309 	adc.w	r3, r3, r9
 80029ac:	f04f 0000 	mov.w	r0, #0
 80029b0:	f04f 0100 	mov.w	r1, #0
 80029b4:	0259      	lsls	r1, r3, #9
 80029b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029ba:	0250      	lsls	r0, r2, #9
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f7fd fc58 	bl	8000280 <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e04a      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	461a      	mov	r2, r3
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	ea02 0400 	and.w	r4, r2, r0
 80029f2:	ea03 0501 	and.w	r5, r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	014b      	lsls	r3, r1, #5
 8002a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a08:	0142      	lsls	r2, r0, #5
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	1b00      	subs	r0, r0, r4
 8002a10:	eb61 0105 	sbc.w	r1, r1, r5
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	018b      	lsls	r3, r1, #6
 8002a1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a22:	0182      	lsls	r2, r0, #6
 8002a24:	1a12      	subs	r2, r2, r0
 8002a26:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2a:	f04f 0000 	mov.w	r0, #0
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	00d9      	lsls	r1, r3, #3
 8002a34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a38:	00d0      	lsls	r0, r2, #3
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	1912      	adds	r2, r2, r4
 8002a40:	eb45 0303 	adc.w	r3, r5, r3
 8002a44:	f04f 0000 	mov.w	r0, #0
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	0299      	lsls	r1, r3, #10
 8002a4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a52:	0290      	lsls	r0, r2, #10
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	f7fd fc0c 	bl	8000280 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	60bb      	str	r3, [r7, #8]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a8e:	60bb      	str	r3, [r7, #8]
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	68bb      	ldr	r3, [r7, #8]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200

08002aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac8:	f7ff fff0 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0a9b      	lsrs	r3, r3, #10
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	08008da4 	.word	0x08008da4

08002aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002af0:	f7ff ffdc 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	0b5b      	lsrs	r3, r3, #13
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4903      	ldr	r1, [pc, #12]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	08008da4 	.word	0x08008da4

08002b14 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e022      	b.n	8002b6c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fe f9af 	bl	8000e9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2203      	movs	r2, #3
 8002b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f814 	bl	8002b74 <HAL_SD_InitCard>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00a      	b.n	8002b6c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	b08e      	sub	sp, #56	; 0x38
 8002b78:	af04      	add	r7, sp, #16
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002b90:	2376      	movs	r3, #118	; 0x76
 8002b92:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681d      	ldr	r5, [r3, #0]
 8002b98:	466c      	mov	r4, sp
 8002b9a:	f107 0314 	add.w	r3, r7, #20
 8002b9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ba6:	f107 0308 	add.w	r3, r7, #8
 8002baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bac:	4628      	mov	r0, r5
 8002bae:	f001 fe7f 	bl	80048b0 <SDIO_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e04c      	b.n	8002c5e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002bc4:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <HAL_SD_InitCard+0xf4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 feb7 	bl	8004942 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_SD_InitCard+0xf4>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f001 f804 	bl	8003be8 <SD_PowerON>
 8002be0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e02e      	b.n	8002c5e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 ff25 	bl	8003a50 <SD_InitCard>
 8002c06:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e01b      	b.n	8002c5e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 ff1a 	bl	8004a68 <SDMMC_CmdBlockLength>
 8002c34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00f      	beq.n	8002c5c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <HAL_SD_InitCard+0xf8>)
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3728      	adds	r7, #40	; 0x28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bdb0      	pop	{r4, r5, r7, pc}
 8002c66:	bf00      	nop
 8002c68:	422580a0 	.word	0x422580a0
 8002c6c:	004005ff 	.word	0x004005ff

08002c70 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	; 0x30
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d107      	bne.n	8002c98 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0c0      	b.n	8002e1a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 80b9 	bne.w	8002e18 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	441a      	add	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d907      	bls.n	8002cca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0a7      	b.n	8002e1a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2203      	movs	r2, #3
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	4a4c      	ldr	r2, [pc, #304]	; (8002e24 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002cfc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	2200      	movs	r2, #0
 8002d04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3380      	adds	r3, #128	; 0x80
 8002d34:	4619      	mov	r1, r3
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	025b      	lsls	r3, r3, #9
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	f7fe fde7 	bl	8001910 <HAL_DMA_Start_IT>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d017      	beq.n	8002d78 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002d56:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002d5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e050      	b.n	8002e1a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002d78:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d002      	beq.n	8002d8c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	025b      	lsls	r3, r3, #9
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	025b      	lsls	r3, r3, #9
 8002d96:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d98:	2390      	movs	r3, #144	; 0x90
 8002d9a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f107 0210 	add.w	r2, r7, #16
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 fe2c 	bl	8004a10 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d90a      	bls.n	8002dd4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2282      	movs	r2, #130	; 0x82
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 fe90 	bl	8004af0 <SDMMC_CmdReadMultiBlock>
 8002dd0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002dd2:	e009      	b.n	8002de8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2281      	movs	r2, #129	; 0x81
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 fe63 	bl	8004aac <SDMMC_CmdReadSingleBlock>
 8002de6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d012      	beq.n	8002e14 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e002      	b.n	8002e1a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3730      	adds	r7, #48	; 0x30
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	0800385f 	.word	0x0800385f
 8002e28:	080038d1 	.word	0x080038d1
 8002e2c:	004005ff 	.word	0x004005ff
 8002e30:	4225858c 	.word	0x4225858c

08002e34 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08c      	sub	sp, #48	; 0x30
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d107      	bne.n	8002e5c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0c5      	b.n	8002fe8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f040 80be 	bne.w	8002fe6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	441a      	add	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d907      	bls.n	8002e8e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0ac      	b.n	8002fe8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2203      	movs	r2, #3
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	4a4e      	ldr	r2, [pc, #312]	; (8002ff0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	4a4d      	ldr	r2, [pc, #308]	; (8002ff4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002ec0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d002      	beq.n	8002ed8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	025b      	lsls	r3, r3, #9
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d90a      	bls.n	8002ef4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	22a0      	movs	r2, #160	; 0xa0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 fe44 	bl	8004b78 <SDMMC_CmdWriteMultiBlock>
 8002ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002ef2:	e009      	b.n	8002f08 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2290      	movs	r2, #144	; 0x90
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 fe17 	bl	8004b34 <SDMMC_CmdWriteSingleBlock>
 8002f06:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d012      	beq.n	8002f34 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a39      	ldr	r2, [pc, #228]	; (8002ff8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e059      	b.n	8002fe8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002f34:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	2240      	movs	r2, #64	; 0x40
 8002f40:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3380      	adds	r3, #128	; 0x80
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	025b      	lsls	r3, r3, #9
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	f7fe fccd 	bl	8001910 <HAL_DMA_Start_IT>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01c      	beq.n	8002fb6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002f8a:	f023 0302 	bic.w	r3, r3, #2
 8002f8e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e018      	b.n	8002fe8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002fc2:	2390      	movs	r3, #144	; 0x90
 8002fc4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f107 0210 	add.w	r2, r7, #16
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fd17 	bl	8004a10 <SDIO_ConfigData>

      return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3730      	adds	r7, #48	; 0x30
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	08003835 	.word	0x08003835
 8002ff4:	080038d1 	.word	0x080038d1
 8002ff8:	004005ff 	.word	0x004005ff
 8002ffc:	4225858c 	.word	0x4225858c

08003000 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_SD_IRQHandler+0x2e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fffd 	bl	8004026 <SD_Read_IT>
 800302c:	e165      	b.n	80032fa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 808f 	beq.w	800315c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003046:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003056:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800305a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d039      	beq.n	80030ea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d104      	bne.n	800308a <HAL_SD_IRQHandler+0x8a>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d011      	beq.n	80030ae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f001 fd94 	bl	8004bbc <SDMMC_CmdStopTransfer>
 8003094:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f92f 	bl	800330c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <HAL_SD_IRQHandler+0xda>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f002 fa02 	bl	80054e4 <HAL_SD_RxCpltCallback>
 80030e0:	e10b      	b.n	80032fa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f002 f9f4 	bl	80054d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80030e8:	e107      	b.n	80032fa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8102 	beq.w	80032fa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d011      	beq.n	8003124 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f001 fd59 	bl	8004bbc <SDMMC_CmdStopTransfer>
 800310a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8f4 	bl	800330c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 80e5 	bne.w	80032fa <HAL_SD_IRQHandler+0x2fa>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	f040 80df 	bne.w	80032fa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0208 	bic.w	r2, r2, #8
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f002 f9bb 	bl	80054d0 <HAL_SD_TxCpltCallback>
}
 800315a:	e0ce      	b.n	80032fa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_SD_IRQHandler+0x17c>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 ffa7 	bl	80040c8 <SD_Write_IT>
 800317a:	e0be      	b.n	80032fa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003182:	f240 233a 	movw	r3, #570	; 0x23a
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80b6 	beq.w	80032fa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	f043 0202 	orr.w	r2, r3, #2
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	f043 0210 	orr.w	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	f043 0208 	orr.w	r2, r3, #8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f240 723a 	movw	r2, #1850	; 0x73a
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003228:	f023 0302 	bic.w	r3, r3, #2
 800322c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f001 fcc2 	bl	8004bbc <SDMMC_CmdStopTransfer>
 8003238:	4602      	mov	r2, r0
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f855 	bl	800330c <HAL_SD_ErrorCallback>
}
 8003262:	e04a      	b.n	80032fa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b00      	cmp	r3, #0
 800326c:	d045      	beq.n	80032fa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_SD_IRQHandler+0x282>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d011      	beq.n	80032a6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <HAL_SD_IRQHandler+0x304>)
 8003288:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe fb96 	bl	80019c0 <HAL_DMA_Abort_IT>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d02f      	beq.n	80032fa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fb68 	bl	8003974 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80032a4:	e029      	b.n	80032fa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_SD_IRQHandler+0x2ba>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d011      	beq.n	80032de <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <HAL_SD_IRQHandler+0x308>)
 80032c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fb7a 	bl	80019c0 <HAL_DMA_Abort_IT>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d013      	beq.n	80032fa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fb83 	bl	80039e2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80032dc:	e00d      	b.n	80032fa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f002 f8e2 	bl	80054bc <HAL_SD_AbortCallback>
}
 80032f8:	e7ff      	b.n	80032fa <HAL_SD_IRQHandler+0x2fa>
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	08003975 	.word	0x08003975
 8003308:	080039e3 	.word	0x080039e3

0800330c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800332e:	0f9b      	lsrs	r3, r3, #30
 8003330:	b2da      	uxtb	r2, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	b2da      	uxtb	r2, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334c:	0e1b      	lsrs	r3, r3, #24
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	b2da      	uxtb	r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800335e:	0c1b      	lsrs	r3, r3, #16
 8003360:	b2da      	uxtb	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	b2da      	uxtb	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003376:	b2da      	uxtb	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003380:	0d1b      	lsrs	r3, r3, #20
 8003382:	b29a      	uxth	r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	b2da      	uxtb	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339e:	0bdb      	lsrs	r3, r3, #15
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b0:	0b9b      	lsrs	r3, r3, #14
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c2:	0b5b      	lsrs	r3, r3, #13
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d4:	0b1b      	lsrs	r3, r3, #12
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d163      	bne.n	80034b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f4:	009a      	lsls	r2, r3, #2
 80033f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033fa:	4013      	ands	r3, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003400:	0f92      	lsrs	r2, r2, #30
 8003402:	431a      	orrs	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340c:	0edb      	lsrs	r3, r3, #27
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	b2da      	uxtb	r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341e:	0e1b      	lsrs	r3, r3, #24
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	b2da      	uxtb	r2, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003430:	0d5b      	lsrs	r3, r3, #21
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	b2da      	uxtb	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003442:	0c9b      	lsrs	r3, r3, #18
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	b2da      	uxtb	r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003454:	0bdb      	lsrs	r3, r3, #15
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	b2da      	uxtb	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	7e1b      	ldrb	r3, [r3, #24]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	3302      	adds	r3, #2
 8003478:	2201      	movs	r2, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003482:	fb02 f203 	mul.w	r2, r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	7a1b      	ldrb	r3, [r3, #8]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	2201      	movs	r2, #1
 8003496:	409a      	lsls	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80034a4:	0a52      	lsrs	r2, r2, #9
 80034a6:	fb02 f203 	mul.w	r2, r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b4:	661a      	str	r2, [r3, #96]	; 0x60
 80034b6:	e031      	b.n	800351c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d11d      	bne.n	80034fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	3301      	adds	r3, #1
 80034dc:	029a      	lsls	r2, r3, #10
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	661a      	str	r2, [r3, #96]	; 0x60
 80034fa:	e00f      	b.n	800351c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a58      	ldr	r2, [pc, #352]	; (8003664 <HAL_SD_GetCardCSD+0x344>)
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e09d      	b.n	8003658 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003520:	0b9b      	lsrs	r3, r3, #14
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	b2da      	uxtb	r2, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003532:	09db      	lsrs	r3, r3, #7
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353a:	b2da      	uxtb	r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800354a:	b2da      	uxtb	r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	0fdb      	lsrs	r3, r3, #31
 8003556:	b2da      	uxtb	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	0f5b      	lsrs	r3, r3, #29
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	b2da      	uxtb	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	0e9b      	lsrs	r3, r3, #26
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	b2da      	uxtb	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	0d9b      	lsrs	r3, r3, #22
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	b2da      	uxtb	r2, r3
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	0d5b      	lsrs	r3, r3, #21
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	0bdb      	lsrs	r3, r3, #15
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	0b9b      	lsrs	r3, r3, #14
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	0b5b      	lsrs	r3, r3, #13
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	0b1b      	lsrs	r3, r3, #12
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	b2da      	uxtb	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	0a9b      	lsrs	r3, r3, #10
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	b2da      	uxtb	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	b2da      	uxtb	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003646:	b2da      	uxtb	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	004005ff 	.word	0x004005ff

08003668 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b08e      	sub	sp, #56	; 0x38
 80036c4:	af04      	add	r7, sp, #16
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2203      	movs	r2, #3
 80036d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d02e      	beq.n	800373e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e6:	d106      	bne.n	80036f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
 80036f4:	e029      	b.n	800374a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036fc:	d10a      	bne.n	8003714 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fb28 	bl	8003d54 <SD_WideBus_Enable>
 8003704:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
 8003712:	e01a      	b.n	800374a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fb65 	bl	8003dea <SD_WideBus_Disable>
 8003720:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	639a      	str	r2, [r3, #56]	; 0x38
 800372e:	e00c      	b.n	800374a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
 800373c:	e005      	b.n	800374a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003768:	e01f      	b.n	80037aa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681d      	ldr	r5, [r3, #0]
 8003790:	466c      	mov	r4, sp
 8003792:	f107 0314 	add.w	r3, r7, #20
 8003796:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800379a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800379e:	f107 0308 	add.w	r3, r7, #8
 80037a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037a4:	4628      	mov	r0, r5
 80037a6:	f001 f883 	bl	80048b0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037b2:	4618      	mov	r0, r3
 80037b4:	f001 f958 	bl	8004a68 <SDMMC_CmdBlockLength>
 80037b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80037e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3728      	adds	r7, #40	; 0x28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bdb0      	pop	{r4, r5, r7, pc}
 80037ee:	bf00      	nop
 80037f0:	004005ff 	.word	0x004005ff

080037f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003800:	f107 030c 	add.w	r3, r7, #12
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa7c 	bl	8003d04 <SD_SendStatus>
 800380c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	0a5b      	lsrs	r3, r3, #9
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800382a:	693b      	ldr	r3, [r7, #16]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003850:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b82      	cmp	r3, #130	; 0x82
 8003872:	d111      	bne.n	8003898 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f001 f99f 	bl	8004bbc <SDMMC_CmdStopTransfer>
 800387e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d008      	beq.n	8003898 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	431a      	orrs	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7ff fd3a 	bl	800330c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0208 	bic.w	r2, r2, #8
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80038b0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f001 fe0f 	bl	80054e4 <HAL_SD_RxCpltCallback>
#endif
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe fa1a 	bl	8001d18 <HAL_DMA_GetError>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d03e      	beq.n	8003968 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d002      	beq.n	8003906 <SD_DMAError+0x36>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d12d      	bne.n	8003962 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a19      	ldr	r2, [pc, #100]	; (8003970 <SD_DMAError+0xa0>)
 800390c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f7ff ff62 	bl	80037f4 <HAL_SD_GetCardState>
 8003930:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b06      	cmp	r3, #6
 8003936:	d002      	beq.n	800393e <SD_DMAError+0x6e>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10a      	bne.n	8003954 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f001 f93a 	bl	8004bbc <SDMMC_CmdStopTransfer>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	431a      	orrs	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff fcd2 	bl	800330c <HAL_SD_ErrorCallback>
#endif
  }
}
 8003968:	bf00      	nop
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	004005ff 	.word	0x004005ff

08003974 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f240 523a 	movw	r2, #1338	; 0x53a
 800398a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff ff31 	bl	80037f4 <HAL_SD_GetCardState>
 8003992:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d002      	beq.n	80039ae <SD_DMATxAbort+0x3a>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b05      	cmp	r3, #5
 80039ac:	d10a      	bne.n	80039c4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f902 	bl	8004bbc <SDMMC_CmdStopTransfer>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	431a      	orrs	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f001 fd75 	bl	80054bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80039d2:	e002      	b.n	80039da <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff fc99 	bl	800330c <HAL_SD_ErrorCallback>
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff fefa 	bl	80037f4 <HAL_SD_GetCardState>
 8003a00:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d002      	beq.n	8003a1c <SD_DMARxAbort+0x3a>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b05      	cmp	r3, #5
 8003a1a:	d10a      	bne.n	8003a32 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f001 f8cb 	bl	8004bbc <SDMMC_CmdStopTransfer>
 8003a26:	4602      	mov	r2, r0
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f001 fd3e 	bl	80054bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003a40:	e002      	b.n	8003a48 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fc62 	bl	800330c <HAL_SD_ErrorCallback>
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a50:	b5b0      	push	{r4, r5, r7, lr}
 8003a52:	b094      	sub	sp, #80	; 0x50
 8003a54:	af04      	add	r7, sp, #16
 8003a56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 ff7d 	bl	8004960 <SDIO_GetPowerState>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003a6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a70:	e0b6      	b.n	8003be0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d02f      	beq.n	8003ada <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f9a6 	bl	8004dd0 <SDMMC_CmdSendCID>
 8003a84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <SD_InitCard+0x40>
    {
      return errorstate;
 8003a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8e:	e0a7      	b.n	8003be0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 ffa7 	bl	80049ea <SDIO_GetResponse>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2104      	movs	r1, #4
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 ff9e 	bl	80049ea <SDIO_GetResponse>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2108      	movs	r1, #8
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 ff95 	bl	80049ea <SDIO_GetResponse>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	210c      	movs	r1, #12
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 ff8c 	bl	80049ea <SDIO_GetResponse>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d00d      	beq.n	8003afe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f107 020e 	add.w	r2, r7, #14
 8003aea:	4611      	mov	r1, r2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f9ac 	bl	8004e4a <SDMMC_CmdSetRelAdd>
 8003af2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <SD_InitCard+0xae>
    {
      return errorstate;
 8003afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afc:	e070      	b.n	8003be0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d036      	beq.n	8003b74 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003b06:	89fb      	ldrh	r3, [r7, #14]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f001 f976 	bl	8004e0c <SDMMC_CmdSendCSD>
 8003b20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2a:	e059      	b.n	8003be0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 ff59 	bl	80049ea <SDIO_GetResponse>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2104      	movs	r1, #4
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 ff50 	bl	80049ea <SDIO_GetResponse>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2108      	movs	r1, #8
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 ff47 	bl	80049ea <SDIO_GetResponse>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	210c      	movs	r1, #12
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 ff3e 	bl	80049ea <SDIO_GetResponse>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2104      	movs	r1, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 ff35 	bl	80049ea <SDIO_GetResponse>
 8003b80:	4603      	mov	r3, r0
 8003b82:	0d1a      	lsrs	r2, r3, #20
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003b88:	f107 0310 	add.w	r3, r7, #16
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fbc6 	bl	8003320 <HAL_SD_GetCardCSD>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b9e:	e01f      	b.n	8003be0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	461a      	mov	r2, r3
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	f001 f825 	bl	8004c00 <SDMMC_CmdSelDesel>
 8003bb6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <SD_InitCard+0x172>
  {
    return errorstate;
 8003bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc0:	e00e      	b.n	8003be0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681d      	ldr	r5, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	466c      	mov	r4, sp
 8003bca:	f103 0210 	add.w	r2, r3, #16
 8003bce:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f000 fe69 	bl	80048b0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3740      	adds	r7, #64	; 0x40
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bdb0      	pop	{r4, r5, r7, pc}

08003be8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 f820 	bl	8004c46 <SDMMC_CmdGoIdleState>
 8003c06:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	e072      	b.n	8003cf8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 f833 	bl	8004c82 <SDMMC_CmdOperCond>
 8003c1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 f809 	bl	8004c46 <SDMMC_CmdGoIdleState>
 8003c34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	e05b      	b.n	8003cf8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d137      	bne.n	8003cbe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f001 f833 	bl	8004cc0 <SDMMC_CmdAppCommand>
 8003c5a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02d      	beq.n	8003cbe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c66:	e047      	b.n	8003cf8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f826 	bl	8004cc0 <SDMMC_CmdAppCommand>
 8003c74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <SD_PowerON+0x98>
    {
      return errorstate;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	e03b      	b.n	8003cf8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	491e      	ldr	r1, [pc, #120]	; (8003d00 <SD_PowerON+0x118>)
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 f83c 	bl	8004d04 <SDMMC_CmdAppOperCommand>
 8003c8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c98:	e02e      	b.n	8003cf8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fea2 	bl	80049ea <SDIO_GetResponse>
 8003ca6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	0fdb      	lsrs	r3, r3, #31
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <SD_PowerON+0xcc>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <SD_PowerON+0xce>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]

    count++;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d802      	bhi.n	8003cce <SD_PowerON+0xe6>
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0cc      	beq.n	8003c68 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d902      	bls.n	8003cde <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cdc:	e00c      	b.n	8003cf8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
 8003cee:	e002      	b.n	8003cf6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	c1100000 	.word	0xc1100000

08003d04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003d14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d18:	e018      	b.n	8003d4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f001 f8b0 	bl	8004e8c <SDMMC_CmdSendStatus>
 8003d2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	e009      	b.n	8003d4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fe53 	bl	80049ea <SDIO_GetResponse>
 8003d44:	4602      	mov	r2, r0
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fe3d 	bl	80049ea <SDIO_GetResponse>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d7a:	d102      	bne.n	8003d82 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003d7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d80:	e02f      	b.n	8003de2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003d82:	f107 030c 	add.w	r3, r7, #12
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f879 	bl	8003e80 <SD_FindSCR>
 8003d8e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	e023      	b.n	8003de2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01c      	beq.n	8003dde <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f000 ff85 	bl	8004cc0 <SDMMC_CmdAppCommand>
 8003db6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	e00f      	b.n	8003de2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 ffbe 	bl	8004d4a <SDMMC_CmdBusWidth>
 8003dce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	e003      	b.n	8003de2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e001      	b.n	8003de2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003dde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fdf2 	bl	80049ea <SDIO_GetResponse>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e10:	d102      	bne.n	8003e18 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e16:	e02f      	b.n	8003e78 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003e18:	f107 030c 	add.w	r3, r7, #12
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f82e 	bl	8003e80 <SD_FindSCR>
 8003e24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	e023      	b.n	8003e78 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01c      	beq.n	8003e74 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 ff3a 	bl	8004cc0 <SDMMC_CmdAppCommand>
 8003e4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	e00f      	b.n	8003e78 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 ff73 	bl	8004d4a <SDMMC_CmdBusWidth>
 8003e64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	e003      	b.n	8003e78 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e001      	b.n	8003e78 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b08f      	sub	sp, #60	; 0x3c
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003e8a:	f7fd fb51 	bl	8001530 <HAL_GetTick>
 8003e8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2108      	movs	r1, #8
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fdde 	bl	8004a68 <SDMMC_CmdBlockLength>
 8003eac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	e0b2      	b.n	800401e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f000 fefb 	bl	8004cc0 <SDMMC_CmdAppCommand>
 8003eca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	e0a3      	b.n	800401e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eda:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003edc:	2308      	movs	r3, #8
 8003ede:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003ee0:	2330      	movs	r3, #48	; 0x30
 8003ee2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f107 0210 	add.w	r2, r7, #16
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fd88 	bl	8004a10 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 ff42 	bl	8004d8e <SDMMC_CmdSendSCR>
 8003f0a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d02a      	beq.n	8003f68 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	e083      	b.n	800401e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00f      	beq.n	8003f44 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	f107 0208 	add.w	r2, r7, #8
 8003f30:	18d4      	adds	r4, r2, r3
 8003f32:	4608      	mov	r0, r1
 8003f34:	f000 fce7 	bl	8004906 <SDIO_ReadFIFO>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	6023      	str	r3, [r4, #0]
      index++;
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	3301      	adds	r3, #1
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
 8003f42:	e006      	b.n	8003f52 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d012      	beq.n	8003f78 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003f52:	f7fd faed 	bl	8001530 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d102      	bne.n	8003f68 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003f62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f66:	e05a      	b.n	800401e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0cf      	beq.n	8003f16 <SD_FindSCR+0x96>
 8003f76:	e000      	b.n	8003f7a <SD_FindSCR+0xfa>
      break;
 8003f78:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003f90:	2308      	movs	r3, #8
 8003f92:	e044      	b.n	800401e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003faa:	2302      	movs	r3, #2
 8003fac:	e037      	b.n	800401e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	e02a      	b.n	800401e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	061a      	lsls	r2, r3, #24
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fde:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003fe8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	0e1b      	lsrs	r3, r3, #24
 8003fee:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	601a      	str	r2, [r3, #0]
    scr++;
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	061a      	lsls	r2, r3, #24
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004006:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004010:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	0e1b      	lsrs	r3, r3, #24
 8004016:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	373c      	adds	r7, #60	; 0x3c
 8004022:	46bd      	mov	sp, r7
 8004024:	bd90      	pop	{r4, r7, pc}

08004026 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b086      	sub	sp, #24
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d03f      	beq.n	80040c0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e033      	b.n	80040ae <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fc5b 	bl	8004906 <SDIO_ReadFIFO>
 8004050:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	701a      	strb	r2, [r3, #0]
      tmp++;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3301      	adds	r3, #1
 800405e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	3b01      	subs	r3, #1
 8004064:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	0a1b      	lsrs	r3, r3, #8
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	3b01      	subs	r3, #1
 800407a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	3b01      	subs	r3, #1
 8004090:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	0e1b      	lsrs	r3, r3, #24
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	3301      	adds	r3, #1
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b07      	cmp	r3, #7
 80040b2:	d9c8      	bls.n	8004046 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80040c0:	bf00      	nop
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d043      	beq.n	800416a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	e037      	b.n	8004158 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	60bb      	str	r3, [r7, #8]
      tmp++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	021a      	lsls	r2, r3, #8
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4313      	orrs	r3, r2
 8004104:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3301      	adds	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	3b01      	subs	r3, #1
 8004110:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	041a      	lsls	r2, r3, #16
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4313      	orrs	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3301      	adds	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	3b01      	subs	r3, #1
 8004128:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	061a      	lsls	r2, r3, #24
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4313      	orrs	r3, r2
 8004134:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3301      	adds	r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3b01      	subs	r3, #1
 8004140:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f107 0208 	add.w	r2, r7, #8
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fbe7 	bl	8004920 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	3301      	adds	r3, #1
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b07      	cmp	r3, #7
 800415c:	d9c4      	bls.n	80040e8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e07b      	b.n	800427c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	2b00      	cmp	r3, #0
 800418a:	d108      	bne.n	800419e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004194:	d009      	beq.n	80041aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	61da      	str	r2, [r3, #28]
 800419c:	e005      	b.n	80041aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fc ffb1 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	ea42 0103 	orr.w	r1, r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	f003 0104 	and.w	r1, r3, #4
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f003 0210 	and.w	r2, r3, #16
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800426a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e03f      	b.n	8004316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd f868 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	; 0x24
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f929 	bl	8004520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b08a      	sub	sp, #40	; 0x28
 8004322:	af02      	add	r7, sp, #8
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b20      	cmp	r3, #32
 800433c:	d17c      	bne.n	8004438 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_UART_Transmit+0x2c>
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e075      	b.n	800443a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_UART_Transmit+0x3e>
 8004358:	2302      	movs	r3, #2
 800435a:	e06e      	b.n	800443a <HAL_UART_Transmit+0x11c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2221      	movs	r2, #33	; 0x21
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004372:	f7fd f8dd 	bl	8001530 <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	88fa      	ldrh	r2, [r7, #6]
 800437c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438c:	d108      	bne.n	80043a0 <HAL_UART_Transmit+0x82>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d104      	bne.n	80043a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	e003      	b.n	80043a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043b0:	e02a      	b.n	8004408 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f840 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e036      	b.n	800443a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	3302      	adds	r3, #2
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	e007      	b.n	80043fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	3301      	adds	r3, #1
 80043f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1cf      	bne.n	80043b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	2140      	movs	r1, #64	; 0x40
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f810 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e006      	b.n	800443a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b090      	sub	sp, #64	; 0x40
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004452:	e050      	b.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d04c      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800445c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0x30>
 8004462:	f7fd f865 	bl	8001530 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800446e:	429a      	cmp	r2, r3
 8004470:	d241      	bcs.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004492:	637a      	str	r2, [r7, #52]	; 0x34
 8004494:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e5      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3314      	adds	r3, #20
 80044ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	613b      	str	r3, [r7, #16]
   return(result);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3314      	adds	r3, #20
 80044c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044c6:	623a      	str	r2, [r7, #32]
 80044c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	69f9      	ldr	r1, [r7, #28]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e00f      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	bf0c      	ite	eq
 8004506:	2301      	moveq	r3, #1
 8004508:	2300      	movne	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	429a      	cmp	r2, r3
 8004512:	d09f      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3740      	adds	r7, #64	; 0x40
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004524:	b09f      	sub	sp, #124	; 0x7c
 8004526:	af00      	add	r7, sp, #0
 8004528:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800452a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004536:	68d9      	ldr	r1, [r3, #12]
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	ea40 0301 	orr.w	r3, r0, r1
 8004540:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	431a      	orrs	r2, r3
 800454c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	431a      	orrs	r2, r3
 8004552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	4313      	orrs	r3, r2
 8004558:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800455a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004564:	f021 010c 	bic.w	r1, r1, #12
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800456e:	430b      	orrs	r3, r1
 8004570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800457c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457e:	6999      	ldr	r1, [r3, #24]
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	ea40 0301 	orr.w	r3, r0, r1
 8004588:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4bc5      	ldr	r3, [pc, #788]	; (80048a4 <UART_SetConfig+0x384>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d004      	beq.n	800459e <UART_SetConfig+0x7e>
 8004594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4bc3      	ldr	r3, [pc, #780]	; (80048a8 <UART_SetConfig+0x388>)
 800459a:	429a      	cmp	r2, r3
 800459c:	d103      	bne.n	80045a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800459e:	f7fe faa5 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 80045a2:	6778      	str	r0, [r7, #116]	; 0x74
 80045a4:	e002      	b.n	80045ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045a6:	f7fe fa8d 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 80045aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b4:	f040 80b6 	bne.w	8004724 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ba:	461c      	mov	r4, r3
 80045bc:	f04f 0500 	mov.w	r5, #0
 80045c0:	4622      	mov	r2, r4
 80045c2:	462b      	mov	r3, r5
 80045c4:	1891      	adds	r1, r2, r2
 80045c6:	6439      	str	r1, [r7, #64]	; 0x40
 80045c8:	415b      	adcs	r3, r3
 80045ca:	647b      	str	r3, [r7, #68]	; 0x44
 80045cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045d0:	1912      	adds	r2, r2, r4
 80045d2:	eb45 0303 	adc.w	r3, r5, r3
 80045d6:	f04f 0000 	mov.w	r0, #0
 80045da:	f04f 0100 	mov.w	r1, #0
 80045de:	00d9      	lsls	r1, r3, #3
 80045e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045e4:	00d0      	lsls	r0, r2, #3
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	1911      	adds	r1, r2, r4
 80045ec:	6639      	str	r1, [r7, #96]	; 0x60
 80045ee:	416b      	adcs	r3, r5
 80045f0:	667b      	str	r3, [r7, #100]	; 0x64
 80045f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	1891      	adds	r1, r2, r2
 80045fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004600:	415b      	adcs	r3, r3
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004608:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800460c:	f7fb fe38 	bl	8000280 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4ba5      	ldr	r3, [pc, #660]	; (80048ac <UART_SetConfig+0x38c>)
 8004616:	fba3 2302 	umull	r2, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	011e      	lsls	r6, r3, #4
 800461e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004620:	461c      	mov	r4, r3
 8004622:	f04f 0500 	mov.w	r5, #0
 8004626:	4622      	mov	r2, r4
 8004628:	462b      	mov	r3, r5
 800462a:	1891      	adds	r1, r2, r2
 800462c:	6339      	str	r1, [r7, #48]	; 0x30
 800462e:	415b      	adcs	r3, r3
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
 8004632:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004636:	1912      	adds	r2, r2, r4
 8004638:	eb45 0303 	adc.w	r3, r5, r3
 800463c:	f04f 0000 	mov.w	r0, #0
 8004640:	f04f 0100 	mov.w	r1, #0
 8004644:	00d9      	lsls	r1, r3, #3
 8004646:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800464a:	00d0      	lsls	r0, r2, #3
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	1911      	adds	r1, r2, r4
 8004652:	65b9      	str	r1, [r7, #88]	; 0x58
 8004654:	416b      	adcs	r3, r5
 8004656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	461a      	mov	r2, r3
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	1891      	adds	r1, r2, r2
 8004664:	62b9      	str	r1, [r7, #40]	; 0x28
 8004666:	415b      	adcs	r3, r3
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800466e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004672:	f7fb fe05 	bl	8000280 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4b8c      	ldr	r3, [pc, #560]	; (80048ac <UART_SetConfig+0x38c>)
 800467c:	fba3 1302 	umull	r1, r3, r3, r2
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	2164      	movs	r1, #100	; 0x64
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	3332      	adds	r3, #50	; 0x32
 800468e:	4a87      	ldr	r2, [pc, #540]	; (80048ac <UART_SetConfig+0x38c>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800469c:	441e      	add	r6, r3
 800469e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a0:	4618      	mov	r0, r3
 80046a2:	f04f 0100 	mov.w	r1, #0
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	1894      	adds	r4, r2, r2
 80046ac:	623c      	str	r4, [r7, #32]
 80046ae:	415b      	adcs	r3, r3
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
 80046b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046b6:	1812      	adds	r2, r2, r0
 80046b8:	eb41 0303 	adc.w	r3, r1, r3
 80046bc:	f04f 0400 	mov.w	r4, #0
 80046c0:	f04f 0500 	mov.w	r5, #0
 80046c4:	00dd      	lsls	r5, r3, #3
 80046c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046ca:	00d4      	lsls	r4, r2, #3
 80046cc:	4622      	mov	r2, r4
 80046ce:	462b      	mov	r3, r5
 80046d0:	1814      	adds	r4, r2, r0
 80046d2:	653c      	str	r4, [r7, #80]	; 0x50
 80046d4:	414b      	adcs	r3, r1
 80046d6:	657b      	str	r3, [r7, #84]	; 0x54
 80046d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	461a      	mov	r2, r3
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	1891      	adds	r1, r2, r2
 80046e4:	61b9      	str	r1, [r7, #24]
 80046e6:	415b      	adcs	r3, r3
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80046f2:	f7fb fdc5 	bl	8000280 <__aeabi_uldivmod>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4b6c      	ldr	r3, [pc, #432]	; (80048ac <UART_SetConfig+0x38c>)
 80046fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	2164      	movs	r1, #100	; 0x64
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	3332      	adds	r3, #50	; 0x32
 800470e:	4a67      	ldr	r2, [pc, #412]	; (80048ac <UART_SetConfig+0x38c>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	f003 0207 	and.w	r2, r3, #7
 800471a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4432      	add	r2, r6
 8004720:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004722:	e0b9      	b.n	8004898 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004726:	461c      	mov	r4, r3
 8004728:	f04f 0500 	mov.w	r5, #0
 800472c:	4622      	mov	r2, r4
 800472e:	462b      	mov	r3, r5
 8004730:	1891      	adds	r1, r2, r2
 8004732:	6139      	str	r1, [r7, #16]
 8004734:	415b      	adcs	r3, r3
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800473c:	1912      	adds	r2, r2, r4
 800473e:	eb45 0303 	adc.w	r3, r5, r3
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f04f 0100 	mov.w	r1, #0
 800474a:	00d9      	lsls	r1, r3, #3
 800474c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004750:	00d0      	lsls	r0, r2, #3
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	eb12 0804 	adds.w	r8, r2, r4
 800475a:	eb43 0905 	adc.w	r9, r3, r5
 800475e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4618      	mov	r0, r3
 8004764:	f04f 0100 	mov.w	r1, #0
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	008b      	lsls	r3, r1, #2
 8004772:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004776:	0082      	lsls	r2, r0, #2
 8004778:	4640      	mov	r0, r8
 800477a:	4649      	mov	r1, r9
 800477c:	f7fb fd80 	bl	8000280 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4b49      	ldr	r3, [pc, #292]	; (80048ac <UART_SetConfig+0x38c>)
 8004786:	fba3 2302 	umull	r2, r3, r3, r2
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	011e      	lsls	r6, r3, #4
 800478e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004790:	4618      	mov	r0, r3
 8004792:	f04f 0100 	mov.w	r1, #0
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	1894      	adds	r4, r2, r2
 800479c:	60bc      	str	r4, [r7, #8]
 800479e:	415b      	adcs	r3, r3
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a6:	1812      	adds	r2, r2, r0
 80047a8:	eb41 0303 	adc.w	r3, r1, r3
 80047ac:	f04f 0400 	mov.w	r4, #0
 80047b0:	f04f 0500 	mov.w	r5, #0
 80047b4:	00dd      	lsls	r5, r3, #3
 80047b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047ba:	00d4      	lsls	r4, r2, #3
 80047bc:	4622      	mov	r2, r4
 80047be:	462b      	mov	r3, r5
 80047c0:	1814      	adds	r4, r2, r0
 80047c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80047c4:	414b      	adcs	r3, r1
 80047c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	008b      	lsls	r3, r1, #2
 80047dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047e0:	0082      	lsls	r2, r0, #2
 80047e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80047e6:	f7fb fd4b 	bl	8000280 <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4b2f      	ldr	r3, [pc, #188]	; (80048ac <UART_SetConfig+0x38c>)
 80047f0:	fba3 1302 	umull	r1, r3, r3, r2
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	2164      	movs	r1, #100	; 0x64
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	3332      	adds	r3, #50	; 0x32
 8004802:	4a2a      	ldr	r2, [pc, #168]	; (80048ac <UART_SetConfig+0x38c>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480e:	441e      	add	r6, r3
 8004810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004812:	4618      	mov	r0, r3
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	1894      	adds	r4, r2, r2
 800481e:	603c      	str	r4, [r7, #0]
 8004820:	415b      	adcs	r3, r3
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004828:	1812      	adds	r2, r2, r0
 800482a:	eb41 0303 	adc.w	r3, r1, r3
 800482e:	f04f 0400 	mov.w	r4, #0
 8004832:	f04f 0500 	mov.w	r5, #0
 8004836:	00dd      	lsls	r5, r3, #3
 8004838:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800483c:	00d4      	lsls	r4, r2, #3
 800483e:	4622      	mov	r2, r4
 8004840:	462b      	mov	r3, r5
 8004842:	eb12 0a00 	adds.w	sl, r2, r0
 8004846:	eb43 0b01 	adc.w	fp, r3, r1
 800484a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4618      	mov	r0, r3
 8004850:	f04f 0100 	mov.w	r1, #0
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	008b      	lsls	r3, r1, #2
 800485e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004862:	0082      	lsls	r2, r0, #2
 8004864:	4650      	mov	r0, sl
 8004866:	4659      	mov	r1, fp
 8004868:	f7fb fd0a 	bl	8000280 <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <UART_SetConfig+0x38c>)
 8004872:	fba3 1302 	umull	r1, r3, r3, r2
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2164      	movs	r1, #100	; 0x64
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	3332      	adds	r3, #50	; 0x32
 8004884:	4a09      	ldr	r2, [pc, #36]	; (80048ac <UART_SetConfig+0x38c>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	f003 020f 	and.w	r2, r3, #15
 8004890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4432      	add	r2, r6
 8004896:	609a      	str	r2, [r3, #8]
}
 8004898:	bf00      	nop
 800489a:	377c      	adds	r7, #124	; 0x7c
 800489c:	46bd      	mov	sp, r7
 800489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a2:	bf00      	nop
 80048a4:	40011000 	.word	0x40011000
 80048a8:	40011400 	.word	0x40011400
 80048ac:	51eb851f 	.word	0x51eb851f

080048b0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80048b0:	b084      	sub	sp, #16
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	f107 001c 	add.w	r0, r7, #28
 80048be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80048c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80048c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80048ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80048ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80048d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80048d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80048da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80048ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	b004      	add	sp, #16
 8004904:	4770      	bx	lr

08004906 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2203      	movs	r2, #3
 800494e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004950:	2002      	movs	r0, #2
 8004952:	f7fc fdf9 	bl	8001548 <HAL_Delay>
  
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0303 	and.w	r3, r3, #3
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800499a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80049a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80049a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80049b6:	f023 030f 	bic.w	r3, r3, #15
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	b2db      	uxtb	r3, r3
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b085      	sub	sp, #20
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3314      	adds	r3, #20
 80049f8:	461a      	mov	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	4413      	add	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
}  
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a36:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004a3c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004a42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0

}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004a76:	2310      	movs	r3, #16
 8004a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a7a:	2340      	movs	r3, #64	; 0x40
 8004a7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a88:	f107 0308 	add.w	r3, r7, #8
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff ff74 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a98:	2110      	movs	r1, #16
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fa44 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004aa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3720      	adds	r7, #32
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004aba:	2311      	movs	r3, #17
 8004abc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004abe:	2340      	movs	r3, #64	; 0x40
 8004ac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004acc:	f107 0308 	add.w	r3, r7, #8
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff ff52 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	2111      	movs	r1, #17
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa22 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004ae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004afe:	2312      	movs	r3, #18
 8004b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b02:	2340      	movs	r3, #64	; 0x40
 8004b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b10:	f107 0308 	add.w	r3, r7, #8
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff30 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b20:	2112      	movs	r1, #18
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa00 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004b28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004b42:	2318      	movs	r3, #24
 8004b44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b46:	2340      	movs	r3, #64	; 0x40
 8004b48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b54:	f107 0308 	add.w	r3, r7, #8
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ff0e 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b64:	2118      	movs	r1, #24
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f9de 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3720      	adds	r7, #32
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004b86:	2319      	movs	r3, #25
 8004b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b8a:	2340      	movs	r3, #64	; 0x40
 8004b8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b98:	f107 0308 	add.w	r3, r7, #8
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff feec 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba8:	2119      	movs	r1, #25
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f9bc 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004bb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bb2:	69fb      	ldr	r3, [r7, #28]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004bc8:	230c      	movs	r3, #12
 8004bca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bcc:	2340      	movs	r3, #64	; 0x40
 8004bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bda:	f107 0308 	add.w	r3, r7, #8
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fecb 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <SDMMC_CmdStopTransfer+0x40>)
 8004be8:	210c      	movs	r1, #12
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f99c 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004bf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	05f5e100 	.word	0x05f5e100

08004c00 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004c10:	2307      	movs	r3, #7
 8004c12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c14:	2340      	movs	r3, #64	; 0x40
 8004c16:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c20:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c22:	f107 0310 	add.w	r3, r7, #16
 8004c26:	4619      	mov	r1, r3
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff fea7 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c32:	2107      	movs	r1, #7
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f977 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3728      	adds	r7, #40	; 0x28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b088      	sub	sp, #32
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c64:	f107 0308 	add.w	r3, r7, #8
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fe86 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f92d 	bl	8004ed0 <SDMMC_GetCmdError>
 8004c76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c78:	69fb      	ldr	r3, [r7, #28]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b088      	sub	sp, #32
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004c8a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004c8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004c90:	2308      	movs	r3, #8
 8004c92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c94:	2340      	movs	r3, #64	; 0x40
 8004c96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ca2:	f107 0308 	add.w	r3, r7, #8
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff fe67 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fb24 	bl	80052fc <SDMMC_GetCmdResp7>
 8004cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004cce:	2337      	movs	r3, #55	; 0x37
 8004cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cd2:	2340      	movs	r3, #64	; 0x40
 8004cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ce0:	f107 0308 	add.w	r3, r7, #8
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fe48 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	2137      	movs	r1, #55	; 0x37
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f918 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004d1a:	2329      	movs	r3, #41	; 0x29
 8004d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d1e:	2340      	movs	r3, #64	; 0x40
 8004d20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d2c:	f107 0308 	add.w	r3, r7, #8
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fe22 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fa2b 	bl	8005194 <SDMMC_GetCmdResp3>
 8004d3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d40:	69fb      	ldr	r3, [r7, #28]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3720      	adds	r7, #32
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b088      	sub	sp, #32
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004d58:	2306      	movs	r3, #6
 8004d5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d5c:	2340      	movs	r3, #64	; 0x40
 8004d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff fe03 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7a:	2106      	movs	r1, #6
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f8d3 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d84:	69fb      	ldr	r3, [r7, #28]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b088      	sub	sp, #32
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004d9a:	2333      	movs	r3, #51	; 0x33
 8004d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d9e:	2340      	movs	r3, #64	; 0x40
 8004da0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004daa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dac:	f107 0308 	add.w	r3, r7, #8
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff fde2 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbc:	2133      	movs	r1, #51	; 0x33
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8b2 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004de0:	23c0      	movs	r3, #192	; 0xc0
 8004de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff fdc1 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f982 	bl	8005104 <SDMMC_GetCmdResp2>
 8004e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e02:	69fb      	ldr	r3, [r7, #28]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004e1a:	2309      	movs	r3, #9
 8004e1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e1e:	23c0      	movs	r3, #192	; 0xc0
 8004e20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e2c:	f107 0308 	add.w	r3, r7, #8
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fda2 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f963 	bl	8005104 <SDMMC_GetCmdResp2>
 8004e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e40:	69fb      	ldr	r3, [r7, #28]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b088      	sub	sp, #32
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e5c:	2340      	movs	r3, #64	; 0x40
 8004e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e6a:	f107 0308 	add.w	r3, r7, #8
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fd83 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	2103      	movs	r1, #3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f9c8 	bl	8005210 <SDMMC_GetCmdResp6>
 8004e80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e82:	69fb      	ldr	r3, [r7, #28]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004e9a:	230d      	movs	r3, #13
 8004e9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e9e:	2340      	movs	r3, #64	; 0x40
 8004ea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eac:	f107 0308 	add.w	r3, r7, #8
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fd62 	bl	800497c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ebc:	210d      	movs	r1, #13
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f832 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <SDMMC_GetCmdError+0x50>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <SDMMC_GetCmdError+0x54>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	0a5b      	lsrs	r3, r3, #9
 8004ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee8:	fb02 f303 	mul.w	r3, r2, r3
 8004eec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1e5a      	subs	r2, r3, #1
 8004ef2:	60fa      	str	r2, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004efc:	e009      	b.n	8004f12 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f1      	beq.n	8004eee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	22c5      	movs	r2, #197	; 0xc5
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000000 	.word	0x20000000
 8004f24:	10624dd3 	.word	0x10624dd3

08004f28 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	460b      	mov	r3, r1
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004f36:	4b70      	ldr	r3, [pc, #448]	; (80050f8 <SDMMC_GetCmdResp1+0x1d0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a70      	ldr	r2, [pc, #448]	; (80050fc <SDMMC_GetCmdResp1+0x1d4>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	0a5a      	lsrs	r2, r3, #9
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	fb02 f303 	mul.w	r3, r2, r3
 8004f48:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	1e5a      	subs	r2, r3, #1
 8004f4e:	61fa      	str	r2, [r7, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f58:	e0c9      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0ef      	beq.n	8004f4a <SDMMC_GetCmdResp1+0x22>
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ea      	bne.n	8004f4a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d004      	beq.n	8004f8a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2204      	movs	r2, #4
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f86:	2304      	movs	r3, #4
 8004f88:	e0b1      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d004      	beq.n	8004fa0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0a6      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	22c5      	movs	r2, #197	; 0xc5
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7ff fd12 	bl	80049d0 <SDIO_GetCommandResponse>
 8004fac:	4603      	mov	r3, r0
 8004fae:	461a      	mov	r2, r3
 8004fb0:	7afb      	ldrb	r3, [r7, #11]
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d001      	beq.n	8004fba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e099      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004fba:	2100      	movs	r1, #0
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7ff fd14 	bl	80049ea <SDIO_GetResponse>
 8004fc2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4b4e      	ldr	r3, [pc, #312]	; (8005100 <SDMMC_GetCmdResp1+0x1d8>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e08d      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	da02      	bge.n	8004fde <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004fd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fdc:	e087      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004fe8:	2340      	movs	r3, #64	; 0x40
 8004fea:	e080      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	e079      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005008:	e071      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005018:	e069      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005028:	e061      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005038:	e059      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005048:	e051      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005058:	e049      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005068:	e041      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005078:	e039      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005088:	e031      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005094:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005098:	e029      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80050a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050a8:	e021      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80050b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050b8:	e019      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80050c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80050c8:	e011      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80050d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050d8:	e009      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80050e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80050e8:	e001      	b.n	80050ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80050ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000000 	.word	0x20000000
 80050fc:	10624dd3 	.word	0x10624dd3
 8005100:	fdffe008 	.word	0xfdffe008

08005104 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800510c:	4b1f      	ldr	r3, [pc, #124]	; (800518c <SDMMC_GetCmdResp2+0x88>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1f      	ldr	r2, [pc, #124]	; (8005190 <SDMMC_GetCmdResp2+0x8c>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0a5b      	lsrs	r3, r3, #9
 8005118:	f241 3288 	movw	r2, #5000	; 0x1388
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1e5a      	subs	r2, r3, #1
 8005126:	60fa      	str	r2, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800512c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005130:	e026      	b.n	8005180 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005136:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ef      	beq.n	8005122 <SDMMC_GetCmdResp2+0x1e>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1ea      	bne.n	8005122 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d004      	beq.n	8005162 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2204      	movs	r2, #4
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800515e:	2304      	movs	r3, #4
 8005160:	e00e      	b.n	8005180 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005174:	2301      	movs	r3, #1
 8005176:	e003      	b.n	8005180 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	22c5      	movs	r2, #197	; 0xc5
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000000 	.word	0x20000000
 8005190:	10624dd3 	.word	0x10624dd3

08005194 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800519c:	4b1a      	ldr	r3, [pc, #104]	; (8005208 <SDMMC_GetCmdResp3+0x74>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1a      	ldr	r2, [pc, #104]	; (800520c <SDMMC_GetCmdResp3+0x78>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	0a5b      	lsrs	r3, r3, #9
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	fb02 f303 	mul.w	r3, r2, r3
 80051b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1e5a      	subs	r2, r3, #1
 80051b6:	60fa      	str	r2, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051c0:	e01b      	b.n	80051fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0ef      	beq.n	80051b2 <SDMMC_GetCmdResp3+0x1e>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1ea      	bne.n	80051b2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2204      	movs	r2, #4
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051ee:	2304      	movs	r3, #4
 80051f0:	e003      	b.n	80051fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	22c5      	movs	r2, #197	; 0xc5
 80051f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000000 	.word	0x20000000
 800520c:	10624dd3 	.word	0x10624dd3

08005210 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	460b      	mov	r3, r1
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800521e:	4b35      	ldr	r3, [pc, #212]	; (80052f4 <SDMMC_GetCmdResp6+0xe4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a35      	ldr	r2, [pc, #212]	; (80052f8 <SDMMC_GetCmdResp6+0xe8>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	0a5b      	lsrs	r3, r3, #9
 800522a:	f241 3288 	movw	r2, #5000	; 0x1388
 800522e:	fb02 f303 	mul.w	r3, r2, r3
 8005232:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	61fa      	str	r2, [r7, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800523e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005242:	e052      	b.n	80052ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005248:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ef      	beq.n	8005234 <SDMMC_GetCmdResp6+0x24>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ea      	bne.n	8005234 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2204      	movs	r2, #4
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005270:	2304      	movs	r3, #4
 8005272:	e03a      	b.n	80052ea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d004      	beq.n	800528a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005286:	2301      	movs	r3, #1
 8005288:	e02f      	b.n	80052ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7ff fba0 	bl	80049d0 <SDIO_GetCommandResponse>
 8005290:	4603      	mov	r3, r0
 8005292:	461a      	mov	r2, r3
 8005294:	7afb      	ldrb	r3, [r7, #11]
 8005296:	4293      	cmp	r3, r2
 8005298:	d001      	beq.n	800529e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800529a:	2301      	movs	r3, #1
 800529c:	e025      	b.n	80052ea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	22c5      	movs	r2, #197	; 0xc5
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80052a4:	2100      	movs	r1, #0
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff fb9f 	bl	80049ea <SDIO_GetResponse>
 80052ac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	0c1b      	lsrs	r3, r3, #16
 80052bc:	b29a      	uxth	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e011      	b.n	80052ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80052d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052d4:	e009      	b.n	80052ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052e4:	e001      	b.n	80052ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80052e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000000 	.word	0x20000000
 80052f8:	10624dd3 	.word	0x10624dd3

080052fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005304:	4b22      	ldr	r3, [pc, #136]	; (8005390 <SDMMC_GetCmdResp7+0x94>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a22      	ldr	r2, [pc, #136]	; (8005394 <SDMMC_GetCmdResp7+0x98>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	0a5b      	lsrs	r3, r3, #9
 8005310:	f241 3288 	movw	r2, #5000	; 0x1388
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1e5a      	subs	r2, r3, #1
 800531e:	60fa      	str	r2, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005328:	e02c      	b.n	8005384 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ef      	beq.n	800531a <SDMMC_GetCmdResp7+0x1e>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ea      	bne.n	800531a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2204      	movs	r2, #4
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005356:	2304      	movs	r3, #4
 8005358:	e014      	b.n	8005384 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800536c:	2301      	movs	r3, #1
 800536e:	e009      	b.n	8005384 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2240      	movs	r2, #64	; 0x40
 8005380:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005382:	2300      	movs	r3, #0
  
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	20000000 	.word	0x20000000
 8005394:	10624dd3 	.word	0x10624dd3

08005398 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800539c:	4904      	ldr	r1, [pc, #16]	; (80053b0 <MX_FATFS_Init+0x18>)
 800539e:	4805      	ldr	r0, [pc, #20]	; (80053b4 <MX_FATFS_Init+0x1c>)
 80053a0:	f002 ffc2 	bl	8008328 <FATFS_LinkDriver>
 80053a4:	4603      	mov	r3, r0
 80053a6:	461a      	mov	r2, r3
 80053a8:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <MX_FATFS_Init+0x20>)
 80053aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80053ac:	bf00      	nop
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	200007a8 	.word	0x200007a8
 80053b4:	08008db4 	.word	0x08008db4
 80053b8:	200007a4 	.word	0x200007a4

080053bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80053c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80053d6:	f000 f896 	bl	8005506 <BSP_SD_IsDetected>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d001      	beq.n	80053e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e012      	b.n	800540a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80053e4:	480b      	ldr	r0, [pc, #44]	; (8005414 <BSP_SD_Init+0x48>)
 80053e6:	f7fd fb95 	bl	8002b14 <HAL_SD_Init>
 80053ea:	4603      	mov	r3, r0
 80053ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d109      	bne.n	8005408 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80053f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053f8:	4806      	ldr	r0, [pc, #24]	; (8005414 <BSP_SD_Init+0x48>)
 80053fa:	f7fe f961 	bl	80036c0 <HAL_SD_ConfigWideBusOperation>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005408:	79fb      	ldrb	r3, [r7, #7]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000680 	.word	0x20000680

08005418 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	68f9      	ldr	r1, [r7, #12]
 800542e:	4806      	ldr	r0, [pc, #24]	; (8005448 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005430:	f7fd fc1e 	bl	8002c70 <HAL_SD_ReadBlocks_DMA>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20000680 	.word	0x20000680

0800544c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	68f9      	ldr	r1, [r7, #12]
 8005462:	4806      	ldr	r0, [pc, #24]	; (800547c <BSP_SD_WriteBlocks_DMA+0x30>)
 8005464:	f7fd fce6 	bl	8002e34 <HAL_SD_WriteBlocks_DMA>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000680 	.word	0x20000680

08005480 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005484:	4805      	ldr	r0, [pc, #20]	; (800549c <BSP_SD_GetCardState+0x1c>)
 8005486:	f7fe f9b5 	bl	80037f4 <HAL_SD_GetCardState>
 800548a:	4603      	mov	r3, r0
 800548c:	2b04      	cmp	r3, #4
 800548e:	bf14      	ite	ne
 8005490:	2301      	movne	r3, #1
 8005492:	2300      	moveq	r3, #0
 8005494:	b2db      	uxtb	r3, r3
}
 8005496:	4618      	mov	r0, r3
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000680 	.word	0x20000680

080054a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4803      	ldr	r0, [pc, #12]	; (80054b8 <BSP_SD_GetCardInfo+0x18>)
 80054ac:	f7fe f8dc 	bl	8003668 <HAL_SD_GetCardInfo>
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000680 	.word	0x20000680

080054bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80054c4:	f000 f818 	bl	80054f8 <BSP_SD_AbortCallback>
}
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80054d8:	f000 f98c 	bl	80057f4 <BSP_SD_WriteCpltCallback>
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80054ec:	f000 f98e 	bl	800580c <BSP_SD_ReadCpltCallback>
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0

}
 80054fc:	bf00      	nop
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800550c:	2301      	movs	r3, #1
 800550e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	b2db      	uxtb	r3, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005528:	f7fc f802 	bl	8001530 <HAL_GetTick>
 800552c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800552e:	e006      	b.n	800553e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005530:	f7ff ffa6 	bl	8005480 <BSP_SD_GetCardState>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800553a:	2300      	movs	r3, #0
 800553c:	e009      	b.n	8005552 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800553e:	f7fb fff7 	bl	8001530 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	429a      	cmp	r2, r3
 800554c:	d8f0      	bhi.n	8005530 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800554e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <SD_CheckStatus+0x38>)
 8005568:	2201      	movs	r2, #1
 800556a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800556c:	f7ff ff88 	bl	8005480 <BSP_SD_GetCardState>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d107      	bne.n	8005586 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005576:	4b07      	ldr	r3, [pc, #28]	; (8005594 <SD_CheckStatus+0x38>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	b2da      	uxtb	r2, r3
 8005582:	4b04      	ldr	r3, [pc, #16]	; (8005594 <SD_CheckStatus+0x38>)
 8005584:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005586:	4b03      	ldr	r3, [pc, #12]	; (8005594 <SD_CheckStatus+0x38>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	b2db      	uxtb	r3, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20000009 	.word	0x20000009

08005598 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80055a2:	f7ff ff13 	bl	80053cc <BSP_SD_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d107      	bne.n	80055bc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff ffd4 	bl	800555c <SD_CheckStatus>
 80055b4:	4603      	mov	r3, r0
 80055b6:	461a      	mov	r2, r3
 80055b8:	4b04      	ldr	r3, [pc, #16]	; (80055cc <SD_initialize+0x34>)
 80055ba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80055bc:	4b03      	ldr	r3, [pc, #12]	; (80055cc <SD_initialize+0x34>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	b2db      	uxtb	r3, r3
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000009 	.word	0x20000009

080055d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff ffbd 	bl	800555c <SD_CheckStatus>
 80055e2:	4603      	mov	r3, r0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005600:	f247 5030 	movw	r0, #30000	; 0x7530
 8005604:	f7ff ff8c 	bl	8005520 <SD_CheckStatusWithTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	da01      	bge.n	8005612 <SD_read+0x26>
  {
    return res;
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	e03b      	b.n	800568a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	68b8      	ldr	r0, [r7, #8]
 8005618:	f7ff fefe 	bl	8005418 <BSP_SD_ReadBlocks_DMA>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d132      	bne.n	8005688 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <SD_read+0xa8>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005628:	f7fb ff82 	bl	8001530 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800562e:	bf00      	nop
 8005630:	4b18      	ldr	r3, [pc, #96]	; (8005694 <SD_read+0xa8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d108      	bne.n	800564a <SD_read+0x5e>
 8005638:	f7fb ff7a 	bl	8001530 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f247 522f 	movw	r2, #29999	; 0x752f
 8005646:	4293      	cmp	r3, r2
 8005648:	d9f2      	bls.n	8005630 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <SD_read+0xa8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
 8005656:	e017      	b.n	8005688 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005658:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <SD_read+0xa8>)
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800565e:	f7fb ff67 	bl	8001530 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005664:	e007      	b.n	8005676 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005666:	f7ff ff0b 	bl	8005480 <BSP_SD_GetCardState>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d102      	bne.n	8005676 <SD_read+0x8a>
          {
            res = RES_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005674:	e008      	b.n	8005688 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005676:	f7fb ff5b 	bl	8001530 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	f247 522f 	movw	r2, #29999	; 0x752f
 8005684:	4293      	cmp	r3, r2
 8005686:	d9ee      	bls.n	8005666 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005688:	7dfb      	ldrb	r3, [r7, #23]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000094 	.word	0x20000094

08005698 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <SD_write+0xa8>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80056b2:	f247 5030 	movw	r0, #30000	; 0x7530
 80056b6:	f7ff ff33 	bl	8005520 <SD_CheckStatusWithTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	da01      	bge.n	80056c4 <SD_write+0x2c>
  {
    return res;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
 80056c2:	e038      	b.n	8005736 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	68b8      	ldr	r0, [r7, #8]
 80056ca:	f7ff febf 	bl	800544c <BSP_SD_WriteBlocks_DMA>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d12f      	bne.n	8005734 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80056d4:	f7fb ff2c 	bl	8001530 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80056da:	bf00      	nop
 80056dc:	4b18      	ldr	r3, [pc, #96]	; (8005740 <SD_write+0xa8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d108      	bne.n	80056f6 <SD_write+0x5e>
 80056e4:	f7fb ff24 	bl	8001530 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f247 522f 	movw	r2, #29999	; 0x752f
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d9f2      	bls.n	80056dc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <SD_write+0xa8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	75fb      	strb	r3, [r7, #23]
 8005702:	e017      	b.n	8005734 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005704:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <SD_write+0xa8>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800570a:	f7fb ff11 	bl	8001530 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005710:	e007      	b.n	8005722 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005712:	f7ff feb5 	bl	8005480 <BSP_SD_GetCardState>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <SD_write+0x8a>
          {
            res = RES_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	75fb      	strb	r3, [r7, #23]
            break;
 8005720:	e008      	b.n	8005734 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005722:	f7fb ff05 	bl	8001530 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f247 522f 	movw	r2, #29999	; 0x752f
 8005730:	4293      	cmp	r3, r2
 8005732:	d9ee      	bls.n	8005712 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005734:	7dfb      	ldrb	r3, [r7, #23]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000090 	.word	0x20000090

08005744 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08c      	sub	sp, #48	; 0x30
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	603a      	str	r2, [r7, #0]
 800574e:	71fb      	strb	r3, [r7, #7]
 8005750:	460b      	mov	r3, r1
 8005752:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800575a:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <SD_ioctl+0xac>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <SD_ioctl+0x28>
 8005768:	2303      	movs	r3, #3
 800576a:	e03c      	b.n	80057e6 <SD_ioctl+0xa2>

  switch (cmd)
 800576c:	79bb      	ldrb	r3, [r7, #6]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d834      	bhi.n	80057dc <SD_ioctl+0x98>
 8005772:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <SD_ioctl+0x34>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	08005789 	.word	0x08005789
 800577c:	08005791 	.word	0x08005791
 8005780:	080057a9 	.word	0x080057a9
 8005784:	080057c3 	.word	0x080057c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800578e:	e028      	b.n	80057e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005790:	f107 030c 	add.w	r3, r7, #12
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fe83 	bl	80054a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800579a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057a6:	e01c      	b.n	80057e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80057a8:	f107 030c 	add.w	r3, r7, #12
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fe77 	bl	80054a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057c0:	e00f      	b.n	80057e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80057c2:	f107 030c 	add.w	r3, r7, #12
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fe6a 	bl	80054a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	0a5a      	lsrs	r2, r3, #9
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057da:	e002      	b.n	80057e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80057dc:	2304      	movs	r3, #4
 80057de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80057e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3730      	adds	r7, #48	; 0x30
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000009 	.word	0x20000009

080057f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80057f8:	4b03      	ldr	r3, [pc, #12]	; (8005808 <BSP_SD_WriteCpltCallback+0x14>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
}
 80057fe:	bf00      	nop
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20000090 	.word	0x20000090

0800580c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005810:	4b03      	ldr	r3, [pc, #12]	; (8005820 <BSP_SD_ReadCpltCallback+0x14>)
 8005812:	2201      	movs	r2, #1
 8005814:	601a      	str	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	20000094 	.word	0x20000094

08005824 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	4a08      	ldr	r2, [pc, #32]	; (8005854 <disk_status+0x30>)
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	79fa      	ldrb	r2, [r7, #7]
 800583c:	4905      	ldr	r1, [pc, #20]	; (8005854 <disk_status+0x30>)
 800583e:	440a      	add	r2, r1
 8005840:	7a12      	ldrb	r2, [r2, #8]
 8005842:	4610      	mov	r0, r2
 8005844:	4798      	blx	r3
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
  return stat;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	200000c0 	.word	0x200000c0

08005858 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	4a0d      	ldr	r2, [pc, #52]	; (80058a0 <disk_initialize+0x48>)
 800586a:	5cd3      	ldrb	r3, [r2, r3]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d111      	bne.n	8005894 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	4a0b      	ldr	r2, [pc, #44]	; (80058a0 <disk_initialize+0x48>)
 8005874:	2101      	movs	r1, #1
 8005876:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <disk_initialize+0x48>)
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	79fa      	ldrb	r2, [r7, #7]
 8005886:	4906      	ldr	r1, [pc, #24]	; (80058a0 <disk_initialize+0x48>)
 8005888:	440a      	add	r2, r1
 800588a:	7a12      	ldrb	r2, [r2, #8]
 800588c:	4610      	mov	r0, r2
 800588e:	4798      	blx	r3
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	200000c0 	.word	0x200000c0

080058a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80058a4:	b590      	push	{r4, r7, lr}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	4603      	mov	r3, r0
 80058b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <disk_read+0x3c>)
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	689c      	ldr	r4, [r3, #8]
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	4a07      	ldr	r2, [pc, #28]	; (80058e0 <disk_read+0x3c>)
 80058c4:	4413      	add	r3, r2
 80058c6:	7a18      	ldrb	r0, [r3, #8]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	47a0      	blx	r4
 80058d0:	4603      	mov	r3, r0
 80058d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd90      	pop	{r4, r7, pc}
 80058de:	bf00      	nop
 80058e0:	200000c0 	.word	0x200000c0

080058e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <disk_write+0x3c>)
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68dc      	ldr	r4, [r3, #12]
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	4a07      	ldr	r2, [pc, #28]	; (8005920 <disk_write+0x3c>)
 8005904:	4413      	add	r3, r2
 8005906:	7a18      	ldrb	r0, [r3, #8]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	47a0      	blx	r4
 8005910:	4603      	mov	r3, r0
 8005912:	75fb      	strb	r3, [r7, #23]
  return res;
 8005914:	7dfb      	ldrb	r3, [r7, #23]
}
 8005916:	4618      	mov	r0, r3
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	bd90      	pop	{r4, r7, pc}
 800591e:	bf00      	nop
 8005920:	200000c0 	.word	0x200000c0

08005924 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	603a      	str	r2, [r7, #0]
 800592e:	71fb      	strb	r3, [r7, #7]
 8005930:	460b      	mov	r3, r1
 8005932:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	4a09      	ldr	r2, [pc, #36]	; (800595c <disk_ioctl+0x38>)
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	79fa      	ldrb	r2, [r7, #7]
 8005942:	4906      	ldr	r1, [pc, #24]	; (800595c <disk_ioctl+0x38>)
 8005944:	440a      	add	r2, r1
 8005946:	7a10      	ldrb	r0, [r2, #8]
 8005948:	79b9      	ldrb	r1, [r7, #6]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	4798      	blx	r3
 800594e:	4603      	mov	r3, r0
 8005950:	73fb      	strb	r3, [r7, #15]
  return res;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	200000c0 	.word	0x200000c0

08005960 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3301      	adds	r3, #1
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005970:	89fb      	ldrh	r3, [r7, #14]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	b21a      	sxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	b21b      	sxth	r3, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	b21b      	sxth	r3, r3
 8005980:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005982:	89fb      	ldrh	r3, [r7, #14]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3303      	adds	r3, #3
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	3202      	adds	r2, #2
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	3201      	adds	r2, #1
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	7812      	ldrb	r2, [r2, #0]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80059c8:	68fb      	ldr	r3, [r7, #12]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	460b      	mov	r3, r1
 80059e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	887a      	ldrh	r2, [r7, #2]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	887b      	ldrh	r3, [r7, #2]
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	887a      	ldrh	r2, [r7, #2]
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	0a1b      	lsrs	r3, r3, #8
 8005a26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	0a1b      	lsrs	r3, r3, #8
 8005a38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	0a1b      	lsrs	r3, r3, #8
 8005a4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	1c53      	adds	r3, r2, #1
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	1c59      	adds	r1, r3, #1
 8005a88:	6179      	str	r1, [r7, #20]
 8005a8a:	7812      	ldrb	r2, [r2, #0]
 8005a8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f1      	bne.n	8005a7e <mem_cpy+0x1a>
	}
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005aa6:	b480      	push	{r7}
 8005aa8:	b087      	sub	sp, #28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	617a      	str	r2, [r7, #20]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	607b      	str	r3, [r7, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f3      	bne.n	8005ab6 <mem_set+0x10>
}
 8005ace:	bf00      	nop
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005adc:	b480      	push	{r7}
 8005ade:	b089      	sub	sp, #36	; 0x24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	61fa      	str	r2, [r7, #28]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	4619      	mov	r1, r3
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	61ba      	str	r2, [r7, #24]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	1acb      	subs	r3, r1, r3
 8005b08:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <mem_cmp+0x40>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0eb      	beq.n	8005af4 <mem_cmp+0x18>

	return r;
 8005b1c:	697b      	ldr	r3, [r7, #20]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3724      	adds	r7, #36	; 0x24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005b34:	e002      	b.n	8005b3c <chk_chr+0x12>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	607b      	str	r3, [r7, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <chk_chr+0x26>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d1f2      	bne.n	8005b36 <chk_chr+0xc>
	return *str;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	781b      	ldrb	r3, [r3, #0]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e029      	b.n	8005bc8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b74:	4a27      	ldr	r2, [pc, #156]	; (8005c14 <chk_lock+0xb4>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	4413      	add	r3, r2
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01d      	beq.n	8005bbe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b82:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <chk_lock+0xb4>)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	4413      	add	r3, r2
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d116      	bne.n	8005bc2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b94:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <chk_lock+0xb4>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d10c      	bne.n	8005bc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ba8:	4a1a      	ldr	r2, [pc, #104]	; (8005c14 <chk_lock+0xb4>)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	4413      	add	r3, r2
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d102      	bne.n	8005bc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005bbc:	e007      	b.n	8005bce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d9d2      	bls.n	8005b74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d109      	bne.n	8005be8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <chk_lock+0x80>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d101      	bne.n	8005be4 <chk_lock+0x84>
 8005be0:	2300      	movs	r3, #0
 8005be2:	e010      	b.n	8005c06 <chk_lock+0xa6>
 8005be4:	2312      	movs	r3, #18
 8005be6:	e00e      	b.n	8005c06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d108      	bne.n	8005c00 <chk_lock+0xa0>
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <chk_lock+0xb4>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	4413      	add	r3, r2
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfe:	d101      	bne.n	8005c04 <chk_lock+0xa4>
 8005c00:	2310      	movs	r3, #16
 8005c02:	e000      	b.n	8005c06 <chk_lock+0xa6>
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	200000a0 	.word	0x200000a0

08005c18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	e002      	b.n	8005c2a <enq_lock+0x12>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d806      	bhi.n	8005c3e <enq_lock+0x26>
 8005c30:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <enq_lock+0x40>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	4413      	add	r3, r2
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f2      	bne.n	8005c24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	bf14      	ite	ne
 8005c44:	2301      	movne	r3, #1
 8005c46:	2300      	moveq	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	200000a0 	.word	0x200000a0

08005c5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e01f      	b.n	8005cac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c6c:	4a41      	ldr	r2, [pc, #260]	; (8005d74 <inc_lock+0x118>)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	4413      	add	r3, r2
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d113      	bne.n	8005ca6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c7e:	4a3d      	ldr	r2, [pc, #244]	; (8005d74 <inc_lock+0x118>)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	4413      	add	r3, r2
 8005c86:	3304      	adds	r3, #4
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d109      	bne.n	8005ca6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c92:	4a38      	ldr	r2, [pc, #224]	; (8005d74 <inc_lock+0x118>)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	4413      	add	r3, r2
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d006      	beq.n	8005cb4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d9dc      	bls.n	8005c6c <inc_lock+0x10>
 8005cb2:	e000      	b.n	8005cb6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005cb4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d132      	bne.n	8005d22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e002      	b.n	8005cc8 <inc_lock+0x6c>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d806      	bhi.n	8005cdc <inc_lock+0x80>
 8005cce:	4a29      	ldr	r2, [pc, #164]	; (8005d74 <inc_lock+0x118>)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	4413      	add	r3, r2
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f2      	bne.n	8005cc2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d101      	bne.n	8005ce6 <inc_lock+0x8a>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e040      	b.n	8005d68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4922      	ldr	r1, [pc, #136]	; (8005d74 <inc_lock+0x118>)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	440b      	add	r3, r1
 8005cf2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	491e      	ldr	r1, [pc, #120]	; (8005d74 <inc_lock+0x118>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	440b      	add	r3, r1
 8005d00:	3304      	adds	r3, #4
 8005d02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	491a      	ldr	r1, [pc, #104]	; (8005d74 <inc_lock+0x118>)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	440b      	add	r3, r1
 8005d10:	3308      	adds	r3, #8
 8005d12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d14:	4a17      	ldr	r2, [pc, #92]	; (8005d74 <inc_lock+0x118>)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	4413      	add	r3, r2
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	2200      	movs	r2, #0
 8005d20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <inc_lock+0xe0>
 8005d28:	4a12      	ldr	r2, [pc, #72]	; (8005d74 <inc_lock+0x118>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	4413      	add	r3, r2
 8005d30:	330c      	adds	r3, #12
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <inc_lock+0xe0>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e015      	b.n	8005d68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d108      	bne.n	8005d54 <inc_lock+0xf8>
 8005d42:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <inc_lock+0x118>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	4413      	add	r3, r2
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	e001      	b.n	8005d58 <inc_lock+0xfc>
 8005d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d58:	4906      	ldr	r1, [pc, #24]	; (8005d74 <inc_lock+0x118>)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	440b      	add	r3, r1
 8005d60:	330c      	adds	r3, #12
 8005d62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	200000a0 	.word	0x200000a0

08005d78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d825      	bhi.n	8005dd8 <dec_lock+0x60>
		n = Files[i].ctr;
 8005d8c:	4a17      	ldr	r2, [pc, #92]	; (8005dec <dec_lock+0x74>)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	4413      	add	r3, r2
 8005d94:	330c      	adds	r3, #12
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d9a:	89fb      	ldrh	r3, [r7, #14]
 8005d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da0:	d101      	bne.n	8005da6 <dec_lock+0x2e>
 8005da2:	2300      	movs	r3, #0
 8005da4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005da6:	89fb      	ldrh	r3, [r7, #14]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <dec_lock+0x3a>
 8005dac:	89fb      	ldrh	r3, [r7, #14]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005db2:	4a0e      	ldr	r2, [pc, #56]	; (8005dec <dec_lock+0x74>)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	4413      	add	r3, r2
 8005dba:	330c      	adds	r3, #12
 8005dbc:	89fa      	ldrh	r2, [r7, #14]
 8005dbe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005dc0:	89fb      	ldrh	r3, [r7, #14]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d105      	bne.n	8005dd2 <dec_lock+0x5a>
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <dec_lock+0x74>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	4413      	add	r3, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	737b      	strb	r3, [r7, #13]
 8005dd6:	e001      	b.n	8005ddc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005dd8:	2302      	movs	r3, #2
 8005dda:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005ddc:	7b7b      	ldrb	r3, [r7, #13]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	200000a0 	.word	0x200000a0

08005df0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	e010      	b.n	8005e20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005dfe:	4a0d      	ldr	r2, [pc, #52]	; (8005e34 <clear_lock+0x44>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	4413      	add	r3, r2
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d105      	bne.n	8005e1a <clear_lock+0x2a>
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <clear_lock+0x44>)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	4413      	add	r3, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d9eb      	bls.n	8005dfe <clear_lock+0xe>
	}
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	200000a0 	.word	0x200000a0

08005e38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	78db      	ldrb	r3, [r3, #3]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d034      	beq.n	8005eb6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7858      	ldrb	r0, [r3, #1]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	f7ff fd40 	bl	80058e4 <disk_write>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	73fb      	strb	r3, [r7, #15]
 8005e6e:	e022      	b.n	8005eb6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	1ad2      	subs	r2, r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d217      	bcs.n	8005eb6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	789b      	ldrb	r3, [r3, #2]
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	e010      	b.n	8005eb0 <sync_window+0x78>
					wsect += fs->fsize;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4413      	add	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	7858      	ldrb	r0, [r3, #1]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	f7ff fd1d 	bl	80058e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d8eb      	bhi.n	8005e8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d01b      	beq.n	8005f10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ffad 	bl	8005e38 <sync_window>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d113      	bne.n	8005f10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7858      	ldrb	r0, [r3, #1]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	f7ff fcd5 	bl	80058a4 <disk_read>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005f00:	f04f 33ff 	mov.w	r3, #4294967295
 8005f04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff ff87 	bl	8005e38 <sync_window>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d158      	bne.n	8005fe6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d148      	bne.n	8005fce <sync_fs+0xb2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	791b      	ldrb	r3, [r3, #4]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d144      	bne.n	8005fce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3330      	adds	r3, #48	; 0x30
 8005f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fda9 	bl	8005aa6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3330      	adds	r3, #48	; 0x30
 8005f58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f5c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fd38 	bl	80059d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3330      	adds	r3, #48	; 0x30
 8005f6a:	4921      	ldr	r1, [pc, #132]	; (8005ff0 <sync_fs+0xd4>)
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fd4d 	bl	8005a0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3330      	adds	r3, #48	; 0x30
 8005f76:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005f7a:	491e      	ldr	r1, [pc, #120]	; (8005ff4 <sync_fs+0xd8>)
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fd45 	bl	8005a0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3330      	adds	r3, #48	; 0x30
 8005f86:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4610      	mov	r0, r2
 8005f92:	f7ff fd3b 	bl	8005a0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3330      	adds	r3, #48	; 0x30
 8005f9a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7ff fd31 	bl	8005a0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	7858      	ldrb	r0, [r3, #1]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f7ff fc8e 	bl	80058e4 <disk_write>
			fs->fsi_flag = 0;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff fca4 	bl	8005924 <disk_ioctl>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <sync_fs+0xca>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	41615252 	.word	0x41615252
 8005ff4:	61417272 	.word	0x61417272

08005ff8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	3b02      	subs	r3, #2
 8006006:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	3b02      	subs	r3, #2
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d301      	bcc.n	8006018 <clust2sect+0x20>
 8006014:	2300      	movs	r3, #0
 8006016:	e008      	b.n	800602a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	895b      	ldrh	r3, [r3, #10]
 800601c:	461a      	mov	r2, r3
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	fb03 f202 	mul.w	r2, r3, r2
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	4413      	add	r3, r2
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b086      	sub	sp, #24
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d904      	bls.n	8006056 <get_fat+0x20>
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d302      	bcc.n	800605c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006056:	2301      	movs	r3, #1
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	e08f      	b.n	800617c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800605c:	f04f 33ff 	mov.w	r3, #4294967295
 8006060:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b03      	cmp	r3, #3
 8006068:	d062      	beq.n	8006130 <get_fat+0xfa>
 800606a:	2b03      	cmp	r3, #3
 800606c:	dc7c      	bgt.n	8006168 <get_fat+0x132>
 800606e:	2b01      	cmp	r3, #1
 8006070:	d002      	beq.n	8006078 <get_fat+0x42>
 8006072:	2b02      	cmp	r3, #2
 8006074:	d042      	beq.n	80060fc <get_fat+0xc6>
 8006076:	e077      	b.n	8006168 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	0a5b      	lsrs	r3, r3, #9
 800608e:	4413      	add	r3, r2
 8006090:	4619      	mov	r1, r3
 8006092:	6938      	ldr	r0, [r7, #16]
 8006094:	f7ff ff14 	bl	8005ec0 <move_window>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d167      	bne.n	800616e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	60fa      	str	r2, [r7, #12]
 80060a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	0a5b      	lsrs	r3, r3, #9
 80060ba:	4413      	add	r3, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	6938      	ldr	r0, [r7, #16]
 80060c0:	f7ff fefe 	bl	8005ec0 <move_window>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d153      	bne.n	8006172 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	461a      	mov	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <get_fat+0xbc>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	e002      	b.n	80060f8 <get_fat+0xc2>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f8:	617b      	str	r3, [r7, #20]
			break;
 80060fa:	e03f      	b.n	800617c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6a1a      	ldr	r2, [r3, #32]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	0a1b      	lsrs	r3, r3, #8
 8006104:	4413      	add	r3, r2
 8006106:	4619      	mov	r1, r3
 8006108:	6938      	ldr	r0, [r7, #16]
 800610a:	f7ff fed9 	bl	8005ec0 <move_window>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d130      	bne.n	8006176 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006122:	4413      	add	r3, r2
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fc1b 	bl	8005960 <ld_word>
 800612a:	4603      	mov	r3, r0
 800612c:	617b      	str	r3, [r7, #20]
			break;
 800612e:	e025      	b.n	800617c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	09db      	lsrs	r3, r3, #7
 8006138:	4413      	add	r3, r2
 800613a:	4619      	mov	r1, r3
 800613c:	6938      	ldr	r0, [r7, #16]
 800613e:	f7ff febf 	bl	8005ec0 <move_window>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d118      	bne.n	800617a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006156:	4413      	add	r3, r2
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fc19 	bl	8005990 <ld_dword>
 800615e:	4603      	mov	r3, r0
 8006160:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006164:	617b      	str	r3, [r7, #20]
			break;
 8006166:	e009      	b.n	800617c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006168:	2301      	movs	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e006      	b.n	800617c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800616e:	bf00      	nop
 8006170:	e004      	b.n	800617c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006172:	bf00      	nop
 8006174:	e002      	b.n	800617c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006176:	bf00      	nop
 8006178:	e000      	b.n	800617c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800617a:	bf00      	nop
		}
	}

	return val;
 800617c:	697b      	ldr	r3, [r7, #20]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006186:	b590      	push	{r4, r7, lr}
 8006188:	b089      	sub	sp, #36	; 0x24
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006192:	2302      	movs	r3, #2
 8006194:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b01      	cmp	r3, #1
 800619a:	f240 80d2 	bls.w	8006342 <put_fat+0x1bc>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	f080 80cc 	bcs.w	8006342 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	f000 8096 	beq.w	80062e0 <put_fat+0x15a>
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	f300 80cd 	bgt.w	8006354 <put_fat+0x1ce>
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d002      	beq.n	80061c4 <put_fat+0x3e>
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d06e      	beq.n	80062a0 <put_fat+0x11a>
 80061c2:	e0c7      	b.n	8006354 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4413      	add	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1a      	ldr	r2, [r3, #32]
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	0a5b      	lsrs	r3, r3, #9
 80061da:	4413      	add	r3, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff fe6e 	bl	8005ec0 <move_window>
 80061e4:	4603      	mov	r3, r0
 80061e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061e8:	7ffb      	ldrb	r3, [r7, #31]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f040 80ab 	bne.w	8006346 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	1c59      	adds	r1, r3, #1
 80061fa:	61b9      	str	r1, [r7, #24]
 80061fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006200:	4413      	add	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00d      	beq.n	800622a <put_fat+0xa4>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	b25b      	sxtb	r3, r3
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	b25a      	sxtb	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	b25b      	sxtb	r3, r3
 8006222:	4313      	orrs	r3, r2
 8006224:	b25b      	sxtb	r3, r3
 8006226:	b2db      	uxtb	r3, r3
 8006228:	e001      	b.n	800622e <put_fat+0xa8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a1a      	ldr	r2, [r3, #32]
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	0a5b      	lsrs	r3, r3, #9
 8006240:	4413      	add	r3, r2
 8006242:	4619      	mov	r1, r3
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fe3b 	bl	8005ec0 <move_window>
 800624a:	4603      	mov	r3, r0
 800624c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800624e:	7ffb      	ldrb	r3, [r7, #31]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d17a      	bne.n	800634a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	4413      	add	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <put_fat+0xf0>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	091b      	lsrs	r3, r3, #4
 8006272:	b2db      	uxtb	r3, r3
 8006274:	e00e      	b.n	8006294 <put_fat+0x10e>
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f023 030f 	bic.w	r3, r3, #15
 8006280:	b25a      	sxtb	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	b25b      	sxtb	r3, r3
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	b25b      	sxtb	r3, r3
 800628e:	4313      	orrs	r3, r2
 8006290:	b25b      	sxtb	r3, r3
 8006292:	b2db      	uxtb	r3, r3
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	70da      	strb	r2, [r3, #3]
			break;
 800629e:	e059      	b.n	8006354 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1a      	ldr	r2, [r3, #32]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	0a1b      	lsrs	r3, r3, #8
 80062a8:	4413      	add	r3, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fe07 	bl	8005ec0 <move_window>
 80062b2:	4603      	mov	r3, r0
 80062b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062b6:	7ffb      	ldrb	r3, [r7, #31]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d148      	bne.n	800634e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80062ca:	4413      	add	r3, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	b292      	uxth	r2, r2
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fb7f 	bl	80059d6 <st_word>
			fs->wflag = 1;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	70da      	strb	r2, [r3, #3]
			break;
 80062de:	e039      	b.n	8006354 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1a      	ldr	r2, [r3, #32]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	09db      	lsrs	r3, r3, #7
 80062e8:	4413      	add	r3, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7ff fde7 	bl	8005ec0 <move_window>
 80062f2:	4603      	mov	r3, r0
 80062f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062f6:	7ffb      	ldrb	r3, [r7, #31]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d12a      	bne.n	8006352 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006310:	4413      	add	r3, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fb3c 	bl	8005990 <ld_dword>
 8006318:	4603      	mov	r3, r0
 800631a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800631e:	4323      	orrs	r3, r4
 8006320:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006330:	4413      	add	r3, r2
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fb69 	bl	8005a0c <st_dword>
			fs->wflag = 1;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	70da      	strb	r2, [r3, #3]
			break;
 8006340:	e008      	b.n	8006354 <put_fat+0x1ce>
		}
	}
 8006342:	bf00      	nop
 8006344:	e006      	b.n	8006354 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006346:	bf00      	nop
 8006348:	e004      	b.n	8006354 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800634a:	bf00      	nop
 800634c:	e002      	b.n	8006354 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800634e:	bf00      	nop
 8006350:	e000      	b.n	8006354 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006352:	bf00      	nop
	return res;
 8006354:	7ffb      	ldrb	r3, [r7, #31]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3724      	adds	r7, #36	; 0x24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd90      	pop	{r4, r7, pc}

0800635e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b088      	sub	sp, #32
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d904      	bls.n	8006384 <remove_chain+0x26>
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	429a      	cmp	r2, r3
 8006382:	d301      	bcc.n	8006388 <remove_chain+0x2a>
 8006384:	2302      	movs	r3, #2
 8006386:	e04b      	b.n	8006420 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00c      	beq.n	80063a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800638e:	f04f 32ff 	mov.w	r2, #4294967295
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	69b8      	ldr	r0, [r7, #24]
 8006396:	f7ff fef6 	bl	8006186 <put_fat>
 800639a:	4603      	mov	r3, r0
 800639c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800639e:	7ffb      	ldrb	r3, [r7, #31]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <remove_chain+0x4a>
 80063a4:	7ffb      	ldrb	r3, [r7, #31]
 80063a6:	e03b      	b.n	8006420 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff fe43 	bl	8006036 <get_fat>
 80063b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d031      	beq.n	800641c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <remove_chain+0x64>
 80063be:	2302      	movs	r3, #2
 80063c0:	e02e      	b.n	8006420 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d101      	bne.n	80063ce <remove_chain+0x70>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e028      	b.n	8006420 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80063ce:	2200      	movs	r2, #0
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	69b8      	ldr	r0, [r7, #24]
 80063d4:	f7ff fed7 	bl	8006186 <put_fat>
 80063d8:	4603      	mov	r3, r0
 80063da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80063dc:	7ffb      	ldrb	r3, [r7, #31]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <remove_chain+0x88>
 80063e2:	7ffb      	ldrb	r3, [r7, #31]
 80063e4:	e01c      	b.n	8006420 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	3b02      	subs	r3, #2
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d20b      	bcs.n	800640c <remove_chain+0xae>
			fs->free_clst++;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	791b      	ldrb	r3, [r3, #4]
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	429a      	cmp	r2, r3
 8006418:	d3c6      	bcc.n	80063a8 <remove_chain+0x4a>
 800641a:	e000      	b.n	800641e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800641c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3720      	adds	r7, #32
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b088      	sub	sp, #32
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10d      	bne.n	800645a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <create_chain+0x2c>
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	429a      	cmp	r2, r3
 8006452:	d31b      	bcc.n	800648c <create_chain+0x64>
 8006454:	2301      	movs	r3, #1
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	e018      	b.n	800648c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fdea 	bl	8006036 <get_fat>
 8006462:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d801      	bhi.n	800646e <create_chain+0x46>
 800646a:	2301      	movs	r3, #1
 800646c:	e070      	b.n	8006550 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d101      	bne.n	800647a <create_chain+0x52>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	e06a      	b.n	8006550 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	429a      	cmp	r2, r3
 8006482:	d201      	bcs.n	8006488 <create_chain+0x60>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	e063      	b.n	8006550 <create_chain+0x128>
		scl = clst;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3301      	adds	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	429a      	cmp	r2, r3
 800649e:	d307      	bcc.n	80064b0 <create_chain+0x88>
				ncl = 2;
 80064a0:	2302      	movs	r3, #2
 80064a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d901      	bls.n	80064b0 <create_chain+0x88>
 80064ac:	2300      	movs	r3, #0
 80064ae:	e04f      	b.n	8006550 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80064b0:	69f9      	ldr	r1, [r7, #28]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fdbf 	bl	8006036 <get_fat>
 80064b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00e      	beq.n	80064de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d003      	beq.n	80064ce <create_chain+0xa6>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d101      	bne.n	80064d2 <create_chain+0xaa>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	e03e      	b.n	8006550 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d1da      	bne.n	8006490 <create_chain+0x68>
 80064da:	2300      	movs	r3, #0
 80064dc:	e038      	b.n	8006550 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80064de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80064e0:	f04f 32ff 	mov.w	r2, #4294967295
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	6938      	ldr	r0, [r7, #16]
 80064e8:	f7ff fe4d 	bl	8006186 <put_fat>
 80064ec:	4603      	mov	r3, r0
 80064ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <create_chain+0xe2>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d006      	beq.n	800650a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6938      	ldr	r0, [r7, #16]
 8006502:	f7ff fe40 	bl	8006186 <put_fat>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d116      	bne.n	800653e <create_chain+0x116>
		fs->last_clst = ncl;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	3b02      	subs	r3, #2
 8006520:	429a      	cmp	r2, r3
 8006522:	d804      	bhi.n	800652e <create_chain+0x106>
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	1e5a      	subs	r2, r3, #1
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	791b      	ldrb	r3, [r3, #4]
 8006532:	f043 0301 	orr.w	r3, r3, #1
 8006536:	b2da      	uxtb	r2, r3
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	711a      	strb	r2, [r3, #4]
 800653c:	e007      	b.n	800654e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d102      	bne.n	800654a <create_chain+0x122>
 8006544:	f04f 33ff 	mov.w	r3, #4294967295
 8006548:	e000      	b.n	800654c <create_chain+0x124>
 800654a:	2301      	movs	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800654e:	69fb      	ldr	r3, [r7, #28]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	3304      	adds	r3, #4
 800656e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	0a5b      	lsrs	r3, r3, #9
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	8952      	ldrh	r2, [r2, #10]
 8006578:	fbb3 f3f2 	udiv	r3, r3, r2
 800657c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1d1a      	adds	r2, r3, #4
 8006582:	613a      	str	r2, [r7, #16]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <clmt_clust+0x3a>
 800658e:	2300      	movs	r3, #0
 8006590:	e010      	b.n	80065b4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	429a      	cmp	r2, r3
 8006598:	d307      	bcc.n	80065aa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3304      	adds	r3, #4
 80065a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80065a8:	e7e9      	b.n	800657e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80065aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	4413      	add	r3, r2
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	371c      	adds	r7, #28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065d6:	d204      	bcs.n	80065e2 <dir_sdi+0x22>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80065e2:	2302      	movs	r3, #2
 80065e4:	e063      	b.n	80066ae <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d106      	bne.n	8006606 <dir_sdi+0x46>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d902      	bls.n	8006606 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10c      	bne.n	8006626 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	8912      	ldrh	r2, [r2, #8]
 8006614:	4293      	cmp	r3, r2
 8006616:	d301      	bcc.n	800661c <dir_sdi+0x5c>
 8006618:	2302      	movs	r3, #2
 800661a:	e048      	b.n	80066ae <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	61da      	str	r2, [r3, #28]
 8006624:	e029      	b.n	800667a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	895b      	ldrh	r3, [r3, #10]
 800662a:	025b      	lsls	r3, r3, #9
 800662c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800662e:	e019      	b.n	8006664 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6979      	ldr	r1, [r7, #20]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fcfe 	bl	8006036 <get_fat>
 800663a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006642:	d101      	bne.n	8006648 <dir_sdi+0x88>
 8006644:	2301      	movs	r3, #1
 8006646:	e032      	b.n	80066ae <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d904      	bls.n	8006658 <dir_sdi+0x98>
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	429a      	cmp	r2, r3
 8006656:	d301      	bcc.n	800665c <dir_sdi+0x9c>
 8006658:	2302      	movs	r3, #2
 800665a:	e028      	b.n	80066ae <dir_sdi+0xee>
			ofs -= csz;
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	429a      	cmp	r2, r3
 800666a:	d2e1      	bcs.n	8006630 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800666c:	6979      	ldr	r1, [r7, #20]
 800666e:	6938      	ldr	r0, [r7, #16]
 8006670:	f7ff fcc2 	bl	8005ff8 <clust2sect>
 8006674:	4602      	mov	r2, r0
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <dir_sdi+0xcc>
 8006688:	2302      	movs	r3, #2
 800668a:	e010      	b.n	80066ae <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	0a5b      	lsrs	r3, r3, #9
 8006694:	441a      	add	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a6:	441a      	add	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b086      	sub	sp, #24
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	3320      	adds	r3, #32
 80066cc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <dir_next+0x28>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066dc:	d301      	bcc.n	80066e2 <dir_next+0x2c>
 80066de:	2304      	movs	r3, #4
 80066e0:	e0aa      	b.n	8006838 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f040 8098 	bne.w	800681e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10b      	bne.n	8006718 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	095b      	lsrs	r3, r3, #5
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	8912      	ldrh	r2, [r2, #8]
 8006708:	4293      	cmp	r3, r2
 800670a:	f0c0 8088 	bcc.w	800681e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	61da      	str	r2, [r3, #28]
 8006714:	2304      	movs	r3, #4
 8006716:	e08f      	b.n	8006838 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	0a5b      	lsrs	r3, r3, #9
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	8952      	ldrh	r2, [r2, #10]
 8006720:	3a01      	subs	r2, #1
 8006722:	4013      	ands	r3, r2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d17a      	bne.n	800681e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	4619      	mov	r1, r3
 8006730:	4610      	mov	r0, r2
 8006732:	f7ff fc80 	bl	8006036 <get_fat>
 8006736:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d801      	bhi.n	8006742 <dir_next+0x8c>
 800673e:	2302      	movs	r3, #2
 8006740:	e07a      	b.n	8006838 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d101      	bne.n	800674e <dir_next+0x98>
 800674a:	2301      	movs	r3, #1
 800674c:	e074      	b.n	8006838 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	429a      	cmp	r2, r3
 8006756:	d358      	bcc.n	800680a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	61da      	str	r2, [r3, #28]
 8006764:	2304      	movs	r3, #4
 8006766:	e067      	b.n	8006838 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	4619      	mov	r1, r3
 8006770:	4610      	mov	r0, r2
 8006772:	f7ff fe59 	bl	8006428 <create_chain>
 8006776:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <dir_next+0xcc>
 800677e:	2307      	movs	r3, #7
 8006780:	e05a      	b.n	8006838 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <dir_next+0xd6>
 8006788:	2302      	movs	r3, #2
 800678a:	e055      	b.n	8006838 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d101      	bne.n	8006798 <dir_next+0xe2>
 8006794:	2301      	movs	r3, #1
 8006796:	e04f      	b.n	8006838 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff fb4d 	bl	8005e38 <sync_window>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <dir_next+0xf2>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e047      	b.n	8006838 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3330      	adds	r3, #48	; 0x30
 80067ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b0:	2100      	movs	r1, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff f977 	bl	8005aa6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067b8:	2300      	movs	r3, #0
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	6979      	ldr	r1, [r7, #20]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff fc1a 	bl	8005ff8 <clust2sect>
 80067c4:	4602      	mov	r2, r0
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80067ca:	e012      	b.n	80067f2 <dir_next+0x13c>
						fs->wflag = 1;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f7ff fb30 	bl	8005e38 <sync_window>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <dir_next+0x12c>
 80067de:	2301      	movs	r3, #1
 80067e0:	e02a      	b.n	8006838 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3301      	adds	r3, #1
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	895b      	ldrh	r3, [r3, #10]
 80067f6:	461a      	mov	r2, r3
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d3e6      	bcc.n	80067cc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad2      	subs	r2, r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7ff fbf0 	bl	8005ff8 <clust2sect>
 8006818:	4602      	mov	r2, r0
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006830:	441a      	add	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006850:	2100      	movs	r1, #0
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff feb4 	bl	80065c0 <dir_sdi>
 8006858:	4603      	mov	r3, r0
 800685a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d12b      	bne.n	80068ba <dir_alloc+0x7a>
		n = 0;
 8006862:	2300      	movs	r3, #0
 8006864:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	4619      	mov	r1, r3
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff fb27 	bl	8005ec0 <move_window>
 8006872:	4603      	mov	r3, r0
 8006874:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d11d      	bne.n	80068b8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2be5      	cmp	r3, #229	; 0xe5
 8006884:	d004      	beq.n	8006890 <dir_alloc+0x50>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d107      	bne.n	80068a0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	3301      	adds	r3, #1
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d102      	bne.n	80068a4 <dir_alloc+0x64>
 800689e:	e00c      	b.n	80068ba <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80068a4:	2101      	movs	r1, #1
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff ff05 	bl	80066b6 <dir_next>
 80068ac:	4603      	mov	r3, r0
 80068ae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0d7      	beq.n	8006866 <dir_alloc+0x26>
 80068b6:	e000      	b.n	80068ba <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80068b8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d101      	bne.n	80068c4 <dir_alloc+0x84>
 80068c0:	2307      	movs	r3, #7
 80068c2:	75fb      	strb	r3, [r7, #23]
	return res;
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	331a      	adds	r3, #26
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff f83f 	bl	8005960 <ld_word>
 80068e2:	4603      	mov	r3, r0
 80068e4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d109      	bne.n	8006902 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff f834 	bl	8005960 <ld_word>
 80068f8:	4603      	mov	r3, r0
 80068fa:	041b      	lsls	r3, r3, #16
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006902:	68fb      	ldr	r3, [r7, #12]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	331a      	adds	r3, #26
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	b292      	uxth	r2, r2
 8006920:	4611      	mov	r1, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff f857 	bl	80059d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b03      	cmp	r3, #3
 800692e:	d109      	bne.n	8006944 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f103 0214 	add.w	r2, r3, #20
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	b29b      	uxth	r3, r3
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f7ff f849 	bl	80059d6 <st_word>
	}
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800695a:	2100      	movs	r1, #0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fe2f 	bl	80065c0 <dir_sdi>
 8006962:	4603      	mov	r3, r0
 8006964:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <dir_find+0x24>
 800696c:	7dfb      	ldrb	r3, [r7, #23]
 800696e:	e03e      	b.n	80069ee <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	4619      	mov	r1, r3
 8006976:	6938      	ldr	r0, [r7, #16]
 8006978:	f7ff faa2 	bl	8005ec0 <move_window>
 800697c:	4603      	mov	r3, r0
 800697e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d12f      	bne.n	80069e6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <dir_find+0x4e>
 8006994:	2304      	movs	r3, #4
 8006996:	75fb      	strb	r3, [r7, #23]
 8006998:	e028      	b.n	80069ec <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	330b      	adds	r3, #11
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	330b      	adds	r3, #11
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <dir_find+0x86>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a18      	ldr	r0, [r3, #32]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3324      	adds	r3, #36	; 0x24
 80069c4:	220b      	movs	r2, #11
 80069c6:	4619      	mov	r1, r3
 80069c8:	f7ff f888 	bl	8005adc <mem_cmp>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00b      	beq.n	80069ea <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80069d2:	2100      	movs	r1, #0
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff fe6e 	bl	80066b6 <dir_next>
 80069da:	4603      	mov	r3, r0
 80069dc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0c5      	beq.n	8006970 <dir_find+0x24>
 80069e4:	e002      	b.n	80069ec <dir_find+0xa0>
		if (res != FR_OK) break;
 80069e6:	bf00      	nop
 80069e8:	e000      	b.n	80069ec <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80069ea:	bf00      	nop

	return res;
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006a04:	2101      	movs	r1, #1
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff ff1a 	bl	8006840 <dir_alloc>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d11c      	bne.n	8006a50 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	68b8      	ldr	r0, [r7, #8]
 8006a1e:	f7ff fa4f 	bl	8005ec0 <move_window>
 8006a22:	4603      	mov	r3, r0
 8006a24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d111      	bne.n	8006a50 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	2220      	movs	r2, #32
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff f836 	bl	8005aa6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a18      	ldr	r0, [r3, #32]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3324      	adds	r3, #36	; 0x24
 8006a42:	220b      	movs	r2, #11
 8006a44:	4619      	mov	r1, r3
 8006a46:	f7ff f80d 	bl	8005a64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3324      	adds	r3, #36	; 0x24
 8006a70:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006a72:	220b      	movs	r2, #11
 8006a74:	2120      	movs	r1, #32
 8006a76:	68b8      	ldr	r0, [r7, #8]
 8006a78:	f7ff f815 	bl	8005aa6 <mem_set>
	si = i = 0; ni = 8;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	2308      	movs	r3, #8
 8006a86:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	61fa      	str	r2, [r7, #28]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006a96:	7efb      	ldrb	r3, [r7, #27]
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d94e      	bls.n	8006b3a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006a9c:	7efb      	ldrb	r3, [r7, #27]
 8006a9e:	2b2f      	cmp	r3, #47	; 0x2f
 8006aa0:	d006      	beq.n	8006ab0 <create_name+0x54>
 8006aa2:	7efb      	ldrb	r3, [r7, #27]
 8006aa4:	2b5c      	cmp	r3, #92	; 0x5c
 8006aa6:	d110      	bne.n	8006aca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006aa8:	e002      	b.n	8006ab0 <create_name+0x54>
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	3301      	adds	r3, #1
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b2f      	cmp	r3, #47	; 0x2f
 8006aba:	d0f6      	beq.n	8006aaa <create_name+0x4e>
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b5c      	cmp	r3, #92	; 0x5c
 8006ac6:	d0f0      	beq.n	8006aaa <create_name+0x4e>
			break;
 8006ac8:	e038      	b.n	8006b3c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006aca:	7efb      	ldrb	r3, [r7, #27]
 8006acc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ace:	d003      	beq.n	8006ad8 <create_name+0x7c>
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d30c      	bcc.n	8006af2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b0b      	cmp	r3, #11
 8006adc:	d002      	beq.n	8006ae4 <create_name+0x88>
 8006ade:	7efb      	ldrb	r3, [r7, #27]
 8006ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ae2:	d001      	beq.n	8006ae8 <create_name+0x8c>
 8006ae4:	2306      	movs	r3, #6
 8006ae6:	e044      	b.n	8006b72 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006ae8:	2308      	movs	r3, #8
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	230b      	movs	r3, #11
 8006aee:	617b      	str	r3, [r7, #20]
			continue;
 8006af0:	e022      	b.n	8006b38 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006af2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	da04      	bge.n	8006b04 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006afa:	7efb      	ldrb	r3, [r7, #27]
 8006afc:	3b80      	subs	r3, #128	; 0x80
 8006afe:	4a1f      	ldr	r2, [pc, #124]	; (8006b7c <create_name+0x120>)
 8006b00:	5cd3      	ldrb	r3, [r2, r3]
 8006b02:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006b04:	7efb      	ldrb	r3, [r7, #27]
 8006b06:	4619      	mov	r1, r3
 8006b08:	481d      	ldr	r0, [pc, #116]	; (8006b80 <create_name+0x124>)
 8006b0a:	f7ff f80e 	bl	8005b2a <chk_chr>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <create_name+0xbc>
 8006b14:	2306      	movs	r3, #6
 8006b16:	e02c      	b.n	8006b72 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006b18:	7efb      	ldrb	r3, [r7, #27]
 8006b1a:	2b60      	cmp	r3, #96	; 0x60
 8006b1c:	d905      	bls.n	8006b2a <create_name+0xce>
 8006b1e:	7efb      	ldrb	r3, [r7, #27]
 8006b20:	2b7a      	cmp	r3, #122	; 0x7a
 8006b22:	d802      	bhi.n	8006b2a <create_name+0xce>
 8006b24:	7efb      	ldrb	r3, [r7, #27]
 8006b26:	3b20      	subs	r3, #32
 8006b28:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	613a      	str	r2, [r7, #16]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	4413      	add	r3, r2
 8006b34:	7efa      	ldrb	r2, [r7, #27]
 8006b36:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006b38:	e7a6      	b.n	8006a88 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006b3a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	441a      	add	r2, r3
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <create_name+0xf4>
 8006b4c:	2306      	movs	r3, #6
 8006b4e:	e010      	b.n	8006b72 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2be5      	cmp	r3, #229	; 0xe5
 8006b56:	d102      	bne.n	8006b5e <create_name+0x102>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2205      	movs	r2, #5
 8006b5c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006b5e:	7efb      	ldrb	r3, [r7, #27]
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d801      	bhi.n	8006b68 <create_name+0x10c>
 8006b64:	2204      	movs	r2, #4
 8006b66:	e000      	b.n	8006b6a <create_name+0x10e>
 8006b68:	2200      	movs	r2, #0
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	330b      	adds	r3, #11
 8006b6e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006b70:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3720      	adds	r7, #32
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	08008dc8 	.word	0x08008dc8
 8006b80:	08008ce0 	.word	0x08008ce0

08006b84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006b98:	e002      	b.n	8006ba0 <follow_path+0x1c>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b2f      	cmp	r3, #47	; 0x2f
 8006ba6:	d0f8      	beq.n	8006b9a <follow_path+0x16>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b5c      	cmp	r3, #92	; 0x5c
 8006bae:	d0f4      	beq.n	8006b9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b1f      	cmp	r3, #31
 8006bbc:	d80a      	bhi.n	8006bd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2280      	movs	r2, #128	; 0x80
 8006bc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff fcf9 	bl	80065c0 <dir_sdi>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]
 8006bd2:	e043      	b.n	8006c5c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bd4:	463b      	mov	r3, r7
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff ff3f 	bl	8006a5c <create_name>
 8006bde:	4603      	mov	r3, r0
 8006be0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d134      	bne.n	8006c52 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff feaf 	bl	800694c <dir_find>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bf8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d127      	bne.n	8006c56 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d122      	bne.n	8006c56 <follow_path+0xd2>
 8006c10:	2305      	movs	r3, #5
 8006c12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006c14:	e01f      	b.n	8006c56 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11c      	bne.n	8006c5a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	799b      	ldrb	r3, [r3, #6]
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006c2c:	2305      	movs	r3, #5
 8006c2e:	75fb      	strb	r3, [r7, #23]
 8006c30:	e014      	b.n	8006c5c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c40:	4413      	add	r3, r2
 8006c42:	4619      	mov	r1, r3
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f7ff fe42 	bl	80068ce <ld_clust>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c50:	e7c0      	b.n	8006bd4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006c52:	bf00      	nop
 8006c54:	e002      	b.n	8006c5c <follow_path+0xd8>
				break;
 8006c56:	bf00      	nop
 8006c58:	e000      	b.n	8006c5c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c5a:	bf00      	nop
			}
		}
	}

	return res;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b087      	sub	sp, #28
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c72:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d031      	beq.n	8006ce0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	e002      	b.n	8006c8a <get_ldnumber+0x24>
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	3301      	adds	r3, #1
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d903      	bls.n	8006c9a <get_ldnumber+0x34>
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b3a      	cmp	r3, #58	; 0x3a
 8006c98:	d1f4      	bne.n	8006c84 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b3a      	cmp	r3, #58	; 0x3a
 8006ca0:	d11c      	bne.n	8006cdc <get_ldnumber+0x76>
			tp = *path;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	60fa      	str	r2, [r7, #12]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	3b30      	subs	r3, #48	; 0x30
 8006cb2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	d80e      	bhi.n	8006cd8 <get_ldnumber+0x72>
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d10a      	bne.n	8006cd8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d107      	bne.n	8006cd8 <get_ldnumber+0x72>
					vol = (int)i;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	e002      	b.n	8006ce2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006cdc:	2300      	movs	r3, #0
 8006cde:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ce0:	693b      	ldr	r3, [r7, #16]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	70da      	strb	r2, [r3, #3]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f04f 32ff 	mov.w	r2, #4294967295
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff f8d8 	bl	8005ec0 <move_window>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <check_fs+0x2a>
 8006d16:	2304      	movs	r3, #4
 8006d18:	e038      	b.n	8006d8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3330      	adds	r3, #48	; 0x30
 8006d1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fe1c 	bl	8005960 <ld_word>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d001      	beq.n	8006d38 <check_fs+0x48>
 8006d34:	2303      	movs	r3, #3
 8006d36:	e029      	b.n	8006d8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d3e:	2be9      	cmp	r3, #233	; 0xe9
 8006d40:	d009      	beq.n	8006d56 <check_fs+0x66>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d48:	2beb      	cmp	r3, #235	; 0xeb
 8006d4a:	d11e      	bne.n	8006d8a <check_fs+0x9a>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d52:	2b90      	cmp	r3, #144	; 0x90
 8006d54:	d119      	bne.n	8006d8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3330      	adds	r3, #48	; 0x30
 8006d5a:	3336      	adds	r3, #54	; 0x36
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe fe17 	bl	8005990 <ld_dword>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d68:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <check_fs+0xa4>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d101      	bne.n	8006d72 <check_fs+0x82>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e00c      	b.n	8006d8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3330      	adds	r3, #48	; 0x30
 8006d76:	3352      	adds	r3, #82	; 0x52
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe fe09 	bl	8005990 <ld_dword>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4a05      	ldr	r2, [pc, #20]	; (8006d98 <check_fs+0xa8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d101      	bne.n	8006d8a <check_fs+0x9a>
 8006d86:	2300      	movs	r3, #0
 8006d88:	e000      	b.n	8006d8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006d8a:	2302      	movs	r3, #2
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	00544146 	.word	0x00544146
 8006d98:	33544146 	.word	0x33544146

08006d9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b096      	sub	sp, #88	; 0x58
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff ff58 	bl	8006c66 <get_ldnumber>
 8006db6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	da01      	bge.n	8006dc2 <find_volume+0x26>
 8006dbe:	230b      	movs	r3, #11
 8006dc0:	e22e      	b.n	8007220 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006dc2:	4aa8      	ldr	r2, [pc, #672]	; (8007064 <find_volume+0x2c8>)
 8006dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <find_volume+0x3a>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	e224      	b.n	8007220 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	f023 0301 	bic.w	r3, r3, #1
 8006de2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01a      	beq.n	8006e22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	785b      	ldrb	r3, [r3, #1]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe fd17 	bl	8005824 <disk_status>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006dfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10c      	bne.n	8006e22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <find_volume+0x82>
 8006e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006e1a:	230a      	movs	r3, #10
 8006e1c:	e200      	b.n	8007220 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e1fe      	b.n	8007220 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	2200      	movs	r2, #0
 8006e26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe fd0f 	bl	8005858 <disk_initialize>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006e40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e1e7      	b.n	8007220 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d007      	beq.n	8006e66 <find_volume+0xca>
 8006e56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006e62:	230a      	movs	r3, #10
 8006e64:	e1dc      	b.n	8007220 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006e6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e6e:	f7ff ff3f 	bl	8006cf0 <check_fs>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006e78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d14b      	bne.n	8006f18 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e80:	2300      	movs	r3, #0
 8006e82:	643b      	str	r3, [r7, #64]	; 0x40
 8006e84:	e01f      	b.n	8006ec6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006e94:	4413      	add	r3, r2
 8006e96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d006      	beq.n	8006eb0 <find_volume+0x114>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fe fd72 	bl	8005990 <ld_dword>
 8006eac:	4602      	mov	r2, r0
 8006eae:	e000      	b.n	8006eb2 <find_volume+0x116>
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006eba:	440b      	add	r3, r1
 8006ebc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d9dc      	bls.n	8006e86 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006ecc:	2300      	movs	r3, #0
 8006ece:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <find_volume+0x140>
 8006ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006eea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <find_volume+0x162>
 8006ef2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ef6:	f7ff fefb 	bl	8006cf0 <check_fs>
 8006efa:	4603      	mov	r3, r0
 8006efc:	e000      	b.n	8006f00 <find_volume+0x164>
 8006efe:	2303      	movs	r3, #3
 8006f00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d905      	bls.n	8006f18 <find_volume+0x17c>
 8006f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0e:	3301      	adds	r3, #1
 8006f10:	643b      	str	r3, [r7, #64]	; 0x40
 8006f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d9e1      	bls.n	8006edc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d101      	bne.n	8006f24 <find_volume+0x188>
 8006f20:	2301      	movs	r3, #1
 8006f22:	e17d      	b.n	8007220 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d901      	bls.n	8006f30 <find_volume+0x194>
 8006f2c:	230d      	movs	r3, #13
 8006f2e:	e177      	b.n	8007220 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	3330      	adds	r3, #48	; 0x30
 8006f34:	330b      	adds	r3, #11
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fd12 	bl	8005960 <ld_word>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f42:	d001      	beq.n	8006f48 <find_volume+0x1ac>
 8006f44:	230d      	movs	r3, #13
 8006f46:	e16b      	b.n	8007220 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	3330      	adds	r3, #48	; 0x30
 8006f4c:	3316      	adds	r3, #22
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fd06 	bl	8005960 <ld_word>
 8006f54:	4603      	mov	r3, r0
 8006f56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <find_volume+0x1d0>
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	3330      	adds	r3, #48	; 0x30
 8006f62:	3324      	adds	r3, #36	; 0x24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe fd13 	bl	8005990 <ld_dword>
 8006f6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f70:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	789b      	ldrb	r3, [r3, #2]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d005      	beq.n	8006f90 <find_volume+0x1f4>
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	789b      	ldrb	r3, [r3, #2]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d001      	beq.n	8006f90 <find_volume+0x1f4>
 8006f8c:	230d      	movs	r3, #13
 8006f8e:	e147      	b.n	8007220 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	789b      	ldrb	r3, [r3, #2]
 8006f94:	461a      	mov	r2, r3
 8006f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f98:	fb02 f303 	mul.w	r3, r2, r3
 8006f9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	895b      	ldrh	r3, [r3, #10]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d008      	beq.n	8006fc4 <find_volume+0x228>
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	895b      	ldrh	r3, [r3, #10]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	895b      	ldrh	r3, [r3, #10]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <find_volume+0x22c>
 8006fc4:	230d      	movs	r3, #13
 8006fc6:	e12b      	b.n	8007220 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fca:	3330      	adds	r3, #48	; 0x30
 8006fcc:	3311      	adds	r3, #17
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fe fcc6 	bl	8005960 <ld_word>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	891b      	ldrh	r3, [r3, #8]
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <find_volume+0x252>
 8006fea:	230d      	movs	r3, #13
 8006fec:	e118      	b.n	8007220 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	3330      	adds	r3, #48	; 0x30
 8006ff2:	3313      	adds	r3, #19
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fcb3 	bl	8005960 <ld_word>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007000:	2b00      	cmp	r3, #0
 8007002:	d106      	bne.n	8007012 <find_volume+0x276>
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	3330      	adds	r3, #48	; 0x30
 8007008:	3320      	adds	r3, #32
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe fcc0 	bl	8005990 <ld_dword>
 8007010:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	3330      	adds	r3, #48	; 0x30
 8007016:	330e      	adds	r3, #14
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe fca1 	bl	8005960 <ld_word>
 800701e:	4603      	mov	r3, r0
 8007020:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <find_volume+0x290>
 8007028:	230d      	movs	r3, #13
 800702a:	e0f9      	b.n	8007220 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800702c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800702e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007030:	4413      	add	r3, r2
 8007032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007034:	8912      	ldrh	r2, [r2, #8]
 8007036:	0912      	lsrs	r2, r2, #4
 8007038:	b292      	uxth	r2, r2
 800703a:	4413      	add	r3, r2
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800703e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	429a      	cmp	r2, r3
 8007044:	d201      	bcs.n	800704a <find_volume+0x2ae>
 8007046:	230d      	movs	r3, #13
 8007048:	e0ea      	b.n	8007220 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800704a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007052:	8952      	ldrh	r2, [r2, #10]
 8007054:	fbb3 f3f2 	udiv	r3, r3, r2
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	d103      	bne.n	8007068 <find_volume+0x2cc>
 8007060:	230d      	movs	r3, #13
 8007062:	e0dd      	b.n	8007220 <find_volume+0x484>
 8007064:	20000098 	.word	0x20000098
		fmt = FS_FAT32;
 8007068:	2303      	movs	r3, #3
 800706a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007074:	4293      	cmp	r3, r2
 8007076:	d802      	bhi.n	800707e <find_volume+0x2e2>
 8007078:	2302      	movs	r3, #2
 800707a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007084:	4293      	cmp	r3, r2
 8007086:	d802      	bhi.n	800708e <find_volume+0x2f2>
 8007088:	2301      	movs	r3, #1
 800708a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	1c9a      	adds	r2, r3, #2
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800709a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800709c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800709e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a0:	441a      	add	r2, r3
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80070a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	441a      	add	r2, r3
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80070b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d11e      	bne.n	80070f6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	3330      	adds	r3, #48	; 0x30
 80070bc:	332a      	adds	r3, #42	; 0x2a
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fc4e 	bl	8005960 <ld_word>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <find_volume+0x332>
 80070ca:	230d      	movs	r3, #13
 80070cc:	e0a8      	b.n	8007220 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	891b      	ldrh	r3, [r3, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <find_volume+0x33e>
 80070d6:	230d      	movs	r3, #13
 80070d8:	e0a2      	b.n	8007220 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	3330      	adds	r3, #48	; 0x30
 80070de:	332c      	adds	r3, #44	; 0x2c
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fc55 	bl	8005990 <ld_dword>
 80070e6:	4602      	mov	r2, r0
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	647b      	str	r3, [r7, #68]	; 0x44
 80070f4:	e01f      	b.n	8007136 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	891b      	ldrh	r3, [r3, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <find_volume+0x366>
 80070fe:	230d      	movs	r3, #13
 8007100:	e08e      	b.n	8007220 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	6a1a      	ldr	r2, [r3, #32]
 8007106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007108:	441a      	add	r2, r3
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800710e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007112:	2b02      	cmp	r3, #2
 8007114:	d103      	bne.n	800711e <find_volume+0x382>
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	e00a      	b.n	8007134 <find_volume+0x398>
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	4613      	mov	r3, r2
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4413      	add	r3, r2
 8007128:	085a      	lsrs	r2, r3, #1
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007134:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800713c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007140:	0a5b      	lsrs	r3, r3, #9
 8007142:	429a      	cmp	r2, r3
 8007144:	d201      	bcs.n	800714a <find_volume+0x3ae>
 8007146:	230d      	movs	r3, #13
 8007148:	e06a      	b.n	8007220 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	f04f 32ff 	mov.w	r2, #4294967295
 8007150:	611a      	str	r2, [r3, #16]
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	691a      	ldr	r2, [r3, #16]
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	2280      	movs	r2, #128	; 0x80
 800715e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007160:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007164:	2b03      	cmp	r3, #3
 8007166:	d149      	bne.n	80071fc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	3330      	adds	r3, #48	; 0x30
 800716c:	3330      	adds	r3, #48	; 0x30
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe fbf6 	bl	8005960 <ld_word>
 8007174:	4603      	mov	r3, r0
 8007176:	2b01      	cmp	r3, #1
 8007178:	d140      	bne.n	80071fc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800717a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717c:	3301      	adds	r3, #1
 800717e:	4619      	mov	r1, r3
 8007180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007182:	f7fe fe9d 	bl	8005ec0 <move_window>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d137      	bne.n	80071fc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	2200      	movs	r2, #0
 8007190:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	3330      	adds	r3, #48	; 0x30
 8007196:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fbe0 	bl	8005960 <ld_word>
 80071a0:	4603      	mov	r3, r0
 80071a2:	461a      	mov	r2, r3
 80071a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d127      	bne.n	80071fc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	3330      	adds	r3, #48	; 0x30
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fbed 	bl	8005990 <ld_dword>
 80071b6:	4603      	mov	r3, r0
 80071b8:	4a1b      	ldr	r2, [pc, #108]	; (8007228 <find_volume+0x48c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d11e      	bne.n	80071fc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	3330      	adds	r3, #48	; 0x30
 80071c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fbe2 	bl	8005990 <ld_dword>
 80071cc:	4603      	mov	r3, r0
 80071ce:	4a17      	ldr	r2, [pc, #92]	; (800722c <find_volume+0x490>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d113      	bne.n	80071fc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	3330      	adds	r3, #48	; 0x30
 80071d8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe fbd7 	bl	8005990 <ld_dword>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	3330      	adds	r3, #48	; 0x30
 80071ec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fe fbcd 	bl	8005990 <ld_dword>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007202:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007204:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <find_volume+0x494>)
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	3301      	adds	r3, #1
 800720a:	b29a      	uxth	r2, r3
 800720c:	4b08      	ldr	r3, [pc, #32]	; (8007230 <find_volume+0x494>)
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	4b07      	ldr	r3, [pc, #28]	; (8007230 <find_volume+0x494>)
 8007212:	881a      	ldrh	r2, [r3, #0]
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007218:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800721a:	f7fe fde9 	bl	8005df0 <clear_lock>
#endif
	return FR_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3758      	adds	r7, #88	; 0x58
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	41615252 	.word	0x41615252
 800722c:	61417272 	.word	0x61417272
 8007230:	2000009c 	.word	0x2000009c

08007234 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800723e:	2309      	movs	r3, #9
 8007240:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01c      	beq.n	8007282 <validate+0x4e>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d018      	beq.n	8007282 <validate+0x4e>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d013      	beq.n	8007282 <validate+0x4e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	889a      	ldrh	r2, [r3, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	88db      	ldrh	r3, [r3, #6]
 8007264:	429a      	cmp	r2, r3
 8007266:	d10c      	bne.n	8007282 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fad8 	bl	8005824 <disk_status>
 8007274:	4603      	mov	r3, r0
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <validate+0x4e>
			res = FR_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d102      	bne.n	800728e <validate+0x5a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	e000      	b.n	8007290 <validate+0x5c>
 800728e:	2300      	movs	r3, #0
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	6013      	str	r3, [r2, #0]
	return res;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80072b2:	f107 0310 	add.w	r3, r7, #16
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff fcd5 	bl	8006c66 <get_ldnumber>
 80072bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	da01      	bge.n	80072c8 <f_mount+0x28>
 80072c4:	230b      	movs	r3, #11
 80072c6:	e02b      	b.n	8007320 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80072c8:	4a17      	ldr	r2, [pc, #92]	; (8007328 <f_mount+0x88>)
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80072d8:	69b8      	ldr	r0, [r7, #24]
 80072da:	f7fe fd89 	bl	8005df0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2200      	movs	r2, #0
 80072e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	490d      	ldr	r1, [pc, #52]	; (8007328 <f_mount+0x88>)
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <f_mount+0x66>
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d001      	beq.n	800730a <f_mount+0x6a>
 8007306:	2300      	movs	r3, #0
 8007308:	e00a      	b.n	8007320 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800730a:	f107 010c 	add.w	r1, r7, #12
 800730e:	f107 0308 	add.w	r3, r7, #8
 8007312:	2200      	movs	r2, #0
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff fd41 	bl	8006d9c <find_volume>
 800731a:	4603      	mov	r3, r0
 800731c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800731e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000098 	.word	0x20000098

0800732c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b098      	sub	sp, #96	; 0x60
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	4613      	mov	r3, r2
 8007338:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <f_open+0x18>
 8007340:	2309      	movs	r3, #9
 8007342:	e1ad      	b.n	80076a0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800734a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800734c:	79fa      	ldrb	r2, [r7, #7]
 800734e:	f107 0110 	add.w	r1, r7, #16
 8007352:	f107 0308 	add.w	r3, r7, #8
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff fd20 	bl	8006d9c <find_volume>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007366:	2b00      	cmp	r3, #0
 8007368:	f040 8191 	bne.w	800768e <f_open+0x362>
		dj.obj.fs = fs;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	f107 0314 	add.w	r3, r7, #20
 8007376:	4611      	mov	r1, r2
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff fc03 	bl	8006b84 <follow_path>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007388:	2b00      	cmp	r3, #0
 800738a:	d11a      	bne.n	80073c2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800738c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007390:	b25b      	sxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	da03      	bge.n	800739e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007396:	2306      	movs	r3, #6
 8007398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800739c:	e011      	b.n	80073c2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800739e:	79fb      	ldrb	r3, [r7, #7]
 80073a0:	f023 0301 	bic.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf14      	ite	ne
 80073a8:	2301      	movne	r3, #1
 80073aa:	2300      	moveq	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	f107 0314 	add.w	r3, r7, #20
 80073b4:	4611      	mov	r1, r2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fbd2 	bl	8005b60 <chk_lock>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	f003 031c 	and.w	r3, r3, #28
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d07f      	beq.n	80074cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80073cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d017      	beq.n	8007404 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80073d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d10e      	bne.n	80073fa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80073dc:	f7fe fc1c 	bl	8005c18 <enq_lock>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d006      	beq.n	80073f4 <f_open+0xc8>
 80073e6:	f107 0314 	add.w	r3, r7, #20
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff fb03 	bl	80069f6 <dir_register>
 80073f0:	4603      	mov	r3, r0
 80073f2:	e000      	b.n	80073f6 <f_open+0xca>
 80073f4:	2312      	movs	r3, #18
 80073f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	f043 0308 	orr.w	r3, r3, #8
 8007400:	71fb      	strb	r3, [r7, #7]
 8007402:	e010      	b.n	8007426 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007404:	7ebb      	ldrb	r3, [r7, #26]
 8007406:	f003 0311 	and.w	r3, r3, #17
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <f_open+0xea>
					res = FR_DENIED;
 800740e:	2307      	movs	r3, #7
 8007410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007414:	e007      	b.n	8007426 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <f_open+0xfa>
 8007420:	2308      	movs	r3, #8
 8007422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800742a:	2b00      	cmp	r3, #0
 800742c:	d168      	bne.n	8007500 <f_open+0x1d4>
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	f003 0308 	and.w	r3, r3, #8
 8007434:	2b00      	cmp	r3, #0
 8007436:	d063      	beq.n	8007500 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007438:	f7fd ffc0 	bl	80053bc <get_fattime>
 800743c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800743e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007440:	330e      	adds	r3, #14
 8007442:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fae1 	bl	8005a0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800744a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744c:	3316      	adds	r3, #22
 800744e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe fadb 	bl	8005a0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007458:	330b      	adds	r3, #11
 800745a:	2220      	movs	r2, #32
 800745c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007462:	4611      	mov	r1, r2
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff fa32 	bl	80068ce <ld_clust>
 800746a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007470:	2200      	movs	r2, #0
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fa4a 	bl	800690c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747a:	331c      	adds	r3, #28
 800747c:	2100      	movs	r1, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fac4 	bl	8005a0c <st_dword>
					fs->wflag = 1;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2201      	movs	r2, #1
 8007488:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800748a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d037      	beq.n	8007500 <f_open+0x1d4>
						dw = fs->winsect;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007496:	f107 0314 	add.w	r3, r7, #20
 800749a:	2200      	movs	r2, #0
 800749c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe ff5d 	bl	800635e <remove_chain>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80074aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d126      	bne.n	8007500 <f_open+0x1d4>
							res = move_window(fs, dw);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fd02 	bl	8005ec0 <move_window>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074c6:	3a01      	subs	r2, #1
 80074c8:	60da      	str	r2, [r3, #12]
 80074ca:	e019      	b.n	8007500 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80074cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d115      	bne.n	8007500 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80074d4:	7ebb      	ldrb	r3, [r7, #26]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80074de:	2304      	movs	r3, #4
 80074e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80074e4:	e00c      	b.n	8007500 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80074e6:	79fb      	ldrb	r3, [r7, #7]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d007      	beq.n	8007500 <f_open+0x1d4>
 80074f0:	7ebb      	ldrb	r3, [r7, #26]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <f_open+0x1d4>
						res = FR_DENIED;
 80074fa:	2307      	movs	r3, #7
 80074fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007504:	2b00      	cmp	r3, #0
 8007506:	d128      	bne.n	800755a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	f003 0308 	and.w	r3, r3, #8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007518:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	f023 0301 	bic.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	bf14      	ite	ne
 8007532:	2301      	movne	r3, #1
 8007534:	2300      	moveq	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	f107 0314 	add.w	r3, r7, #20
 800753e:	4611      	mov	r1, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f7fe fb8b 	bl	8005c5c <inc_lock>
 8007546:	4602      	mov	r2, r0
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d102      	bne.n	800755a <f_open+0x22e>
 8007554:	2302      	movs	r3, #2
 8007556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800755a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800755e:	2b00      	cmp	r3, #0
 8007560:	f040 8095 	bne.w	800768e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff f9af 	bl	80068ce <ld_clust>
 8007570:	4602      	mov	r2, r0
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	331c      	adds	r3, #28
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe fa08 	bl	8005990 <ld_dword>
 8007580:	4602      	mov	r2, r0
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	88da      	ldrh	r2, [r3, #6]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	79fa      	ldrb	r2, [r7, #7]
 800759e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3330      	adds	r3, #48	; 0x30
 80075b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe fa72 	bl	8005aa6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d060      	beq.n	800768e <f_open+0x362>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d05c      	beq.n	800768e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	895b      	ldrh	r3, [r3, #10]
 80075e0:	025b      	lsls	r3, r3, #9
 80075e2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	657b      	str	r3, [r7, #84]	; 0x54
 80075f0:	e016      	b.n	8007620 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fd1d 	bl	8006036 <get_fat>
 80075fc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80075fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007600:	2b01      	cmp	r3, #1
 8007602:	d802      	bhi.n	800760a <f_open+0x2de>
 8007604:	2302      	movs	r3, #2
 8007606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800760a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007610:	d102      	bne.n	8007618 <f_open+0x2ec>
 8007612:	2301      	movs	r3, #1
 8007614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800761a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	657b      	str	r3, [r7, #84]	; 0x54
 8007620:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007624:	2b00      	cmp	r3, #0
 8007626:	d103      	bne.n	8007630 <f_open+0x304>
 8007628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800762a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800762c:	429a      	cmp	r2, r3
 800762e:	d8e0      	bhi.n	80075f2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007634:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800763a:	2b00      	cmp	r3, #0
 800763c:	d127      	bne.n	800768e <f_open+0x362>
 800763e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007644:	2b00      	cmp	r3, #0
 8007646:	d022      	beq.n	800768e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800764c:	4618      	mov	r0, r3
 800764e:	f7fe fcd3 	bl	8005ff8 <clust2sect>
 8007652:	6478      	str	r0, [r7, #68]	; 0x44
 8007654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007656:	2b00      	cmp	r3, #0
 8007658:	d103      	bne.n	8007662 <f_open+0x336>
						res = FR_INT_ERR;
 800765a:	2302      	movs	r3, #2
 800765c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007660:	e015      	b.n	800768e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007664:	0a5a      	lsrs	r2, r3, #9
 8007666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007668:	441a      	add	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	7858      	ldrb	r0, [r3, #1]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1a      	ldr	r2, [r3, #32]
 800767c:	2301      	movs	r3, #1
 800767e:	f7fe f911 	bl	80058a4 <disk_read>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <f_open+0x362>
 8007688:	2301      	movs	r3, #1
 800768a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800768e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <f_open+0x370>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800769c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3760      	adds	r7, #96	; 0x60
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08e      	sub	sp, #56	; 0x38
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f107 0214 	add.w	r2, r7, #20
 80076c6:	4611      	mov	r1, r2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff fdb3 	bl	8007234 <validate>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80076d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d107      	bne.n	80076ec <f_read+0x44>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	7d5b      	ldrb	r3, [r3, #21]
 80076e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80076e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <f_read+0x4a>
 80076ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076f0:	e115      	b.n	800791e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	7d1b      	ldrb	r3, [r3, #20]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <f_read+0x5a>
 80076fe:	2307      	movs	r3, #7
 8007700:	e10d      	b.n	800791e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	429a      	cmp	r2, r3
 8007714:	f240 80fe 	bls.w	8007914 <f_read+0x26c>
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800771c:	e0fa      	b.n	8007914 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007726:	2b00      	cmp	r3, #0
 8007728:	f040 80c6 	bne.w	80078b8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	0a5b      	lsrs	r3, r3, #9
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	8952      	ldrh	r2, [r2, #10]
 8007736:	3a01      	subs	r2, #1
 8007738:	4013      	ands	r3, r2
 800773a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d12f      	bne.n	80077a2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	633b      	str	r3, [r7, #48]	; 0x30
 8007750:	e013      	b.n	800777a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	4619      	mov	r1, r3
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7fe fef9 	bl	8006558 <clmt_clust>
 8007766:	6338      	str	r0, [r7, #48]	; 0x30
 8007768:	e007      	b.n	800777a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	4619      	mov	r1, r3
 8007772:	4610      	mov	r0, r2
 8007774:	f7fe fc5f 	bl	8006036 <get_fat>
 8007778:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	2b01      	cmp	r3, #1
 800777e:	d804      	bhi.n	800778a <f_read+0xe2>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2202      	movs	r2, #2
 8007784:	755a      	strb	r2, [r3, #21]
 8007786:	2302      	movs	r3, #2
 8007788:	e0c9      	b.n	800791e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d104      	bne.n	800779c <f_read+0xf4>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	755a      	strb	r2, [r3, #21]
 8007798:	2301      	movs	r3, #1
 800779a:	e0c0      	b.n	800791e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	4619      	mov	r1, r3
 80077aa:	4610      	mov	r0, r2
 80077ac:	f7fe fc24 	bl	8005ff8 <clust2sect>
 80077b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d104      	bne.n	80077c2 <f_read+0x11a>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2202      	movs	r2, #2
 80077bc:	755a      	strb	r2, [r3, #21]
 80077be:	2302      	movs	r3, #2
 80077c0:	e0ad      	b.n	800791e <f_read+0x276>
			sect += csect;
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	0a5b      	lsrs	r3, r3, #9
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d039      	beq.n	800784a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	4413      	add	r3, r2
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	8952      	ldrh	r2, [r2, #10]
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d905      	bls.n	80077f0 <f_read+0x148>
					cc = fs->csize - csect;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	895b      	ldrh	r3, [r3, #10]
 80077e8:	461a      	mov	r2, r3
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	7858      	ldrb	r0, [r3, #1]
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077fa:	f7fe f853 	bl	80058a4 <disk_read>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <f_read+0x166>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	755a      	strb	r2, [r3, #21]
 800780a:	2301      	movs	r3, #1
 800780c:	e087      	b.n	800791e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	7d1b      	ldrb	r3, [r3, #20]
 8007812:	b25b      	sxtb	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	da14      	bge.n	8007842 <f_read+0x19a>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6a1a      	ldr	r2, [r3, #32]
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007822:	429a      	cmp	r2, r3
 8007824:	d90d      	bls.n	8007842 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a1a      	ldr	r2, [r3, #32]
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	025b      	lsls	r3, r3, #9
 8007830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007832:	18d0      	adds	r0, r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3330      	adds	r3, #48	; 0x30
 8007838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800783c:	4619      	mov	r1, r3
 800783e:	f7fe f911 	bl	8005a64 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	025b      	lsls	r3, r3, #9
 8007846:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007848:	e050      	b.n	80078ec <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	429a      	cmp	r2, r3
 8007852:	d02e      	beq.n	80078b2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	7d1b      	ldrb	r3, [r3, #20]
 8007858:	b25b      	sxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	da18      	bge.n	8007890 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	7858      	ldrb	r0, [r3, #1]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a1a      	ldr	r2, [r3, #32]
 800786c:	2301      	movs	r3, #1
 800786e:	f7fe f839 	bl	80058e4 <disk_write>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <f_read+0x1da>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	755a      	strb	r2, [r3, #21]
 800787e:	2301      	movs	r3, #1
 8007880:	e04d      	b.n	800791e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	7d1b      	ldrb	r3, [r3, #20]
 8007886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788a:	b2da      	uxtb	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	7858      	ldrb	r0, [r3, #1]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800789a:	2301      	movs	r3, #1
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	f7fe f801 	bl	80058a4 <disk_read>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d004      	beq.n	80078b2 <f_read+0x20a>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2201      	movs	r2, #1
 80078ac:	755a      	strb	r2, [r3, #21]
 80078ae:	2301      	movs	r3, #1
 80078b0:	e035      	b.n	800791e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80078c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d901      	bls.n	80078d2 <f_read+0x22a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e0:	4413      	add	r3, r2
 80078e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e4:	4619      	mov	r1, r3
 80078e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078e8:	f7fe f8bc 	bl	8005a64 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f0:	4413      	add	r3, r2
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	699a      	ldr	r2, [r3, #24]
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	441a      	add	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	619a      	str	r2, [r3, #24]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007906:	441a      	add	r2, r3
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f47f af01 	bne.w	800771e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3738      	adds	r7, #56	; 0x38
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b08c      	sub	sp, #48	; 0x30
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
 8007932:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f107 0210 	add.w	r2, r7, #16
 8007944:	4611      	mov	r1, r2
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff fc74 	bl	8007234 <validate>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007956:	2b00      	cmp	r3, #0
 8007958:	d107      	bne.n	800796a <f_write+0x44>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	7d5b      	ldrb	r3, [r3, #21]
 800795e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <f_write+0x4a>
 800796a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800796e:	e14b      	b.n	8007c08 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	7d1b      	ldrb	r3, [r3, #20]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <f_write+0x5a>
 800797c:	2307      	movs	r3, #7
 800797e:	e143      	b.n	8007c08 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	699a      	ldr	r2, [r3, #24]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	441a      	add	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	429a      	cmp	r2, r3
 800798e:	f080 812d 	bcs.w	8007bec <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	43db      	mvns	r3, r3
 8007998:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800799a:	e127      	b.n	8007bec <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 80e3 	bne.w	8007b70 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	0a5b      	lsrs	r3, r3, #9
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	8952      	ldrh	r2, [r2, #10]
 80079b4:	3a01      	subs	r2, #1
 80079b6:	4013      	ands	r3, r2
 80079b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d143      	bne.n	8007a48 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10c      	bne.n	80079e2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d11a      	bne.n	8007a0a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2100      	movs	r1, #0
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe fd25 	bl	8006428 <create_chain>
 80079de:	62b8      	str	r0, [r7, #40]	; 0x28
 80079e0:	e013      	b.n	8007a0a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d007      	beq.n	80079fa <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	4619      	mov	r1, r3
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f7fe fdb1 	bl	8006558 <clmt_clust>
 80079f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80079f8:	e007      	b.n	8007a0a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f7fe fd10 	bl	8006428 <create_chain>
 8007a08:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 80f2 	beq.w	8007bf6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d104      	bne.n	8007a22 <f_write+0xfc>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	755a      	strb	r2, [r3, #21]
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e0f2      	b.n	8007c08 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d104      	bne.n	8007a34 <f_write+0x10e>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	755a      	strb	r2, [r3, #21]
 8007a30:	2301      	movs	r3, #1
 8007a32:	e0e9      	b.n	8007c08 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a38:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d102      	bne.n	8007a48 <f_write+0x122>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a46:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	7d1b      	ldrb	r3, [r3, #20]
 8007a4c:	b25b      	sxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	da18      	bge.n	8007a84 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	7858      	ldrb	r0, [r3, #1]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a1a      	ldr	r2, [r3, #32]
 8007a60:	2301      	movs	r3, #1
 8007a62:	f7fd ff3f 	bl	80058e4 <disk_write>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <f_write+0x150>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	755a      	strb	r2, [r3, #21]
 8007a72:	2301      	movs	r3, #1
 8007a74:	e0c8      	b.n	8007c08 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	7d1b      	ldrb	r3, [r3, #20]
 8007a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7fe fab3 	bl	8005ff8 <clust2sect>
 8007a92:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d104      	bne.n	8007aa4 <f_write+0x17e>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	755a      	strb	r2, [r3, #21]
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e0b1      	b.n	8007c08 <f_write+0x2e2>
			sect += csect;
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	0a5b      	lsrs	r3, r3, #9
 8007ab0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d03c      	beq.n	8007b32 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	4413      	add	r3, r2
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	8952      	ldrh	r2, [r2, #10]
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d905      	bls.n	8007ad2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	895b      	ldrh	r3, [r3, #10]
 8007aca:	461a      	mov	r2, r3
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	7858      	ldrb	r0, [r3, #1]
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	69f9      	ldr	r1, [r7, #28]
 8007adc:	f7fd ff02 	bl	80058e4 <disk_write>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <f_write+0x1ca>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	755a      	strb	r2, [r3, #21]
 8007aec:	2301      	movs	r3, #1
 8007aee:	e08b      	b.n	8007c08 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1a      	ldr	r2, [r3, #32]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	6a3a      	ldr	r2, [r7, #32]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d915      	bls.n	8007b2a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a1a      	ldr	r2, [r3, #32]
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	025b      	lsls	r3, r3, #9
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b16:	4619      	mov	r1, r3
 8007b18:	f7fd ffa4 	bl	8005a64 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	7d1b      	ldrb	r3, [r3, #20]
 8007b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	025b      	lsls	r3, r3, #9
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007b30:	e03f      	b.n	8007bb2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d016      	beq.n	8007b6a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	699a      	ldr	r2, [r3, #24]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d210      	bcs.n	8007b6a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	7858      	ldrb	r0, [r3, #1]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b52:	2301      	movs	r3, #1
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	f7fd fea5 	bl	80058a4 <disk_read>
 8007b5a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d004      	beq.n	8007b6a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2201      	movs	r2, #1
 8007b64:	755a      	strb	r2, [r3, #21]
 8007b66:	2301      	movs	r3, #1
 8007b68:	e04e      	b.n	8007c08 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b78:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d901      	bls.n	8007b8a <f_write+0x264>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b98:	4413      	add	r3, r2
 8007b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9c:	69f9      	ldr	r1, [r7, #28]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fd ff60 	bl	8005a64 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	7d1b      	ldrb	r3, [r3, #20]
 8007ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	4413      	add	r3, r2
 8007bb8:	61fb      	str	r3, [r7, #28]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	619a      	str	r2, [r3, #24]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	bf38      	it	cc
 8007bd2:	461a      	movcc	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	60da      	str	r2, [r3, #12]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	441a      	add	r2, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f47f aed4 	bne.w	800799c <f_write+0x76>
 8007bf4:	e000      	b.n	8007bf8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007bf6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	7d1b      	ldrb	r3, [r3, #20]
 8007bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3730      	adds	r7, #48	; 0x30
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f107 0208 	add.w	r2, r7, #8
 8007c1e:	4611      	mov	r1, r2
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff fb07 	bl	8007234 <validate>
 8007c26:	4603      	mov	r3, r0
 8007c28:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d168      	bne.n	8007d02 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	7d1b      	ldrb	r3, [r3, #20]
 8007c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d062      	beq.n	8007d02 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7d1b      	ldrb	r3, [r3, #20]
 8007c40:	b25b      	sxtb	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	da15      	bge.n	8007c72 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	7858      	ldrb	r0, [r3, #1]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1a      	ldr	r2, [r3, #32]
 8007c54:	2301      	movs	r3, #1
 8007c56:	f7fd fe45 	bl	80058e4 <disk_write>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <f_sync+0x54>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e04f      	b.n	8007d04 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	7d1b      	ldrb	r3, [r3, #20]
 8007c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c72:	f7fd fba3 	bl	80053bc <get_fattime>
 8007c76:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f7fe f91d 	bl	8005ec0 <move_window>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d138      	bne.n	8007d02 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	330b      	adds	r3, #11
 8007c9a:	781a      	ldrb	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	330b      	adds	r3, #11
 8007ca0:	f042 0220 	orr.w	r2, r2, #32
 8007ca4:	b2d2      	uxtb	r2, r2
 8007ca6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6818      	ldr	r0, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	68f9      	ldr	r1, [r7, #12]
 8007cb4:	f7fe fe2a 	bl	800690c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f103 021c 	add.w	r2, r3, #28
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f7fd fea1 	bl	8005a0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3316      	adds	r3, #22
 8007cce:	6939      	ldr	r1, [r7, #16]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fd fe9b 	bl	8005a0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3312      	adds	r3, #18
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fd fe7a 	bl	80059d6 <st_word>
					fs->wflag = 1;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe f916 	bl	8005f1c <sync_fs>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	7d1b      	ldrb	r3, [r3, #20]
 8007cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff ff7b 	bl	8007c10 <f_sync>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d118      	bne.n	8007d56 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f107 0208 	add.w	r2, r7, #8
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7ff fa81 	bl	8007234 <validate>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10c      	bne.n	8007d56 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe f819 	bl	8005d78 <dec_lock>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	2b0a      	cmp	r3, #10
 8007d70:	d103      	bne.n	8007d7a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007d72:	210d      	movs	r1, #13
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff fff3 	bl	8007d60 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	db25      	blt.n	8007dd2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	60fa      	str	r2, [r7, #12]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	4413      	add	r3, r2
 8007d90:	78fa      	ldrb	r2, [r7, #3]
 8007d92:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b3c      	cmp	r3, #60	; 0x3c
 8007d98:	dd12      	ble.n	8007dc0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f103 010c 	add.w	r1, r3, #12
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	f107 0308 	add.w	r3, r7, #8
 8007daa:	f7ff fdbc 	bl	8007926 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d101      	bne.n	8007dba <putc_bfd+0x5a>
 8007db6:	2300      	movs	r3, #0
 8007db8:	e001      	b.n	8007dbe <putc_bfd+0x5e>
 8007dba:	f04f 33ff 	mov.w	r3, #4294967295
 8007dbe:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	609a      	str	r2, [r3, #8]
 8007dd0:	e000      	b.n	8007dd4 <putc_bfd+0x74>
	if (i < 0) return;
 8007dd2:	bf00      	nop
}
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	db16      	blt.n	8007e18 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f103 010c 	add.w	r1, r3, #12
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f107 030c 	add.w	r3, r7, #12
 8007dfe:	f7ff fd92 	bl	8007926 <f_write>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d107      	bne.n	8007e18 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d102      	bne.n	8007e18 <putc_flush+0x3e>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	e001      	b.n	8007e1c <putc_flush+0x42>
	return EOF;
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	605a      	str	r2, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	609a      	str	r2, [r3, #8]
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8007e50:	b40e      	push	{r1, r2, r3}
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b0a7      	sub	sp, #156	; 0x9c
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8007e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff ffdf 	bl	8007e24 <putc_init>

	va_start(arp, fmt);
 8007e66:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007e6a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8007e6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8007e7c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 81f4 	beq.w	800826e <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8007e86:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007e8a:	2b25      	cmp	r3, #37	; 0x25
 8007e8c:	d008      	beq.n	8007ea0 <f_printf+0x50>
			putc_bfd(&pb, c);
 8007e8e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8007e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff ff61 	bl	8007d60 <putc_bfd>
			continue;
 8007e9e:	e1e5      	b.n	800826c <f_printf+0x41c>
		}
		w = f = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8007eac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8007ebc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007ec0:	2b30      	cmp	r3, #48	; 0x30
 8007ec2:	d10b      	bne.n	8007edc <f_printf+0x8c>
			f = 1; c = *fmt++;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007eca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8007eda:	e024      	b.n	8007f26 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8007edc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007ee0:	2b2d      	cmp	r3, #45	; 0x2d
 8007ee2:	d120      	bne.n	8007f26 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007eea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8007efa:	e014      	b.n	8007f26 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8007efc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	461a      	mov	r2, r3
 8007f0a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f0e:	4413      	add	r3, r2
 8007f10:	3b30      	subs	r3, #48	; 0x30
 8007f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8007f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8007f26:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f2a:	2b2f      	cmp	r3, #47	; 0x2f
 8007f2c:	d903      	bls.n	8007f36 <f_printf+0xe6>
 8007f2e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f32:	2b39      	cmp	r3, #57	; 0x39
 8007f34:	d9e2      	bls.n	8007efc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8007f36:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f3a:	2b6c      	cmp	r3, #108	; 0x6c
 8007f3c:	d003      	beq.n	8007f46 <f_printf+0xf6>
 8007f3e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f42:	2b4c      	cmp	r3, #76	; 0x4c
 8007f44:	d10d      	bne.n	8007f62 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8007f46:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007f4a:	f043 0304 	orr.w	r3, r3, #4
 8007f4e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8007f62:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 8183 	beq.w	8008272 <f_printf+0x422>
		d = c;
 8007f6c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007f70:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8007f74:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007f78:	2b60      	cmp	r3, #96	; 0x60
 8007f7a:	d908      	bls.n	8007f8e <f_printf+0x13e>
 8007f7c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007f80:	2b7a      	cmp	r3, #122	; 0x7a
 8007f82:	d804      	bhi.n	8007f8e <f_printf+0x13e>
 8007f84:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007f88:	3b20      	subs	r3, #32
 8007f8a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8007f8e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007f92:	3b42      	subs	r3, #66	; 0x42
 8007f94:	2b16      	cmp	r3, #22
 8007f96:	f200 8098 	bhi.w	80080ca <f_printf+0x27a>
 8007f9a:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <f_printf+0x150>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	080080ab 	.word	0x080080ab
 8007fa4:	08008093 	.word	0x08008093
 8007fa8:	080080bb 	.word	0x080080bb
 8007fac:	080080cb 	.word	0x080080cb
 8007fb0:	080080cb 	.word	0x080080cb
 8007fb4:	080080cb 	.word	0x080080cb
 8007fb8:	080080cb 	.word	0x080080cb
 8007fbc:	080080cb 	.word	0x080080cb
 8007fc0:	080080cb 	.word	0x080080cb
 8007fc4:	080080cb 	.word	0x080080cb
 8007fc8:	080080cb 	.word	0x080080cb
 8007fcc:	080080cb 	.word	0x080080cb
 8007fd0:	080080cb 	.word	0x080080cb
 8007fd4:	080080b3 	.word	0x080080b3
 8007fd8:	080080cb 	.word	0x080080cb
 8007fdc:	080080cb 	.word	0x080080cb
 8007fe0:	080080cb 	.word	0x080080cb
 8007fe4:	08007ffd 	.word	0x08007ffd
 8007fe8:	080080cb 	.word	0x080080cb
 8007fec:	080080bb 	.word	0x080080bb
 8007ff0:	080080cb 	.word	0x080080cb
 8007ff4:	080080cb 	.word	0x080080cb
 8007ff8:	080080c3 	.word	0x080080c3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8007ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ffe:	1d1a      	adds	r2, r3, #4
 8008000:	67ba      	str	r2, [r7, #120]	; 0x78
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8008006:	2300      	movs	r3, #0
 8008008:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800800c:	e004      	b.n	8008018 <f_printf+0x1c8>
 800800e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008012:	3301      	adds	r3, #1
 8008014:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008018:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800801a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800801e:	4413      	add	r3, r2
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1f3      	bne.n	800800e <f_printf+0x1be>
			if (!(f & 2)) {
 8008026:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d11a      	bne.n	8008068 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008032:	e005      	b.n	8008040 <f_printf+0x1f0>
 8008034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008038:	2120      	movs	r1, #32
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fe90 	bl	8007d60 <putc_bfd>
 8008040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800804a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800804e:	429a      	cmp	r2, r3
 8008050:	d8f0      	bhi.n	8008034 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008052:	e009      	b.n	8008068 <f_printf+0x218>
 8008054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	67fa      	str	r2, [r7, #124]	; 0x7c
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008060:	4611      	mov	r1, r2
 8008062:	4618      	mov	r0, r3
 8008064:	f7ff fe7c 	bl	8007d60 <putc_bfd>
 8008068:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1f1      	bne.n	8008054 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008070:	e005      	b.n	800807e <f_printf+0x22e>
 8008072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008076:	2120      	movs	r1, #32
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff fe71 	bl	8007d60 <putc_bfd>
 800807e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008088:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800808c:	429a      	cmp	r2, r3
 800808e:	d8f0      	bhi.n	8008072 <f_printf+0x222>
			continue;
 8008090:	e0ec      	b.n	800826c <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008094:	1d1a      	adds	r2, r3, #4
 8008096:	67ba      	str	r2, [r7, #120]	; 0x78
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	b2da      	uxtb	r2, r3
 800809c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fe5c 	bl	8007d60 <putc_bfd>
 80080a8:	e0e0      	b.n	800826c <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 80080aa:	2302      	movs	r3, #2
 80080ac:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80080b0:	e014      	b.n	80080dc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80080b2:	2308      	movs	r3, #8
 80080b4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80080b8:	e010      	b.n	80080dc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80080ba:	230a      	movs	r3, #10
 80080bc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80080c0:	e00c      	b.n	80080dc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80080c2:	2310      	movs	r3, #16
 80080c4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80080c8:	e008      	b.n	80080dc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80080ca:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80080ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff fe43 	bl	8007d60 <putc_bfd>
 80080da:	e0c7      	b.n	800826c <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80080dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d004      	beq.n	80080f2 <f_printf+0x2a2>
 80080e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ea:	1d1a      	adds	r2, r3, #4
 80080ec:	67ba      	str	r2, [r7, #120]	; 0x78
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	e00c      	b.n	800810c <f_printf+0x2bc>
 80080f2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80080f6:	2b44      	cmp	r3, #68	; 0x44
 80080f8:	d104      	bne.n	8008104 <f_printf+0x2b4>
 80080fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080fc:	1d1a      	adds	r2, r3, #4
 80080fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	e003      	b.n	800810c <f_printf+0x2bc>
 8008104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008106:	1d1a      	adds	r2, r3, #4
 8008108:	67ba      	str	r2, [r7, #120]	; 0x78
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8008110:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008114:	2b44      	cmp	r3, #68	; 0x44
 8008116:	d10e      	bne.n	8008136 <f_printf+0x2e6>
 8008118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800811c:	2b00      	cmp	r3, #0
 800811e:	da0a      	bge.n	8008136 <f_printf+0x2e6>
			v = 0 - v;
 8008120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008124:	425b      	negs	r3, r3
 8008126:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800812a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800812e:	f043 0308 	orr.w	r3, r3, #8
 8008132:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800813c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8008140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008144:	fbb3 f1f2 	udiv	r1, r3, r2
 8008148:	fb02 f201 	mul.w	r2, r2, r1
 800814c:	1a9b      	subs	r3, r3, r2
 800814e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8008152:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8008156:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800815a:	fbb2 f3f3 	udiv	r3, r2, r3
 800815e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008162:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008166:	2b09      	cmp	r3, #9
 8008168:	d90b      	bls.n	8008182 <f_printf+0x332>
 800816a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800816e:	2b78      	cmp	r3, #120	; 0x78
 8008170:	d101      	bne.n	8008176 <f_printf+0x326>
 8008172:	2227      	movs	r2, #39	; 0x27
 8008174:	e000      	b.n	8008178 <f_printf+0x328>
 8008176:	2207      	movs	r2, #7
 8008178:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800817c:	4413      	add	r3, r2
 800817e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8008182:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800818c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008190:	3230      	adds	r2, #48	; 0x30
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008198:	440b      	add	r3, r1
 800819a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800819e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <f_printf+0x35e>
 80081a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081aa:	2b1f      	cmp	r3, #31
 80081ac:	d9c6      	bls.n	800813c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80081ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <f_printf+0x380>
 80081ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80081c4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80081c8:	4413      	add	r3, r2
 80081ca:	222d      	movs	r2, #45	; 0x2d
 80081cc:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80081d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <f_printf+0x398>
 80081e4:	2330      	movs	r3, #48	; 0x30
 80081e6:	e000      	b.n	80081ea <f_printf+0x39a>
 80081e8:	2320      	movs	r3, #32
 80081ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80081ee:	e007      	b.n	8008200 <f_printf+0x3b0>
 80081f0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80081f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081f8:	4611      	mov	r1, r2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fdb0 	bl	8007d60 <putc_bfd>
 8008200:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d108      	bne.n	800821e <f_printf+0x3ce>
 800820c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008216:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800821a:	429a      	cmp	r2, r3
 800821c:	d8e8      	bhi.n	80081f0 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800821e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008222:	3b01      	subs	r3, #1
 8008224:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008228:	f107 020c 	add.w	r2, r7, #12
 800822c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008230:	4413      	add	r3, r2
 8008232:	781a      	ldrb	r2, [r3, #0]
 8008234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008238:	4611      	mov	r1, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fd90 	bl	8007d60 <putc_bfd>
		} while (i);
 8008240:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1ea      	bne.n	800821e <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8008248:	e007      	b.n	800825a <f_printf+0x40a>
 800824a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800824e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008252:	4611      	mov	r1, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff fd83 	bl	8007d60 <putc_bfd>
 800825a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008264:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008268:	429a      	cmp	r2, r3
 800826a:	d8ee      	bhi.n	800824a <f_printf+0x3fa>
		c = *fmt++;
 800826c:	e5fe      	b.n	8007e6c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800826e:	bf00      	nop
 8008270:	e000      	b.n	8008274 <f_printf+0x424>
		if (!c) break;
 8008272:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8008274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff fdae 	bl	8007dda <putc_flush>
 800827e:	4603      	mov	r3, r0
}
 8008280:	4618      	mov	r0, r3
 8008282:	379c      	adds	r7, #156	; 0x9c
 8008284:	46bd      	mov	sp, r7
 8008286:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800828a:	b003      	add	sp, #12
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	4613      	mov	r3, r2
 800829c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800829e:	2301      	movs	r3, #1
 80082a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80082a6:	4b1f      	ldr	r3, [pc, #124]	; (8008324 <FATFS_LinkDriverEx+0x94>)
 80082a8:	7a5b      	ldrb	r3, [r3, #9]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d131      	bne.n	8008314 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80082b0:	4b1c      	ldr	r3, [pc, #112]	; (8008324 <FATFS_LinkDriverEx+0x94>)
 80082b2:	7a5b      	ldrb	r3, [r3, #9]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	461a      	mov	r2, r3
 80082b8:	4b1a      	ldr	r3, [pc, #104]	; (8008324 <FATFS_LinkDriverEx+0x94>)
 80082ba:	2100      	movs	r1, #0
 80082bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80082be:	4b19      	ldr	r3, [pc, #100]	; (8008324 <FATFS_LinkDriverEx+0x94>)
 80082c0:	7a5b      	ldrb	r3, [r3, #9]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	4a17      	ldr	r2, [pc, #92]	; (8008324 <FATFS_LinkDriverEx+0x94>)
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80082ce:	4b15      	ldr	r3, [pc, #84]	; (8008324 <FATFS_LinkDriverEx+0x94>)
 80082d0:	7a5b      	ldrb	r3, [r3, #9]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	4b13      	ldr	r3, [pc, #76]	; (8008324 <FATFS_LinkDriverEx+0x94>)
 80082d8:	4413      	add	r3, r2
 80082da:	79fa      	ldrb	r2, [r7, #7]
 80082dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80082de:	4b11      	ldr	r3, [pc, #68]	; (8008324 <FATFS_LinkDriverEx+0x94>)
 80082e0:	7a5b      	ldrb	r3, [r3, #9]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	b2d1      	uxtb	r1, r2
 80082e8:	4a0e      	ldr	r2, [pc, #56]	; (8008324 <FATFS_LinkDriverEx+0x94>)
 80082ea:	7251      	strb	r1, [r2, #9]
 80082ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80082ee:	7dbb      	ldrb	r3, [r7, #22]
 80082f0:	3330      	adds	r3, #48	; 0x30
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	3301      	adds	r3, #1
 80082fc:	223a      	movs	r2, #58	; 0x3a
 80082fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3302      	adds	r3, #2
 8008304:	222f      	movs	r2, #47	; 0x2f
 8008306:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3303      	adds	r3, #3
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008314:	7dfb      	ldrb	r3, [r7, #23]
}
 8008316:	4618      	mov	r0, r3
 8008318:	371c      	adds	r7, #28
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	200000c0 	.word	0x200000c0

08008328 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008332:	2200      	movs	r2, #0
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7ff ffaa 	bl	8008290 <FATFS_LinkDriverEx>
 800833c:	4603      	mov	r3, r0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <__errno>:
 8008348:	4b01      	ldr	r3, [pc, #4]	; (8008350 <__errno+0x8>)
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	2000000c 	.word	0x2000000c

08008354 <__libc_init_array>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	4d0d      	ldr	r5, [pc, #52]	; (800838c <__libc_init_array+0x38>)
 8008358:	4c0d      	ldr	r4, [pc, #52]	; (8008390 <__libc_init_array+0x3c>)
 800835a:	1b64      	subs	r4, r4, r5
 800835c:	10a4      	asrs	r4, r4, #2
 800835e:	2600      	movs	r6, #0
 8008360:	42a6      	cmp	r6, r4
 8008362:	d109      	bne.n	8008378 <__libc_init_array+0x24>
 8008364:	4d0b      	ldr	r5, [pc, #44]	; (8008394 <__libc_init_array+0x40>)
 8008366:	4c0c      	ldr	r4, [pc, #48]	; (8008398 <__libc_init_array+0x44>)
 8008368:	f000 fc4e 	bl	8008c08 <_init>
 800836c:	1b64      	subs	r4, r4, r5
 800836e:	10a4      	asrs	r4, r4, #2
 8008370:	2600      	movs	r6, #0
 8008372:	42a6      	cmp	r6, r4
 8008374:	d105      	bne.n	8008382 <__libc_init_array+0x2e>
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	f855 3b04 	ldr.w	r3, [r5], #4
 800837c:	4798      	blx	r3
 800837e:	3601      	adds	r6, #1
 8008380:	e7ee      	b.n	8008360 <__libc_init_array+0xc>
 8008382:	f855 3b04 	ldr.w	r3, [r5], #4
 8008386:	4798      	blx	r3
 8008388:	3601      	adds	r6, #1
 800838a:	e7f2      	b.n	8008372 <__libc_init_array+0x1e>
 800838c:	08008e84 	.word	0x08008e84
 8008390:	08008e84 	.word	0x08008e84
 8008394:	08008e84 	.word	0x08008e84
 8008398:	08008e88 	.word	0x08008e88

0800839c <memset>:
 800839c:	4402      	add	r2, r0
 800839e:	4603      	mov	r3, r0
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d100      	bne.n	80083a6 <memset+0xa>
 80083a4:	4770      	bx	lr
 80083a6:	f803 1b01 	strb.w	r1, [r3], #1
 80083aa:	e7f9      	b.n	80083a0 <memset+0x4>

080083ac <siprintf>:
 80083ac:	b40e      	push	{r1, r2, r3}
 80083ae:	b500      	push	{lr}
 80083b0:	b09c      	sub	sp, #112	; 0x70
 80083b2:	ab1d      	add	r3, sp, #116	; 0x74
 80083b4:	9002      	str	r0, [sp, #8]
 80083b6:	9006      	str	r0, [sp, #24]
 80083b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083bc:	4809      	ldr	r0, [pc, #36]	; (80083e4 <siprintf+0x38>)
 80083be:	9107      	str	r1, [sp, #28]
 80083c0:	9104      	str	r1, [sp, #16]
 80083c2:	4909      	ldr	r1, [pc, #36]	; (80083e8 <siprintf+0x3c>)
 80083c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c8:	9105      	str	r1, [sp, #20]
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	a902      	add	r1, sp, #8
 80083d0:	f000 f868 	bl	80084a4 <_svfiprintf_r>
 80083d4:	9b02      	ldr	r3, [sp, #8]
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	b01c      	add	sp, #112	; 0x70
 80083dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e0:	b003      	add	sp, #12
 80083e2:	4770      	bx	lr
 80083e4:	2000000c 	.word	0x2000000c
 80083e8:	ffff0208 	.word	0xffff0208

080083ec <__ssputs_r>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	688e      	ldr	r6, [r1, #8]
 80083f2:	429e      	cmp	r6, r3
 80083f4:	4682      	mov	sl, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	4690      	mov	r8, r2
 80083fa:	461f      	mov	r7, r3
 80083fc:	d838      	bhi.n	8008470 <__ssputs_r+0x84>
 80083fe:	898a      	ldrh	r2, [r1, #12]
 8008400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008404:	d032      	beq.n	800846c <__ssputs_r+0x80>
 8008406:	6825      	ldr	r5, [r4, #0]
 8008408:	6909      	ldr	r1, [r1, #16]
 800840a:	eba5 0901 	sub.w	r9, r5, r1
 800840e:	6965      	ldr	r5, [r4, #20]
 8008410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008418:	3301      	adds	r3, #1
 800841a:	444b      	add	r3, r9
 800841c:	106d      	asrs	r5, r5, #1
 800841e:	429d      	cmp	r5, r3
 8008420:	bf38      	it	cc
 8008422:	461d      	movcc	r5, r3
 8008424:	0553      	lsls	r3, r2, #21
 8008426:	d531      	bpl.n	800848c <__ssputs_r+0xa0>
 8008428:	4629      	mov	r1, r5
 800842a:	f000 fb47 	bl	8008abc <_malloc_r>
 800842e:	4606      	mov	r6, r0
 8008430:	b950      	cbnz	r0, 8008448 <__ssputs_r+0x5c>
 8008432:	230c      	movs	r3, #12
 8008434:	f8ca 3000 	str.w	r3, [sl]
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800843e:	81a3      	strh	r3, [r4, #12]
 8008440:	f04f 30ff 	mov.w	r0, #4294967295
 8008444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008448:	6921      	ldr	r1, [r4, #16]
 800844a:	464a      	mov	r2, r9
 800844c:	f000 fabe 	bl	80089cc <memcpy>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	6126      	str	r6, [r4, #16]
 800845e:	6165      	str	r5, [r4, #20]
 8008460:	444e      	add	r6, r9
 8008462:	eba5 0509 	sub.w	r5, r5, r9
 8008466:	6026      	str	r6, [r4, #0]
 8008468:	60a5      	str	r5, [r4, #8]
 800846a:	463e      	mov	r6, r7
 800846c:	42be      	cmp	r6, r7
 800846e:	d900      	bls.n	8008472 <__ssputs_r+0x86>
 8008470:	463e      	mov	r6, r7
 8008472:	4632      	mov	r2, r6
 8008474:	6820      	ldr	r0, [r4, #0]
 8008476:	4641      	mov	r1, r8
 8008478:	f000 fab6 	bl	80089e8 <memmove>
 800847c:	68a3      	ldr	r3, [r4, #8]
 800847e:	6822      	ldr	r2, [r4, #0]
 8008480:	1b9b      	subs	r3, r3, r6
 8008482:	4432      	add	r2, r6
 8008484:	60a3      	str	r3, [r4, #8]
 8008486:	6022      	str	r2, [r4, #0]
 8008488:	2000      	movs	r0, #0
 800848a:	e7db      	b.n	8008444 <__ssputs_r+0x58>
 800848c:	462a      	mov	r2, r5
 800848e:	f000 fb6f 	bl	8008b70 <_realloc_r>
 8008492:	4606      	mov	r6, r0
 8008494:	2800      	cmp	r0, #0
 8008496:	d1e1      	bne.n	800845c <__ssputs_r+0x70>
 8008498:	6921      	ldr	r1, [r4, #16]
 800849a:	4650      	mov	r0, sl
 800849c:	f000 fabe 	bl	8008a1c <_free_r>
 80084a0:	e7c7      	b.n	8008432 <__ssputs_r+0x46>
	...

080084a4 <_svfiprintf_r>:
 80084a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a8:	4698      	mov	r8, r3
 80084aa:	898b      	ldrh	r3, [r1, #12]
 80084ac:	061b      	lsls	r3, r3, #24
 80084ae:	b09d      	sub	sp, #116	; 0x74
 80084b0:	4607      	mov	r7, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	4614      	mov	r4, r2
 80084b6:	d50e      	bpl.n	80084d6 <_svfiprintf_r+0x32>
 80084b8:	690b      	ldr	r3, [r1, #16]
 80084ba:	b963      	cbnz	r3, 80084d6 <_svfiprintf_r+0x32>
 80084bc:	2140      	movs	r1, #64	; 0x40
 80084be:	f000 fafd 	bl	8008abc <_malloc_r>
 80084c2:	6028      	str	r0, [r5, #0]
 80084c4:	6128      	str	r0, [r5, #16]
 80084c6:	b920      	cbnz	r0, 80084d2 <_svfiprintf_r+0x2e>
 80084c8:	230c      	movs	r3, #12
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	e0d1      	b.n	8008676 <_svfiprintf_r+0x1d2>
 80084d2:	2340      	movs	r3, #64	; 0x40
 80084d4:	616b      	str	r3, [r5, #20]
 80084d6:	2300      	movs	r3, #0
 80084d8:	9309      	str	r3, [sp, #36]	; 0x24
 80084da:	2320      	movs	r3, #32
 80084dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084e4:	2330      	movs	r3, #48	; 0x30
 80084e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008690 <_svfiprintf_r+0x1ec>
 80084ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ee:	f04f 0901 	mov.w	r9, #1
 80084f2:	4623      	mov	r3, r4
 80084f4:	469a      	mov	sl, r3
 80084f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084fa:	b10a      	cbz	r2, 8008500 <_svfiprintf_r+0x5c>
 80084fc:	2a25      	cmp	r2, #37	; 0x25
 80084fe:	d1f9      	bne.n	80084f4 <_svfiprintf_r+0x50>
 8008500:	ebba 0b04 	subs.w	fp, sl, r4
 8008504:	d00b      	beq.n	800851e <_svfiprintf_r+0x7a>
 8008506:	465b      	mov	r3, fp
 8008508:	4622      	mov	r2, r4
 800850a:	4629      	mov	r1, r5
 800850c:	4638      	mov	r0, r7
 800850e:	f7ff ff6d 	bl	80083ec <__ssputs_r>
 8008512:	3001      	adds	r0, #1
 8008514:	f000 80aa 	beq.w	800866c <_svfiprintf_r+0x1c8>
 8008518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800851a:	445a      	add	r2, fp
 800851c:	9209      	str	r2, [sp, #36]	; 0x24
 800851e:	f89a 3000 	ldrb.w	r3, [sl]
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 80a2 	beq.w	800866c <_svfiprintf_r+0x1c8>
 8008528:	2300      	movs	r3, #0
 800852a:	f04f 32ff 	mov.w	r2, #4294967295
 800852e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008532:	f10a 0a01 	add.w	sl, sl, #1
 8008536:	9304      	str	r3, [sp, #16]
 8008538:	9307      	str	r3, [sp, #28]
 800853a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800853e:	931a      	str	r3, [sp, #104]	; 0x68
 8008540:	4654      	mov	r4, sl
 8008542:	2205      	movs	r2, #5
 8008544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008548:	4851      	ldr	r0, [pc, #324]	; (8008690 <_svfiprintf_r+0x1ec>)
 800854a:	f7f7 fe49 	bl	80001e0 <memchr>
 800854e:	9a04      	ldr	r2, [sp, #16]
 8008550:	b9d8      	cbnz	r0, 800858a <_svfiprintf_r+0xe6>
 8008552:	06d0      	lsls	r0, r2, #27
 8008554:	bf44      	itt	mi
 8008556:	2320      	movmi	r3, #32
 8008558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800855c:	0711      	lsls	r1, r2, #28
 800855e:	bf44      	itt	mi
 8008560:	232b      	movmi	r3, #43	; 0x2b
 8008562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008566:	f89a 3000 	ldrb.w	r3, [sl]
 800856a:	2b2a      	cmp	r3, #42	; 0x2a
 800856c:	d015      	beq.n	800859a <_svfiprintf_r+0xf6>
 800856e:	9a07      	ldr	r2, [sp, #28]
 8008570:	4654      	mov	r4, sl
 8008572:	2000      	movs	r0, #0
 8008574:	f04f 0c0a 	mov.w	ip, #10
 8008578:	4621      	mov	r1, r4
 800857a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800857e:	3b30      	subs	r3, #48	; 0x30
 8008580:	2b09      	cmp	r3, #9
 8008582:	d94e      	bls.n	8008622 <_svfiprintf_r+0x17e>
 8008584:	b1b0      	cbz	r0, 80085b4 <_svfiprintf_r+0x110>
 8008586:	9207      	str	r2, [sp, #28]
 8008588:	e014      	b.n	80085b4 <_svfiprintf_r+0x110>
 800858a:	eba0 0308 	sub.w	r3, r0, r8
 800858e:	fa09 f303 	lsl.w	r3, r9, r3
 8008592:	4313      	orrs	r3, r2
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	46a2      	mov	sl, r4
 8008598:	e7d2      	b.n	8008540 <_svfiprintf_r+0x9c>
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	1d19      	adds	r1, r3, #4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	9103      	str	r1, [sp, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bfbb      	ittet	lt
 80085a6:	425b      	neglt	r3, r3
 80085a8:	f042 0202 	orrlt.w	r2, r2, #2
 80085ac:	9307      	strge	r3, [sp, #28]
 80085ae:	9307      	strlt	r3, [sp, #28]
 80085b0:	bfb8      	it	lt
 80085b2:	9204      	strlt	r2, [sp, #16]
 80085b4:	7823      	ldrb	r3, [r4, #0]
 80085b6:	2b2e      	cmp	r3, #46	; 0x2e
 80085b8:	d10c      	bne.n	80085d4 <_svfiprintf_r+0x130>
 80085ba:	7863      	ldrb	r3, [r4, #1]
 80085bc:	2b2a      	cmp	r3, #42	; 0x2a
 80085be:	d135      	bne.n	800862c <_svfiprintf_r+0x188>
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	1d1a      	adds	r2, r3, #4
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	9203      	str	r2, [sp, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	bfb8      	it	lt
 80085cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80085d0:	3402      	adds	r4, #2
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086a0 <_svfiprintf_r+0x1fc>
 80085d8:	7821      	ldrb	r1, [r4, #0]
 80085da:	2203      	movs	r2, #3
 80085dc:	4650      	mov	r0, sl
 80085de:	f7f7 fdff 	bl	80001e0 <memchr>
 80085e2:	b140      	cbz	r0, 80085f6 <_svfiprintf_r+0x152>
 80085e4:	2340      	movs	r3, #64	; 0x40
 80085e6:	eba0 000a 	sub.w	r0, r0, sl
 80085ea:	fa03 f000 	lsl.w	r0, r3, r0
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	4303      	orrs	r3, r0
 80085f2:	3401      	adds	r4, #1
 80085f4:	9304      	str	r3, [sp, #16]
 80085f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fa:	4826      	ldr	r0, [pc, #152]	; (8008694 <_svfiprintf_r+0x1f0>)
 80085fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008600:	2206      	movs	r2, #6
 8008602:	f7f7 fded 	bl	80001e0 <memchr>
 8008606:	2800      	cmp	r0, #0
 8008608:	d038      	beq.n	800867c <_svfiprintf_r+0x1d8>
 800860a:	4b23      	ldr	r3, [pc, #140]	; (8008698 <_svfiprintf_r+0x1f4>)
 800860c:	bb1b      	cbnz	r3, 8008656 <_svfiprintf_r+0x1b2>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	3307      	adds	r3, #7
 8008612:	f023 0307 	bic.w	r3, r3, #7
 8008616:	3308      	adds	r3, #8
 8008618:	9303      	str	r3, [sp, #12]
 800861a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861c:	4433      	add	r3, r6
 800861e:	9309      	str	r3, [sp, #36]	; 0x24
 8008620:	e767      	b.n	80084f2 <_svfiprintf_r+0x4e>
 8008622:	fb0c 3202 	mla	r2, ip, r2, r3
 8008626:	460c      	mov	r4, r1
 8008628:	2001      	movs	r0, #1
 800862a:	e7a5      	b.n	8008578 <_svfiprintf_r+0xd4>
 800862c:	2300      	movs	r3, #0
 800862e:	3401      	adds	r4, #1
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	4619      	mov	r1, r3
 8008634:	f04f 0c0a 	mov.w	ip, #10
 8008638:	4620      	mov	r0, r4
 800863a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800863e:	3a30      	subs	r2, #48	; 0x30
 8008640:	2a09      	cmp	r2, #9
 8008642:	d903      	bls.n	800864c <_svfiprintf_r+0x1a8>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0c5      	beq.n	80085d4 <_svfiprintf_r+0x130>
 8008648:	9105      	str	r1, [sp, #20]
 800864a:	e7c3      	b.n	80085d4 <_svfiprintf_r+0x130>
 800864c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008650:	4604      	mov	r4, r0
 8008652:	2301      	movs	r3, #1
 8008654:	e7f0      	b.n	8008638 <_svfiprintf_r+0x194>
 8008656:	ab03      	add	r3, sp, #12
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	462a      	mov	r2, r5
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <_svfiprintf_r+0x1f8>)
 800865e:	a904      	add	r1, sp, #16
 8008660:	4638      	mov	r0, r7
 8008662:	f3af 8000 	nop.w
 8008666:	1c42      	adds	r2, r0, #1
 8008668:	4606      	mov	r6, r0
 800866a:	d1d6      	bne.n	800861a <_svfiprintf_r+0x176>
 800866c:	89ab      	ldrh	r3, [r5, #12]
 800866e:	065b      	lsls	r3, r3, #25
 8008670:	f53f af2c 	bmi.w	80084cc <_svfiprintf_r+0x28>
 8008674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008676:	b01d      	add	sp, #116	; 0x74
 8008678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867c:	ab03      	add	r3, sp, #12
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	462a      	mov	r2, r5
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <_svfiprintf_r+0x1f8>)
 8008684:	a904      	add	r1, sp, #16
 8008686:	4638      	mov	r0, r7
 8008688:	f000 f87a 	bl	8008780 <_printf_i>
 800868c:	e7eb      	b.n	8008666 <_svfiprintf_r+0x1c2>
 800868e:	bf00      	nop
 8008690:	08008e48 	.word	0x08008e48
 8008694:	08008e52 	.word	0x08008e52
 8008698:	00000000 	.word	0x00000000
 800869c:	080083ed 	.word	0x080083ed
 80086a0:	08008e4e 	.word	0x08008e4e

080086a4 <_printf_common>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	4616      	mov	r6, r2
 80086aa:	4699      	mov	r9, r3
 80086ac:	688a      	ldr	r2, [r1, #8]
 80086ae:	690b      	ldr	r3, [r1, #16]
 80086b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086b4:	4293      	cmp	r3, r2
 80086b6:	bfb8      	it	lt
 80086b8:	4613      	movlt	r3, r2
 80086ba:	6033      	str	r3, [r6, #0]
 80086bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086c0:	4607      	mov	r7, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	b10a      	cbz	r2, 80086ca <_printf_common+0x26>
 80086c6:	3301      	adds	r3, #1
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	0699      	lsls	r1, r3, #26
 80086ce:	bf42      	ittt	mi
 80086d0:	6833      	ldrmi	r3, [r6, #0]
 80086d2:	3302      	addmi	r3, #2
 80086d4:	6033      	strmi	r3, [r6, #0]
 80086d6:	6825      	ldr	r5, [r4, #0]
 80086d8:	f015 0506 	ands.w	r5, r5, #6
 80086dc:	d106      	bne.n	80086ec <_printf_common+0x48>
 80086de:	f104 0a19 	add.w	sl, r4, #25
 80086e2:	68e3      	ldr	r3, [r4, #12]
 80086e4:	6832      	ldr	r2, [r6, #0]
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	42ab      	cmp	r3, r5
 80086ea:	dc26      	bgt.n	800873a <_printf_common+0x96>
 80086ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086f0:	1e13      	subs	r3, r2, #0
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	bf18      	it	ne
 80086f6:	2301      	movne	r3, #1
 80086f8:	0692      	lsls	r2, r2, #26
 80086fa:	d42b      	bmi.n	8008754 <_printf_common+0xb0>
 80086fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008700:	4649      	mov	r1, r9
 8008702:	4638      	mov	r0, r7
 8008704:	47c0      	blx	r8
 8008706:	3001      	adds	r0, #1
 8008708:	d01e      	beq.n	8008748 <_printf_common+0xa4>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	68e5      	ldr	r5, [r4, #12]
 800870e:	6832      	ldr	r2, [r6, #0]
 8008710:	f003 0306 	and.w	r3, r3, #6
 8008714:	2b04      	cmp	r3, #4
 8008716:	bf08      	it	eq
 8008718:	1aad      	subeq	r5, r5, r2
 800871a:	68a3      	ldr	r3, [r4, #8]
 800871c:	6922      	ldr	r2, [r4, #16]
 800871e:	bf0c      	ite	eq
 8008720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008724:	2500      	movne	r5, #0
 8008726:	4293      	cmp	r3, r2
 8008728:	bfc4      	itt	gt
 800872a:	1a9b      	subgt	r3, r3, r2
 800872c:	18ed      	addgt	r5, r5, r3
 800872e:	2600      	movs	r6, #0
 8008730:	341a      	adds	r4, #26
 8008732:	42b5      	cmp	r5, r6
 8008734:	d11a      	bne.n	800876c <_printf_common+0xc8>
 8008736:	2000      	movs	r0, #0
 8008738:	e008      	b.n	800874c <_printf_common+0xa8>
 800873a:	2301      	movs	r3, #1
 800873c:	4652      	mov	r2, sl
 800873e:	4649      	mov	r1, r9
 8008740:	4638      	mov	r0, r7
 8008742:	47c0      	blx	r8
 8008744:	3001      	adds	r0, #1
 8008746:	d103      	bne.n	8008750 <_printf_common+0xac>
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008750:	3501      	adds	r5, #1
 8008752:	e7c6      	b.n	80086e2 <_printf_common+0x3e>
 8008754:	18e1      	adds	r1, r4, r3
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	2030      	movs	r0, #48	; 0x30
 800875a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800875e:	4422      	add	r2, r4
 8008760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008768:	3302      	adds	r3, #2
 800876a:	e7c7      	b.n	80086fc <_printf_common+0x58>
 800876c:	2301      	movs	r3, #1
 800876e:	4622      	mov	r2, r4
 8008770:	4649      	mov	r1, r9
 8008772:	4638      	mov	r0, r7
 8008774:	47c0      	blx	r8
 8008776:	3001      	adds	r0, #1
 8008778:	d0e6      	beq.n	8008748 <_printf_common+0xa4>
 800877a:	3601      	adds	r6, #1
 800877c:	e7d9      	b.n	8008732 <_printf_common+0x8e>
	...

08008780 <_printf_i>:
 8008780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008784:	460c      	mov	r4, r1
 8008786:	4691      	mov	r9, r2
 8008788:	7e27      	ldrb	r7, [r4, #24]
 800878a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800878c:	2f78      	cmp	r7, #120	; 0x78
 800878e:	4680      	mov	r8, r0
 8008790:	469a      	mov	sl, r3
 8008792:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008796:	d807      	bhi.n	80087a8 <_printf_i+0x28>
 8008798:	2f62      	cmp	r7, #98	; 0x62
 800879a:	d80a      	bhi.n	80087b2 <_printf_i+0x32>
 800879c:	2f00      	cmp	r7, #0
 800879e:	f000 80d8 	beq.w	8008952 <_printf_i+0x1d2>
 80087a2:	2f58      	cmp	r7, #88	; 0x58
 80087a4:	f000 80a3 	beq.w	80088ee <_printf_i+0x16e>
 80087a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087b0:	e03a      	b.n	8008828 <_printf_i+0xa8>
 80087b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087b6:	2b15      	cmp	r3, #21
 80087b8:	d8f6      	bhi.n	80087a8 <_printf_i+0x28>
 80087ba:	a001      	add	r0, pc, #4	; (adr r0, 80087c0 <_printf_i+0x40>)
 80087bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087c0:	08008819 	.word	0x08008819
 80087c4:	0800882d 	.word	0x0800882d
 80087c8:	080087a9 	.word	0x080087a9
 80087cc:	080087a9 	.word	0x080087a9
 80087d0:	080087a9 	.word	0x080087a9
 80087d4:	080087a9 	.word	0x080087a9
 80087d8:	0800882d 	.word	0x0800882d
 80087dc:	080087a9 	.word	0x080087a9
 80087e0:	080087a9 	.word	0x080087a9
 80087e4:	080087a9 	.word	0x080087a9
 80087e8:	080087a9 	.word	0x080087a9
 80087ec:	08008939 	.word	0x08008939
 80087f0:	0800885d 	.word	0x0800885d
 80087f4:	0800891b 	.word	0x0800891b
 80087f8:	080087a9 	.word	0x080087a9
 80087fc:	080087a9 	.word	0x080087a9
 8008800:	0800895b 	.word	0x0800895b
 8008804:	080087a9 	.word	0x080087a9
 8008808:	0800885d 	.word	0x0800885d
 800880c:	080087a9 	.word	0x080087a9
 8008810:	080087a9 	.word	0x080087a9
 8008814:	08008923 	.word	0x08008923
 8008818:	680b      	ldr	r3, [r1, #0]
 800881a:	1d1a      	adds	r2, r3, #4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	600a      	str	r2, [r1, #0]
 8008820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008828:	2301      	movs	r3, #1
 800882a:	e0a3      	b.n	8008974 <_printf_i+0x1f4>
 800882c:	6825      	ldr	r5, [r4, #0]
 800882e:	6808      	ldr	r0, [r1, #0]
 8008830:	062e      	lsls	r6, r5, #24
 8008832:	f100 0304 	add.w	r3, r0, #4
 8008836:	d50a      	bpl.n	800884e <_printf_i+0xce>
 8008838:	6805      	ldr	r5, [r0, #0]
 800883a:	600b      	str	r3, [r1, #0]
 800883c:	2d00      	cmp	r5, #0
 800883e:	da03      	bge.n	8008848 <_printf_i+0xc8>
 8008840:	232d      	movs	r3, #45	; 0x2d
 8008842:	426d      	negs	r5, r5
 8008844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008848:	485e      	ldr	r0, [pc, #376]	; (80089c4 <_printf_i+0x244>)
 800884a:	230a      	movs	r3, #10
 800884c:	e019      	b.n	8008882 <_printf_i+0x102>
 800884e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008852:	6805      	ldr	r5, [r0, #0]
 8008854:	600b      	str	r3, [r1, #0]
 8008856:	bf18      	it	ne
 8008858:	b22d      	sxthne	r5, r5
 800885a:	e7ef      	b.n	800883c <_printf_i+0xbc>
 800885c:	680b      	ldr	r3, [r1, #0]
 800885e:	6825      	ldr	r5, [r4, #0]
 8008860:	1d18      	adds	r0, r3, #4
 8008862:	6008      	str	r0, [r1, #0]
 8008864:	0628      	lsls	r0, r5, #24
 8008866:	d501      	bpl.n	800886c <_printf_i+0xec>
 8008868:	681d      	ldr	r5, [r3, #0]
 800886a:	e002      	b.n	8008872 <_printf_i+0xf2>
 800886c:	0669      	lsls	r1, r5, #25
 800886e:	d5fb      	bpl.n	8008868 <_printf_i+0xe8>
 8008870:	881d      	ldrh	r5, [r3, #0]
 8008872:	4854      	ldr	r0, [pc, #336]	; (80089c4 <_printf_i+0x244>)
 8008874:	2f6f      	cmp	r7, #111	; 0x6f
 8008876:	bf0c      	ite	eq
 8008878:	2308      	moveq	r3, #8
 800887a:	230a      	movne	r3, #10
 800887c:	2100      	movs	r1, #0
 800887e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008882:	6866      	ldr	r6, [r4, #4]
 8008884:	60a6      	str	r6, [r4, #8]
 8008886:	2e00      	cmp	r6, #0
 8008888:	bfa2      	ittt	ge
 800888a:	6821      	ldrge	r1, [r4, #0]
 800888c:	f021 0104 	bicge.w	r1, r1, #4
 8008890:	6021      	strge	r1, [r4, #0]
 8008892:	b90d      	cbnz	r5, 8008898 <_printf_i+0x118>
 8008894:	2e00      	cmp	r6, #0
 8008896:	d04d      	beq.n	8008934 <_printf_i+0x1b4>
 8008898:	4616      	mov	r6, r2
 800889a:	fbb5 f1f3 	udiv	r1, r5, r3
 800889e:	fb03 5711 	mls	r7, r3, r1, r5
 80088a2:	5dc7      	ldrb	r7, [r0, r7]
 80088a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088a8:	462f      	mov	r7, r5
 80088aa:	42bb      	cmp	r3, r7
 80088ac:	460d      	mov	r5, r1
 80088ae:	d9f4      	bls.n	800889a <_printf_i+0x11a>
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d10b      	bne.n	80088cc <_printf_i+0x14c>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	07df      	lsls	r7, r3, #31
 80088b8:	d508      	bpl.n	80088cc <_printf_i+0x14c>
 80088ba:	6923      	ldr	r3, [r4, #16]
 80088bc:	6861      	ldr	r1, [r4, #4]
 80088be:	4299      	cmp	r1, r3
 80088c0:	bfde      	ittt	le
 80088c2:	2330      	movle	r3, #48	; 0x30
 80088c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088cc:	1b92      	subs	r2, r2, r6
 80088ce:	6122      	str	r2, [r4, #16]
 80088d0:	f8cd a000 	str.w	sl, [sp]
 80088d4:	464b      	mov	r3, r9
 80088d6:	aa03      	add	r2, sp, #12
 80088d8:	4621      	mov	r1, r4
 80088da:	4640      	mov	r0, r8
 80088dc:	f7ff fee2 	bl	80086a4 <_printf_common>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d14c      	bne.n	800897e <_printf_i+0x1fe>
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	b004      	add	sp, #16
 80088ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ee:	4835      	ldr	r0, [pc, #212]	; (80089c4 <_printf_i+0x244>)
 80088f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	680e      	ldr	r6, [r1, #0]
 80088f8:	061f      	lsls	r7, r3, #24
 80088fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80088fe:	600e      	str	r6, [r1, #0]
 8008900:	d514      	bpl.n	800892c <_printf_i+0x1ac>
 8008902:	07d9      	lsls	r1, r3, #31
 8008904:	bf44      	itt	mi
 8008906:	f043 0320 	orrmi.w	r3, r3, #32
 800890a:	6023      	strmi	r3, [r4, #0]
 800890c:	b91d      	cbnz	r5, 8008916 <_printf_i+0x196>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f023 0320 	bic.w	r3, r3, #32
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	2310      	movs	r3, #16
 8008918:	e7b0      	b.n	800887c <_printf_i+0xfc>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	f043 0320 	orr.w	r3, r3, #32
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	2378      	movs	r3, #120	; 0x78
 8008924:	4828      	ldr	r0, [pc, #160]	; (80089c8 <_printf_i+0x248>)
 8008926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800892a:	e7e3      	b.n	80088f4 <_printf_i+0x174>
 800892c:	065e      	lsls	r6, r3, #25
 800892e:	bf48      	it	mi
 8008930:	b2ad      	uxthmi	r5, r5
 8008932:	e7e6      	b.n	8008902 <_printf_i+0x182>
 8008934:	4616      	mov	r6, r2
 8008936:	e7bb      	b.n	80088b0 <_printf_i+0x130>
 8008938:	680b      	ldr	r3, [r1, #0]
 800893a:	6826      	ldr	r6, [r4, #0]
 800893c:	6960      	ldr	r0, [r4, #20]
 800893e:	1d1d      	adds	r5, r3, #4
 8008940:	600d      	str	r5, [r1, #0]
 8008942:	0635      	lsls	r5, r6, #24
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	d501      	bpl.n	800894c <_printf_i+0x1cc>
 8008948:	6018      	str	r0, [r3, #0]
 800894a:	e002      	b.n	8008952 <_printf_i+0x1d2>
 800894c:	0671      	lsls	r1, r6, #25
 800894e:	d5fb      	bpl.n	8008948 <_printf_i+0x1c8>
 8008950:	8018      	strh	r0, [r3, #0]
 8008952:	2300      	movs	r3, #0
 8008954:	6123      	str	r3, [r4, #16]
 8008956:	4616      	mov	r6, r2
 8008958:	e7ba      	b.n	80088d0 <_printf_i+0x150>
 800895a:	680b      	ldr	r3, [r1, #0]
 800895c:	1d1a      	adds	r2, r3, #4
 800895e:	600a      	str	r2, [r1, #0]
 8008960:	681e      	ldr	r6, [r3, #0]
 8008962:	6862      	ldr	r2, [r4, #4]
 8008964:	2100      	movs	r1, #0
 8008966:	4630      	mov	r0, r6
 8008968:	f7f7 fc3a 	bl	80001e0 <memchr>
 800896c:	b108      	cbz	r0, 8008972 <_printf_i+0x1f2>
 800896e:	1b80      	subs	r0, r0, r6
 8008970:	6060      	str	r0, [r4, #4]
 8008972:	6863      	ldr	r3, [r4, #4]
 8008974:	6123      	str	r3, [r4, #16]
 8008976:	2300      	movs	r3, #0
 8008978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800897c:	e7a8      	b.n	80088d0 <_printf_i+0x150>
 800897e:	6923      	ldr	r3, [r4, #16]
 8008980:	4632      	mov	r2, r6
 8008982:	4649      	mov	r1, r9
 8008984:	4640      	mov	r0, r8
 8008986:	47d0      	blx	sl
 8008988:	3001      	adds	r0, #1
 800898a:	d0ab      	beq.n	80088e4 <_printf_i+0x164>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	079b      	lsls	r3, r3, #30
 8008990:	d413      	bmi.n	80089ba <_printf_i+0x23a>
 8008992:	68e0      	ldr	r0, [r4, #12]
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	4298      	cmp	r0, r3
 8008998:	bfb8      	it	lt
 800899a:	4618      	movlt	r0, r3
 800899c:	e7a4      	b.n	80088e8 <_printf_i+0x168>
 800899e:	2301      	movs	r3, #1
 80089a0:	4632      	mov	r2, r6
 80089a2:	4649      	mov	r1, r9
 80089a4:	4640      	mov	r0, r8
 80089a6:	47d0      	blx	sl
 80089a8:	3001      	adds	r0, #1
 80089aa:	d09b      	beq.n	80088e4 <_printf_i+0x164>
 80089ac:	3501      	adds	r5, #1
 80089ae:	68e3      	ldr	r3, [r4, #12]
 80089b0:	9903      	ldr	r1, [sp, #12]
 80089b2:	1a5b      	subs	r3, r3, r1
 80089b4:	42ab      	cmp	r3, r5
 80089b6:	dcf2      	bgt.n	800899e <_printf_i+0x21e>
 80089b8:	e7eb      	b.n	8008992 <_printf_i+0x212>
 80089ba:	2500      	movs	r5, #0
 80089bc:	f104 0619 	add.w	r6, r4, #25
 80089c0:	e7f5      	b.n	80089ae <_printf_i+0x22e>
 80089c2:	bf00      	nop
 80089c4:	08008e59 	.word	0x08008e59
 80089c8:	08008e6a 	.word	0x08008e6a

080089cc <memcpy>:
 80089cc:	440a      	add	r2, r1
 80089ce:	4291      	cmp	r1, r2
 80089d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d4:	d100      	bne.n	80089d8 <memcpy+0xc>
 80089d6:	4770      	bx	lr
 80089d8:	b510      	push	{r4, lr}
 80089da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089e2:	4291      	cmp	r1, r2
 80089e4:	d1f9      	bne.n	80089da <memcpy+0xe>
 80089e6:	bd10      	pop	{r4, pc}

080089e8 <memmove>:
 80089e8:	4288      	cmp	r0, r1
 80089ea:	b510      	push	{r4, lr}
 80089ec:	eb01 0402 	add.w	r4, r1, r2
 80089f0:	d902      	bls.n	80089f8 <memmove+0x10>
 80089f2:	4284      	cmp	r4, r0
 80089f4:	4623      	mov	r3, r4
 80089f6:	d807      	bhi.n	8008a08 <memmove+0x20>
 80089f8:	1e43      	subs	r3, r0, #1
 80089fa:	42a1      	cmp	r1, r4
 80089fc:	d008      	beq.n	8008a10 <memmove+0x28>
 80089fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a06:	e7f8      	b.n	80089fa <memmove+0x12>
 8008a08:	4402      	add	r2, r0
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	428a      	cmp	r2, r1
 8008a0e:	d100      	bne.n	8008a12 <memmove+0x2a>
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a1a:	e7f7      	b.n	8008a0c <memmove+0x24>

08008a1c <_free_r>:
 8008a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a1e:	2900      	cmp	r1, #0
 8008a20:	d048      	beq.n	8008ab4 <_free_r+0x98>
 8008a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a26:	9001      	str	r0, [sp, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a2e:	bfb8      	it	lt
 8008a30:	18e4      	addlt	r4, r4, r3
 8008a32:	f000 f8d3 	bl	8008bdc <__malloc_lock>
 8008a36:	4a20      	ldr	r2, [pc, #128]	; (8008ab8 <_free_r+0x9c>)
 8008a38:	9801      	ldr	r0, [sp, #4]
 8008a3a:	6813      	ldr	r3, [r2, #0]
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	b933      	cbnz	r3, 8008a4e <_free_r+0x32>
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	6014      	str	r4, [r2, #0]
 8008a44:	b003      	add	sp, #12
 8008a46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a4a:	f000 b8cd 	b.w	8008be8 <__malloc_unlock>
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	d90b      	bls.n	8008a6a <_free_r+0x4e>
 8008a52:	6821      	ldr	r1, [r4, #0]
 8008a54:	1862      	adds	r2, r4, r1
 8008a56:	4293      	cmp	r3, r2
 8008a58:	bf04      	itt	eq
 8008a5a:	681a      	ldreq	r2, [r3, #0]
 8008a5c:	685b      	ldreq	r3, [r3, #4]
 8008a5e:	6063      	str	r3, [r4, #4]
 8008a60:	bf04      	itt	eq
 8008a62:	1852      	addeq	r2, r2, r1
 8008a64:	6022      	streq	r2, [r4, #0]
 8008a66:	602c      	str	r4, [r5, #0]
 8008a68:	e7ec      	b.n	8008a44 <_free_r+0x28>
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	b10b      	cbz	r3, 8008a74 <_free_r+0x58>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d9fa      	bls.n	8008a6a <_free_r+0x4e>
 8008a74:	6811      	ldr	r1, [r2, #0]
 8008a76:	1855      	adds	r5, r2, r1
 8008a78:	42a5      	cmp	r5, r4
 8008a7a:	d10b      	bne.n	8008a94 <_free_r+0x78>
 8008a7c:	6824      	ldr	r4, [r4, #0]
 8008a7e:	4421      	add	r1, r4
 8008a80:	1854      	adds	r4, r2, r1
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	6011      	str	r1, [r2, #0]
 8008a86:	d1dd      	bne.n	8008a44 <_free_r+0x28>
 8008a88:	681c      	ldr	r4, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	6053      	str	r3, [r2, #4]
 8008a8e:	4421      	add	r1, r4
 8008a90:	6011      	str	r1, [r2, #0]
 8008a92:	e7d7      	b.n	8008a44 <_free_r+0x28>
 8008a94:	d902      	bls.n	8008a9c <_free_r+0x80>
 8008a96:	230c      	movs	r3, #12
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	e7d3      	b.n	8008a44 <_free_r+0x28>
 8008a9c:	6825      	ldr	r5, [r4, #0]
 8008a9e:	1961      	adds	r1, r4, r5
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	bf04      	itt	eq
 8008aa4:	6819      	ldreq	r1, [r3, #0]
 8008aa6:	685b      	ldreq	r3, [r3, #4]
 8008aa8:	6063      	str	r3, [r4, #4]
 8008aaa:	bf04      	itt	eq
 8008aac:	1949      	addeq	r1, r1, r5
 8008aae:	6021      	streq	r1, [r4, #0]
 8008ab0:	6054      	str	r4, [r2, #4]
 8008ab2:	e7c7      	b.n	8008a44 <_free_r+0x28>
 8008ab4:	b003      	add	sp, #12
 8008ab6:	bd30      	pop	{r4, r5, pc}
 8008ab8:	200000cc 	.word	0x200000cc

08008abc <_malloc_r>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	1ccd      	adds	r5, r1, #3
 8008ac0:	f025 0503 	bic.w	r5, r5, #3
 8008ac4:	3508      	adds	r5, #8
 8008ac6:	2d0c      	cmp	r5, #12
 8008ac8:	bf38      	it	cc
 8008aca:	250c      	movcc	r5, #12
 8008acc:	2d00      	cmp	r5, #0
 8008ace:	4606      	mov	r6, r0
 8008ad0:	db01      	blt.n	8008ad6 <_malloc_r+0x1a>
 8008ad2:	42a9      	cmp	r1, r5
 8008ad4:	d903      	bls.n	8008ade <_malloc_r+0x22>
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	6033      	str	r3, [r6, #0]
 8008ada:	2000      	movs	r0, #0
 8008adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ade:	f000 f87d 	bl	8008bdc <__malloc_lock>
 8008ae2:	4921      	ldr	r1, [pc, #132]	; (8008b68 <_malloc_r+0xac>)
 8008ae4:	680a      	ldr	r2, [r1, #0]
 8008ae6:	4614      	mov	r4, r2
 8008ae8:	b99c      	cbnz	r4, 8008b12 <_malloc_r+0x56>
 8008aea:	4f20      	ldr	r7, [pc, #128]	; (8008b6c <_malloc_r+0xb0>)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	b923      	cbnz	r3, 8008afa <_malloc_r+0x3e>
 8008af0:	4621      	mov	r1, r4
 8008af2:	4630      	mov	r0, r6
 8008af4:	f000 f862 	bl	8008bbc <_sbrk_r>
 8008af8:	6038      	str	r0, [r7, #0]
 8008afa:	4629      	mov	r1, r5
 8008afc:	4630      	mov	r0, r6
 8008afe:	f000 f85d 	bl	8008bbc <_sbrk_r>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	d123      	bne.n	8008b4e <_malloc_r+0x92>
 8008b06:	230c      	movs	r3, #12
 8008b08:	6033      	str	r3, [r6, #0]
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f000 f86c 	bl	8008be8 <__malloc_unlock>
 8008b10:	e7e3      	b.n	8008ada <_malloc_r+0x1e>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	1b5b      	subs	r3, r3, r5
 8008b16:	d417      	bmi.n	8008b48 <_malloc_r+0x8c>
 8008b18:	2b0b      	cmp	r3, #11
 8008b1a:	d903      	bls.n	8008b24 <_malloc_r+0x68>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	441c      	add	r4, r3
 8008b20:	6025      	str	r5, [r4, #0]
 8008b22:	e004      	b.n	8008b2e <_malloc_r+0x72>
 8008b24:	6863      	ldr	r3, [r4, #4]
 8008b26:	42a2      	cmp	r2, r4
 8008b28:	bf0c      	ite	eq
 8008b2a:	600b      	streq	r3, [r1, #0]
 8008b2c:	6053      	strne	r3, [r2, #4]
 8008b2e:	4630      	mov	r0, r6
 8008b30:	f000 f85a 	bl	8008be8 <__malloc_unlock>
 8008b34:	f104 000b 	add.w	r0, r4, #11
 8008b38:	1d23      	adds	r3, r4, #4
 8008b3a:	f020 0007 	bic.w	r0, r0, #7
 8008b3e:	1ac2      	subs	r2, r0, r3
 8008b40:	d0cc      	beq.n	8008adc <_malloc_r+0x20>
 8008b42:	1a1b      	subs	r3, r3, r0
 8008b44:	50a3      	str	r3, [r4, r2]
 8008b46:	e7c9      	b.n	8008adc <_malloc_r+0x20>
 8008b48:	4622      	mov	r2, r4
 8008b4a:	6864      	ldr	r4, [r4, #4]
 8008b4c:	e7cc      	b.n	8008ae8 <_malloc_r+0x2c>
 8008b4e:	1cc4      	adds	r4, r0, #3
 8008b50:	f024 0403 	bic.w	r4, r4, #3
 8008b54:	42a0      	cmp	r0, r4
 8008b56:	d0e3      	beq.n	8008b20 <_malloc_r+0x64>
 8008b58:	1a21      	subs	r1, r4, r0
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 f82e 	bl	8008bbc <_sbrk_r>
 8008b60:	3001      	adds	r0, #1
 8008b62:	d1dd      	bne.n	8008b20 <_malloc_r+0x64>
 8008b64:	e7cf      	b.n	8008b06 <_malloc_r+0x4a>
 8008b66:	bf00      	nop
 8008b68:	200000cc 	.word	0x200000cc
 8008b6c:	200000d0 	.word	0x200000d0

08008b70 <_realloc_r>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	4607      	mov	r7, r0
 8008b74:	4614      	mov	r4, r2
 8008b76:	460e      	mov	r6, r1
 8008b78:	b921      	cbnz	r1, 8008b84 <_realloc_r+0x14>
 8008b7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b7e:	4611      	mov	r1, r2
 8008b80:	f7ff bf9c 	b.w	8008abc <_malloc_r>
 8008b84:	b922      	cbnz	r2, 8008b90 <_realloc_r+0x20>
 8008b86:	f7ff ff49 	bl	8008a1c <_free_r>
 8008b8a:	4625      	mov	r5, r4
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b90:	f000 f830 	bl	8008bf4 <_malloc_usable_size_r>
 8008b94:	42a0      	cmp	r0, r4
 8008b96:	d20f      	bcs.n	8008bb8 <_realloc_r+0x48>
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	f7ff ff8e 	bl	8008abc <_malloc_r>
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d0f2      	beq.n	8008b8c <_realloc_r+0x1c>
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	4622      	mov	r2, r4
 8008baa:	f7ff ff0f 	bl	80089cc <memcpy>
 8008bae:	4631      	mov	r1, r6
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff ff33 	bl	8008a1c <_free_r>
 8008bb6:	e7e9      	b.n	8008b8c <_realloc_r+0x1c>
 8008bb8:	4635      	mov	r5, r6
 8008bba:	e7e7      	b.n	8008b8c <_realloc_r+0x1c>

08008bbc <_sbrk_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4d06      	ldr	r5, [pc, #24]	; (8008bd8 <_sbrk_r+0x1c>)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	602b      	str	r3, [r5, #0]
 8008bc8:	f7f8 fb68 	bl	800129c <_sbrk>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_sbrk_r+0x1a>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_sbrk_r+0x1a>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	20000c0c 	.word	0x20000c0c

08008bdc <__malloc_lock>:
 8008bdc:	4801      	ldr	r0, [pc, #4]	; (8008be4 <__malloc_lock+0x8>)
 8008bde:	f000 b811 	b.w	8008c04 <__retarget_lock_acquire_recursive>
 8008be2:	bf00      	nop
 8008be4:	20000c14 	.word	0x20000c14

08008be8 <__malloc_unlock>:
 8008be8:	4801      	ldr	r0, [pc, #4]	; (8008bf0 <__malloc_unlock+0x8>)
 8008bea:	f000 b80c 	b.w	8008c06 <__retarget_lock_release_recursive>
 8008bee:	bf00      	nop
 8008bf0:	20000c14 	.word	0x20000c14

08008bf4 <_malloc_usable_size_r>:
 8008bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf8:	1f18      	subs	r0, r3, #4
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	bfbc      	itt	lt
 8008bfe:	580b      	ldrlt	r3, [r1, r0]
 8008c00:	18c0      	addlt	r0, r0, r3
 8008c02:	4770      	bx	lr

08008c04 <__retarget_lock_acquire_recursive>:
 8008c04:	4770      	bx	lr

08008c06 <__retarget_lock_release_recursive>:
 8008c06:	4770      	bx	lr

08008c08 <_init>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	bf00      	nop
 8008c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0e:	bc08      	pop	{r3}
 8008c10:	469e      	mov	lr, r3
 8008c12:	4770      	bx	lr

08008c14 <_fini>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	bf00      	nop
 8008c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1a:	bc08      	pop	{r3}
 8008c1c:	469e      	mov	lr, r3
 8008c1e:	4770      	bx	lr
